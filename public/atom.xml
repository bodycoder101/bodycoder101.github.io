<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chengli&#39;s blog</title>
  <subtitle>Zero</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bodycoder101.github.io/"/>
  <updated>2017-02-20T12:21:48.115Z</updated>
  <id>http://bodycoder101.github.io/</id>
  
  <author>
    <name>bodycoder</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>新环境下Hexo博客部署及维护</title>
    <link href="http://bodycoder101.github.io/2017/02/20/%E6%96%B0%E7%8E%AF%E5%A2%83%E4%B8%8BHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%BB%B4%E6%8A%A4/"/>
    <id>http://bodycoder101.github.io/2017/02/20/新环境下Hexo博客部署及维护/</id>
    <published>2017-02-19T16:00:00.000Z</published>
    <updated>2017-02-20T12:21:48.115Z</updated>
    
    <content type="html">&lt;p&gt;   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。&lt;br&gt;   &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master分支：存放博客部署的静态文件(也就是public文件夹下的内容)&lt;/li&gt;
&lt;li&gt;hexo分支：存放博客源文件，配置文件等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在新环境(Windows)下安装配置&lt;em&gt;Git，Node.js，Python&lt;/em&gt;;Python建议下载2.7版本，安装好后别忘了配置环境变量。&lt;br&gt;提供下载链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/waylau/git-for-win&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;新环境部署&quot;&gt;&lt;a href=&quot;#新环境部署&quot; class=&quot;headerlink&quot; title=&quot;新环境部署&quot;&gt;&lt;/a&gt;新环境部署&lt;/h2&gt;&lt;p&gt;首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行&lt;strong&gt;Git Bash Here,&lt;/strong&gt;然后克隆你的远程仓库，也就是hexo分支上的内容；&lt;br&gt;&lt;code&gt;git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题一&quot;&gt;&lt;a href=&quot;#问题一&quot; class=&quot;headerlink&quot; title=&quot;问题一&quot;&gt;&lt;/a&gt;问题一&lt;/h3&gt;&lt;p&gt;出现clone失败报错：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GitHub.IO.ProcessException: fatal: unable to stat &amp;apos;plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class&amp;apos;: Filename too long&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;后面各种找解决方法，终于找到一个靠谱的方案: &lt;a href=&quot;http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Solution&lt;/a&gt;，原因也解释的很清楚；&lt;br&gt;在Bash中键入命令:&lt;code&gt;git config --system core.longpaths true&lt;/code&gt;; 问题解决。&lt;/p&gt;
&lt;h3 id=&quot;问题二&quot;&gt;&lt;a href=&quot;#问题二&quot; class=&quot;headerlink&quot; title=&quot;问题二&quot;&gt;&lt;/a&gt;问题二&lt;/h3&gt;&lt;p&gt;进入博客根目录：&lt;code&gt;cd newBlog&lt;/code&gt;；然后依次键入下列命令&lt;strong&gt;[1]&lt;/strong&gt;：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo -server --save&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-deployer-git --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;出现各种问题，无法安装&lt;em&gt;hexo&lt;/em&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! System Windows_NT 6.1.7601&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! command &amp;quot;c:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;c:\\Program Files\\nodej&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s\\node_modules\\npm\\bin\\npm-cli.js&amp;quot; &amp;quot;install&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! cwd f:\Workspace\Angular_workspace\angular-phonecat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! node -v v0.10.28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! npm -v 1.4.9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! path C:\Users\Shivam\AppData\Roaming\npm-cache\inherits\2.0.1\package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! code EPERM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! errno 50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm ERR! stack Error: EPERM, unlink &amp;apos;C:\Users\Shivam\AppData\Roaming\npm-cache\i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nherits\2.0.1\package&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm http 200 https://registry.npmjs.org/qs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;找到解决方案，依次键入下列命令：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm config get registry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm cache clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install express&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；&lt;/p&gt;
&lt;h3 id=&quot;问题三&quot;&gt;&lt;a href=&quot;#问题三&quot; class=&quot;headerlink&quot; title=&quot;问题三&quot;&gt;&lt;/a&gt;问题三&lt;/h3&gt;&lt;p&gt;执行&lt;code&gt;hexo clean&lt;/code&gt;,出现下列问题：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;根据提示键入命令安装：&lt;br&gt;&lt;code&gt;npm rebuild node-sass&lt;/code&gt;&lt;br&gt;安装过程出现各种&lt;code&gt;npm error，gyp error&lt;/code&gt;，在查找问题过程中，出错信息提示：&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;那就新环境下安装&lt;strong&gt;Python！&lt;/strong&gt;，忘安装了..&lt;br&gt;至此，问题全部解决，可以愉快的写博客了！&lt;/p&gt;
&lt;h2 id=&quot;参考博客&quot;&gt;&lt;a href=&quot;#参考博客&quot; class=&quot;headerlink&quot; title=&quot;参考博客&quot;&gt;&lt;/a&gt;参考博客&lt;/h2&gt;&lt;p&gt;1.&lt;a href=&quot;http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo博客多电脑同步及更换电脑后处理方式&lt;/a&gt;&lt;br&gt;2.&lt;a href=&quot;http://www.rvclient.com/2016/05/21/hexo-everywhere/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在不同的电脑维护Hexo和写作&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。&lt;br&gt;
    
    </summary>
    
    
      <category term="git, hexo" scheme="http://bodycoder101.github.io/tags/git-hexo/"/>
    
  </entry>
  
  <entry>
    <title>JAVA的学习之第五章</title>
    <link href="http://bodycoder101.github.io/2017/02/17/JAVA%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    <id>http://bodycoder101.github.io/2017/02/17/JAVA的学习之第五章/</id>
    <published>2017-02-16T16:00:00.000Z</published>
    <updated>2017-02-18T14:10:12.000Z</updated>
    
    <content type="html">&lt;p&gt;本章主要是讲述OOP中的&lt;strong&gt;继承（inheritance）&lt;/strong&gt;，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、类、超类和子类&quot;&gt;&lt;a href=&quot;#一、类、超类和子类&quot; class=&quot;headerlink&quot; title=&quot;一、类、超类和子类&quot;&gt;&lt;/a&gt;一、类、超类和子类&lt;/h2&gt;&lt;p&gt;继承的定义：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//add new files and methods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-易错点：&quot;&gt;&lt;a href=&quot;#1-易错点：&quot; class=&quot;headerlink&quot; title=&quot;1. 易错点：&quot;&gt;&lt;/a&gt;1. 易错点：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Manager boss=new Manger(...);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Employee[] staff=new Employee[3];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;staff[0]=boss;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boss.setBonus(5000);//OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;staff[0].setBonus(5000);//EROR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Manager m=staff[i];//EROR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Employee[] staff=managers;//OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Manager boss=(Manager) staff[0];//ok&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；&lt;br&gt;语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；&lt;br&gt;语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；&lt;br&gt;总结：&lt;strong&gt;只能大赋小&lt;/strong&gt;&lt;br&gt;语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：在将父类转换为之类之前，应该使用&lt;strong&gt;instanceof&lt;/strong&gt;进行检查。&lt;/p&gt;
&lt;h2 id=&quot;二、JAVA中-Object类是所有类的超类&quot;&gt;&lt;a href=&quot;#二、JAVA中-Object类是所有类的超类&quot; class=&quot;headerlink&quot; title=&quot;二、JAVA中 Object类是所有类的超类&quot;&gt;&lt;/a&gt;二、JAVA中 Object类是所有类的超类&lt;/h2&gt;&lt;h3 id=&quot;1-有关散列hasCode的问题：&quot;&gt;&lt;a href=&quot;#1-有关散列hasCode的问题：&quot; class=&quot;headerlink&quot; title=&quot;1.有关散列hasCode的问题：&quot;&gt;&lt;/a&gt;1.有关散列hasCode的问题：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String s=&amp;quot;OK&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringBuilder sb=new StringBuilder(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(s.hashCode()+&amp;quot; &amp;quot;+sb.hasCode());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String t=new String(&amp;quot;OK&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StringBuilder tb=new StringBuilder(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(t.hashCode()+&amp;quot;&amp;quot;+tb.hasCode());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印出来可知，字符串s和t拥有相同的散列码，&lt;strong&gt;字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-toString方法&quot;&gt;&lt;a href=&quot;#2-toString方法&quot; class=&quot;headerlink&quot; title=&quot;2.toString方法&quot;&gt;&lt;/a&gt;2.toString方法&lt;/h3&gt;&lt;p&gt;绝大多数的toString方法，遵循以下格式：&lt;br&gt;类的名字，随后是一对方括号起来的域值；&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public String toString()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return getClass().getName()+&amp;quot;[name=&amp;quot;+name+&amp;quot;,salary=&amp;quot;+salary+&amp;quot;,hireDay&amp;quot;+hireDay+&amp;quot;]&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只要对象与一个字符串通过操作符&lt;strong&gt;“+”&lt;/strong&gt;连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；&lt;/p&gt;
&lt;h3 id=&quot;3-泛型数组列表&quot;&gt;&lt;a href=&quot;#3-泛型数组列表&quot; class=&quot;headerlink&quot; title=&quot;3.泛型数组列表&quot;&gt;&lt;/a&gt;3.泛型数组列表&lt;/h3&gt;&lt;p&gt;主要是实现动态数组&lt;br&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ArrayList&amp;lt;Employee&amp;gt; staff=new ArrayList&amp;lt;&amp;gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; ArrayList是一个采用类型参数的范类型&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本章主要是讲述OOP中的&lt;strong&gt;继承（inheritance）&lt;/strong&gt;，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。&lt;br&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://bodycoder101.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA的学习之第四章</title>
    <link href="http://bodycoder101.github.io/2017/02/16/JAVA%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <id>http://bodycoder101.github.io/2017/02/16/JAVA的学习之第四章/</id>
    <published>2017-02-16T13:01:13.000Z</published>
    <updated>2017-02-18T14:12:06.000Z</updated>
    
    <content type="html">&lt;p&gt;1.对实例域做出修改的方法称为&lt;strong&gt;更改器&lt;/strong&gt;方法，仅仅访问实例域而不进行修改的方法称为&lt;strong&gt;访问器&lt;/strong&gt;方法；&lt;/p&gt;
&lt;p&gt;2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；&lt;/p&gt;
&lt;p&gt;3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；&lt;/p&gt;
&lt;p&gt;5.修饰符中的final以及static的区别和联系？&lt;br&gt;static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；&lt;br&gt;final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；&lt;/p&gt;
&lt;p&gt;6.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Employee&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; private int id;//所有实例（对象）均有各自的拷贝&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；&lt;/p&gt;
&lt;p&gt; 8.类中的静态main方法，用于测试类&lt;br&gt; 二，值调用和引用调用，Java对对像采用的是值专递；总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）&lt;/li&gt;
&lt;li&gt;一个方法可以改变一个对象参数的状态；&lt;/li&gt;
&lt;li&gt;一个方法不能让对象参数引用一个新的对象；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；&lt;/p&gt;
&lt;p&gt;10，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;publi Employee(String name,doble salary)//类的构造器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.salary=salary;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表项&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Window extends Container&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;1.对实例域做出修改的方法称为&lt;strong&gt;更改器&lt;/strong&gt;方法，仅仅访问实例域而不进行修改的方法称为&lt;strong&gt;访问器&lt;/strong&gt;方法；&lt;/p&gt;
&lt;p&gt;2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；&lt;/p&gt;
&lt;p&gt;3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://bodycoder101.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>用hexo搭建个人博客[转]</title>
    <link href="http://bodycoder101.github.io/2016/06/05/%E8%BD%AC-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://bodycoder101.github.io/2016/06/05/转-用hexo搭建个人博客/</id>
    <published>2016-06-04T18:45:07.000Z</published>
    <updated>2016-06-09T15:17:07.256Z</updated>
    
    <content type="html">&lt;p&gt;从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。&lt;br&gt;现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;关于博客源码的备份和同步更新&quot;&gt;&lt;a href=&quot;#关于博客源码的备份和同步更新&quot; class=&quot;headerlink&quot; title=&quot;关于博客源码的备份和同步更新&quot;&gt;&lt;/a&gt;关于博客源码的备份和同步更新&lt;/h3&gt;&lt;h4 id=&quot;方案选择&quot;&gt;&lt;a href=&quot;#方案选择&quot; class=&quot;headerlink&quot; title=&quot;方案选择&quot;&gt;&lt;/a&gt;方案选择&lt;/h4&gt;&lt;p&gt;这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。&lt;br&gt;所以还是考虑用github 存放源码，但是有遇到两个选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。&lt;/li&gt;
&lt;li&gt;另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。&lt;/p&gt;
&lt;h4 id=&quot;出现问题&quot;&gt;&lt;a href=&quot;#出现问题&quot; class=&quot;headerlink&quot; title=&quot;出现问题&quot;&gt;&lt;/a&gt;出现问题&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;问题描述&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为我是先在本地&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init 、git add origin &amp;lt;server&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;初始化本地文件夹，然后&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;description&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决问题：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。&lt;br&gt;在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;description&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。&lt;/p&gt;
&lt;h3 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h3&gt;&lt;p&gt;人生有涯，知也无涯。&lt;br&gt;坚持学习，保持好奇心。&lt;br&gt;坚持锻炼身体。&lt;br&gt;转载来自：&lt;a href=&quot;http://zouzls.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zouzls.github.io/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。&lt;br&gt;现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://bodycoder101.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://bodycoder101.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>

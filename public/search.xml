<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点]]></title>
      <url>http://bodycoder101.github.io/2017/04/07/%E8%85%BE%E8%AE%AF%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%AC%94%E8%AF%95%E7%BC%96%E7%A8%8B%E9%A2%98--%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%EF%BC%8C%E7%BB%99%E5%AE%9A%E4%B8%89%E4%B8%AA%E7%BB%93%E7%82%B9%EF%BC%8C%E6%B1%82%E5%85%AC%E5%85%B1%E7%88%B6%E7%BB%93%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，<br>第一道编程题做了一半，没完全写出来，现在有时间总结一下：<br>题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；<br>     如输入层数N=4，子节点11,13,15; 则输出:12<br>     <a id="more"></a></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>解决这道题的关键，主要是要清晰的知道二叉排序树的性质：<strong>左节点的值小于父节点的值，右节点值大于父节点的值。</strong><br>当<strong>N=4</strong>时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：<br><img src="https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg" alt="">;<br>可以知道有以下性质：</p>
<ol>
<li>以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；</li>
<li>右子树一直往左走，可以找到右子树的最小值9，比根节点大1；</li>
<li>根节点的值是最左端的值和最右端的值之和的一半。</li>
</ol>
<p>我们可以这样找最大的公共父结点（可以用分治法）：</p>
<ol>
<li>如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；</li>
<li>如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质<em>1 &amp; 3</em>，得到新树的最右结点及根结点的值；</li>
<li>如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质<em>2 &amp; 3</em>，得到新树的最左结点及根结点的值；</li>
<li>重复2.3步骤，直到出现1情况，结束。</li>
</ol>
<h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><p><strong>实现方法1</strong>是实现题目要求的，只输入层数<strong>N</strong>和<strong>3</strong>个子结点值，得到最大公共父结点；<br><strong>实现方法2</strong>是扩展的，具有更好的通用性，输入层数<strong>N</strong>、子结点个数<strong>n</strong>及子结点的值，得到最大公共父结点。</p>
<h2 id="实现方法1"><a href="#实现方法1" class="headerlink" title="实现方法1"></a>实现方法1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">Main</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (in.hasNextInt()) &#123;</div><div class="line">			<span class="comment">// 树的高度</span></div><div class="line">			<span class="keyword">int</span> k = in.nextInt();</div><div class="line"></div><div class="line">			<span class="comment">// 最开始根节点的值</span></div><div class="line">			<span class="keyword">int</span> root = (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>, k) / <span class="number">2</span>;</div><div class="line"></div><div class="line">			<span class="comment">// 最开始的最左叶子节点和最右叶子节点</span></div><div class="line">			<span class="keyword">int</span> leftNode = <span class="number">1</span>;</div><div class="line">			<span class="keyword">int</span> rightNode = (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>, k) - <span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="comment">// 输入任意3叶子节点的值</span></div><div class="line">			<span class="keyword">int</span> node1 = in.nextInt();</div><div class="line">			<span class="keyword">int</span> node2 = in.nextInt();</div><div class="line">			<span class="keyword">int</span> node3 = in.nextInt();</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</div><div class="line">				<span class="comment">// 3个叶子节点全在根节点的左部,更新最右节点和根节点</span></div><div class="line">				<span class="keyword">if</span> (node1 &lt; root &amp;&amp; node2 &lt; root &amp;&amp; node3 &lt; root) &#123;</div><div class="line">					rightNode = root - <span class="number">1</span>;</div><div class="line">					root = (leftNode + rightNode) / <span class="number">2</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// 3个叶子节点全在根节点的右部,更新最左节点和根节点</span></div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (node1 &gt; root &amp;&amp; node2 &gt; root &amp;&amp; node3 &gt; root) &#123;</div><div class="line">					leftNode = root + <span class="number">1</span>;</div><div class="line">					root = (leftNode + rightNode) / <span class="number">2</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// 一大一小的情形下根节点即为最大公共父节点</span></div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					System.out.println(root);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实现方法2"><a href="#实现方法2" class="headerlink" title="实现方法2"></a>实现方法2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 改进版，输入层数N，节点数n，个数范围为：2-2^-1</div><div class="line"> * 输出二叉排序树的公共父节点</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (in.hasNextInt()) &#123;</div><div class="line">			<span class="comment">// 树的高度</span></div><div class="line">			<span class="keyword">int</span> N = in.nextInt();</div><div class="line"></div><div class="line">			<span class="comment">// 最开始根节点的值</span></div><div class="line">			<span class="keyword">int</span> root = (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>, N) / <span class="number">2</span>;</div><div class="line"></div><div class="line">			<span class="comment">// 最开始的最左叶子节点和最右叶子节点</span></div><div class="line">			<span class="keyword">int</span> leftNode = <span class="number">1</span>;</div><div class="line">			<span class="keyword">int</span> rightNode = (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>, N) - <span class="number">1</span>;</div><div class="line"></div><div class="line">			<span class="comment">// 输入任意n叶子节点的值</span></div><div class="line">			<span class="keyword">int</span> n = in.nextInt();</div><div class="line">			<span class="keyword">int</span>[] arrNodes = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrNodes.length; i++) &#123;</div><div class="line">				arrNodes[i] = in.nextInt();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// 从上到下按层次遍历N层</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</div><div class="line">				<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line"></div><div class="line">					<span class="comment">// 都在左边，count+1；</span></div><div class="line">					<span class="keyword">if</span> (arrNodes[j] &lt; root) &#123;</div><div class="line">						count += <span class="number">1</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					<span class="comment">// 都在右边，count+2</span></div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (arrNodes[j] &gt; root) &#123;</div><div class="line">						count += <span class="number">2</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">					<span class="comment">// 其中有一个是根节点</span></div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						count += <span class="number">0</span>;</div><div class="line">					&#125;</div><div class="line"></div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">/**</span></div><div class="line">				 * count的值n或者2n或者两者之间，</div><div class="line">				 * n代表都在左边，更新最右节点和根节点</div><div class="line">				 * 2n代表都在右边，更新最左节点和根节点</div><div class="line">				 * 两者之间代表，分布在根节点两边，直接返回根节点</div><div class="line">				 */</div><div class="line">				<span class="keyword">if</span> (count == n) &#123;</div><div class="line">					rightNode = root - <span class="number">1</span>;</div><div class="line">					root = (leftNode + rightNode) / <span class="number">2</span>;</div><div class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">2</span> * n) &#123;</div><div class="line"></div><div class="line">					leftNode = root + <span class="number">1</span>;</div><div class="line">					root = (leftNode + rightNode) / <span class="number">2</span>;</div><div class="line"></div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					System.out.println(root);</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		in.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p><img src="https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png" alt=""></p>
<h1 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h1><ol>
<li><a href="http://www.cnblogs.com/f91og/p/6663633.html" target="_blank" rel="external">f91og的博客</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java学习之集合框架（上）]]></title>
      <url>http://bodycoder101.github.io/2017/03/26/JAVA%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><p>框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有<strong>共同属性</strong>的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。</p>
<a id="more"></a>
<h1 id="集合的作用"><a href="#集合的作用" class="headerlink" title="集合的作用"></a>集合的作用</h1><ul>
<li>在类的内部对数据进行组织；</li>
<li>简单而快速地搜索大数量的条目数据；</li>
<li>提供统一的接口，将不同对象封装在一起，便于操作和管理；</li>
<li>有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；</li>
<li>有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。</li>
</ul>
<h1 id="集合和数组的选择"><a href="#集合和数组的选择" class="headerlink" title="集合和数组的选择"></a>集合和数组的选择</h1><p><strong>为什么选择集合而不是数组？</strong></p>
<ol>
<li>数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；</li>
<li>集合可以存储和操作数目不固定的一组数据；</li>
<li>若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；</li>
<li>查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。</li>
</ol>
<h1 id="集合框架体系结构"><a href="#集合框架体系结构" class="headerlink" title="集合框架体系结构"></a>集合框架体系结构</h1><p><img src="https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png" alt=""><br>我们关注常用的几个接口：<br><img src="https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png" alt=""></p>
<ul>
<li>从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；</li>
<li>第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；</li>
<li>List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。</li>
</ul>
<h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><p><strong>课程类（Course.java）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.imooc.collection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(String id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>学生类（Student.java)</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.imooc.collection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Set&lt;Course&gt; courses;<span class="comment">//使用泛型规定courses的类型</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.courses = <span class="keyword">new</span> HashSet&lt;Course&gt;();<span class="comment">//用set的实现类HashSet进行初始化</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>ArrayList增删改查（ListTest.java）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.imooc.collection;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/*List中的元素是有序并且可以重复的*/</span></div><div class="line">    <span class="keyword">public</span> List CoursesToSelect;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListTest</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//注意List是个接口，不能直接将其实例化</span></div><div class="line">        <span class="keyword">this</span>.CoursesToSelect = <span class="keyword">new</span> ArrayList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAdd</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/*---普通add测试---*/</span></div><div class="line">        Course cr1 = <span class="keyword">new</span> Course(<span class="string">"1"</span>,<span class="string">"数据结构"</span>);</div><div class="line">        CoursesToSelect.add(cr1);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/*---指定位置add测试，下挤---*/</span></div><div class="line">        Course cr2 = <span class="keyword">new</span> Course(<span class="string">"2"</span>,<span class="string">"常用算法"</span>);</div><div class="line">        CoursesToSelect.add(<span class="number">0</span>, cr2);<span class="comment">//添加到第一个位置，会将原有的挤下去。</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/*---越界add测试---*/</span></div><div class="line">        <span class="comment">//Course cr3 = new Course("3","JAVA");</span></div><div class="line">        <span class="comment">//CoursesToSelect.add(3, cr3);</span></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 注意！！</div><div class="line">         * 0，1，2均不报错</div><div class="line">         * 3报错：java.lang.IndexOutOfBoundsException  下标越界</div><div class="line">         * */</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/*---普通组合add添加---*/</span></div><div class="line">        Course[] courseList = &#123;<span class="keyword">new</span> Course(<span class="string">"3"</span>,<span class="string">"Javaweb"</span>),<span class="keyword">new</span> Course(<span class="string">"4"</span>,<span class="string">"数据库"</span>)&#125;;</div><div class="line">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/*---指定位置组合add添加---*/</span></div><div class="line">        Course[] courseList2 = &#123;<span class="keyword">new</span> Course(<span class="string">"5"</span>,<span class="string">"高等数学"</span>),<span class="keyword">new</span> Course(<span class="string">"6"</span>,<span class="string">"计算机网络"</span>)&#125;;</div><div class="line">        CoursesToSelect.addAll(<span class="number">2</span>,Arrays.asList(courseList2));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryAll</span><span class="params">()</span></span>&#123;  <span class="comment">//查看全部元素</span></div><div class="line">        System.out.println(<span class="string">"普通遍历List"</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;CoursesToSelect.size();i++)&#123;</div><div class="line">            <span class="comment">/*对象存入集合都变成Object类型，取出时需要类型转换*/</span></div><div class="line">            Course tempCourse = (Course) CoursesToSelect.get(i);</div><div class="line">            System.out.println(<span class="string">"课程"</span>+(i+<span class="number">1</span>)+<span class="string">":"</span>+tempCourse.name+<span class="string">" 课程id:"</span>+tempCourse.id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIterator</span><span class="params">()</span></span>&#123;  <span class="comment">//通过迭代器遍历List</span></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"通过迭代器遍历List"</span>);</div><div class="line">        <span class="comment">//迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在</span></div><div class="line">        <span class="comment">//迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例</span></div><div class="line">        Iterator it = CoursesToSelect.iterator();</div><div class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</div><div class="line">            Course cr = (Course) it.next();</div><div class="line">            System.out.println(<span class="string">"课程:"</span>+cr.name+<span class="string">" 课程id:"</span>+cr.id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testForEach</span><span class="params">()</span></span>&#123;  <span class="comment">//通过foreach遍历List</span></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"通过foreach遍历List"</span>);</div><div class="line">        <span class="keyword">for</span>(Object obj:CoursesToSelect)&#123;</div><div class="line">            Course cr = (Course)obj;</div><div class="line">            System.out.println(<span class="string">"课程:"</span>+cr.name+<span class="string">" 课程id:"</span>+cr.id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testModify</span><span class="params">()</span></span>&#123;  <span class="comment">//修改</span></div><div class="line">        CoursesToSelect.set(<span class="number">0</span>, <span class="keyword">new</span> Course(<span class="string">"100"</span>,<span class="string">"Spring"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRemove</span><span class="params">()</span></span>&#123;  <span class="comment">//删除，记住每删除一次，元素都会上移</span></div><div class="line"></div><div class="line">        CoursesToSelect.remove(<span class="number">1</span>);<span class="comment">//删除的第一种方式</span></div><div class="line"></div><div class="line">        <span class="comment">/*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/</span></div><div class="line">        Course cr = (Course) CoursesToSelect.get(<span class="number">2</span>);   <span class="comment">//删除的第二种方式</span></div><div class="line">        CoursesToSelect.remove(cr);</div><div class="line"></div><div class="line">        Course[] courseList =</div><div class="line">                &#123;(Course) CoursesToSelect.get(<span class="number">1</span>),</div><div class="line">                (Course) CoursesToSelect.get(<span class="number">2</span>),</div><div class="line">                (Course) CoursesToSelect.get(<span class="number">3</span>)&#125;;</div><div class="line">        CoursesToSelect.removeAll(Arrays.asList(courseList));   <span class="comment">//删除的第三种方式，removeAll</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line"></div><div class="line">        ListTest lt = <span class="keyword">new</span> ListTest();</div><div class="line">        lt.TestAdd();</div><div class="line">        lt.testQueryAll();</div><div class="line">        lt.testIterator();</div><div class="line">        lt.testModify();  <span class="comment">//修改课程</span></div><div class="line">        lt.testRemove();  <span class="comment">//删除课程</span></div><div class="line">        lt.testForEach();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Set集合的基本用法(SetTest.java)</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.imooc.collection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> List&lt;Course&gt; CoursesToSelect;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetTest</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.CoursesToSelect = <span class="keyword">new</span> ArrayList&lt;Course&gt;();<span class="comment">//待选课程是使用数组序列存放</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAdd</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        Course cr1 = <span class="keyword">new</span> Course(<span class="string">"1"</span>,<span class="string">"数据结构"</span>);</div><div class="line">        CoursesToSelect.add(cr1);</div><div class="line"></div><div class="line"></div><div class="line">        Course cr2 = <span class="keyword">new</span> Course(<span class="string">"2"</span>,<span class="string">"常用算法"</span>);</div><div class="line">        CoursesToSelect.add(<span class="number">0</span>, cr2);</div><div class="line"></div><div class="line"></div><div class="line">        Course[] courseList = &#123;<span class="keyword">new</span> Course(<span class="string">"3"</span>,<span class="string">"Javaweb"</span>),<span class="keyword">new</span> Course(<span class="string">"4"</span>,<span class="string">"数据库"</span>)&#125;;</div><div class="line">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class="line"></div><div class="line"></div><div class="line">        Course[] courseList2 = &#123;<span class="keyword">new</span> Course(<span class="string">"5"</span>,<span class="string">"高等数学"</span>),<span class="keyword">new</span> Course(<span class="string">"6"</span>,<span class="string">"计算机网络"</span>)&#125;;</div><div class="line">        CoursesToSelect.addAll(<span class="number">2</span>,Arrays.asList(courseList2));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testForEach</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">for</span>(Course course:CoursesToSelect)&#123;</div><div class="line">            System.out.println(<span class="string">"课程:"</span>+course.name+<span class="string">" 课程id:"</span>+course.id);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SetTest st = <span class="keyword">new</span> SetTest();</div><div class="line">        st.TestAdd();</div><div class="line">        st.testForEach();</div><div class="line"></div><div class="line">        <span class="comment">//创建一个学生对象</span></div><div class="line">        Student stu1= <span class="keyword">new</span> Student(<span class="string">"1"</span>,<span class="string">"小明"</span>);</div><div class="line">        System.out.println(<span class="string">"欢迎"</span>+stu1.name+<span class="string">"选课！"</span>);</div><div class="line"></div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"请输入课程ID"</span>);</div><div class="line">            String courseId = sc.next();</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(Course course:st.CoursesToSelect)&#123;</div><div class="line">                <span class="keyword">if</span>(course.id.equals(courseId))&#123;  <span class="comment">//字符串是对象,其equals()方法比较的是实际内容！</span></div><div class="line">                    stu1.courses.add(course); <span class="comment">//将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        st.testForEachForSet(stu1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testForEachForSet</span><span class="params">(Student stu)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//打印输出学生所选的课程</span></div><div class="line">        <span class="comment">//遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。</span></div><div class="line">        <span class="comment">//Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）</span></div><div class="line">        <span class="comment">//Set是可以添加空对象的，null</span></div><div class="line">        <span class="comment">//Set没有提供像List那样的set()方法，因为Set集合是无序的</span></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"共选择了"</span>+stu.courses.size()+<span class="string">"门课程"</span>);</div><div class="line">        <span class="keyword">for</span>(Course course:stu.courses)&#123;</div><div class="line">            System.out.println(stu.name+<span class="string">"选择了"</span>+course.name+<span class="string">" 课程id:"</span>+course.id);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//没有介绍的关于Set的remove(),size()等方法，大致跟List一样</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>-EOF</p>
<h1 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h1><p><a href="http://blog.csdn.net/qq_33290787/article/details/51781036" target="_blank" rel="external">Java集合框架</a><br><a href="http://www.open-open.com/lib/view/open1474167415464.html" target="_blank" rel="external">Java - 集合框架完全解析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[新环境下Hexo博客部署及维护]]></title>
      <url>http://bodycoder101.github.io/2017/02/20/%E6%96%B0%E7%8E%AF%E5%A2%83%E4%B8%8BHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%BB%B4%E6%8A%A4/</url>
      <content type="html"><![CDATA[<p>   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。<br>   <a id="more"></a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：</p>
<ul>
<li>master分支：存放博客部署的静态文件(也就是public文件夹下的内容)</li>
<li>hexo分支：存放博客源文件，配置文件等</li>
</ul>
<p>在新环境(Windows)下安装配置<em>Git，Node.js，Python</em>;Python建议下载2.7版本，安装好后别忘了配置环境变量。<br>提供下载链接：</p>
<ul>
<li><a href="https://github.com/waylau/git-for-win" target="_blank" rel="external">Git</a></li>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js</a></li>
<li><a href="https://www.python.org/downloads/" target="_blank" rel="external">Python</a></li>
</ul>
<h2 id="新环境部署"><a href="#新环境部署" class="headerlink" title="新环境部署"></a>新环境部署</h2><p>首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行<strong>Git Bash Here,</strong>然后克隆你的远程仓库，也就是hexo分支上的内容；<br><code>git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog</code></p>
<h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>出现clone失败报错（Filename too long）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHub.IO.ProcessException: fatal: unable to stat &apos;plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class&apos;: Filename too long</div></pre></td></tr></table></figure></p>
<p>后面各种找解决方法，终于找到一个靠谱的方案: <a href="http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows" target="_blank" rel="external">Solution</a>，原因也解释的很清楚；<br>在Bash中键入命令:<code>git config --system core.longpaths true</code>; 问题解决。</p>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>进入博客根目录：<code>cd newBlog</code>；然后依次键入下列命令<strong>[1]</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div><div class="line">npm install</div><div class="line">npm install hexo -server --save</div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>出现各种问题，无法安装<em>hexo</em>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">npm ERR! System Windows_NT 6.1.7601</div><div class="line">npm ERR! command &quot;c:\\Program Files\\nodejs\\node.exe&quot; &quot;c:\\Program Files\\nodej</div><div class="line">s\\node_modules\\npm\\bin\\npm-cli.js&quot; &quot;install&quot;</div><div class="line">npm ERR! cwd f:\Workspace\Angular_workspace\angular-phonecat</div><div class="line">npm ERR! node -v v0.10.28</div><div class="line">npm ERR! npm -v 1.4.9</div><div class="line">npm ERR! path C:\Users\Shivam\AppData\Roaming\npm-cache\inherits\2.0.1\package</div><div class="line">npm ERR! code EPERM</div><div class="line">npm ERR! errno 50</div><div class="line">npm ERR! stack Error: EPERM, unlink &apos;C:\Users\Shivam\AppData\Roaming\npm-cache\i</div><div class="line">nherits\2.0.1\package&apos;</div><div class="line">npm http 200 https://registry.npmjs.org/qs</div></pre></td></tr></table></figure></p>
<p>找到解决方案，依次键入下列命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm config get registry</div><div class="line">npm cache clean</div><div class="line">npm install express</div></pre></td></tr></table></figure></p>
<p>问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；</p>
<h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><p>执行<code>hexo clean</code>,出现下列问题：<br><img src="https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png" alt=""><br>根据提示键入命令安装：<br><code>npm rebuild node-sass</code><br>安装过程出现各种<code>npm error，gyp error</code>，在查找问题过程中，出错信息提示：<br><img src="https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png" alt=""></p>
<p>那就新环境下安装<strong>Python！</strong>，忘安装了..<br>至此，问题全部解决，可以愉快的写博客了！</p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p>1.<a href="http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/" target="_blank" rel="external">Hexo博客多电脑同步及更换电脑后处理方式</a><br>2.<a href="http://www.rvclient.com/2016/05/21/hexo-everywhere/" target="_blank" rel="external">在不同的电脑维护Hexo和写作</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA的学习之继承]]></title>
      <url>http://bodycoder101.github.io/2017/02/17/JAVA%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BB%A7%E6%89%BF/</url>
      <content type="html"><![CDATA[<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br><a id="more"></a></p>
<h2 id="一、类、超类和子类"><a href="#一、类、超类和子类" class="headerlink" title="一、类、超类和子类"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class="line">&#123;</div><div class="line">//add new files and methods</div><div class="line">&#125;</div><div class="line"></div><div class="line">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>
<h3 id="1-易错点："><a href="#1-易错点：" class="headerlink" title="1. 易错点："></a>1. 易错点：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Manager boss=new Manger(...);</div><div class="line">Employee[] staff=new Employee[3];</div><div class="line">staff[0]=boss;</div><div class="line"></div><div class="line">boss.setBonus(5000);//OK</div><div class="line">staff[0].setBonus(5000);//EROR</div><div class="line"></div><div class="line">Manager m=staff[i];//EROR</div><div class="line">Employee[] staff=managers;//OK</div><div class="line">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>
<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>
<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>
<h2 id="二、JAVA中-Object类是所有类的超类"><a href="#二、JAVA中-Object类是所有类的超类" class="headerlink" title="二、JAVA中 Object类是所有类的超类"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id="1-有关散列hasCode的问题："><a href="#1-有关散列hasCode的问题：" class="headerlink" title="1.有关散列hasCode的问题："></a>1.有关散列hasCode的问题：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String s=&quot;OK&quot;;</div><div class="line">StringBuilder sb=new StringBuilder(s);</div><div class="line">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class="line">String t=new String(&quot;OK&quot;);</div><div class="line">StringBuilder tb=new StringBuilder(t);</div><div class="line">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>
<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>
<h3 id="2-toString方法"><a href="#2-toString方法" class="headerlink" title="2.toString方法"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public String toString()</div><div class="line">&#123;</div><div class="line">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>
<h3 id="3-泛型数组列表"><a href="#3-泛型数组列表" class="headerlink" title="3.泛型数组列表"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>
<p> ArrayList是一个采用类型参数的范类型</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JAVA的学习之对象与类]]></title>
      <url>http://bodycoder101.github.io/2017/02/16/JAVA%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>
<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>
<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>
<a id="more"></a>
<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>
<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>
<p>6.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Employee</div><div class="line">&#123;</div><div class="line"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class="line"> private int id;//所有实例（对象）均有各自的拷贝</div><div class="line">....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>
<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>
<ul>
<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>
<li>一个方法可以改变一个对象参数的状态；</li>
<li>一个方法不能让对象参数引用一个新的对象；</li>
</ul>
<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>
<p>10，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">publi Employee(String name,doble salary)//类的构造器</div><div class="line">&#123;</div><div class="line">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class="line">this.salary=salary;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>
<ul>
<li>列表项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class Window extends Container</div><div class="line">&#123;</div><div class="line"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class="line"> ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用hexo搭建个人博客[转]]]></title>
      <url>http://bodycoder101.github.io/2016/06/05/%E8%BD%AC-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。<br>现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。<br><a id="more"></a></p>
<h3 id="关于博客源码的备份和同步更新"><a href="#关于博客源码的备份和同步更新" class="headerlink" title="关于博客源码的备份和同步更新"></a>关于博客源码的备份和同步更新</h3><h4 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h4><p>这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。<br>所以还是考虑用github 存放源码，但是有遇到两个选择：</p>
<ul>
<li>一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。</li>
<li>另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。</li>
</ul>
<p>第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。</p>
<h4 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h4><ul>
<li>问题描述</li>
</ul>
<p>因为我是先在本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init 、git add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>
<p>初始化本地文件夹，然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &quot;description&quot;</div><div class="line">git push origin hexo</div></pre></td></tr></table></figure></p>
<p>最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。</p>
<ul>
<li>解决问题：</li>
</ul>
<p>删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。<br>在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &quot;description&quot;</div><div class="line">git push origin hexo</div></pre></td></tr></table></figure>
<p>然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>人生有涯，知也无涯。<br>坚持学习，保持好奇心。<br>坚持锻炼身体。<br>转载来自：<a href="http://zouzls.github.io/" target="_blank" rel="external">http://zouzls.github.io/</a></p>
]]></content>
    </entry>
    
  
  
</search>

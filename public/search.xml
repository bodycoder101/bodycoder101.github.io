<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JAVA的学习之第四章]]></title>
      <url>http://bodycoder101.github.io/2017/02/16/JAVA%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>
<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>
<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>
<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>
<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>
<p>6.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Employee</span><br><span class="line">&#123;</span><br><span class="line"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</span><br><span class="line"> private int id;//所有实例（对象）均有各自的拷贝</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>
<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>
<ul>
<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>
<li>一个方法可以改变一个对象参数的状态；</li>
<li>一个方法不能让对象参数引用一个新的对象；</li>
</ul>
<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>
<p>10，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">publi Employee(String name,doble salary)//类的构造器</span><br><span class="line">&#123;</span><br><span class="line">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</span><br><span class="line">this.salary=salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>
<ul>
<li>列表项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class Window extends Container</span><br><span class="line">&#123;</span><br><span class="line"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用hexo搭建个人博客[转]]]></title>
      <url>http://bodycoder101.github.io/2016/06/05/%E8%BD%AC-%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。<br>现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。<br><a id="more"></a></p>
<h3 id="关于博客源码的备份和同步更新"><a href="#关于博客源码的备份和同步更新" class="headerlink" title="关于博客源码的备份和同步更新"></a>关于博客源码的备份和同步更新</h3><h4 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h4><p>这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。<br>所以还是考虑用github 存放源码，但是有遇到两个选择：</p>
<ul>
<li>一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。</li>
<li>另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。</li>
</ul>
<p>第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。</p>
<h4 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h4><ul>
<li>问题描述</li>
</ul>
<p>因为我是先在本地<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init 、git add origin &lt;server&gt;</span><br></pre></td></tr></table></figure></p>
<p>初始化本地文件夹，然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;description&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure></p>
<p>最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。</p>
<ul>
<li>解决问题：</li>
</ul>
<p>删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。<br>在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;description&quot;</span><br><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>
<p>然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>人生有涯，知也无涯。<br>坚持学习，保持好奇心。<br>坚持锻炼身体。<br>转载来自：<a href="http://zouzls.github.io/" target="_blank" rel="external">http://zouzls.github.io/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git使用技巧]]></title>
      <url>http://bodycoder101.github.io/2016/06/04/git%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"></content>
    </entry>
    
  
  
</search>

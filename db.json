{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":0},{"_id":"source/uploads/wechat-reward-image.png","path":"uploads/wechat-reward-image.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"38519972ef2d83070ea387142f1b2f1ce5b6f165","modified":1487591489315},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1487564516948},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1487564508975},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1487564509424},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1487564509500},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1487564509571},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1487564508769},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1487564509474},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1487564516845},{"_id":"themes/next/_config.yml","hash":"696979c4b485aa661222bb5bc8f2a5f534ffe6c2","modified":1487687528622},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1487564516879},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1487564508385},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1487564508890},{"_id":"source/_posts/JAVA学习之集合框架（上）.md","hash":"5ed50faef2d9f24eaa7bfd21bfd91309d7a8eca8","modified":1490520769565},{"_id":"source/_posts/JAVA的学习之对象与类.md","hash":"b4dea3afb38eb07972c64723014336370a8f0c29","modified":1490520178290},{"_id":"source/_posts/JAVA的学习之继承.md","hash":"26daf45fe254061d6060b64932da3e1447678b2a","modified":1490520290304},{"_id":"source/categories/index.md","hash":"8e9313db61c04f46f9947c93cc8f75cfda6b7ffd","modified":1487591489314},{"_id":"source/_posts/转-用hexo搭建个人博客.md","hash":"e484fdae74b557379838e833ed0468968e87b99a","modified":1487591489312},{"_id":"source/_posts/新环境下Hexo博客部署及维护.md","hash":"8d44c40f4055dd596423f538baf37becaa403d28","modified":1487654201796},{"_id":"source/about/index.md","hash":"bde7ca29b57585fb65160520cdfb0ffd99369434","modified":1487649390195},{"_id":"source/guestbook/index.md","hash":"2a37c16d56450463fecd92e8a6d983d79a32211e","modified":1487687165497},{"_id":"source/tags/index.md","hash":"38977c7474fb31bd694037d5a5840c8d56e408ba","modified":1487591489317},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1487564509389},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1487564509362},{"_id":"source/uploads/wechat-qcode.jpg","hash":"1aedf988e65cd502171934a95d38f8b1cf7d8c8e","modified":1487645075826},{"_id":"source/uploads/avatar.png","hash":"35df14c2d54cb81634c5e14065eb1f2ba1e49cd0","modified":1487591489320},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1487564508686},{"_id":"source/uploads/wechat-reward-image.png","hash":"fe2fdd6111caa81c7adbf0167addaf217b77f2a7","modified":1487591489321},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1487564509207},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1487564509310},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1487658227867},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1487564509177},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1487564509131},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1487564509073},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1487564509104},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1487564509219},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1487564509153},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1487564509256},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1487564509671},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1487564509645},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1487564509607},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487564525898},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1487564508828},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1487564508859},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1487564508795},{"_id":"themes/next/languages/zh-Hans.yml","hash":"08ffe8b47f5a8d12c30d5b909a79f85ca94b0c80","modified":1487682071021},{"_id":"themes/next/layout/_layout.swig","hash":"ebb9798c799fdce7f743aeb3d754e4c211017112","modified":1487682233593},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1487564509819},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1487564509978},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1487564509907},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1487564511331},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1487564511925},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1487564509856},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1487564517291},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1487564517329},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1487564517221},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1487564517462},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1487564517356},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487564517163},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1487564517387},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1487564517515},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1487564517089},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1487564517433},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1487564510906},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1487564517488},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1487564510864},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1487564517057},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1487564510930},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1487564517264},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1487564518729},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1487564510885},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1487564511000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1487564511172},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1487564511797},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1487564511399},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1487564511235},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1487564511735},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1487564511152},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1487564511231},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1487564511404},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1487564511344},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1487564511477},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487564523079},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487564522755},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487564522970},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487564523121},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487564523227},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1487564511766},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1487564526381},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1487564526364},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1487564526493},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487564511042},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487564511069},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1487564526638},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1487564518372},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1487564524600},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1487564524028},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1487564526594},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1487564526558},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1487564526466},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1487564522976},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1487564523925},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1487564522940},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1487564525871},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1487564525746},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1487564525813},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1487564525852},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1487564525740},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1487564523296},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1487564510420},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1487564525798},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1487564526100},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1487564526046},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1487564526060},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1487564525980},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1487564523795},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1487564523216},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1487564523200},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1487564523523},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1487564525975},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1487564525423},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1487564524915},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1487564525388},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1487564524735},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1487564511043},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1487564523586},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1487564511964},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1487564512019},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1487564511981},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1487564525472},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1487564511575},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1487564523770},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1487564510661},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1487564510559},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1487564510528},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1487564510417},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1487564510509},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1487564510467},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1487564511631},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487564523938},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1487564526763},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1487564518168},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1487564518904},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1487564511669},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1487564518273},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1487564511603},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1487564518222},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1487564518238},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1487564511707},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1487564519278},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1487564518009},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1487564518290},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1487564521519},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1487564522040},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1487564518184},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1487564521878},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1487564521407},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487564524299},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487564524153},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1487564521363},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487564524088},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487564524514},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487564524214},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487564524140},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1487564522211},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1487564522416},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1487564522228},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1487564522118},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1487564522078},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1487564518539},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1487564518385},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1487564518426},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1487564518556},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1487564518485},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1487564517648},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1487564517789},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1487564517672},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1487564517899},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1487564517871},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1487564517962},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487564524191},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1487564524584},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487564524074},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1487564523686},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1487564523731},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1487564524764},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1487564524842},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1487564524808},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1487564523551},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1487564523643},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1487564525264},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1487564517994},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1487564510716},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1487564510838},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1487564510815},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1487564510772},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1487564510794},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1487564510704},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1487564510620},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1487564510607},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1487564526247},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1487564525363},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1487564524999},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1487564525249},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1487564518124},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1487564518107},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1487564519044},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1487564519207},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1487564519142},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1487564519081},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1487564519157},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1487564521290},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1487564521956},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1487564521918},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1487564520985},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1487564520893},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1487564520934},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1487564521252},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1487564521016},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1487564521124},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1487564521072},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1487564521056},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1487564520058},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1487564519540},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1487564521160},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1487564519950},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1487564521326},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1487564520281},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1487564521217},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1487564520266},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1487564520462},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1487564519574},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1487564519965},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1487564520190},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1487564520120},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1487564520379},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1487564520748},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1487564520352},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1487564520104},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1487564520606},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1487564520825},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1487564520571},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1487564518489},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1487564525033},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1487564520682},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1487564521593},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1487564521611},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1487564521549},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1487564524343},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1487564521673},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1487564524463},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1487564524410},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1487564524341},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1487564524520},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1487564520417},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1487564524447},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1487564520713},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1487564525170},{"_id":"public/baidusitemap.xml","hash":"abfa89ab446e0835dbb975fcf76b8421a09d0fcc","modified":1490520884057},{"_id":"public/atom.xml","hash":"3eaca87918bb08a2df3b6727382d9cf01235d071","modified":1490520884091},{"_id":"public/search.xml","hash":"770509eca5b4b8d8896f425b97761a23ac813922","modified":1490520884092},{"_id":"public/sitemap.xml","hash":"0ecd42be610ec1a86a0b79d62faed438d770f6d7","modified":1490520884092},{"_id":"public/categories/index.html","hash":"0e21312c97dec3cd016434dd486aa2416426c11e","modified":1490520884110},{"_id":"public/about/index.html","hash":"f387e0afd8638b8f1498f2b1d483fdb448514c62","modified":1490520884110},{"_id":"public/guestbook/index.html","hash":"499ca43d64cddb5fb4b4c7f0eeb8d8e8b3bd9e9a","modified":1490520884110},{"_id":"public/tags/index.html","hash":"e31697df255f043ff84c259fab0c8a1341ffb60e","modified":1490520884111},{"_id":"public/2017/03/26/JAVA学习之集合框架（上）/index.html","hash":"82f7d64034b3f1064402ebd2a780e8fbcdc4cea3","modified":1490520884111},{"_id":"public/2017/02/20/新环境下Hexo博客部署及维护/index.html","hash":"ff6a4922603fb75aac8dc404b63ef6e5a2c4497f","modified":1490520884111},{"_id":"public/2017/02/17/JAVA的学习之继承/index.html","hash":"e34816d1c1d9f38645931d71bab6128ed39ea951","modified":1490520884111},{"_id":"public/2017/02/16/JAVA的学习之对象与类/index.html","hash":"4f583230947bf1da08a822bba069a401b6aae5f9","modified":1490520884111},{"_id":"public/2016/06/05/转-用hexo搭建个人博客/index.html","hash":"41f1edeff0df56ec0fd75fe11fad6822e34347ec","modified":1490520884112},{"_id":"public/archives/index.html","hash":"933c31326d9b0bf17e416b5d54976e378c6ff40b","modified":1490520884112},{"_id":"public/archives/2016/index.html","hash":"a22ba160379b0515c5d8ee7858cae10c8473c183","modified":1490520884112},{"_id":"public/archives/2016/06/index.html","hash":"1100e1b6bcb37b1726c5e8b0ca698933b45a5d73","modified":1490520884112},{"_id":"public/archives/2017/index.html","hash":"7dac71fd69cb81094d6f92848280f994be85f4f2","modified":1490520884112},{"_id":"public/archives/2017/02/index.html","hash":"316f4b1212b54f98f5115d4d24c19edd8e75178d","modified":1490520884112},{"_id":"public/archives/2017/03/index.html","hash":"db975fdb90a1c47daeebb8737bd4d14b5ea55ac7","modified":1490520884113},{"_id":"public/categories/Java-SE/index.html","hash":"d36e0f7f0ee5d0112470dfe3195d85dc3da23e39","modified":1490520884113},{"_id":"public/categories/blog/index.html","hash":"b85ac3210d4fe765873dde409130c2ed5d6d084a","modified":1490520884113},{"_id":"public/categories/Git-Github/index.html","hash":"8d7b6c46e0c1611d99be4ae344e3990e213d055c","modified":1490520884113},{"_id":"public/index.html","hash":"07e80febcb4bfc0afea0f7327bf946a7e77013e7","modified":1490520884113},{"_id":"public/tags/Java/index.html","hash":"7792a9d29ecf961eb03c2ae7dcadba62f41455a2","modified":1490520884113},{"_id":"public/tags/JAVA/index.html","hash":"3ea6de970b858e523e3697391b8bda075d9f6b38","modified":1490520884114},{"_id":"public/tags/hexo/index.html","hash":"1c92ee64a588c4329bd8fbe11c78da7771ecec4f","modified":1490520884114},{"_id":"public/tags/git/index.html","hash":"c16d8004c0ca7e7f81f877725e85085e8bf72386","modified":1490520884114},{"_id":"public/favicon.ico","hash":"38519972ef2d83070ea387142f1b2f1ce5b6f165","modified":1490520884216},{"_id":"public/uploads/wechat-qcode.jpg","hash":"1aedf988e65cd502171934a95d38f8b1cf7d8c8e","modified":1490520884216},{"_id":"public/uploads/avatar.png","hash":"35df14c2d54cb81634c5e14065eb1f2ba1e49cd0","modified":1490520884216},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490520884216},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1490520884216},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1490520884216},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1490520884217},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1490520884217},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490520884217},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490520884217},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1490520884217},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1490520884219},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490520884219},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1490520884220},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1490520884220},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1490520884220},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1490520884220},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1490520884220},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490520884220},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490520884221},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490520884221},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490520884222},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490520884222},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490520884222},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1490520884223},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1490520884223},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490520884223},{"_id":"public/uploads/wechat-reward-image.png","hash":"fe2fdd6111caa81c7adbf0167addaf217b77f2a7","modified":1490520887362},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1490520887364},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1490520887389},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1490520887390},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1490520887424},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1490520887424},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1490520887424},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1490520887424},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1490520887424},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1490520887424},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1490520887425},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1490520887425},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1490520887425},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1490520887425},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1490520887425},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1490520887425},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1490520887425},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1490520887426},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1490520887426},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1490520887426},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1490520887426},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1490520887426},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490520887426},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490520887426},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1490520887427},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1490520887427},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490520887427},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490520887427},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490520887427},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490520887427},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490520887427},{"_id":"public/css/main.css","hash":"af9910aa0d5c63bde0d3184fdc9a2d05d9863910","modified":1490520887427},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1490520887428},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1490520887428},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1490520887428},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490520887428},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490520887429},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1490520887429},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1490520887429},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1490520887429},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1490520887430},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1490520887430},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1490520887514}],"Category":[{"name":"Java SE","_id":"cj0qhna3o0004qcrs4szb1kun"},{"name":"blog","_id":"cj0qhna5u000cqcrs5rryrmm9"},{"name":"Git/Github","_id":"cj0qhna62000gqcrszi1qqp45"}],"Data":[],"Page":[{"title":"分类","date":"2016-06-03T22:46:24.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-06-04 06:46:24\ntype: \"categories\"\ncomments: true\n---\n","updated":"2017-02-20T11:51:29.314Z","path":"categories/index.html","layout":"page","_id":"cj0qhna360001qcrsxq1pzwe5","content":"","excerpt":"","more":""},{"title":"关于","date":"2016-06-03T22:45:29.000Z","type":"about","comments":1,"_content":"# 编程界的健身爱好者！\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-06-04 06:45:29\ntype: \"about\"\ncomments: true\n---\n# 编程界的健身爱好者！\n","updated":"2017-02-21T03:56:30.195Z","path":"about/index.html","layout":"page","_id":"cj0qhna3k0003qcrsq586m213","content":"<h1 id=\"编程界的健身爱好者！\"><a href=\"#编程界的健身爱好者！\" class=\"headerlink\" title=\"编程界的健身爱好者！\"></a>编程界的健身爱好者！</h1>","excerpt":"","more":"<h1 id=\"编程界的健身爱好者！\"><a href=\"#编程界的健身爱好者！\" class=\"headerlink\" title=\"编程界的健身爱好者！\"></a>编程界的健身爱好者！</h1>"},{"title":"guestbook","date":"2017-02-21T12:36:38.000Z","comments":1,"_content":">最近访客\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div><br>\n","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2017-02-21 20:36:38\ncomments: true\n---\n>最近访客\n\n<div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div><br>\n","updated":"2017-02-21T14:26:05.497Z","path":"guestbook/index.html","layout":"page","_id":"cj0qhna4a0007qcrs3qxh1a0y","content":"<blockquote>\n<p>最近访客</p>\n</blockquote>\n<p><div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div><br></p>\n","excerpt":"","more":"<blockquote>\n<p>最近访客</p>\n</blockquote>\n<p><div class=\"ds-recent-visitors\" data-num-items=\"28\" data-avatar-size=\"42\" id=\"ds-recent-visitors\"></div><br></p>\n"},{"title":"All tags","date":"2016-06-03T22:49:39.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-06-04 06:49:39\ntype: \"tags\"\ncomments: true\t\n---\n","updated":"2017-02-20T11:51:29.317Z","path":"tags/index.html","layout":"page","_id":"cj0qhna5e0009qcrs306rxgh0","content":"","excerpt":"","more":""}],"Post":[{"title":"Java学习之集合框架（上）","date":"2017-03-26T06:39:43.000Z","_content":"# 相关概念\n\n框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有**共同属性**的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。\n\n# 集合的作用\n\n - 在类的内部对数据进行组织；\n - 简单而快速地搜索大数量的条目数据；\n - 提供统一的接口，将不同对象封装在一起，便于操作和管理；\n - 有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；\n - 有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。\n\n# 集合和数组的选择\n\n**为什么选择集合而不是数组？**\n 1. 数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；\n 2. 集合可以存储和操作数目不固定的一组数据；\n 3. 若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；\n 4. 查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。\n\n# 集合框架体系结构\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png)\n我们关注常用的几个接口：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png)\n- 从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；\n- 第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；\n- List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。\n\n# 代码演示\n\n**课程类（Course.java）**\n\n```\npackage com.imooc.collection;\n\npublic class Course {\n\n    public String id;\n    public String name;\n\n    public Course(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n}\n\n```\n\n**学生类（Student.java)**\n\n```\npackage com.imooc.collection;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Student {\n\n    public String id;\n    public String name;\n\n    public Set<Course> courses;//使用泛型规定courses的类型\n\n    public Student(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.courses = new HashSet<Course>();//用set的实现类HashSet进行初始化\n    }\n}\n```\n\n**ArrayList增删改查（ListTest.java）**\n\n```\npackage com.imooc.collection;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\npublic class ListTest {\n\n    /*List中的元素是有序并且可以重复的*/\n    public List CoursesToSelect;\n\n    public ListTest(){\n        //注意List是个接口，不能直接将其实例化\n        this.CoursesToSelect = new ArrayList();\n    }\n\n    public void TestAdd(){\n\n        /*---普通add测试---*/\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        /*---指定位置add测试，下挤---*/\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);//添加到第一个位置，会将原有的挤下去。\n\n\n        /*---越界add测试---*/\n        //Course cr3 = new Course(\"3\",\"JAVA\");\n        //CoursesToSelect.add(3, cr3);\n        /*\n         * 注意！！\n         * 0，1，2均不报错\n         * 3报错：java.lang.IndexOutOfBoundsException  下标越界\n         * */\n\n\n        /*---普通组合add添加---*/\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        /*---指定位置组合add添加---*/\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testQueryAll(){  //查看全部元素\n        System.out.println(\"普通遍历List\");\n        for(int i=0;i<CoursesToSelect.size();i++){\n            /*对象存入集合都变成Object类型，取出时需要类型转换*/\n            Course tempCourse = (Course) CoursesToSelect.get(i);\n            System.out.println(\"课程\"+(i+1)+\":\"+tempCourse.name+\" 课程id:\"+tempCourse.id);\n        }\n    }\n\n    public void testIterator(){  //通过迭代器遍历List\n\n        System.out.println(\"通过迭代器遍历List\");\n        //迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在\n        //迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例\n        Iterator it = CoursesToSelect.iterator();\n        while(it.hasNext()){\n            Course cr = (Course) it.next();\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testForEach(){  //通过foreach遍历List\n\n        System.out.println(\"通过foreach遍历List\");\n        for(Object obj:CoursesToSelect){\n            Course cr = (Course)obj;\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testModify(){  //修改\n        CoursesToSelect.set(0, new Course(\"100\",\"Spring\"));\n    }\n\n    public void testRemove(){  //删除，记住每删除一次，元素都会上移\n\n        CoursesToSelect.remove(1);//删除的第一种方式\n\n        /*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/\n        Course cr = (Course) CoursesToSelect.get(2);   //删除的第二种方式\n        CoursesToSelect.remove(cr);\n\n        Course[] courseList =\n                {(Course) CoursesToSelect.get(1),\n                (Course) CoursesToSelect.get(2),\n                (Course) CoursesToSelect.get(3)};\n        CoursesToSelect.removeAll(Arrays.asList(courseList));   //删除的第三种方式，removeAll\n\n    }\n\n    public static void main(String[] args){\n\n        ListTest lt = new ListTest();\n        lt.TestAdd();\n        lt.testQueryAll();\n        lt.testIterator();\n        lt.testModify();  //修改课程\n        lt.testRemove();  //删除课程\n        lt.testForEach();\n    }\n}\n```\n\n**Set集合的基本用法(SetTest.java)**\n\n```\npackage com.imooc.collection;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SetTest {\n\n    public List<Course> CoursesToSelect;\n    public SetTest(){\n        this.CoursesToSelect = new ArrayList<Course>();//待选课程是使用数组序列存放\n    }\n\n    public void TestAdd(){\n\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);\n\n\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testForEach(){  \n        for(Course course:CoursesToSelect){\n            System.out.println(\"课程:\"+course.name+\" 课程id:\"+course.id);\n        }\n    }\n\n    public static void main(String[] args){\n        SetTest st = new SetTest();\n        st.TestAdd();\n        st.testForEach();\n\n        //创建一个学生对象\n        Student stu1= new Student(\"1\",\"小明\");\n        System.out.println(\"欢迎\"+stu1.name+\"选课！\");\n\n        Scanner sc = new Scanner(System.in);\n        for(int i=0;i<3;i++){\n\n            System.out.println(\"请输入课程ID\");\n            String courseId = sc.next();\n\n            for(Course course:st.CoursesToSelect){\n                if(course.id.equals(courseId)){  //字符串是对象,其equals()方法比较的是实际内容！\n                    stu1.courses.add(course); //将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）\n                }\n            }\n        }\n\n        st.testForEachForSet(stu1);\n    }\n\n    public void testForEachForSet(Student stu){\n\n        //打印输出学生所选的课程\n        //遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。\n        //Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）\n        //Set是可以添加空对象的，null\n        //Set没有提供像List那样的set()方法，因为Set集合是无序的\n\n        System.out.println(\"共选择了\"+stu.courses.size()+\"门课程\");\n        for(Course course:stu.courses){\n            System.out.println(stu.name+\"选择了\"+course.name+\" 课程id:\"+course.id);\n        }\n        //没有介绍的关于Set的remove(),size()等方法，大致跟List一样\n    }\n}\n\n```\n-EOF\n\n# 参考博文\n[Java集合框架](http://blog.csdn.net/qq_33290787/article/details/51781036)\n[Java - 集合框架完全解析](http://www.open-open.com/lib/view/open1474167415464.html)\n","source":"_posts/JAVA学习之集合框架（上）.md","raw":"---\ntitle: Java学习之集合框架（上）\ndate: 2017-03-26 14:39:43\ncategories: Java SE\ntags: Java\n---\n# 相关概念\n\n框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有**共同属性**的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。\n\n# 集合的作用\n\n - 在类的内部对数据进行组织；\n - 简单而快速地搜索大数量的条目数据；\n - 提供统一的接口，将不同对象封装在一起，便于操作和管理；\n - 有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；\n - 有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。\n\n# 集合和数组的选择\n\n**为什么选择集合而不是数组？**\n 1. 数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；\n 2. 集合可以存储和操作数目不固定的一组数据；\n 3. 若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；\n 4. 查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。\n\n# 集合框架体系结构\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png)\n我们关注常用的几个接口：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png)\n- 从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；\n- 第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；\n- List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。\n\n# 代码演示\n\n**课程类（Course.java）**\n\n```\npackage com.imooc.collection;\n\npublic class Course {\n\n    public String id;\n    public String name;\n\n    public Course(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n}\n\n```\n\n**学生类（Student.java)**\n\n```\npackage com.imooc.collection;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Student {\n\n    public String id;\n    public String name;\n\n    public Set<Course> courses;//使用泛型规定courses的类型\n\n    public Student(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.courses = new HashSet<Course>();//用set的实现类HashSet进行初始化\n    }\n}\n```\n\n**ArrayList增删改查（ListTest.java）**\n\n```\npackage com.imooc.collection;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\npublic class ListTest {\n\n    /*List中的元素是有序并且可以重复的*/\n    public List CoursesToSelect;\n\n    public ListTest(){\n        //注意List是个接口，不能直接将其实例化\n        this.CoursesToSelect = new ArrayList();\n    }\n\n    public void TestAdd(){\n\n        /*---普通add测试---*/\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        /*---指定位置add测试，下挤---*/\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);//添加到第一个位置，会将原有的挤下去。\n\n\n        /*---越界add测试---*/\n        //Course cr3 = new Course(\"3\",\"JAVA\");\n        //CoursesToSelect.add(3, cr3);\n        /*\n         * 注意！！\n         * 0，1，2均不报错\n         * 3报错：java.lang.IndexOutOfBoundsException  下标越界\n         * */\n\n\n        /*---普通组合add添加---*/\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        /*---指定位置组合add添加---*/\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testQueryAll(){  //查看全部元素\n        System.out.println(\"普通遍历List\");\n        for(int i=0;i<CoursesToSelect.size();i++){\n            /*对象存入集合都变成Object类型，取出时需要类型转换*/\n            Course tempCourse = (Course) CoursesToSelect.get(i);\n            System.out.println(\"课程\"+(i+1)+\":\"+tempCourse.name+\" 课程id:\"+tempCourse.id);\n        }\n    }\n\n    public void testIterator(){  //通过迭代器遍历List\n\n        System.out.println(\"通过迭代器遍历List\");\n        //迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在\n        //迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例\n        Iterator it = CoursesToSelect.iterator();\n        while(it.hasNext()){\n            Course cr = (Course) it.next();\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testForEach(){  //通过foreach遍历List\n\n        System.out.println(\"通过foreach遍历List\");\n        for(Object obj:CoursesToSelect){\n            Course cr = (Course)obj;\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testModify(){  //修改\n        CoursesToSelect.set(0, new Course(\"100\",\"Spring\"));\n    }\n\n    public void testRemove(){  //删除，记住每删除一次，元素都会上移\n\n        CoursesToSelect.remove(1);//删除的第一种方式\n\n        /*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/\n        Course cr = (Course) CoursesToSelect.get(2);   //删除的第二种方式\n        CoursesToSelect.remove(cr);\n\n        Course[] courseList =\n                {(Course) CoursesToSelect.get(1),\n                (Course) CoursesToSelect.get(2),\n                (Course) CoursesToSelect.get(3)};\n        CoursesToSelect.removeAll(Arrays.asList(courseList));   //删除的第三种方式，removeAll\n\n    }\n\n    public static void main(String[] args){\n\n        ListTest lt = new ListTest();\n        lt.TestAdd();\n        lt.testQueryAll();\n        lt.testIterator();\n        lt.testModify();  //修改课程\n        lt.testRemove();  //删除课程\n        lt.testForEach();\n    }\n}\n```\n\n**Set集合的基本用法(SetTest.java)**\n\n```\npackage com.imooc.collection;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SetTest {\n\n    public List<Course> CoursesToSelect;\n    public SetTest(){\n        this.CoursesToSelect = new ArrayList<Course>();//待选课程是使用数组序列存放\n    }\n\n    public void TestAdd(){\n\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);\n\n\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testForEach(){  \n        for(Course course:CoursesToSelect){\n            System.out.println(\"课程:\"+course.name+\" 课程id:\"+course.id);\n        }\n    }\n\n    public static void main(String[] args){\n        SetTest st = new SetTest();\n        st.TestAdd();\n        st.testForEach();\n\n        //创建一个学生对象\n        Student stu1= new Student(\"1\",\"小明\");\n        System.out.println(\"欢迎\"+stu1.name+\"选课！\");\n\n        Scanner sc = new Scanner(System.in);\n        for(int i=0;i<3;i++){\n\n            System.out.println(\"请输入课程ID\");\n            String courseId = sc.next();\n\n            for(Course course:st.CoursesToSelect){\n                if(course.id.equals(courseId)){  //字符串是对象,其equals()方法比较的是实际内容！\n                    stu1.courses.add(course); //将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）\n                }\n            }\n        }\n\n        st.testForEachForSet(stu1);\n    }\n\n    public void testForEachForSet(Student stu){\n\n        //打印输出学生所选的课程\n        //遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。\n        //Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）\n        //Set是可以添加空对象的，null\n        //Set没有提供像List那样的set()方法，因为Set集合是无序的\n\n        System.out.println(\"共选择了\"+stu.courses.size()+\"门课程\");\n        for(Course course:stu.courses){\n            System.out.println(stu.name+\"选择了\"+course.name+\" 课程id:\"+course.id);\n        }\n        //没有介绍的关于Set的remove(),size()等方法，大致跟List一样\n    }\n}\n\n```\n-EOF\n\n# 参考博文\n[Java集合框架](http://blog.csdn.net/qq_33290787/article/details/51781036)\n[Java - 集合框架完全解析](http://www.open-open.com/lib/view/open1474167415464.html)\n","slug":"JAVA学习之集合框架（上）","published":1,"updated":"2017-03-26T09:32:49.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0qhna2t0000qcrs8cpeap4w","content":"<h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><p>框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有<strong>共同属性</strong>的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。</p>\n<h1 id=\"集合的作用\"><a href=\"#集合的作用\" class=\"headerlink\" title=\"集合的作用\"></a>集合的作用</h1><ul>\n<li>在类的内部对数据进行组织；</li>\n<li>简单而快速地搜索大数量的条目数据；</li>\n<li>提供统一的接口，将不同对象封装在一起，便于操作和管理；</li>\n<li>有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；</li>\n<li>有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。</li>\n</ul>\n<h1 id=\"集合和数组的选择\"><a href=\"#集合和数组的选择\" class=\"headerlink\" title=\"集合和数组的选择\"></a>集合和数组的选择</h1><p><strong>为什么选择集合而不是数组？</strong></p>\n<ol>\n<li>数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；</li>\n<li>集合可以存储和操作数目不固定的一组数据；</li>\n<li>若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；</li>\n<li>查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。</li>\n</ol>\n<h1 id=\"集合框架体系结构\"><a href=\"#集合框架体系结构\" class=\"headerlink\" title=\"集合框架体系结构\"></a>集合框架体系结构</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png\" alt=\"\"><br>我们关注常用的几个接口：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png\" alt=\"\"></p>\n<ul>\n<li>从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；</li>\n<li>第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；</li>\n<li>List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。</li>\n</ul>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p><strong>课程类（Course.java）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\">public class Course &#123;</div><div class=\"line\"></div><div class=\"line\">    public String id;</div><div class=\"line\">    public String name;</div><div class=\"line\"></div><div class=\"line\">    public Course(String id, String name) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>学生类（Student.java)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashSet;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\"></div><div class=\"line\">public class Student &#123;</div><div class=\"line\"></div><div class=\"line\">    public String id;</div><div class=\"line\">    public String name;</div><div class=\"line\"></div><div class=\"line\">    public Set&lt;Course&gt; courses;//使用泛型规定courses的类型</div><div class=\"line\"></div><div class=\"line\">    public Student(String id, String name) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.courses = new HashSet&lt;Course&gt;();//用set的实现类HashSet进行初始化</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ArrayList增删改查（ListTest.java）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.imooc.collection;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.Arrays;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.List;</div><div class=\"line\">public class ListTest &#123;</div><div class=\"line\"></div><div class=\"line\">    /*List中的元素是有序并且可以重复的*/</div><div class=\"line\">    public List CoursesToSelect;</div><div class=\"line\"></div><div class=\"line\">    public ListTest()&#123;</div><div class=\"line\">        //注意List是个接口，不能直接将其实例化</div><div class=\"line\">        this.CoursesToSelect = new ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void TestAdd()&#123;</div><div class=\"line\"></div><div class=\"line\">        /*---普通add测试---*/</div><div class=\"line\">        Course cr1 = new Course(&quot;1&quot;,&quot;数据结构&quot;);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        /*---指定位置add测试，下挤---*/</div><div class=\"line\">        Course cr2 = new Course(&quot;2&quot;,&quot;常用算法&quot;);</div><div class=\"line\">        CoursesToSelect.add(0, cr2);//添加到第一个位置，会将原有的挤下去。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        /*---越界add测试---*/</div><div class=\"line\">        //Course cr3 = new Course(&quot;3&quot;,&quot;JAVA&quot;);</div><div class=\"line\">        //CoursesToSelect.add(3, cr3);</div><div class=\"line\">        /*</div><div class=\"line\">         * 注意！！</div><div class=\"line\">         * 0，1，2均不报错</div><div class=\"line\">         * 3报错：java.lang.IndexOutOfBoundsException  下标越界</div><div class=\"line\">         * */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        /*---普通组合add添加---*/</div><div class=\"line\">        Course[] courseList = &#123;new Course(&quot;3&quot;,&quot;Javaweb&quot;),new Course(&quot;4&quot;,&quot;数据库&quot;)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        /*---指定位置组合add添加---*/</div><div class=\"line\">        Course[] courseList2 = &#123;new Course(&quot;5&quot;,&quot;高等数学&quot;),new Course(&quot;6&quot;,&quot;计算机网络&quot;)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(2,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testQueryAll()&#123;  //查看全部元素</div><div class=\"line\">        System.out.println(&quot;普通遍历List&quot;);</div><div class=\"line\">        for(int i=0;i&lt;CoursesToSelect.size();i++)&#123;</div><div class=\"line\">            /*对象存入集合都变成Object类型，取出时需要类型转换*/</div><div class=\"line\">            Course tempCourse = (Course) CoursesToSelect.get(i);</div><div class=\"line\">            System.out.println(&quot;课程&quot;+(i+1)+&quot;:&quot;+tempCourse.name+&quot; 课程id:&quot;+tempCourse.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testIterator()&#123;  //通过迭代器遍历List</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;通过迭代器遍历List&quot;);</div><div class=\"line\">        //迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在</div><div class=\"line\">        //迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例</div><div class=\"line\">        Iterator it = CoursesToSelect.iterator();</div><div class=\"line\">        while(it.hasNext())&#123;</div><div class=\"line\">            Course cr = (Course) it.next();</div><div class=\"line\">            System.out.println(&quot;课程:&quot;+cr.name+&quot; 课程id:&quot;+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testForEach()&#123;  //通过foreach遍历List</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;通过foreach遍历List&quot;);</div><div class=\"line\">        for(Object obj:CoursesToSelect)&#123;</div><div class=\"line\">            Course cr = (Course)obj;</div><div class=\"line\">            System.out.println(&quot;课程:&quot;+cr.name+&quot; 课程id:&quot;+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testModify()&#123;  //修改</div><div class=\"line\">        CoursesToSelect.set(0, new Course(&quot;100&quot;,&quot;Spring&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testRemove()&#123;  //删除，记住每删除一次，元素都会上移</div><div class=\"line\"></div><div class=\"line\">        CoursesToSelect.remove(1);//删除的第一种方式</div><div class=\"line\"></div><div class=\"line\">        /*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/</div><div class=\"line\">        Course cr = (Course) CoursesToSelect.get(2);   //删除的第二种方式</div><div class=\"line\">        CoursesToSelect.remove(cr);</div><div class=\"line\"></div><div class=\"line\">        Course[] courseList =</div><div class=\"line\">                &#123;(Course) CoursesToSelect.get(1),</div><div class=\"line\">                (Course) CoursesToSelect.get(2),</div><div class=\"line\">                (Course) CoursesToSelect.get(3)&#125;;</div><div class=\"line\">        CoursesToSelect.removeAll(Arrays.asList(courseList));   //删除的第三种方式，removeAll</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\"></div><div class=\"line\">        ListTest lt = new ListTest();</div><div class=\"line\">        lt.TestAdd();</div><div class=\"line\">        lt.testQueryAll();</div><div class=\"line\">        lt.testIterator();</div><div class=\"line\">        lt.testModify();  //修改课程</div><div class=\"line\">        lt.testRemove();  //删除课程</div><div class=\"line\">        lt.testForEach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Set集合的基本用法(SetTest.java)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.Arrays;</div><div class=\"line\">import java.util.List;</div><div class=\"line\">import java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\">public class SetTest &#123;</div><div class=\"line\"></div><div class=\"line\">    public List&lt;Course&gt; CoursesToSelect;</div><div class=\"line\">    public SetTest()&#123;</div><div class=\"line\">        this.CoursesToSelect = new ArrayList&lt;Course&gt;();//待选课程是使用数组序列存放</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void TestAdd()&#123;</div><div class=\"line\"></div><div class=\"line\">        Course cr1 = new Course(&quot;1&quot;,&quot;数据结构&quot;);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course cr2 = new Course(&quot;2&quot;,&quot;常用算法&quot;);</div><div class=\"line\">        CoursesToSelect.add(0, cr2);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList = &#123;new Course(&quot;3&quot;,&quot;Javaweb&quot;),new Course(&quot;4&quot;,&quot;数据库&quot;)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList2 = &#123;new Course(&quot;5&quot;,&quot;高等数学&quot;),new Course(&quot;6&quot;,&quot;计算机网络&quot;)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(2,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testForEach()&#123;  </div><div class=\"line\">        for(Course course:CoursesToSelect)&#123;</div><div class=\"line\">            System.out.println(&quot;课程:&quot;+course.name+&quot; 课程id:&quot;+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        SetTest st = new SetTest();</div><div class=\"line\">        st.TestAdd();</div><div class=\"line\">        st.testForEach();</div><div class=\"line\"></div><div class=\"line\">        //创建一个学生对象</div><div class=\"line\">        Student stu1= new Student(&quot;1&quot;,&quot;小明&quot;);</div><div class=\"line\">        System.out.println(&quot;欢迎&quot;+stu1.name+&quot;选课！&quot;);</div><div class=\"line\"></div><div class=\"line\">        Scanner sc = new Scanner(System.in);</div><div class=\"line\">        for(int i=0;i&lt;3;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;请输入课程ID&quot;);</div><div class=\"line\">            String courseId = sc.next();</div><div class=\"line\"></div><div class=\"line\">            for(Course course:st.CoursesToSelect)&#123;</div><div class=\"line\">                if(course.id.equals(courseId))&#123;  //字符串是对象,其equals()方法比较的是实际内容！</div><div class=\"line\">                    stu1.courses.add(course); //将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        st.testForEachForSet(stu1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testForEachForSet(Student stu)&#123;</div><div class=\"line\"></div><div class=\"line\">        //打印输出学生所选的课程</div><div class=\"line\">        //遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。</div><div class=\"line\">        //Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）</div><div class=\"line\">        //Set是可以添加空对象的，null</div><div class=\"line\">        //Set没有提供像List那样的set()方法，因为Set集合是无序的</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;共选择了&quot;+stu.courses.size()+&quot;门课程&quot;);</div><div class=\"line\">        for(Course course:stu.courses)&#123;</div><div class=\"line\">            System.out.println(stu.name+&quot;选择了&quot;+course.name+&quot; 课程id:&quot;+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">        //没有介绍的关于Set的remove(),size()等方法，大致跟List一样</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>-EOF</p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p><a href=\"http://blog.csdn.net/qq_33290787/article/details/51781036\" target=\"_blank\" rel=\"external\">Java集合框架</a><br><a href=\"http://www.open-open.com/lib/view/open1474167415464.html\" target=\"_blank\" rel=\"external\">Java - 集合框架完全解析</a></p>\n","excerpt":"","more":"<h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><p>框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有<strong>共同属性</strong>的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。</p>\n<h1 id=\"集合的作用\"><a href=\"#集合的作用\" class=\"headerlink\" title=\"集合的作用\"></a>集合的作用</h1><ul>\n<li>在类的内部对数据进行组织；</li>\n<li>简单而快速地搜索大数量的条目数据；</li>\n<li>提供统一的接口，将不同对象封装在一起，便于操作和管理；</li>\n<li>有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；</li>\n<li>有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。</li>\n</ul>\n<h1 id=\"集合和数组的选择\"><a href=\"#集合和数组的选择\" class=\"headerlink\" title=\"集合和数组的选择\"></a>集合和数组的选择</h1><p><strong>为什么选择集合而不是数组？</strong></p>\n<ol>\n<li>数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；</li>\n<li>集合可以存储和操作数目不固定的一组数据；</li>\n<li>若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；</li>\n<li>查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。</li>\n</ol>\n<h1 id=\"集合框架体系结构\"><a href=\"#集合框架体系结构\" class=\"headerlink\" title=\"集合框架体系结构\"></a>集合框架体系结构</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png\" alt=\"\"><br>我们关注常用的几个接口：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png\" alt=\"\"></p>\n<ul>\n<li>从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；</li>\n<li>第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；</li>\n<li>List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。</li>\n</ul>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p><strong>课程类（Course.java）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\">public class Course &#123;</div><div class=\"line\"></div><div class=\"line\">    public String id;</div><div class=\"line\">    public String name;</div><div class=\"line\"></div><div class=\"line\">    public Course(String id, String name) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>学生类（Student.java)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashSet;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\"></div><div class=\"line\">public class Student &#123;</div><div class=\"line\"></div><div class=\"line\">    public String id;</div><div class=\"line\">    public String name;</div><div class=\"line\"></div><div class=\"line\">    public Set&lt;Course&gt; courses;//使用泛型规定courses的类型</div><div class=\"line\"></div><div class=\"line\">    public Student(String id, String name) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.courses = new HashSet&lt;Course&gt;();//用set的实现类HashSet进行初始化</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ArrayList增删改查（ListTest.java）</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.imooc.collection;</div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.Arrays;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.List;</div><div class=\"line\">public class ListTest &#123;</div><div class=\"line\"></div><div class=\"line\">    /*List中的元素是有序并且可以重复的*/</div><div class=\"line\">    public List CoursesToSelect;</div><div class=\"line\"></div><div class=\"line\">    public ListTest()&#123;</div><div class=\"line\">        //注意List是个接口，不能直接将其实例化</div><div class=\"line\">        this.CoursesToSelect = new ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void TestAdd()&#123;</div><div class=\"line\"></div><div class=\"line\">        /*---普通add测试---*/</div><div class=\"line\">        Course cr1 = new Course(&quot;1&quot;,&quot;数据结构&quot;);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        /*---指定位置add测试，下挤---*/</div><div class=\"line\">        Course cr2 = new Course(&quot;2&quot;,&quot;常用算法&quot;);</div><div class=\"line\">        CoursesToSelect.add(0, cr2);//添加到第一个位置，会将原有的挤下去。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        /*---越界add测试---*/</div><div class=\"line\">        //Course cr3 = new Course(&quot;3&quot;,&quot;JAVA&quot;);</div><div class=\"line\">        //CoursesToSelect.add(3, cr3);</div><div class=\"line\">        /*</div><div class=\"line\">         * 注意！！</div><div class=\"line\">         * 0，1，2均不报错</div><div class=\"line\">         * 3报错：java.lang.IndexOutOfBoundsException  下标越界</div><div class=\"line\">         * */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        /*---普通组合add添加---*/</div><div class=\"line\">        Course[] courseList = &#123;new Course(&quot;3&quot;,&quot;Javaweb&quot;),new Course(&quot;4&quot;,&quot;数据库&quot;)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        /*---指定位置组合add添加---*/</div><div class=\"line\">        Course[] courseList2 = &#123;new Course(&quot;5&quot;,&quot;高等数学&quot;),new Course(&quot;6&quot;,&quot;计算机网络&quot;)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(2,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testQueryAll()&#123;  //查看全部元素</div><div class=\"line\">        System.out.println(&quot;普通遍历List&quot;);</div><div class=\"line\">        for(int i=0;i&lt;CoursesToSelect.size();i++)&#123;</div><div class=\"line\">            /*对象存入集合都变成Object类型，取出时需要类型转换*/</div><div class=\"line\">            Course tempCourse = (Course) CoursesToSelect.get(i);</div><div class=\"line\">            System.out.println(&quot;课程&quot;+(i+1)+&quot;:&quot;+tempCourse.name+&quot; 课程id:&quot;+tempCourse.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testIterator()&#123;  //通过迭代器遍历List</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;通过迭代器遍历List&quot;);</div><div class=\"line\">        //迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在</div><div class=\"line\">        //迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例</div><div class=\"line\">        Iterator it = CoursesToSelect.iterator();</div><div class=\"line\">        while(it.hasNext())&#123;</div><div class=\"line\">            Course cr = (Course) it.next();</div><div class=\"line\">            System.out.println(&quot;课程:&quot;+cr.name+&quot; 课程id:&quot;+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testForEach()&#123;  //通过foreach遍历List</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;通过foreach遍历List&quot;);</div><div class=\"line\">        for(Object obj:CoursesToSelect)&#123;</div><div class=\"line\">            Course cr = (Course)obj;</div><div class=\"line\">            System.out.println(&quot;课程:&quot;+cr.name+&quot; 课程id:&quot;+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testModify()&#123;  //修改</div><div class=\"line\">        CoursesToSelect.set(0, new Course(&quot;100&quot;,&quot;Spring&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testRemove()&#123;  //删除，记住每删除一次，元素都会上移</div><div class=\"line\"></div><div class=\"line\">        CoursesToSelect.remove(1);//删除的第一种方式</div><div class=\"line\"></div><div class=\"line\">        /*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/</div><div class=\"line\">        Course cr = (Course) CoursesToSelect.get(2);   //删除的第二种方式</div><div class=\"line\">        CoursesToSelect.remove(cr);</div><div class=\"line\"></div><div class=\"line\">        Course[] courseList =</div><div class=\"line\">                &#123;(Course) CoursesToSelect.get(1),</div><div class=\"line\">                (Course) CoursesToSelect.get(2),</div><div class=\"line\">                (Course) CoursesToSelect.get(3)&#125;;</div><div class=\"line\">        CoursesToSelect.removeAll(Arrays.asList(courseList));   //删除的第三种方式，removeAll</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\"></div><div class=\"line\">        ListTest lt = new ListTest();</div><div class=\"line\">        lt.TestAdd();</div><div class=\"line\">        lt.testQueryAll();</div><div class=\"line\">        lt.testIterator();</div><div class=\"line\">        lt.testModify();  //修改课程</div><div class=\"line\">        lt.testRemove();  //删除课程</div><div class=\"line\">        lt.testForEach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Set集合的基本用法(SetTest.java)</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.Arrays;</div><div class=\"line\">import java.util.List;</div><div class=\"line\">import java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\">public class SetTest &#123;</div><div class=\"line\"></div><div class=\"line\">    public List&lt;Course&gt; CoursesToSelect;</div><div class=\"line\">    public SetTest()&#123;</div><div class=\"line\">        this.CoursesToSelect = new ArrayList&lt;Course&gt;();//待选课程是使用数组序列存放</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void TestAdd()&#123;</div><div class=\"line\"></div><div class=\"line\">        Course cr1 = new Course(&quot;1&quot;,&quot;数据结构&quot;);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course cr2 = new Course(&quot;2&quot;,&quot;常用算法&quot;);</div><div class=\"line\">        CoursesToSelect.add(0, cr2);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList = &#123;new Course(&quot;3&quot;,&quot;Javaweb&quot;),new Course(&quot;4&quot;,&quot;数据库&quot;)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList2 = &#123;new Course(&quot;5&quot;,&quot;高等数学&quot;),new Course(&quot;6&quot;,&quot;计算机网络&quot;)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(2,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testForEach()&#123;  </div><div class=\"line\">        for(Course course:CoursesToSelect)&#123;</div><div class=\"line\">            System.out.println(&quot;课程:&quot;+course.name+&quot; 课程id:&quot;+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args)&#123;</div><div class=\"line\">        SetTest st = new SetTest();</div><div class=\"line\">        st.TestAdd();</div><div class=\"line\">        st.testForEach();</div><div class=\"line\"></div><div class=\"line\">        //创建一个学生对象</div><div class=\"line\">        Student stu1= new Student(&quot;1&quot;,&quot;小明&quot;);</div><div class=\"line\">        System.out.println(&quot;欢迎&quot;+stu1.name+&quot;选课！&quot;);</div><div class=\"line\"></div><div class=\"line\">        Scanner sc = new Scanner(System.in);</div><div class=\"line\">        for(int i=0;i&lt;3;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">            System.out.println(&quot;请输入课程ID&quot;);</div><div class=\"line\">            String courseId = sc.next();</div><div class=\"line\"></div><div class=\"line\">            for(Course course:st.CoursesToSelect)&#123;</div><div class=\"line\">                if(course.id.equals(courseId))&#123;  //字符串是对象,其equals()方法比较的是实际内容！</div><div class=\"line\">                    stu1.courses.add(course); //将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        st.testForEachForSet(stu1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void testForEachForSet(Student stu)&#123;</div><div class=\"line\"></div><div class=\"line\">        //打印输出学生所选的课程</div><div class=\"line\">        //遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。</div><div class=\"line\">        //Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）</div><div class=\"line\">        //Set是可以添加空对象的，null</div><div class=\"line\">        //Set没有提供像List那样的set()方法，因为Set集合是无序的</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;共选择了&quot;+stu.courses.size()+&quot;门课程&quot;);</div><div class=\"line\">        for(Course course:stu.courses)&#123;</div><div class=\"line\">            System.out.println(stu.name+&quot;选择了&quot;+course.name+&quot; 课程id:&quot;+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">        //没有介绍的关于Set的remove(),size()等方法，大致跟List一样</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>-EOF</p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p><a href=\"http://blog.csdn.net/qq_33290787/article/details/51781036\">Java集合框架</a><br><a href=\"http://www.open-open.com/lib/view/open1474167415464.html\">Java - 集合框架完全解析</a></p>\n"},{"title":"JAVA的学习之对象与类","date":"2017-02-16T13:01:13.000Z","_content":"\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n\n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n\n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```\n","source":"_posts/JAVA的学习之对象与类.md","raw":"---\ntitle: JAVA的学习之对象与类\ndate: 2017-02-16 21:01:13\ntags: JAVA\n---\n\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n\n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n\n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```\n","slug":"JAVA的学习之对象与类","published":1,"updated":"2017-03-26T09:22:58.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0qhna3d0002qcrs8suz0u8g","content":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>\n<a id=\"more\"></a>\n<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>","more":"<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JAVA的学习之继承","date":"2017-02-16T16:00:00.000Z","_content":"\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n","source":"_posts/JAVA的学习之继承.md","raw":"---\ntitle: JAVA的学习之继承\ndate: 2017-02-17\ntags: JAVA\n---\n\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n","slug":"JAVA的学习之继承","published":1,"updated":"2017-03-26T09:24:50.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0qhna430006qcrs4ff55wwe","content":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br><a id=\"more\"></a></p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>\n","excerpt":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br>","more":"</p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>"},{"title":"用hexo搭建个人博客[转]","date":"2016-06-04T18:45:07.000Z","_content":"从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。\n现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。\n<!--more-->\n### 关于博客源码的备份和同步更新 ###\n\n#### 方案选择 ####\n这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。\n所以还是考虑用github 存放源码，但是有遇到两个选择：\n\n- 一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。\n- 另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。\n\n第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。\n\n#### 出现问题 ####\n\n- 问题描述\n\n因为我是先在本地\n```\ngit init 、git add origin <server>\n```\n初始化本地文件夹，然后\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。\n\n- 解决问题：\n\n删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。\n在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：\n\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n\n然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。\n\n### 最后 ###\n\n人生有涯，知也无涯。\n坚持学习，保持好奇心。\n坚持锻炼身体。\n转载来自：http://zouzls.github.io/\n","source":"_posts/转-用hexo搭建个人博客.md","raw":"---\ntitle: 用hexo搭建个人博客[转]\ndate: 2016-06-05 02:45:07\ntags: hexo\ncategories: blog\n---\n从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。\n现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。\n<!--more-->\n### 关于博客源码的备份和同步更新 ###\n\n#### 方案选择 ####\n这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。\n所以还是考虑用github 存放源码，但是有遇到两个选择：\n\n- 一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。\n- 另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。\n\n第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。\n\n#### 出现问题 ####\n\n- 问题描述\n\n因为我是先在本地\n```\ngit init 、git add origin <server>\n```\n初始化本地文件夹，然后\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。\n\n- 解决问题：\n\n删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。\n在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：\n\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n\n然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。\n\n### 最后 ###\n\n人生有涯，知也无涯。\n坚持学习，保持好奇心。\n坚持锻炼身体。\n转载来自：http://zouzls.github.io/\n","slug":"转-用hexo搭建个人博客","published":1,"updated":"2017-02-20T11:51:29.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0qhna4g0008qcrshjeflqr3","content":"<p>从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。<br>现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。<br><a id=\"more\"></a></p>\n<h3 id=\"关于博客源码的备份和同步更新\"><a href=\"#关于博客源码的备份和同步更新\" class=\"headerlink\" title=\"关于博客源码的备份和同步更新\"></a>关于博客源码的备份和同步更新</h3><h4 id=\"方案选择\"><a href=\"#方案选择\" class=\"headerlink\" title=\"方案选择\"></a>方案选择</h4><p>这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。<br>所以还是考虑用github 存放源码，但是有遇到两个选择：</p>\n<ul>\n<li>一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。</li>\n<li>另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。</li>\n</ul>\n<p>第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。</p>\n<h4 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h4><ul>\n<li>问题描述</li>\n</ul>\n<p>因为我是先在本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init 、git add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>\n<p>初始化本地文件夹，然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。</p>\n<ul>\n<li>解决问题：</li>\n</ul>\n<p>删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。<br>在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n<p>然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>人生有涯，知也无涯。<br>坚持学习，保持好奇心。<br>坚持锻炼身体。<br>转载来自：<a href=\"http://zouzls.github.io/\" target=\"_blank\" rel=\"external\">http://zouzls.github.io/</a></p>\n","excerpt":"<p>从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。<br>现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。<br>","more":"</p>\n<h3 id=\"关于博客源码的备份和同步更新\"><a href=\"#关于博客源码的备份和同步更新\" class=\"headerlink\" title=\"关于博客源码的备份和同步更新\"></a>关于博客源码的备份和同步更新</h3><h4 id=\"方案选择\"><a href=\"#方案选择\" class=\"headerlink\" title=\"方案选择\"></a>方案选择</h4><p>这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。<br>所以还是考虑用github 存放源码，但是有遇到两个选择：</p>\n<ul>\n<li>一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。</li>\n<li>另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。</li>\n</ul>\n<p>第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。</p>\n<h4 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h4><ul>\n<li>问题描述</li>\n</ul>\n<p>因为我是先在本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init 、git add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>\n<p>初始化本地文件夹，然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。</p>\n<ul>\n<li>解决问题：</li>\n</ul>\n<p>删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。<br>在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n<p>然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>人生有涯，知也无涯。<br>坚持学习，保持好奇心。<br>坚持锻炼身体。<br>转载来自：<a href=\"http://zouzls.github.io/\">http://zouzls.github.io/</a></p>"},{"title":"新环境下Hexo博客部署及维护","date":"2017-02-19T16:00:00.000Z","_content":"   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。\n   <!-- more -->\n## 准备工作\n之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：\n\n - master分支：存放博客部署的静态文件(也就是public文件夹下的内容)\n - hexo分支：存放博客源文件，配置文件等\n \n在新环境(Windows)下安装配置*Git，Node.js，Python*;Python建议下载2.7版本，安装好后别忘了配置环境变量。\n提供下载链接：\n\n- [Git](https://github.com/waylau/git-for-win)\n- [Node.js](https://nodejs.org/en/download/)\n- [Python](https://www.python.org/downloads/)\n\n\n## 新环境部署\n首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行**Git Bash Here,**然后克隆你的远程仓库，也就是hexo分支上的内容；\n` git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog`\n### 问题一\n出现clone失败报错（Filename too long）：\n```\nGitHub.IO.ProcessException: fatal: unable to stat 'plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class': Filename too long\n```\n后面各种找解决方法，终于找到一个靠谱的方案: [Solution](http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows)，原因也解释的很清楚；\n在Bash中键入命令:`git config --system core.longpaths true `; 问题解决。\n### 问题二\n进入博客根目录：` cd newBlog`；然后依次键入下列命令**[1]**：\n```\nnpm install -g hexo-cli\nnpm install\nnpm install hexo -server --save\nnpm install hexo-deployer-git --save\n```\n出现各种问题，无法安装*hexo*:\n```\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"c:\\\\Program Files\\\\nodejs\\\\node.exe\" \"c:\\\\Program Files\\\\nodej\ns\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\nnpm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat\nnpm ERR! node -v v0.10.28\nnpm ERR! npm -v 1.4.9\nnpm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package\nnpm ERR! code EPERM\nnpm ERR! errno 50\nnpm ERR! stack Error: EPERM, unlink 'C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i\nnherits\\2.0.1\\package'\nnpm http 200 https://registry.npmjs.org/qs\n```\n找到解决方案，依次键入下列命令：\n```\nnpm config get registry\nnpm cache clean\nnpm install express\n```\n问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；\n### 问题三\n执行` hexo clean`,出现下列问题：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png)\n根据提示键入命令安装：\n`npm rebuild node-sass`\n安装过程出现各种` npm error，gyp error`，在查找问题过程中，出错信息提示：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png)\n\n那就新环境下安装**Python！**，忘安装了..\n至此，问题全部解决，可以愉快的写博客了！\n\n## 参考博客\n1.[Hexo博客多电脑同步及更换电脑后处理方式](http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/)\n2.[在不同的电脑维护Hexo和写作](http://www.rvclient.com/2016/05/21/hexo-everywhere/)\n \n\n\n\n","source":"_posts/新环境下Hexo博客部署及维护.md","raw":"---\ntitle: 新环境下Hexo博客部署及维护\ndate: 2017-02-20\ncategories: Git/Github\ntags: \n- git\n- hexo\n---\n   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。\n   <!-- more -->\n## 准备工作\n之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：\n\n - master分支：存放博客部署的静态文件(也就是public文件夹下的内容)\n - hexo分支：存放博客源文件，配置文件等\n \n在新环境(Windows)下安装配置*Git，Node.js，Python*;Python建议下载2.7版本，安装好后别忘了配置环境变量。\n提供下载链接：\n\n- [Git](https://github.com/waylau/git-for-win)\n- [Node.js](https://nodejs.org/en/download/)\n- [Python](https://www.python.org/downloads/)\n\n\n## 新环境部署\n首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行**Git Bash Here,**然后克隆你的远程仓库，也就是hexo分支上的内容；\n` git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog`\n### 问题一\n出现clone失败报错（Filename too long）：\n```\nGitHub.IO.ProcessException: fatal: unable to stat 'plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class': Filename too long\n```\n后面各种找解决方法，终于找到一个靠谱的方案: [Solution](http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows)，原因也解释的很清楚；\n在Bash中键入命令:`git config --system core.longpaths true `; 问题解决。\n### 问题二\n进入博客根目录：` cd newBlog`；然后依次键入下列命令**[1]**：\n```\nnpm install -g hexo-cli\nnpm install\nnpm install hexo -server --save\nnpm install hexo-deployer-git --save\n```\n出现各种问题，无法安装*hexo*:\n```\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"c:\\\\Program Files\\\\nodejs\\\\node.exe\" \"c:\\\\Program Files\\\\nodej\ns\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\nnpm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat\nnpm ERR! node -v v0.10.28\nnpm ERR! npm -v 1.4.9\nnpm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package\nnpm ERR! code EPERM\nnpm ERR! errno 50\nnpm ERR! stack Error: EPERM, unlink 'C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i\nnherits\\2.0.1\\package'\nnpm http 200 https://registry.npmjs.org/qs\n```\n找到解决方案，依次键入下列命令：\n```\nnpm config get registry\nnpm cache clean\nnpm install express\n```\n问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；\n### 问题三\n执行` hexo clean`,出现下列问题：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png)\n根据提示键入命令安装：\n`npm rebuild node-sass`\n安装过程出现各种` npm error，gyp error`，在查找问题过程中，出错信息提示：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png)\n\n那就新环境下安装**Python！**，忘安装了..\n至此，问题全部解决，可以愉快的写博客了！\n\n## 参考博客\n1.[Hexo博客多电脑同步及更换电脑后处理方式](http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/)\n2.[在不同的电脑维护Hexo和写作](http://www.rvclient.com/2016/05/21/hexo-everywhere/)\n \n\n\n\n","slug":"新环境下Hexo博客部署及维护","published":1,"updated":"2017-02-21T05:16:41.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0qhna5l000aqcrsjb1fbw3d","content":"<p>   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。<br>   <a id=\"more\"></a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：</p>\n<ul>\n<li>master分支：存放博客部署的静态文件(也就是public文件夹下的内容)</li>\n<li>hexo分支：存放博客源文件，配置文件等</li>\n</ul>\n<p>在新环境(Windows)下安装配置<em>Git，Node.js，Python</em>;Python建议下载2.7版本，安装好后别忘了配置环境变量。<br>提供下载链接：</p>\n<ul>\n<li><a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">Git</a></li>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"external\">Python</a></li>\n</ul>\n<h2 id=\"新环境部署\"><a href=\"#新环境部署\" class=\"headerlink\" title=\"新环境部署\"></a>新环境部署</h2><p>首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行<strong>Git Bash Here,</strong>然后克隆你的远程仓库，也就是hexo分支上的内容；<br><code>git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog</code></p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>出现clone失败报错（Filename too long）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GitHub.IO.ProcessException: fatal: unable to stat &apos;plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class&apos;: Filename too long</div></pre></td></tr></table></figure></p>\n<p>后面各种找解决方法，终于找到一个靠谱的方案: <a href=\"http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows\" target=\"_blank\" rel=\"external\">Solution</a>，原因也解释的很清楚；<br>在Bash中键入命令:<code>git config --system core.longpaths true</code>; 问题解决。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>进入博客根目录：<code>cd newBlog</code>；然后依次键入下列命令<strong>[1]</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\">npm install</div><div class=\"line\">npm install hexo -server --save</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>出现各种问题，无法安装<em>hexo</em>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ERR! System Windows_NT 6.1.7601</div><div class=\"line\">npm ERR! command &quot;c:\\\\Program Files\\\\nodejs\\\\node.exe&quot; &quot;c:\\\\Program Files\\\\nodej</div><div class=\"line\">s\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;install&quot;</div><div class=\"line\">npm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat</div><div class=\"line\">npm ERR! node -v v0.10.28</div><div class=\"line\">npm ERR! npm -v 1.4.9</div><div class=\"line\">npm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package</div><div class=\"line\">npm ERR! code EPERM</div><div class=\"line\">npm ERR! errno 50</div><div class=\"line\">npm ERR! stack Error: EPERM, unlink &apos;C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i</div><div class=\"line\">nherits\\2.0.1\\package&apos;</div><div class=\"line\">npm http 200 https://registry.npmjs.org/qs</div></pre></td></tr></table></figure></p>\n<p>找到解决方案，依次键入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config get registry</div><div class=\"line\">npm cache clean</div><div class=\"line\">npm install express</div></pre></td></tr></table></figure></p>\n<p>问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；</p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>执行<code>hexo clean</code>,出现下列问题：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png\" alt=\"\"><br>根据提示键入命令安装：<br><code>npm rebuild node-sass</code><br>安装过程出现各种<code>npm error，gyp error</code>，在查找问题过程中，出错信息提示：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png\" alt=\"\"></p>\n<p>那就新环境下安装<strong>Python！</strong>，忘安装了..<br>至此，问题全部解决，可以愉快的写博客了！</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p>1.<a href=\"http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"external\">Hexo博客多电脑同步及更换电脑后处理方式</a><br>2.<a href=\"http://www.rvclient.com/2016/05/21/hexo-everywhere/\" target=\"_blank\" rel=\"external\">在不同的电脑维护Hexo和写作</a></p>\n","excerpt":"<p>   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。<br>","more":"</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：</p>\n<ul>\n<li>master分支：存放博客部署的静态文件(也就是public文件夹下的内容)</li>\n<li>hexo分支：存放博客源文件，配置文件等</li>\n</ul>\n<p>在新环境(Windows)下安装配置<em>Git，Node.js，Python</em>;Python建议下载2.7版本，安装好后别忘了配置环境变量。<br>提供下载链接：</p>\n<ul>\n<li><a href=\"https://github.com/waylau/git-for-win\">Git</a></li>\n<li><a href=\"https://nodejs.org/en/download/\">Node.js</a></li>\n<li><a href=\"https://www.python.org/downloads/\">Python</a></li>\n</ul>\n<h2 id=\"新环境部署\"><a href=\"#新环境部署\" class=\"headerlink\" title=\"新环境部署\"></a>新环境部署</h2><p>首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行<strong>Git Bash Here,</strong>然后克隆你的远程仓库，也就是hexo分支上的内容；<br><code>git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog</code></p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>出现clone失败报错（Filename too long）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GitHub.IO.ProcessException: fatal: unable to stat &apos;plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class&apos;: Filename too long</div></pre></td></tr></table></figure></p>\n<p>后面各种找解决方法，终于找到一个靠谱的方案: <a href=\"http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows\">Solution</a>，原因也解释的很清楚；<br>在Bash中键入命令:<code>git config --system core.longpaths true</code>; 问题解决。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>进入博客根目录：<code>cd newBlog</code>；然后依次键入下列命令<strong>[1]</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\">npm install</div><div class=\"line\">npm install hexo -server --save</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>出现各种问题，无法安装<em>hexo</em>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ERR! System Windows_NT 6.1.7601</div><div class=\"line\">npm ERR! command &quot;c:\\\\Program Files\\\\nodejs\\\\node.exe&quot; &quot;c:\\\\Program Files\\\\nodej</div><div class=\"line\">s\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;install&quot;</div><div class=\"line\">npm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat</div><div class=\"line\">npm ERR! node -v v0.10.28</div><div class=\"line\">npm ERR! npm -v 1.4.9</div><div class=\"line\">npm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package</div><div class=\"line\">npm ERR! code EPERM</div><div class=\"line\">npm ERR! errno 50</div><div class=\"line\">npm ERR! stack Error: EPERM, unlink &apos;C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i</div><div class=\"line\">nherits\\2.0.1\\package&apos;</div><div class=\"line\">npm http 200 https://registry.npmjs.org/qs</div></pre></td></tr></table></figure></p>\n<p>找到解决方案，依次键入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config get registry</div><div class=\"line\">npm cache clean</div><div class=\"line\">npm install express</div></pre></td></tr></table></figure></p>\n<p>问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；</p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>执行<code>hexo clean</code>,出现下列问题：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png\" alt=\"\"><br>根据提示键入命令安装：<br><code>npm rebuild node-sass</code><br>安装过程出现各种<code>npm error，gyp error</code>，在查找问题过程中，出错信息提示：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png\" alt=\"\"></p>\n<p>那就新环境下安装<strong>Python！</strong>，忘安装了..<br>至此，问题全部解决，可以愉快的写博客了！</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p>1.<a href=\"http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/\">Hexo博客多电脑同步及更换电脑后处理方式</a><br>2.<a href=\"http://www.rvclient.com/2016/05/21/hexo-everywhere/\">在不同的电脑维护Hexo和写作</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0qhna2t0000qcrs8cpeap4w","category_id":"cj0qhna3o0004qcrs4szb1kun","_id":"cj0qhna5y000eqcrslzguxhpy"},{"post_id":"cj0qhna4g0008qcrshjeflqr3","category_id":"cj0qhna5u000cqcrs5rryrmm9","_id":"cj0qhna66000jqcrsj2khwnww"},{"post_id":"cj0qhna5l000aqcrsjb1fbw3d","category_id":"cj0qhna62000gqcrszi1qqp45","_id":"cj0qhna6b000mqcrsfstgqowy"}],"PostTag":[{"post_id":"cj0qhna2t0000qcrs8cpeap4w","tag_id":"cj0qhna410005qcrsi4xidme0","_id":"cj0qhna5v000dqcrs2mfznbhw"},{"post_id":"cj0qhna3d0002qcrs8suz0u8g","tag_id":"cj0qhna5p000bqcrsh72ib7mp","_id":"cj0qhna63000hqcrsj088il6t"},{"post_id":"cj0qhna430006qcrs4ff55wwe","tag_id":"cj0qhna5p000bqcrsh72ib7mp","_id":"cj0qhna67000kqcrsz8i2aeht"},{"post_id":"cj0qhna4g0008qcrshjeflqr3","tag_id":"cj0qhna65000iqcrspr4sa6ec","_id":"cj0qhna6c000nqcrsrfkgzfdu"},{"post_id":"cj0qhna5l000aqcrsjb1fbw3d","tag_id":"cj0qhna69000lqcrsmsrt4onz","_id":"cj0qhna6g000pqcrsw5mjyp98"},{"post_id":"cj0qhna5l000aqcrsjb1fbw3d","tag_id":"cj0qhna65000iqcrspr4sa6ec","_id":"cj0qhna6g000qqcrs7nklsh5m"}],"Tag":[{"name":"Java","_id":"cj0qhna410005qcrsi4xidme0"},{"name":"JAVA","_id":"cj0qhna5p000bqcrsh72ib7mp"},{"name":"hexo","_id":"cj0qhna65000iqcrspr4sa6ec"},{"name":"git","_id":"cj0qhna69000lqcrsmsrt4onz"}]}}
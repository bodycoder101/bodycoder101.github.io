{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":1,"renderable":0},{"_id":"source/uploads/wechat-reward-image.png","path":"uploads/wechat-reward-image.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"38519972ef2d83070ea387142f1b2f1ce5b6f165","modified":1487591489316},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1497344859152},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1497344859153},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1497344859154},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1497344859157},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1497344859158},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1497344859158},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1497344859159},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1497344859160},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1497344859160},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1497344859161},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1497344859162},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1497344859163},{"_id":"themes/next/_config.yml","hash":"10961756578964493da116e131e55aca3a813656","modified":1504536815573},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1497344859165},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1497344859165},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1497344859253},{"_id":"source/_data/next.yml","hash":"1c3aa82b2ed07103c8c7dab610dd520b821c9831","modified":1497959657842},{"_id":"source/_data/各种注册.txt","hash":"0ef62c58503d3668af3cbe788c243fabff868202","modified":1497954453837},{"_id":"source/_posts/C-风格的字符串分割函数.md","hash":"eec7be5fd9ce271db72eeaaa3228e3437b8bbe1f","modified":1540122296603},{"_id":"source/_posts/JAVA学习之集合框架（上）.md","hash":"4fff9b329814c06c8f00e4ed7669486158a1e140","modified":1490605853244},{"_id":"source/_posts/JAVA的学习之对象与类.md","hash":"3a546cc5fcc382c2a72bfdfddb7c663fb2b3a342","modified":1493351156912},{"_id":"source/_posts/JAVA的学习之第五章.md","hash":"fa91100262fc6c016529ee4fc8892a73a6d13831","modified":1498394255529},{"_id":"source/_posts/JAVA的学习之第四章.md","hash":"f3bb468d236dd95706cb3b782f6bec55bd34f13f","modified":1487591489310},{"_id":"source/_posts/JAVA的学习之继承.md","hash":"75f9c77eb605ad594c55202ae7a2d87d60a3a517","modified":1493351350277},{"_id":"source/_posts/Leetcode题解-【买卖股票最佳收益系列】.md","hash":"a36a14a3e7e6aba8b6ab660e4db52fba050f1296","modified":1541587049752},{"_id":"source/_posts/Network-Protocol总结-1-HTTP协议.md","hash":"9c192399e54743c8d657dee647d757fdbf398c4a","modified":1498786116557},{"_id":"source/_posts/Python基础学习之-IO编程.md","hash":"f43db1d8da978f00c0d581af45e0e2e7bcffc781","modified":1500014479088},{"_id":"source/_posts/Python基础学习之-TCP-UDP编程.md","hash":"f40a1e259a737585f1bd3b0feea736597179faf2","modified":1500706257803},{"_id":"source/_posts/Python基础学习之-list、tuple、dic-set.md","hash":"b45108242a37177839442675f40efbc348851272","modified":1499516356401},{"_id":"source/_posts/Python基础学习之-初识正则表达式.md","hash":"2309601ba83ed74715379eb459837b9cb6737e54","modified":1500192494281},{"_id":"source/_posts/Python基础学习之-进程和线程.md","hash":"3ab101cc73fbb6b19f6c0825a5b513fa1ddfa47c","modified":1500192516641},{"_id":"source/_posts/Python基础学习之-错误、调试和测试.md","hash":"05f8f5fa16a222452182506f41a2352f7fac2dd9","modified":1499781636140},{"_id":"source/_posts/Python基础学习之-面向对象高级编程.md","hash":"a7e5043ab061c590d1ccffcce049250351c82c7d","modified":1499689902752},{"_id":"source/_posts/Python基础学习之-高级特性.md","hash":"7b5a80a411372c245327f49fa9300888b34c56e4","modified":1499603565633},{"_id":"source/_posts/Python基础学习之-高阶函数.md","hash":"ca8c6a1e8c1c944039f60ad042960ff723acc790","modified":1499603919051},{"_id":"source/_posts/What-Life-Should-Mean-to-You.md","hash":"030431f9d2717f318fd2a8660dbbda5d333360d6","modified":1535304017882},{"_id":"source/_posts/《The-Pragmatic-Programmer-程序员修炼之道》-读书整理.md","hash":"603c42659eb3f3b69a017f25470a3cf04b32b73d","modified":1538450239482},{"_id":"source/_posts/《大话设计模式》读书整理.md","hash":"807dd7e4eb765232f1dbd5abc8eb411bf0393593","modified":1535164604981},{"_id":"source/_posts/东蒙研途之一周年小记.md","hash":"28407432f5f51f9f9848b0757a9f557480ad6d7d","modified":1504461396014},{"_id":"source/_posts/二叉树的序列化和反序列化.md","hash":"2221026aff8636c483eb193346c712317c1085f5","modified":1541156118302},{"_id":"source/_posts/二叉树遍历方法总结(C++实现).md","hash":"787744c61f587b957a043cdf80f6a4ae02f99b38","modified":1540025500959},{"_id":"source/_posts/动态规划之最长公共子序列（longest common subsequence）问题的求解.md","hash":"b276d00af200c9d2277d240e1492071c2f1cb776","modified":1497356563970},{"_id":"source/_posts/新环境下Hexo博客部署及维护.md","hash":"733661060cc422dada17cbc2d3a666524c08a8e1","modified":1493351340000},{"_id":"source/_posts/求解子数组之和的最大值及相应的子数组.md","hash":"d06d80107254898185b8e14e07459ba949a80b50","modified":1498395069570},{"_id":"source/_posts/腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点.md","hash":"ca5c76a5c4c2d0c6b4121dbc743bfce4f13a856a","modified":1497354345186},{"_id":"source/_posts/读《向死而生-我修的死亡学分》.md","hash":"e3a4ba6ac1db11c2f231aecd0afb012e3f797b27","modified":1498394435846},{"_id":"source/_posts/转-用hexo搭建个人博客.md","hash":"be85c6448efb0da7e484ee86b940b02f7dce21c2","modified":1493351295116},{"_id":"source/about/index.md","hash":"f61e47b984be4e6d4e621bc42b48b0b1b5ed867d","modified":1495190638686},{"_id":"source/categories/index.md","hash":"8e9313db61c04f46f9947c93cc8f75cfda6b7ffd","modified":1487591489315},{"_id":"source/tags/index.md","hash":"38977c7474fb31bd694037d5a5840c8d56e408ba","modified":1487591489318},{"_id":"source/uploads/avatar.png","hash":"35df14c2d54cb81634c5e14065eb1f2ba1e49cd0","modified":1487591489321},{"_id":"source/uploads/wechat-qcode.jpg","hash":"1aedf988e65cd502171934a95d38f8b1cf7d8c8e","modified":1487645075827},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1497344859167},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1497344859168},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1497344859168},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1497344859169},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1497344859170},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1497344859172},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1497344859173},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1497344859174},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1497344859175},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1497344859176},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1497344859176},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1497344859177},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1497344859178},{"_id":"themes/next/layout/_layout.swig","hash":"0b944efcb14d3ab8d5216aa965739dbe70d1b159","modified":1497357594856},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1497344859247},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1497344859248},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1497344859249},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1497344859249},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1497344859250},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1497344859251},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1497344859252},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1497344859254},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1497344859256},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1497344859641},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1497344859641},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1497344859642},{"_id":"source/uploads/wechat-reward-image.png","hash":"fe2fdd6111caa81c7adbf0167addaf217b77f2a7","modified":1487591489322},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859428},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1497344859180},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1497344859181},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1497344859183},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1497344859184},{"_id":"themes/next/layout/_macro/post.swig","hash":"87060cd26969bc56617d0ca64a263a274d5865e2","modified":1497954368012},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1497344859187},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"4b029551ddb44c53f895e96cf8ff5ffbe02322fb","modified":1497344859188},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1497344859188},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1497344859190},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1497354709990},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1497344859192},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1497344859195},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1497344859196},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1497344859197},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1497344859198},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1497344859207},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1497344859208},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1497344859214},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1497344859234},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1497344859235},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1497344859235},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1497344859236},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1497344859237},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1497344859238},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1497344859257},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1497344859258},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1497344859259},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1497344859260},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1497344859262},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1497344859263},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1497344859264},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1497344859427},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1497344859431},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1497344859433},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1497344859434},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1497344859436},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1497344859438},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1497344859439},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1497344859440},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1497344859441},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1497344859442},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497344859443},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497344859444},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1497344859444},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1497344859446},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497344859446},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859211},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859212},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859386},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859387},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859390},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859421},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859425},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1497344859193},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1497344859194},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1497344859199},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1497344859200},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1497344859201},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1497344859202},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1497344859203},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1497344859204},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1497957575770},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1497344859210},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1497344859212},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1497344859216},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1497344859217},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1497344859218},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1497344859219},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1497344859220},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1497344859220},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1497344859221},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1497344859222},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1497344859223},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1497344859223},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1497344859224},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1497344859225},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1497344859226},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1497344859227},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1497344859228},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1497344859229},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1497344859230},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1497344859231},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1497344859232},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1497344859242},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1497344859243},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1497344859245},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1497344859246},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1497344859385},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1497344859388},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1497344859390},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1497344859420},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1497344859423},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1497344859425},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1497344859448},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1497344859450},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1497344859451},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1497344859453},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1497344859454},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1497344859456},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1497344859457},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1497344859458},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1497344859462},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1497344859463},{"_id":"themes/next/source/js/src/utils.js","hash":"c976214b8bbaa9512b886bf3687e94696f705e33","modified":1497344859464},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497344859486},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497344859498},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1497344859501},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1497344859503},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1497344859504},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1497344859528},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1497344859529},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1497344859530},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1497344859531},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1497344859536},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1497344859537},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1497344859538},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1497344859539},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1497344859539},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1497344859581},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1497344859585},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1497344859586},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1497344859587},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1497344859589},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1497344859590},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1497344859591},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1497344859592},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1497344859593},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1497344859595},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1497344859596},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1497344859596},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1497344859597},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1497344859599},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1497344859600},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1497344859600},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1497344859602},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1497344859603},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1497344859605},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1497344859606},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1497344859607},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1497344859609},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1497344859610},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1497344859611},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1497344859627},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1497344859628},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1497344859636},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1497344859637},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1497344859638},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1497344859583},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1497344859240},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1497344859241},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1497344859267},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1497344859268},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1497344859269},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1497344859270},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1497344859271},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1497344859289},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1497344859312},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1497344859377},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1497344859378},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1497344859379},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1497344859382},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1497344859383},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1497344859384},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1497344859393},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1497344859393},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1497344859395},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1497344859396},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1497344859397},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1497344859398},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1497344859399},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1497344859405},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1497344859406},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1497344859407},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1497344859409},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1497344859409},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1497344859412},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1497344859413},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1497344859414},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1497344859416},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1497344859417},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1497344859418},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1497344859461},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1497344859481},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1497344859484},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497344859507},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497344859508},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497344859510},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497344859512},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497344859513},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497344859514},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1497344859523},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1497344859525},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1497344859527},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1497344859533},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497344859534},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1497344859541},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1497344859542},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1497344859544},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1497344859624},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1497344859626},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1497344859475},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1497344859479},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1497344859578},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1497344859579},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1497344859633},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1497344859273},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1497344859274},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1497344859275},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1497344859275},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1497344859277},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1497344859278},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1497344859280},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1497344859281},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1497344859282},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1497344859284},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1497344859284},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1497344859285},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1497344859287},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1497344859288},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1497344859290},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1497344859291},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1497344859293},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1497344859294},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1497344859294},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1497344859295},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1497344859296},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1497344859297},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1497344859298},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1497344859298},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1497344859299},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1497344859300},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1497344859301},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1497344859301},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1497344859302},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1497344859303},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1497344859304},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1497344859306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1497344859306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1497344859308},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1497344859309},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1497344859310},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1497344859310},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1497344859311},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1497344859313},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1497344859314},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1497344859315},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1497344859359},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1497344859361},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1497344859362},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1497344859364},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1497344859367},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1497344859368},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1497344859370},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1497344859371},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1497344859372},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1497344859373},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1497344859374},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1497344859375},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1497344859400},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1497344859403},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1497344859411},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1497344859468},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1497344859469},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1497344859471},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1497344859473},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497344859516},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1497344859517},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1497344859519},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1497344859520},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1497344859521},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1497344859522},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1497344859549},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1497344859553},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1497344859576},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1497344859494},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1497344859621},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1497344859562},{"_id":"public/baidusitemap.xml","hash":"6a0f910fdea7703c5cbea817771bc492ab154c7f","modified":1541587095274},{"_id":"public/sitemap.xml","hash":"964b5a63f22d8c24219e36a724b6b360610d1f68","modified":1541587095332},{"_id":"public/categories/index.html","hash":"15a3bc2d6831cfa6aac1a722d78fb75cc9a7edba","modified":1541587095369},{"_id":"public/tags/index.html","hash":"245b1f43145dff18fbea2a21260fa6373c9423dc","modified":1541587095370},{"_id":"public/archives/2016/index.html","hash":"bd6ba05dde100c0662301f1821c1d2e3996d4727","modified":1541587095370},{"_id":"public/archives/2016/06/index.html","hash":"3e4cbb7dc0c90cdc81659b1371ea69f4946f357f","modified":1541587095370},{"_id":"public/archives/2017/page/5/index.html","hash":"e4bd41b29d368bb0a6db3c4cffebd59ad822b2de","modified":1541587095370},{"_id":"public/archives/2017/03/index.html","hash":"7f8e5de5431b8fb3a72418262198eda43595beaf","modified":1541587095370},{"_id":"public/archives/2017/04/index.html","hash":"a174bdfeb44cb80940145feed33456ce865d1acd","modified":1541587095370},{"_id":"public/archives/2017/06/index.html","hash":"345500247127051eaa7b37d21c8305cd71bf70d0","modified":1541587095370},{"_id":"public/archives/2017/09/index.html","hash":"391d272158f4dbd92fc4241fbf37bd45d0887070","modified":1541587095370},{"_id":"public/archives/2018/page/2/index.html","hash":"b2af68ff3597cdf7ae1ab4251fbb65193065a08b","modified":1541587095370},{"_id":"public/archives/2018/08/index.html","hash":"82e77b69f438244e215128491abe3264d38b01f9","modified":1541587095370},{"_id":"public/archives/2018/10/index.html","hash":"35cfa7e517b610782695169a2d9b791849753eef","modified":1541587095371},{"_id":"public/archives/2018/11/index.html","hash":"50cb1917fdcc8646d7ae1eab9ae09a77ce597e0c","modified":1541587095371},{"_id":"public/categories/编程语言/index.html","hash":"f83177cc9c22fabf025dcb8d4f6aa1515263084d","modified":1541587095371},{"_id":"public/categories/Java-SE/index.html","hash":"fd8eec08f09edeb7ef7d38c946793e41f20335dc","modified":1541587095371},{"_id":"public/categories/Leetcode题解/index.html","hash":"5858160683235602e7294d47ab5c98ebd9479f31","modified":1541587095371},{"_id":"public/categories/Computer-Network/index.html","hash":"5a104e9e416ec6cd5185e0e25361a7d8e89c2034","modified":1541587095372},{"_id":"public/categories/读书笔记/index.html","hash":"b6426e476574290ede271eb8a7cc741c1188998d","modified":1541587095372},{"_id":"public/categories/设计模式/index.html","hash":"c9cbca4df6d762190c97ffcf01162f29a85dcd68","modified":1541587095372},{"_id":"public/categories/个人随感/index.html","hash":"0af727afc367df08c16c5a41037e9265647d71bb","modified":1541587095372},{"_id":"public/categories/algorithm/index.html","hash":"7cd8e2ada3907c0deac2dfaa84f8203082ec4830","modified":1541587095372},{"_id":"public/categories/Algorithms/index.html","hash":"c84bdfc2627e4668d5c26312bd29e4be0124128b","modified":1541587095372},{"_id":"public/categories/hexo/index.html","hash":"c128749c542384d0abb0984475bb615c3ba17c66","modified":1541587095372},{"_id":"public/categories/笔试面试/index.html","hash":"5be67cb33bf80ca8a787f83ecab551887e0f93e9","modified":1541587095373},{"_id":"public/tags/CPP/index.html","hash":"7b93f5f368a637899675b1cee90056a47eb66175","modified":1541587095373},{"_id":"public/tags/字符串分割（StringSplit）/index.html","hash":"00c79ec18eca2094dd1938b4151cbea18ffd3e6b","modified":1541587095373},{"_id":"public/tags/Java/index.html","hash":"f8484995e7bf3c95bf079c8b1bf5833bf3a34f4a","modified":1541587095373},{"_id":"public/tags/JAVA/index.html","hash":"483af5e667339810912e0d811eb94a814744fdf6","modified":1541587095373},{"_id":"public/tags/stock/index.html","hash":"d4aef37e2925d085f71f2aa52afff1c226177042","modified":1541587095373},{"_id":"public/tags/maxProfit/index.html","hash":"57ccaeecf306aea66700a848ecfc190c6d7fe83e","modified":1541587095373},{"_id":"public/tags/HTTP/index.html","hash":"07dcb4bd1fbc71050431be628c59b46a25d01482","modified":1541587095373},{"_id":"public/tags/Network-Protocol/index.html","hash":"7bf26588b0f96816e500b4d1659bbd041f36d4ff","modified":1541587095373},{"_id":"public/tags/thinking/index.html","hash":"a6f494e3ff95f04f83ff4779eb4505cc17285a80","modified":1541587095373},{"_id":"public/tags/实用主义/index.html","hash":"12f0cb17105b8eb36e296e03aee8d1ceccc1497c","modified":1541587095373},{"_id":"public/tags/原则/index.html","hash":"08de119d36220c3314623c1fbb7d124e5d0d76b7","modified":1541587095373},{"_id":"public/tags/大话设计模式/index.html","hash":"77a89c3e606e98f77432a60b024709c2369c706a","modified":1541587095374},{"_id":"public/tags/东蒙/index.html","hash":"a4e69004f266d807752642422506dccc3f8a3db2","modified":1541587095374},{"_id":"public/tags/总结/index.html","hash":"38365f8c1e850452bf76ef533eded63b3f751a5e","modified":1541587095374},{"_id":"public/tags/Binary-Tree/index.html","hash":"bd55e192ebbb5f4a9f38f1070e18037063e7fcae","modified":1541587095374},{"_id":"public/tags/Serialization/index.html","hash":"88cd45b1bf1a39936d08fd78bb749b38641ce418","modified":1541587095374},{"_id":"public/tags/Recursion/index.html","hash":"33ea33b5bde92ed2f917ded7338b1157afbabac2","modified":1541587095374},{"_id":"public/tags/非递归方法/index.html","hash":"db09ae2d236560eb4f95550d041ef239c354259f","modified":1541587095374},{"_id":"public/tags/Dynamic-Programming/index.html","hash":"74615a0b9f1d36ba6b3bacb076ca4c8998443849","modified":1541587095374},{"_id":"public/tags/git/index.html","hash":"dbbbbff63ee928c02728df25f2130416566f9645","modified":1541587095374},{"_id":"public/tags/hexo/index.html","hash":"bda9cf7800fc876db6f44bef2cf002f4b979f58e","modified":1541587095374},{"_id":"public/tags/算法/index.html","hash":"8050b07474dac3552d124beecfcd65eb4a14b1ca","modified":1541587095374},{"_id":"public/tags/实习/index.html","hash":"921a25c05538222332d0742ec3e6fd04bb084750","modified":1541587095375},{"_id":"public/tags/next/index.html","hash":"4c408a705a605cfed853a1c8f15c15a1f5c71fce","modified":1541587095375},{"_id":"public/about/index.html","hash":"3ce5a1b37422525f987f823d9f0069ba8cbe09e8","modified":1541587095375},{"_id":"public/2018/11/06/Leetcode题解-【买卖股票最佳收益系列】/index.html","hash":"558832d0fa7d02bf24d29a0f0ed1b3be70a6214d","modified":1541587095375},{"_id":"public/2018/11/02/二叉树的序列化和反序列化/index.html","hash":"6a778c58c6cfefc286162004337c32bba5f21758","modified":1541587095375},{"_id":"public/2018/10/21/C-风格的字符串分割函数/index.html","hash":"81ecc0703e3e03d0fde81ed8be404f6992ab1225","modified":1541587095375},{"_id":"public/2018/10/20/二叉树遍历方法总结(C++实现)/index.html","hash":"6ab734dfed60ae7e9047231deadac9ee5d6b86a1","modified":1541587095375},{"_id":"public/2018/08/28/《The-Pragmatic-Programmer-程序员修炼之道》-读书整理/index.html","hash":"3222ddf2a7ccd22736d9ec3a848cf96ad9d69f63","modified":1541587095375},{"_id":"public/2018/08/27/What-Life-Should-Mean-to-You/index.html","hash":"0a7676e739d377e81e56d1b83d7ac2933b5d3347","modified":1541587095375},{"_id":"public/2018/08/21/《大话设计模式》读书整理/index.html","hash":"9757a758c511828bf74faa943fa2c0f42a2d4306","modified":1541587095375},{"_id":"public/2017/09/03/东蒙研途之一周年小记/index.html","hash":"929c6463b7764aa23962f76fb14df2e9a4b0d43d","modified":1541587095376},{"_id":"public/2017/07/22/Python基础学习之-TCP-UDP编程/index.html","hash":"2d7f55311d9155d257bbfd855448c40dbcdd9f64","modified":1541587095376},{"_id":"public/2017/07/16/Python基础学习之-初识正则表达式/index.html","hash":"aa1bda4f6b16ca8b9c5364f2f0bcce10c243b8f6","modified":1541587095376},{"_id":"public/2017/07/16/Python基础学习之-进程和线程/index.html","hash":"7f2078c340c8f14091e43c599c245808b60a2f7b","modified":1541587095378},{"_id":"public/2017/07/14/Python基础学习之-IO编程/index.html","hash":"3a4121f0d0d851b4154622b9a92042302f67cd26","modified":1541587095378},{"_id":"public/2017/07/11/Python基础学习之-错误、调试和测试/index.html","hash":"acd08a4b3470f12f9961ea89b8007a342e2017be","modified":1541587095378},{"_id":"public/2017/07/10/Python基础学习之-面向对象高级编程/index.html","hash":"9b4c04ceb3eca645b55713f03d75caa9e46ee1b1","modified":1541587095378},{"_id":"public/2017/07/09/Python基础学习之-高阶函数/index.html","hash":"ae960b0231a4418a7b60abd1125adc0e949ecbb6","modified":1541587095378},{"_id":"public/2017/07/08/Python基础学习之-高级特性/index.html","hash":"b320461a7d3243f1ebf4a8243079326544c6de39","modified":1541587095378},{"_id":"public/2017/07/07/Python基础学习之-list、tuple、dic-set/index.html","hash":"647da99a0eef7b090c322d9bbfe6104b1c5c0d5c","modified":1541587095379},{"_id":"public/2017/06/29/Network-Protocol总结-1-HTTP协议/index.html","hash":"188a0238627db5d35e87b1df35cc5ab248a13415","modified":1541587095379},{"_id":"public/2017/06/24/读《向死而生-我修的死亡学分》/index.html","hash":"01e5d8342ba3e926293423b8ec82dd0406353603","modified":1541587095379},{"_id":"public/2017/04/30/动态规划之最长公共子序列（longest common subsequence）问题的求解/index.html","hash":"4a50faf15343f7d3d4003f15c642dbbe164677e7","modified":1541587095379},{"_id":"public/2017/04/27/求解子数组之和的最大值及相应的子数组/index.html","hash":"d1d3d2233ee23b0254ee6bb88e8192969c1928ae","modified":1541587095379},{"_id":"public/2017/04/07/腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点/index.html","hash":"4179d86638236c10e0335a56774a2607e8ce81fb","modified":1541587095379},{"_id":"public/2017/03/26/JAVA学习之集合框架（上）/index.html","hash":"bfee397e2b6fdd8e770766642d63ebfd50473654","modified":1541587095379},{"_id":"public/2017/02/20/新环境下Hexo博客部署及维护/index.html","hash":"dbfbfa9bf63cfe38e144b76082a7644000a34df4","modified":1541587095380},{"_id":"public/2017/02/17/JAVA的学习之第五章/index.html","hash":"7bd1fd3cb9cd119d0a53389657e4c8e9a53f65a2","modified":1541587095380},{"_id":"public/2017/02/17/JAVA的学习之继承/index.html","hash":"0234017061362bd23b9be5858ff02087d56bcf71","modified":1541587095380},{"_id":"public/2017/02/16/JAVA的学习之对象与类/index.html","hash":"2860520664d1411460bf7f92b6f8ce9b6ffc5d42","modified":1541587095380},{"_id":"public/2017/02/16/JAVA的学习之第四章/index.html","hash":"d355ebfbddb0257564bbf50c3d26be055205cfef","modified":1541587095380},{"_id":"public/2016/06/05/转-用hexo搭建个人博客/index.html","hash":"a345ca8b9fa513d6b820af718a5b0df5c7ca07f1","modified":1541587095380},{"_id":"public/archives/index.html","hash":"72fe3b59ce680d800c3c7270899a80c843d08e44","modified":1541587095380},{"_id":"public/archives/page/2/index.html","hash":"8d2b2fcc6ba4bb51d334616a34a33e4e9e4a0170","modified":1541587095381},{"_id":"public/archives/page/3/index.html","hash":"2884043ab3934475be06c28d1ed66e52a071a647","modified":1541587095381},{"_id":"public/archives/page/4/index.html","hash":"b5bc3d32cb69af9e23552f09f19e0da67627b660","modified":1541587095381},{"_id":"public/archives/page/5/index.html","hash":"1eb20493f978a76face9a6d98050dcf3d9291589","modified":1541587095381},{"_id":"public/archives/page/6/index.html","hash":"bf234d8c52c6e519c619e514b384a501f0b181ac","modified":1541587095381},{"_id":"public/archives/2017/index.html","hash":"d9c42411c88b9c9a6c2f34897cb50f379ca5f45d","modified":1541587095381},{"_id":"public/archives/2017/page/2/index.html","hash":"90d1f627c0bc834839d216ea531eed8888e2f4ba","modified":1541587095381},{"_id":"public/archives/2017/page/3/index.html","hash":"60d58195734d61ccb377c91be8e36c3945017a7f","modified":1541587095382},{"_id":"public/archives/2017/page/4/index.html","hash":"4f5f0195b16e5e8261bcc585e709dce8332b6ec2","modified":1541587095383},{"_id":"public/archives/2017/02/index.html","hash":"63623f72cbec241c88b509214df917fcc7db8f04","modified":1541587095383},{"_id":"public/archives/2017/07/index.html","hash":"7560c16b6436f49eff7e9317609e8806a2f7bd7c","modified":1541587095383},{"_id":"public/archives/2017/07/page/2/index.html","hash":"7f0758de8d49f1576aaa81bf232eca0079f669d6","modified":1541587095383},{"_id":"public/archives/2018/index.html","hash":"2a1f6a3d2d25953e3fa9337a3c124b68beb7079b","modified":1541587095384},{"_id":"public/categories/Python/index.html","hash":"461e391da58b31bbb779d2e9e9e9b78b769ba46c","modified":1541587095384},{"_id":"public/categories/Python/page/2/index.html","hash":"44d7adbaed89bf9a21f89fd99f4bce004eb9d7d3","modified":1541587095384},{"_id":"public/index.html","hash":"8c9ebb2b6c474aca77ee758025bbfdf9839786d9","modified":1541587095384},{"_id":"public/page/2/index.html","hash":"2cb854bd01f2b8504c95b81fd64acac3af760907","modified":1541587095384},{"_id":"public/page/3/index.html","hash":"cac17a20f3a968054e1dc4e8f2c51def5722dc14","modified":1541587095384},{"_id":"public/page/4/index.html","hash":"1318a4b8952a342f02ff01af2e5636fee0b467fb","modified":1541587095384},{"_id":"public/page/5/index.html","hash":"a9ee69bf803bca17215b907ceeb24bef01e0a398","modified":1541587095384},{"_id":"public/page/6/index.html","hash":"da17e867770bdb2900a3a460d7069bda46a4fb1b","modified":1541587095385},{"_id":"public/tags/Python/index.html","hash":"30a47a887dfc8c4cf6d1dcddd7f955b19799ae95","modified":1541587095385},{"_id":"public/tags/Python/page/2/index.html","hash":"a06edc42a9b18420846e651084b1be9bc51e93c8","modified":1541587095385},{"_id":"public/tags/Programming-language/index.html","hash":"01541512ec5c55f486417467756f5ca0529d5399","modified":1541587095385},{"_id":"public/tags/Programming-language/page/2/index.html","hash":"ac3124792b192dadc7921ff9e0657ab6ffe07a0a","modified":1541587095385},{"_id":"public/uploads/avatar.png","hash":"35df14c2d54cb81634c5e14065eb1f2ba1e49cd0","modified":1541587095437},{"_id":"public/uploads/wechat-qcode.jpg","hash":"1aedf988e65cd502171934a95d38f8b1cf7d8c8e","modified":1541587095437},{"_id":"public/favicon.ico","hash":"38519972ef2d83070ea387142f1b2f1ce5b6f165","modified":1541587095437},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541587095437},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1541587095437},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1541587095437},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1541587095438},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1541587095438},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1541587095438},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1541587095438},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1541587095438},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1541587095438},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541587095438},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541587095438},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1541587095438},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1541587095438},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541587095438},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1541587095438},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1541587095439},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1541587095439},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1541587095439},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1541587095439},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1541587095439},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1541587095439},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1541587095439},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1541587095439},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1541587095441},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1541587095442},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1541587095442},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1541587095442},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1541587095442},{"_id":"public/uploads/wechat-reward-image.png","hash":"fe2fdd6111caa81c7adbf0167addaf217b77f2a7","modified":1541587096583},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541587096586},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541587096603},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1541587096623},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1541587096623},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1541587096623},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1541587096623},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1541587096623},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1541587096623},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541587096623},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1541587096623},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1541587096623},{"_id":"public/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1541587096623},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1541587096623},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1541587096623},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1541587096623},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1541587096623},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1541587096624},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1541587096624},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1541587096624},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1541587096624},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1541587096624},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1541587096624},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1541587096624},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541587096624},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541587096625},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541587096625},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1541587096625},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541587096625},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1541587096625},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1541587096625},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1541587096625},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541587096625},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541587096625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1541587096625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1541587096625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1541587096625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1541587096625},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1541587096625},{"_id":"public/css/main.css","hash":"33b2232fc0fd8e70543d81e7352f52cb49e97d91","modified":1541587096625},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1541587096625},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1541587096625},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1541587096625},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541587096625},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541587096626},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541587096626},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1541587096626},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1541587096626},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1541587096626},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1541587096626},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1541587096626},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1541587096626},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541587096626},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1541587096626},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1541587096626},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541587096626},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1541587096626},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1541587096627},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1541587096627},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541587096627},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1541587096628},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1541587096856}],"Category":[{"name":"编程语言","_id":"cjo715c5g00044ov12gkg0n0k"},{"name":"Java SE","_id":"cjo715c64000a4ov10mmm98y9"},{"name":"Leetcode题解","_id":"cjo715c6t000m4ov1ko52bcln"},{"name":"Computer Network","_id":"cjo715c70000t4ov1xty2h1z3"},{"name":"Python","_id":"cjo715c78000z4ov1ss7g4fq5"},{"name":"读书笔记","_id":"cjo715c9c00224ov1ttzex12m"},{"name":"设计模式","_id":"cjo715c9v002d4ov17y0qqh2m"},{"name":"个人随感","_id":"cjo715c9z002i4ov1ws3vjbmz"},{"name":"algorithm","_id":"cjo715ca4002m4ov18ey91dx7"},{"name":"Algorithms","_id":"cjo715cab002q4ov1dvz92bf1"},{"name":"hexo","_id":"cjo715cak002z4ov1qmqx3yf0"},{"name":"笔试面试","_id":"cjo715can00334ov11rgklzcj"}],"Data":[{"_id":"next","data":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}},{"_id":"各种注册","data":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}],"Page":[{"title":"关于","date":"2016-06-03T22:45:29.000Z","type":"about","comments":1,"_content":"# 一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\n\n# 为什么要**写博客？**\n- 知识整理，学习笔记；\n- 发表所见、所思、所感、所想；\n- 有目的的写，不追求数量，要务实，追求质量；\n- 记录自己学习、思考、总结的过程，分享自己的故事；\n- 记录成长，夯实人生的轨迹，培养持续力，做一件真正属于自己的事；\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-06-04 06:45:29\ntype: \"about\"\ncomments: true\n---\n# 一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\n\n# 为什么要**写博客？**\n- 知识整理，学习笔记；\n- 发表所见、所思、所感、所想；\n- 有目的的写，不追求数量，要务实，追求质量；\n- 记录自己学习、思考、总结的过程，分享自己的故事；\n- 记录成长，夯实人生的轨迹，培养持续力，做一件真正属于自己的事；\n","updated":"2017-05-19T10:43:58.686Z","path":"about/index.html","layout":"page","_id":"cjo715c5200014ov1toripgst","content":"<h1 id=\"一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\"><a href=\"#一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\" class=\"headerlink\" title=\"一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\"></a>一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！</h1><h1 id=\"为什么要写博客？\"><a href=\"#为什么要写博客？\" class=\"headerlink\" title=\"为什么要写博客？\"></a>为什么要<strong>写博客？</strong></h1><ul>\n<li>知识整理，学习笔记；</li>\n<li>发表所见、所思、所感、所想；</li>\n<li>有目的的写，不追求数量，要务实，追求质量；</li>\n<li>记录自己学习、思考、总结的过程，分享自己的故事；</li>\n<li>记录成长，夯实人生的轨迹，培养持续力，做一件真正属于自己的事；</li>\n</ul>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"","more":"<h1 id=\"一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\"><a href=\"#一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\" class=\"headerlink\" title=\"一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\"></a>一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！</h1><h1 id=\"为什么要写博客？\"><a href=\"#为什么要写博客？\" class=\"headerlink\" title=\"为什么要写博客？\"></a>为什么要<strong>写博客？</strong></h1><ul>\n<li>知识整理，学习笔记；</li>\n<li>发表所见、所思、所感、所想；</li>\n<li>有目的的写，不追求数量，要务实，追求质量；</li>\n<li>记录自己学习、思考、总结的过程，分享自己的故事；</li>\n<li>记录成长，夯实人生的轨迹，培养持续力，做一件真正属于自己的事；</li>\n</ul>\n"},{"title":"分类","date":"2016-06-03T22:46:24.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-06-04 06:46:24\ntype: \"categories\"\ncomments: true\n---\n","updated":"2017-02-20T11:51:29.315Z","path":"categories/index.html","layout":"page","_id":"cjo715c5800034ov1fyed7pia","content":"","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"","more":""},{"title":"All tags","date":"2016-06-03T22:49:39.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-06-04 06:49:39\ntype: \"tags\"\ncomments: true\t\n---\n","updated":"2017-02-20T11:51:29.318Z","path":"tags/index.html","layout":"page","_id":"cjo715c5u00074ov1rifpdyjp","content":"","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"","more":""}],"Post":[{"title":"C++风格的字符串分割函数","copyright":true,"date":"2018-10-21T10:42:30.000Z","_content":"刷题或者在线编程考试的时候需要对输入的字符串进行分割，封装后再进行处理；\n这里给出了一个通用的C++风格的字符串分割函数，适用不同的分割符。\n<!--more-->\n\n# 函数主体\n**前提说明：** 输入的字符串string中包含string 或者 int再加分割符。\n```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n//使用说明，res默认存储的是int 类型，可根据实际情况修改存储类型\nvoid splitString(const string& string, vector<int>& res, const char flag = ' ') {\n    res.clear();\n    istringstream iss(s);\n    string token=\"\";\n    while (std::getline(iss, token, flag)) {\n        res.push_back(std::stoi(token));\n    }\n    return;\n}\n\n```\n# stringstream类\n`<sstream>`库定义了三种类：`istringstream、ostringstream和stringstream`，分别用来进行流的输入、输出和输入输出操作。\n1. `stringstream::str(); returns a string object with a copy of the current contents of the stream.`\n2. `stringstream::str (const string& s); sets s as the contents of the stream, discarding any previous contents.`\n3. `stringstream清空，stringstream s; s.str(\"\");`\n4. 实现任意类型的转换的模板\n\n```cpp\n        template<typename out_type, typename in_value>\n        out_type convert(const in_value & t){\n　　　　　　stringstream stream;\n　　　　　　stream<<t;//向流中传值\n　　　　　　out_type result;//这里存储转换结果\n　　　　　　stream>>result;//向result中写入值\n　　　　　　return result;\n　　　　}\n```\n\n# getline()函数\n```cpp\n(1)\tistream& getline (istream& is, string& str, char delim);\n(2)\tistream& getline (istream& is, string& str);\n```\n官方解释：\n- extracts characters from is and stores them into str until the delimitation character delim is found (or the newline character, '\\n', for (2)).\n\n- The extraction also stops if the end of file is reached in is or if some other error occurs during the input operation.\n\n- If the delimiter is found, it is extracted and discarded (i.e. it is not stored and the next input operation will begin after it).\n\n- Note that any content in str before the call is replaced by the newly extracted sequence.\n\n- Each extracted character is appended to the string as if its member push_back was called.\n\n大意为：\n对于(1),输入流is按分割符delim分割 **对于(2),输入流is遇到回车换行（'\\n'）分割）**;\n分割段转换为string存入str，下一次调用，str的内容会被下一个分割段替换。\n\n# References\n- [getline的官方解释](http://www.cplusplus.com/reference/string/string/getline/)\n- [getline的几点疑惑](https://blog.csdn.net/u013660169/article/details/41726973)\n- [c++如何分割带有逗号的字符串](https://blog.csdn.net/u013024710/article/details/50514396)\n","source":"_posts/C-风格的字符串分割函数.md","raw":"---\ntitle: C++风格的字符串分割函数\ncopyright: true\ndate: 2018-10-21 18:42:30\ncategories: 编程语言\ntags:\n    - CPP\n    - 字符串分割（StringSplit）\n---\n刷题或者在线编程考试的时候需要对输入的字符串进行分割，封装后再进行处理；\n这里给出了一个通用的C++风格的字符串分割函数，适用不同的分割符。\n<!--more-->\n\n# 函数主体\n**前提说明：** 输入的字符串string中包含string 或者 int再加分割符。\n```cpp\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <vector>\n//使用说明，res默认存储的是int 类型，可根据实际情况修改存储类型\nvoid splitString(const string& string, vector<int>& res, const char flag = ' ') {\n    res.clear();\n    istringstream iss(s);\n    string token=\"\";\n    while (std::getline(iss, token, flag)) {\n        res.push_back(std::stoi(token));\n    }\n    return;\n}\n\n```\n# stringstream类\n`<sstream>`库定义了三种类：`istringstream、ostringstream和stringstream`，分别用来进行流的输入、输出和输入输出操作。\n1. `stringstream::str(); returns a string object with a copy of the current contents of the stream.`\n2. `stringstream::str (const string& s); sets s as the contents of the stream, discarding any previous contents.`\n3. `stringstream清空，stringstream s; s.str(\"\");`\n4. 实现任意类型的转换的模板\n\n```cpp\n        template<typename out_type, typename in_value>\n        out_type convert(const in_value & t){\n　　　　　　stringstream stream;\n　　　　　　stream<<t;//向流中传值\n　　　　　　out_type result;//这里存储转换结果\n　　　　　　stream>>result;//向result中写入值\n　　　　　　return result;\n　　　　}\n```\n\n# getline()函数\n```cpp\n(1)\tistream& getline (istream& is, string& str, char delim);\n(2)\tistream& getline (istream& is, string& str);\n```\n官方解释：\n- extracts characters from is and stores them into str until the delimitation character delim is found (or the newline character, '\\n', for (2)).\n\n- The extraction also stops if the end of file is reached in is or if some other error occurs during the input operation.\n\n- If the delimiter is found, it is extracted and discarded (i.e. it is not stored and the next input operation will begin after it).\n\n- Note that any content in str before the call is replaced by the newly extracted sequence.\n\n- Each extracted character is appended to the string as if its member push_back was called.\n\n大意为：\n对于(1),输入流is按分割符delim分割 **对于(2),输入流is遇到回车换行（'\\n'）分割）**;\n分割段转换为string存入str，下一次调用，str的内容会被下一个分割段替换。\n\n# References\n- [getline的官方解释](http://www.cplusplus.com/reference/string/string/getline/)\n- [getline的几点疑惑](https://blog.csdn.net/u013660169/article/details/41726973)\n- [c++如何分割带有逗号的字符串](https://blog.csdn.net/u013024710/article/details/50514396)\n","slug":"C-风格的字符串分割函数","published":1,"updated":"2018-10-21T11:44:56.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c4t00004ov1czyb1y7x","content":"<p>刷题或者在线编程考试的时候需要对输入的字符串进行分割，封装后再进行处理；<br>这里给出了一个通用的C++风格的字符串分割函数，适用不同的分割符。<br><a id=\"more\"></a></p>\n<h1 id=\"函数主体\"><a href=\"#函数主体\" class=\"headerlink\" title=\"函数主体\"></a>函数主体</h1><p><strong>前提说明：</strong> 输入的字符串string中包含string 或者 int再加分割符。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//使用说明，res默认存储的是int 类型，可根据实际情况修改存储类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splitString</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; res, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> flag = <span class=\"string\">' '</span>)</span> </span>&#123;</div><div class=\"line\">    res.clear();</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">iss</span><span class=\"params\">(s)</span></span>;</div><div class=\"line\">    <span class=\"built_in\">string</span> token=<span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">std</span>::getline(iss, token, flag)) &#123;</div><div class=\"line\">        res.push_back(<span class=\"built_in\">std</span>::stoi(token));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"stringstream类\"><a href=\"#stringstream类\" class=\"headerlink\" title=\"stringstream类\"></a>stringstream类</h1><p><code>&lt;sstream&gt;</code>库定义了三种类：<code>istringstream、ostringstream和stringstream</code>，分别用来进行流的输入、输出和输入输出操作。</p>\n<ol>\n<li><code>stringstream::str(); returns a string object with a copy of the current contents of the stream.</code></li>\n<li><code>stringstream::str (const string&amp; s); sets s as the contents of the stream, discarding any previous contents.</code></li>\n<li><code>stringstream清空，stringstream s; s.str(&quot;&quot;);</code></li>\n<li>实现任意类型的转换的模板</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> out_type, <span class=\"keyword\">typename</span> in_value&gt;</div><div class=\"line\"><span class=\"function\">out_type <span class=\"title\">convert</span><span class=\"params\">(<span class=\"keyword\">const</span> in_value &amp; t)</span></span>&#123;</div><div class=\"line\">　　　　　　<span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">　　　　　　stream&lt;&lt;t;<span class=\"comment\">//向流中传值</span></div><div class=\"line\">　　　　　　out_type result;<span class=\"comment\">//这里存储转换结果</span></div><div class=\"line\">　　　　　　stream&gt;&gt;result;<span class=\"comment\">//向result中写入值</span></div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> result;</div><div class=\"line\">　　　　&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"getline-函数\"><a href=\"#getline-函数\" class=\"headerlink\" title=\"getline()函数\"></a>getline()函数</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>)\t<span class=\"function\">istream&amp; <span class=\"title\">getline</span> <span class=\"params\">(istream&amp; is, <span class=\"built_in\">string</span>&amp; str, <span class=\"keyword\">char</span> delim)</span></span>;</div><div class=\"line\">(<span class=\"number\">2</span>)\t<span class=\"function\">istream&amp; <span class=\"title\">getline</span> <span class=\"params\">(istream&amp; is, <span class=\"built_in\">string</span>&amp; str)</span></span>;</div></pre></td></tr></table></figure>\n<p>官方解释：</p>\n<ul>\n<li><p>extracts characters from is and stores them into str until the delimitation character delim is found (or the newline character, ‘\\n’, for (2)).</p>\n</li>\n<li><p>The extraction also stops if the end of file is reached in is or if some other error occurs during the input operation.</p>\n</li>\n<li><p>If the delimiter is found, it is extracted and discarded (i.e. it is not stored and the next input operation will begin after it).</p>\n</li>\n<li><p>Note that any content in str before the call is replaced by the newly extracted sequence.</p>\n</li>\n<li><p>Each extracted character is appended to the string as if its member push_back was called.</p>\n</li>\n</ul>\n<p>大意为：<br>对于(1),输入流is按分割符delim分割 <strong>对于(2),输入流is遇到回车换行（’\\n’）分割）</strong>;<br>分割段转换为string存入str，下一次调用，str的内容会被下一个分割段替换。</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"http://www.cplusplus.com/reference/string/string/getline/\" target=\"_blank\" rel=\"external\">getline的官方解释</a></li>\n<li><a href=\"https://blog.csdn.net/u013660169/article/details/41726973\" target=\"_blank\" rel=\"external\">getline的几点疑惑</a></li>\n<li><a href=\"https://blog.csdn.net/u013024710/article/details/50514396\" target=\"_blank\" rel=\"external\">c++如何分割带有逗号的字符串</a></li>\n</ul>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>刷题或者在线编程考试的时候需要对输入的字符串进行分割，封装后再进行处理；<br>这里给出了一个通用的C++风格的字符串分割函数，适用不同的分割符。<br>","more":"</p>\n<h1 id=\"函数主体\"><a href=\"#函数主体\" class=\"headerlink\" title=\"函数主体\"></a>函数主体</h1><p><strong>前提说明：</strong> 输入的字符串string中包含string 或者 int再加分割符。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></div><div class=\"line\"><span class=\"comment\">//使用说明，res默认存储的是int 类型，可根据实际情况修改存储类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splitString</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; <span class=\"built_in\">string</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; res, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> flag = <span class=\"string\">' '</span>)</span> </span>&#123;</div><div class=\"line\">    res.clear();</div><div class=\"line\">    <span class=\"function\"><span class=\"built_in\">istringstream</span> <span class=\"title\">iss</span><span class=\"params\">(s)</span></span>;</div><div class=\"line\">    <span class=\"built_in\">string</span> token=<span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">std</span>::getline(iss, token, flag)) &#123;</div><div class=\"line\">        res.push_back(<span class=\"built_in\">std</span>::stoi(token));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"stringstream类\"><a href=\"#stringstream类\" class=\"headerlink\" title=\"stringstream类\"></a>stringstream类</h1><p><code>&lt;sstream&gt;</code>库定义了三种类：<code>istringstream、ostringstream和stringstream</code>，分别用来进行流的输入、输出和输入输出操作。</p>\n<ol>\n<li><code>stringstream::str(); returns a string object with a copy of the current contents of the stream.</code></li>\n<li><code>stringstream::str (const string&amp; s); sets s as the contents of the stream, discarding any previous contents.</code></li>\n<li><code>stringstream清空，stringstream s; s.str(&quot;&quot;);</code></li>\n<li>实现任意类型的转换的模板</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> out_type, <span class=\"keyword\">typename</span> in_value&gt;</div><div class=\"line\"><span class=\"function\">out_type <span class=\"title\">convert</span><span class=\"params\">(<span class=\"keyword\">const</span> in_value &amp; t)</span></span>&#123;</div><div class=\"line\">　　　　　　<span class=\"built_in\">stringstream</span> stream;</div><div class=\"line\">　　　　　　stream&lt;&lt;t;<span class=\"comment\">//向流中传值</span></div><div class=\"line\">　　　　　　out_type result;<span class=\"comment\">//这里存储转换结果</span></div><div class=\"line\">　　　　　　stream&gt;&gt;result;<span class=\"comment\">//向result中写入值</span></div><div class=\"line\">　　　　　　<span class=\"keyword\">return</span> result;</div><div class=\"line\">　　　　&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"getline-函数\"><a href=\"#getline-函数\" class=\"headerlink\" title=\"getline()函数\"></a>getline()函数</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"number\">1</span>)\t<span class=\"function\">istream&amp; <span class=\"title\">getline</span> <span class=\"params\">(istream&amp; is, <span class=\"built_in\">string</span>&amp; str, <span class=\"keyword\">char</span> delim)</span></span>;</div><div class=\"line\">(<span class=\"number\">2</span>)\t<span class=\"function\">istream&amp; <span class=\"title\">getline</span> <span class=\"params\">(istream&amp; is, <span class=\"built_in\">string</span>&amp; str)</span></span>;</div></pre></td></tr></table></figure>\n<p>官方解释：</p>\n<ul>\n<li><p>extracts characters from is and stores them into str until the delimitation character delim is found (or the newline character, ‘\\n’, for (2)).</p>\n</li>\n<li><p>The extraction also stops if the end of file is reached in is or if some other error occurs during the input operation.</p>\n</li>\n<li><p>If the delimiter is found, it is extracted and discarded (i.e. it is not stored and the next input operation will begin after it).</p>\n</li>\n<li><p>Note that any content in str before the call is replaced by the newly extracted sequence.</p>\n</li>\n<li><p>Each extracted character is appended to the string as if its member push_back was called.</p>\n</li>\n</ul>\n<p>大意为：<br>对于(1),输入流is按分割符delim分割 <strong>对于(2),输入流is遇到回车换行（’\\n’）分割）</strong>;<br>分割段转换为string存入str，下一次调用，str的内容会被下一个分割段替换。</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"http://www.cplusplus.com/reference/string/string/getline/\" target=\"_blank\" rel=\"external\">getline的官方解释</a></li>\n<li><a href=\"https://blog.csdn.net/u013660169/article/details/41726973\" target=\"_blank\" rel=\"external\">getline的几点疑惑</a></li>\n<li><a href=\"https://blog.csdn.net/u013024710/article/details/50514396\" target=\"_blank\" rel=\"external\">c++如何分割带有逗号的字符串</a></li>\n</ul>"},{"title":"Java学习之集合框架（上）","date":"2017-03-26T06:39:43.000Z","_content":"# 相关概念\n\n框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有**共同属性**的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。\n\n<!-- more -->\n\n# 集合的作用\n\n - 在类的内部对数据进行组织；\n - 简单而快速地搜索大数量的条目数据；\n - 提供统一的接口，将不同对象封装在一起，便于操作和管理；\n - 有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；\n - 有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。\n\n# 集合和数组的选择\n\n**为什么选择集合而不是数组？**\n 1. 数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；\n 2. 集合可以存储和操作数目不固定的一组数据；\n 3. 若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；\n 4. 查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。\n\n# 集合框架体系结构\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png)\n我们关注常用的几个接口：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png)\n- 从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；\n- 第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；\n- List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。\n\n# 代码演示\n\n**课程类（Course.java）**\n\n```java\npackage com.imooc.collection;\n\npublic class Course {\n\n    public String id;\n    public String name;\n\n    public Course(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n}\n\n```\n\n**学生类（Student.java)**\n\n```java\npackage com.imooc.collection;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Student {\n\n    public String id;\n    public String name;\n\n    public Set<Course> courses;//使用泛型规定courses的类型\n\n    public Student(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.courses = new HashSet<Course>();//用set的实现类HashSet进行初始化\n    }\n}\n```\n\n**ArrayList增删改查（ListTest.java）**\n\n```java\npackage com.imooc.collection;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\npublic class ListTest {\n\n    /*List中的元素是有序并且可以重复的*/\n    public List CoursesToSelect;\n\n    public ListTest(){\n        //注意List是个接口，不能直接将其实例化\n        this.CoursesToSelect = new ArrayList();\n    }\n\n    public void TestAdd(){\n\n        /*---普通add测试---*/\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        /*---指定位置add测试，下挤---*/\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);//添加到第一个位置，会将原有的挤下去。\n\n\n        /*---越界add测试---*/\n        //Course cr3 = new Course(\"3\",\"JAVA\");\n        //CoursesToSelect.add(3, cr3);\n        /*\n         * 注意！！\n         * 0，1，2均不报错\n         * 3报错：java.lang.IndexOutOfBoundsException  下标越界\n         * */\n\n\n        /*---普通组合add添加---*/\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        /*---指定位置组合add添加---*/\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testQueryAll(){  //查看全部元素\n        System.out.println(\"普通遍历List\");\n        for(int i=0;i<CoursesToSelect.size();i++){\n            /*对象存入集合都变成Object类型，取出时需要类型转换*/\n            Course tempCourse = (Course) CoursesToSelect.get(i);\n            System.out.println(\"课程\"+(i+1)+\":\"+tempCourse.name+\" 课程id:\"+tempCourse.id);\n        }\n    }\n\n    public void testIterator(){  //通过迭代器遍历List\n\n        System.out.println(\"通过迭代器遍历List\");\n        //迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在\n        //迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例\n        Iterator it = CoursesToSelect.iterator();\n        while(it.hasNext()){\n            Course cr = (Course) it.next();\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testForEach(){  //通过foreach遍历List\n\n        System.out.println(\"通过foreach遍历List\");\n        for(Object obj:CoursesToSelect){\n            Course cr = (Course)obj;\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testModify(){  //修改\n        CoursesToSelect.set(0, new Course(\"100\",\"Spring\"));\n    }\n\n    public void testRemove(){  //删除，记住每删除一次，元素都会上移\n\n        CoursesToSelect.remove(1);//删除的第一种方式\n\n        /*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/\n        Course cr = (Course) CoursesToSelect.get(2);   //删除的第二种方式\n        CoursesToSelect.remove(cr);\n\n        Course[] courseList =\n                {(Course) CoursesToSelect.get(1),\n                (Course) CoursesToSelect.get(2),\n                (Course) CoursesToSelect.get(3)};\n        CoursesToSelect.removeAll(Arrays.asList(courseList));   //删除的第三种方式，removeAll\n\n    }\n\n    public static void main(String[] args){\n\n        ListTest lt = new ListTest();\n        lt.TestAdd();\n        lt.testQueryAll();\n        lt.testIterator();\n        lt.testModify();  //修改课程\n        lt.testRemove();  //删除课程\n        lt.testForEach();\n    }\n}\n```\n\n**Set集合的基本用法(SetTest.java)**\n\n```java\npackage com.imooc.collection;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SetTest {\n\n    public List<Course> CoursesToSelect;\n    public SetTest(){\n        this.CoursesToSelect = new ArrayList<Course>();//待选课程是使用数组序列存放\n    }\n\n    public void TestAdd(){\n\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);\n\n\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testForEach(){  \n        for(Course course:CoursesToSelect){\n            System.out.println(\"课程:\"+course.name+\" 课程id:\"+course.id);\n        }\n    }\n\n    public static void main(String[] args){\n        SetTest st = new SetTest();\n        st.TestAdd();\n        st.testForEach();\n\n        //创建一个学生对象\n        Student stu1= new Student(\"1\",\"小明\");\n        System.out.println(\"欢迎\"+stu1.name+\"选课！\");\n\n        Scanner sc = new Scanner(System.in);\n        for(int i=0;i<3;i++){\n\n            System.out.println(\"请输入课程ID\");\n            String courseId = sc.next();\n\n            for(Course course:st.CoursesToSelect){\n                if(course.id.equals(courseId)){  //字符串是对象,其equals()方法比较的是实际内容！\n                    stu1.courses.add(course); //将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）\n                }\n            }\n        }\n\n        st.testForEachForSet(stu1);\n    }\n\n    public void testForEachForSet(Student stu){\n\n        //打印输出学生所选的课程\n        //遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。\n        //Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）\n        //Set是可以添加空对象的，null\n        //Set没有提供像List那样的set()方法，因为Set集合是无序的\n\n        System.out.println(\"共选择了\"+stu.courses.size()+\"门课程\");\n        for(Course course:stu.courses){\n            System.out.println(stu.name+\"选择了\"+course.name+\" 课程id:\"+course.id);\n        }\n        //没有介绍的关于Set的remove(),size()等方法，大致跟List一样\n    }\n}\n\n```\n-EOF\n\n# 参考博文\n[Java集合框架](http://blog.csdn.net/qq_33290787/article/details/51781036)\n[Java - 集合框架完全解析](http://www.open-open.com/lib/view/open1474167415464.html)\n","source":"_posts/JAVA学习之集合框架（上）.md","raw":"---\ntitle: Java学习之集合框架（上）\ndate: 2017-03-26 14:39:43\ncategories: Java SE\ntags: Java\n---\n# 相关概念\n\n框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有**共同属性**的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。\n\n<!-- more -->\n\n# 集合的作用\n\n - 在类的内部对数据进行组织；\n - 简单而快速地搜索大数量的条目数据；\n - 提供统一的接口，将不同对象封装在一起，便于操作和管理；\n - 有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；\n - 有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。\n\n# 集合和数组的选择\n\n**为什么选择集合而不是数组？**\n 1. 数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；\n 2. 集合可以存储和操作数目不固定的一组数据；\n 3. 若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；\n 4. 查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。\n\n# 集合框架体系结构\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png)\n我们关注常用的几个接口：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png)\n- 从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；\n- 第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；\n- List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。\n\n# 代码演示\n\n**课程类（Course.java）**\n\n```java\npackage com.imooc.collection;\n\npublic class Course {\n\n    public String id;\n    public String name;\n\n    public Course(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n}\n\n```\n\n**学生类（Student.java)**\n\n```java\npackage com.imooc.collection;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Student {\n\n    public String id;\n    public String name;\n\n    public Set<Course> courses;//使用泛型规定courses的类型\n\n    public Student(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.courses = new HashSet<Course>();//用set的实现类HashSet进行初始化\n    }\n}\n```\n\n**ArrayList增删改查（ListTest.java）**\n\n```java\npackage com.imooc.collection;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\npublic class ListTest {\n\n    /*List中的元素是有序并且可以重复的*/\n    public List CoursesToSelect;\n\n    public ListTest(){\n        //注意List是个接口，不能直接将其实例化\n        this.CoursesToSelect = new ArrayList();\n    }\n\n    public void TestAdd(){\n\n        /*---普通add测试---*/\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        /*---指定位置add测试，下挤---*/\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);//添加到第一个位置，会将原有的挤下去。\n\n\n        /*---越界add测试---*/\n        //Course cr3 = new Course(\"3\",\"JAVA\");\n        //CoursesToSelect.add(3, cr3);\n        /*\n         * 注意！！\n         * 0，1，2均不报错\n         * 3报错：java.lang.IndexOutOfBoundsException  下标越界\n         * */\n\n\n        /*---普通组合add添加---*/\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        /*---指定位置组合add添加---*/\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testQueryAll(){  //查看全部元素\n        System.out.println(\"普通遍历List\");\n        for(int i=0;i<CoursesToSelect.size();i++){\n            /*对象存入集合都变成Object类型，取出时需要类型转换*/\n            Course tempCourse = (Course) CoursesToSelect.get(i);\n            System.out.println(\"课程\"+(i+1)+\":\"+tempCourse.name+\" 课程id:\"+tempCourse.id);\n        }\n    }\n\n    public void testIterator(){  //通过迭代器遍历List\n\n        System.out.println(\"通过迭代器遍历List\");\n        //迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在\n        //迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例\n        Iterator it = CoursesToSelect.iterator();\n        while(it.hasNext()){\n            Course cr = (Course) it.next();\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testForEach(){  //通过foreach遍历List\n\n        System.out.println(\"通过foreach遍历List\");\n        for(Object obj:CoursesToSelect){\n            Course cr = (Course)obj;\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testModify(){  //修改\n        CoursesToSelect.set(0, new Course(\"100\",\"Spring\"));\n    }\n\n    public void testRemove(){  //删除，记住每删除一次，元素都会上移\n\n        CoursesToSelect.remove(1);//删除的第一种方式\n\n        /*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/\n        Course cr = (Course) CoursesToSelect.get(2);   //删除的第二种方式\n        CoursesToSelect.remove(cr);\n\n        Course[] courseList =\n                {(Course) CoursesToSelect.get(1),\n                (Course) CoursesToSelect.get(2),\n                (Course) CoursesToSelect.get(3)};\n        CoursesToSelect.removeAll(Arrays.asList(courseList));   //删除的第三种方式，removeAll\n\n    }\n\n    public static void main(String[] args){\n\n        ListTest lt = new ListTest();\n        lt.TestAdd();\n        lt.testQueryAll();\n        lt.testIterator();\n        lt.testModify();  //修改课程\n        lt.testRemove();  //删除课程\n        lt.testForEach();\n    }\n}\n```\n\n**Set集合的基本用法(SetTest.java)**\n\n```java\npackage com.imooc.collection;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SetTest {\n\n    public List<Course> CoursesToSelect;\n    public SetTest(){\n        this.CoursesToSelect = new ArrayList<Course>();//待选课程是使用数组序列存放\n    }\n\n    public void TestAdd(){\n\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);\n\n\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testForEach(){  \n        for(Course course:CoursesToSelect){\n            System.out.println(\"课程:\"+course.name+\" 课程id:\"+course.id);\n        }\n    }\n\n    public static void main(String[] args){\n        SetTest st = new SetTest();\n        st.TestAdd();\n        st.testForEach();\n\n        //创建一个学生对象\n        Student stu1= new Student(\"1\",\"小明\");\n        System.out.println(\"欢迎\"+stu1.name+\"选课！\");\n\n        Scanner sc = new Scanner(System.in);\n        for(int i=0;i<3;i++){\n\n            System.out.println(\"请输入课程ID\");\n            String courseId = sc.next();\n\n            for(Course course:st.CoursesToSelect){\n                if(course.id.equals(courseId)){  //字符串是对象,其equals()方法比较的是实际内容！\n                    stu1.courses.add(course); //将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）\n                }\n            }\n        }\n\n        st.testForEachForSet(stu1);\n    }\n\n    public void testForEachForSet(Student stu){\n\n        //打印输出学生所选的课程\n        //遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。\n        //Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）\n        //Set是可以添加空对象的，null\n        //Set没有提供像List那样的set()方法，因为Set集合是无序的\n\n        System.out.println(\"共选择了\"+stu.courses.size()+\"门课程\");\n        for(Course course:stu.courses){\n            System.out.println(stu.name+\"选择了\"+course.name+\" 课程id:\"+course.id);\n        }\n        //没有介绍的关于Set的remove(),size()等方法，大致跟List一样\n    }\n}\n\n```\n-EOF\n\n# 参考博文\n[Java集合框架](http://blog.csdn.net/qq_33290787/article/details/51781036)\n[Java - 集合框架完全解析](http://www.open-open.com/lib/view/open1474167415464.html)\n","slug":"JAVA学习之集合框架（上）","published":1,"updated":"2017-03-27T09:10:53.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c5500024ov10njniy5t","content":"<h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><p>框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有<strong>共同属性</strong>的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。</p>\n<a id=\"more\"></a>\n<h1 id=\"集合的作用\"><a href=\"#集合的作用\" class=\"headerlink\" title=\"集合的作用\"></a>集合的作用</h1><ul>\n<li>在类的内部对数据进行组织；</li>\n<li>简单而快速地搜索大数量的条目数据；</li>\n<li>提供统一的接口，将不同对象封装在一起，便于操作和管理；</li>\n<li>有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；</li>\n<li>有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。</li>\n</ul>\n<h1 id=\"集合和数组的选择\"><a href=\"#集合和数组的选择\" class=\"headerlink\" title=\"集合和数组的选择\"></a>集合和数组的选择</h1><p><strong>为什么选择集合而不是数组？</strong></p>\n<ol>\n<li>数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；</li>\n<li>集合可以存储和操作数目不固定的一组数据；</li>\n<li>若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；</li>\n<li>查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。</li>\n</ol>\n<h1 id=\"集合框架体系结构\"><a href=\"#集合框架体系结构\" class=\"headerlink\" title=\"集合框架体系结构\"></a>集合框架体系结构</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png\" alt=\"\"><br>我们关注常用的几个接口：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png\" alt=\"\"></p>\n<ul>\n<li>从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；</li>\n<li>第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；</li>\n<li>List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。</li>\n</ul>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p><strong>课程类（Course.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Course</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String id;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Course</span><span class=\"params\">(String id, String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>学生类（Student.java)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String id;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Set&lt;Course&gt; courses;<span class=\"comment\">//使用泛型规定courses的类型</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String id, String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.courses = <span class=\"keyword\">new</span> HashSet&lt;Course&gt;();<span class=\"comment\">//用set的实现类HashSet进行初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ArrayList增删改查（ListTest.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*List中的元素是有序并且可以重复的*/</span></div><div class=\"line\">    <span class=\"keyword\">public</span> List CoursesToSelect;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//注意List是个接口，不能直接将其实例化</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.CoursesToSelect = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestAdd</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---普通add测试---*/</span></div><div class=\"line\">        Course cr1 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"数据结构\"</span>);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---指定位置add测试，下挤---*/</span></div><div class=\"line\">        Course cr2 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"常用算法\"</span>);</div><div class=\"line\">        CoursesToSelect.add(<span class=\"number\">0</span>, cr2);<span class=\"comment\">//添加到第一个位置，会将原有的挤下去。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---越界add测试---*/</span></div><div class=\"line\">        <span class=\"comment\">//Course cr3 = new Course(\"3\",\"JAVA\");</span></div><div class=\"line\">        <span class=\"comment\">//CoursesToSelect.add(3, cr3);</span></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * 注意！！</div><div class=\"line\">         * 0，1，2均不报错</div><div class=\"line\">         * 3报错：java.lang.IndexOutOfBoundsException  下标越界</div><div class=\"line\">         * */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---普通组合add添加---*/</span></div><div class=\"line\">        Course[] courseList = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Javaweb\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"数据库\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---指定位置组合add添加---*/</span></div><div class=\"line\">        Course[] courseList2 = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"高等数学\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"计算机网络\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(<span class=\"number\">2</span>,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQueryAll</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//查看全部元素</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"普通遍历List\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;CoursesToSelect.size();i++)&#123;</div><div class=\"line\">            <span class=\"comment\">/*对象存入集合都变成Object类型，取出时需要类型转换*/</span></div><div class=\"line\">            Course tempCourse = (Course) CoursesToSelect.get(i);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程\"</span>+(i+<span class=\"number\">1</span>)+<span class=\"string\">\":\"</span>+tempCourse.name+<span class=\"string\">\" 课程id:\"</span>+tempCourse.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testIterator</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//通过迭代器遍历List</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"通过迭代器遍历List\"</span>);</div><div class=\"line\">        <span class=\"comment\">//迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在</span></div><div class=\"line\">        <span class=\"comment\">//迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例</span></div><div class=\"line\">        Iterator it = CoursesToSelect.iterator();</div><div class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">            Course cr = (Course) it.next();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+cr.name+<span class=\"string\">\" 课程id:\"</span>+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEach</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//通过foreach遍历List</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"通过foreach遍历List\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(Object obj:CoursesToSelect)&#123;</div><div class=\"line\">            Course cr = (Course)obj;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+cr.name+<span class=\"string\">\" 课程id:\"</span>+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testModify</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//修改</span></div><div class=\"line\">        CoursesToSelect.set(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> Course(<span class=\"string\">\"100\"</span>,<span class=\"string\">\"Spring\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRemove</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//删除，记住每删除一次，元素都会上移</span></div><div class=\"line\"></div><div class=\"line\">        CoursesToSelect.remove(<span class=\"number\">1</span>);<span class=\"comment\">//删除的第一种方式</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/</span></div><div class=\"line\">        Course cr = (Course) CoursesToSelect.get(<span class=\"number\">2</span>);   <span class=\"comment\">//删除的第二种方式</span></div><div class=\"line\">        CoursesToSelect.remove(cr);</div><div class=\"line\"></div><div class=\"line\">        Course[] courseList =</div><div class=\"line\">                &#123;(Course) CoursesToSelect.get(<span class=\"number\">1</span>),</div><div class=\"line\">                (Course) CoursesToSelect.get(<span class=\"number\">2</span>),</div><div class=\"line\">                (Course) CoursesToSelect.get(<span class=\"number\">3</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.removeAll(Arrays.asList(courseList));   <span class=\"comment\">//删除的第三种方式，removeAll</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        ListTest lt = <span class=\"keyword\">new</span> ListTest();</div><div class=\"line\">        lt.TestAdd();</div><div class=\"line\">        lt.testQueryAll();</div><div class=\"line\">        lt.testIterator();</div><div class=\"line\">        lt.testModify();  <span class=\"comment\">//修改课程</span></div><div class=\"line\">        lt.testRemove();  <span class=\"comment\">//删除课程</span></div><div class=\"line\">        lt.testForEach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Set集合的基本用法(SetTest.java)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> List&lt;Course&gt; CoursesToSelect;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SetTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.CoursesToSelect = <span class=\"keyword\">new</span> ArrayList&lt;Course&gt;();<span class=\"comment\">//待选课程是使用数组序列存放</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestAdd</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Course cr1 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"数据结构\"</span>);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course cr2 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"常用算法\"</span>);</div><div class=\"line\">        CoursesToSelect.add(<span class=\"number\">0</span>, cr2);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Javaweb\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"数据库\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList2 = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"高等数学\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"计算机网络\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(<span class=\"number\">2</span>,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEach</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(Course course:CoursesToSelect)&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+course.name+<span class=\"string\">\" 课程id:\"</span>+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        SetTest st = <span class=\"keyword\">new</span> SetTest();</div><div class=\"line\">        st.TestAdd();</div><div class=\"line\">        st.testForEach();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建一个学生对象</span></div><div class=\"line\">        Student stu1= <span class=\"keyword\">new</span> Student(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"小明\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"欢迎\"</span>+stu1.name+<span class=\"string\">\"选课！\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">            System.out.println(<span class=\"string\">\"请输入课程ID\"</span>);</div><div class=\"line\">            String courseId = sc.next();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(Course course:st.CoursesToSelect)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(course.id.equals(courseId))&#123;  <span class=\"comment\">//字符串是对象,其equals()方法比较的是实际内容！</span></div><div class=\"line\">                    stu1.courses.add(course); <span class=\"comment\">//将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        st.testForEachForSet(stu1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEachForSet</span><span class=\"params\">(Student stu)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//打印输出学生所选的课程</span></div><div class=\"line\">        <span class=\"comment\">//遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。</span></div><div class=\"line\">        <span class=\"comment\">//Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）</span></div><div class=\"line\">        <span class=\"comment\">//Set是可以添加空对象的，null</span></div><div class=\"line\">        <span class=\"comment\">//Set没有提供像List那样的set()方法，因为Set集合是无序的</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"共选择了\"</span>+stu.courses.size()+<span class=\"string\">\"门课程\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(Course course:stu.courses)&#123;</div><div class=\"line\">            System.out.println(stu.name+<span class=\"string\">\"选择了\"</span>+course.name+<span class=\"string\">\" 课程id:\"</span>+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//没有介绍的关于Set的remove(),size()等方法，大致跟List一样</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>-EOF</p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p><a href=\"http://blog.csdn.net/qq_33290787/article/details/51781036\" target=\"_blank\" rel=\"external\">Java集合框架</a><br><a href=\"http://www.open-open.com/lib/view/open1474167415464.html\" target=\"_blank\" rel=\"external\">Java - 集合框架完全解析</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><p>框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有<strong>共同属性</strong>的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。</p>","more":"<h1 id=\"集合的作用\"><a href=\"#集合的作用\" class=\"headerlink\" title=\"集合的作用\"></a>集合的作用</h1><ul>\n<li>在类的内部对数据进行组织；</li>\n<li>简单而快速地搜索大数量的条目数据；</li>\n<li>提供统一的接口，将不同对象封装在一起，便于操作和管理；</li>\n<li>有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；</li>\n<li>有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。</li>\n</ul>\n<h1 id=\"集合和数组的选择\"><a href=\"#集合和数组的选择\" class=\"headerlink\" title=\"集合和数组的选择\"></a>集合和数组的选择</h1><p><strong>为什么选择集合而不是数组？</strong></p>\n<ol>\n<li>数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；</li>\n<li>集合可以存储和操作数目不固定的一组数据；</li>\n<li>若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；</li>\n<li>查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。</li>\n</ol>\n<h1 id=\"集合框架体系结构\"><a href=\"#集合框架体系结构\" class=\"headerlink\" title=\"集合框架体系结构\"></a>集合框架体系结构</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png\" alt=\"\"><br>我们关注常用的几个接口：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png\" alt=\"\"></p>\n<ul>\n<li>从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；</li>\n<li>第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；</li>\n<li>List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。</li>\n</ul>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p><strong>课程类（Course.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Course</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String id;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Course</span><span class=\"params\">(String id, String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>学生类（Student.java)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String id;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Set&lt;Course&gt; courses;<span class=\"comment\">//使用泛型规定courses的类型</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String id, String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.courses = <span class=\"keyword\">new</span> HashSet&lt;Course&gt;();<span class=\"comment\">//用set的实现类HashSet进行初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ArrayList增删改查（ListTest.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*List中的元素是有序并且可以重复的*/</span></div><div class=\"line\">    <span class=\"keyword\">public</span> List CoursesToSelect;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//注意List是个接口，不能直接将其实例化</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.CoursesToSelect = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestAdd</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---普通add测试---*/</span></div><div class=\"line\">        Course cr1 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"数据结构\"</span>);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---指定位置add测试，下挤---*/</span></div><div class=\"line\">        Course cr2 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"常用算法\"</span>);</div><div class=\"line\">        CoursesToSelect.add(<span class=\"number\">0</span>, cr2);<span class=\"comment\">//添加到第一个位置，会将原有的挤下去。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---越界add测试---*/</span></div><div class=\"line\">        <span class=\"comment\">//Course cr3 = new Course(\"3\",\"JAVA\");</span></div><div class=\"line\">        <span class=\"comment\">//CoursesToSelect.add(3, cr3);</span></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * 注意！！</div><div class=\"line\">         * 0，1，2均不报错</div><div class=\"line\">         * 3报错：java.lang.IndexOutOfBoundsException  下标越界</div><div class=\"line\">         * */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---普通组合add添加---*/</span></div><div class=\"line\">        Course[] courseList = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Javaweb\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"数据库\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---指定位置组合add添加---*/</span></div><div class=\"line\">        Course[] courseList2 = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"高等数学\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"计算机网络\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(<span class=\"number\">2</span>,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQueryAll</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//查看全部元素</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"普通遍历List\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;CoursesToSelect.size();i++)&#123;</div><div class=\"line\">            <span class=\"comment\">/*对象存入集合都变成Object类型，取出时需要类型转换*/</span></div><div class=\"line\">            Course tempCourse = (Course) CoursesToSelect.get(i);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程\"</span>+(i+<span class=\"number\">1</span>)+<span class=\"string\">\":\"</span>+tempCourse.name+<span class=\"string\">\" 课程id:\"</span>+tempCourse.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testIterator</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//通过迭代器遍历List</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"通过迭代器遍历List\"</span>);</div><div class=\"line\">        <span class=\"comment\">//迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在</span></div><div class=\"line\">        <span class=\"comment\">//迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例</span></div><div class=\"line\">        Iterator it = CoursesToSelect.iterator();</div><div class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">            Course cr = (Course) it.next();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+cr.name+<span class=\"string\">\" 课程id:\"</span>+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEach</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//通过foreach遍历List</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"通过foreach遍历List\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(Object obj:CoursesToSelect)&#123;</div><div class=\"line\">            Course cr = (Course)obj;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+cr.name+<span class=\"string\">\" 课程id:\"</span>+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testModify</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//修改</span></div><div class=\"line\">        CoursesToSelect.set(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> Course(<span class=\"string\">\"100\"</span>,<span class=\"string\">\"Spring\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRemove</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//删除，记住每删除一次，元素都会上移</span></div><div class=\"line\"></div><div class=\"line\">        CoursesToSelect.remove(<span class=\"number\">1</span>);<span class=\"comment\">//删除的第一种方式</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/</span></div><div class=\"line\">        Course cr = (Course) CoursesToSelect.get(<span class=\"number\">2</span>);   <span class=\"comment\">//删除的第二种方式</span></div><div class=\"line\">        CoursesToSelect.remove(cr);</div><div class=\"line\"></div><div class=\"line\">        Course[] courseList =</div><div class=\"line\">                &#123;(Course) CoursesToSelect.get(<span class=\"number\">1</span>),</div><div class=\"line\">                (Course) CoursesToSelect.get(<span class=\"number\">2</span>),</div><div class=\"line\">                (Course) CoursesToSelect.get(<span class=\"number\">3</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.removeAll(Arrays.asList(courseList));   <span class=\"comment\">//删除的第三种方式，removeAll</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        ListTest lt = <span class=\"keyword\">new</span> ListTest();</div><div class=\"line\">        lt.TestAdd();</div><div class=\"line\">        lt.testQueryAll();</div><div class=\"line\">        lt.testIterator();</div><div class=\"line\">        lt.testModify();  <span class=\"comment\">//修改课程</span></div><div class=\"line\">        lt.testRemove();  <span class=\"comment\">//删除课程</span></div><div class=\"line\">        lt.testForEach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Set集合的基本用法(SetTest.java)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> List&lt;Course&gt; CoursesToSelect;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SetTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.CoursesToSelect = <span class=\"keyword\">new</span> ArrayList&lt;Course&gt;();<span class=\"comment\">//待选课程是使用数组序列存放</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestAdd</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Course cr1 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"数据结构\"</span>);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course cr2 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"常用算法\"</span>);</div><div class=\"line\">        CoursesToSelect.add(<span class=\"number\">0</span>, cr2);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Javaweb\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"数据库\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList2 = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"高等数学\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"计算机网络\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(<span class=\"number\">2</span>,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEach</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(Course course:CoursesToSelect)&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+course.name+<span class=\"string\">\" 课程id:\"</span>+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        SetTest st = <span class=\"keyword\">new</span> SetTest();</div><div class=\"line\">        st.TestAdd();</div><div class=\"line\">        st.testForEach();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建一个学生对象</span></div><div class=\"line\">        Student stu1= <span class=\"keyword\">new</span> Student(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"小明\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"欢迎\"</span>+stu1.name+<span class=\"string\">\"选课！\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">            System.out.println(<span class=\"string\">\"请输入课程ID\"</span>);</div><div class=\"line\">            String courseId = sc.next();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(Course course:st.CoursesToSelect)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(course.id.equals(courseId))&#123;  <span class=\"comment\">//字符串是对象,其equals()方法比较的是实际内容！</span></div><div class=\"line\">                    stu1.courses.add(course); <span class=\"comment\">//将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        st.testForEachForSet(stu1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEachForSet</span><span class=\"params\">(Student stu)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//打印输出学生所选的课程</span></div><div class=\"line\">        <span class=\"comment\">//遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。</span></div><div class=\"line\">        <span class=\"comment\">//Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）</span></div><div class=\"line\">        <span class=\"comment\">//Set是可以添加空对象的，null</span></div><div class=\"line\">        <span class=\"comment\">//Set没有提供像List那样的set()方法，因为Set集合是无序的</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"共选择了\"</span>+stu.courses.size()+<span class=\"string\">\"门课程\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(Course course:stu.courses)&#123;</div><div class=\"line\">            System.out.println(stu.name+<span class=\"string\">\"选择了\"</span>+course.name+<span class=\"string\">\" 课程id:\"</span>+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//没有介绍的关于Set的remove(),size()等方法，大致跟List一样</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>-EOF</p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p><a href=\"http://blog.csdn.net/qq_33290787/article/details/51781036\" target=\"_blank\" rel=\"external\">Java集合框架</a><br><a href=\"http://www.open-open.com/lib/view/open1474167415464.html\" target=\"_blank\" rel=\"external\">Java - 集合框架完全解析</a></p>"},{"title":"JAVA的学习之对象与类","date":"2017-02-16T13:01:13.000Z","_content":"\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n\n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n\n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```\n","source":"_posts/JAVA的学习之对象与类.md","raw":"---\ntitle: JAVA的学习之对象与类\ndate: 2017-02-16 21:01:13\ncategories: Java SE\ntags: JAVA\n---\n\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n\n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n\n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```\n","slug":"JAVA的学习之对象与类","published":1,"updated":"2017-04-28T03:45:56.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c5t00064ov1tf794idy","content":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>\n<a id=\"more\"></a>\n<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>","more":"<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JAVA的学习之第五章","date":"2017-02-16T16:00:00.000Z","_content":"\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n","source":"_posts/JAVA的学习之第五章.md","raw":"---\ntitle: JAVA的学习之第五章\ndate: 2017-02-17\ntags: JAVA\n---\n\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n","slug":"JAVA的学习之第五章","published":1,"updated":"2017-06-25T12:37:35.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c5y00084ov1zec2f7v5","content":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br><a id=\"more\"></a></p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br>","more":"</p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>"},{"title":"JAVA的学习之第四章","date":"2017-02-16T13:01:13.000Z","_content":"\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n \n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n \n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```","source":"_posts/JAVA的学习之第四章.md","raw":"---\ntitle: JAVA的学习之第四章\ndate: 2017-02-16 21:01:13\ntags: JAVA\n---\n\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n \n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n \n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```","slug":"JAVA的学习之第四章","published":1,"updated":"2017-02-20T11:51:29.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c6100094ov1zd7k15ch","content":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>\n<a id=\"more\"></a>\n<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>","more":"<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JAVA的学习之继承","date":"2017-02-16T16:00:00.000Z","_content":"\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n","source":"_posts/JAVA的学习之继承.md","raw":"---\ntitle: JAVA的学习之继承\ndate: 2017-02-17\ncategories: Java SE\ntags: JAVA\n---\n\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n","slug":"JAVA的学习之继承","published":1,"updated":"2017-04-28T03:49:10.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c69000c4ov1ob7mxpmz","content":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br><a id=\"more\"></a></p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br>","more":"</p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>"},{"title":"Leetcode题解:【买卖股票最佳收益系列】","copyright":true,"date":"2018-11-06T07:59:36.000Z","_content":"\nleetcode中关于买卖股票最佳时机的题目有：\n\n- [121.Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)\n- [122.Best Time to Buy and Sell Stock 2](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/)\n- [123.Best Time to Buy and Sell Stock 3](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/)\n- [188.Best Time to Buy and Sell Stock 4](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/)\n- [309.Best Time to Buy and Sell Stock with Cooldown](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/)\n- [714.Best Time to Buy and Sell Stock with Transaction Fee](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)\n\n除了第122使用贪心法，其他题目可以使用动态规划解决。\n<!--more-->\n\n# 121.Best Time to Buy and Sell stock\n**使用动态规划：** 只能买卖一次，求最大收益。\n从前往后扫描，最大化第i天的收益即第i天的价格 - 第i天及之前的最低价格 **（可以当天买当天卖）**，因此可以使用一个数组minPrice记录第i天及之前的最低价格，maxProfit记录最大收益，即有状态转移方程：\n\n- `minPrice[i]=min{minPrice[i-1], prices[i]}`\n- `maxProfit=max{maxProfit, prices[i]-minPrice[i]}`\n\n复杂度：\n- 时间：o(n)\n- 空间：o(n)\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if(prices.size()<2){\n            return 0;\n        }\n        vector<int> minPrice(prices.size());\n        minPrice[0] = prices[0];\n        int maxProfit = 0;\n        for(int i =1;i<prices.size();++i){\n            minPrice[i] = min(minPrice[i-1],prices[i]);\n            maxProfit = max(maxProfit,prices[i]-minPrice[i]);\n        }\n        return maxProfit;\n    }\n};\n```\n\n# 122. Best Time to Buy and Sell Stock 2\n**使用贪心法：** 可以交易多次，但每次只能买卖一只股票，手里只能有一手的股票，买之前必须将手里的股票卖出去。\n从前往后扫描，只要当天的价格比前一天的价格高，就可以卖出去，获取收益，同时当天也可以买入。然后贪心累加即为结果。\n复杂度：\n- 时间：o(n)\n- 空间：o(1)\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if(prices.size()<2){\n            return 0;\n        }\n\n        int maxProfit = 0;\n        for(int i =1; i<prices.size(); ++i){\n            int diff = prices[i] - prices[i-1];\n            if(diff > 0){\n                maxProfit += diff;\n            }\n        }\n        return maxProfit;\n    }\n};\n```\n# 123. Best Time to Buy and Sell Stock 3\n**使用动态规划:** 最多交易两次，求最大收益。\n思路：使用二分法，将`prices[0...n]`分为`prices[0...i] and prices[i+1..n]`，对两部分使用题号为121的方法，求的最大值\n然后，顺序扫描一遍，求的最大值。\n\n方法一：直接复用题号为121的方法，迭代进行求解,会超时；\n复杂度：\n- 时间：o(n^2)\n- 空间：o(n)\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.size()<2) {\n            return 0;\n        }\n        int maxProfit = 0;\n        for (int i = 0; i < prices.size(); i++) {\n            vector<int> firstPart(prices.begin(),prices.begin()+i);\n            vector<int> secondPart(prices.begin()+i,prices.end());\n            int first = maxProfitHelper(firstPart);//o(n^2)\n            int second = maxProfitHelper(secondPart);//o(n^2))\n            maxProfit = max(maxProfit, first+second);\n        }\n        return maxProfit;\n    }\nprivate:\n    int maxProfitHelper(vector<int>& prices) {\n        if(prices.size()<2){\n            return 0;\n        }\n        int* minPrice = new int[prices.size()];\n        minPrice[0] = prices[0];\n        int maxProfit = 0;\n        for(int i =1;i<prices.size();++i){\n            minPrice[i] = min(minPrice[i-1],prices[i]);\n            maxProfit = max(maxProfit,prices[i]-minPrice[i]);\n        }\n        delete[] minPrice;\n        return maxProfit;\n    }\n};\n```\n方法二：对方法一进行改良，使用两个数组将第一部分和第二部分的收益保存到数组，然后依次遍历求结果\n复杂度：\n- 时间o(n);\n- 空间o(n);\n\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.size()<2) {\n            return 0;\n        }\n\n        int len = prices.size();\n        vector<int> first(len,0);\n        vector<int> second(len,0);\n\n        //从前往后扫描，第i天卖出\n        int min_buy = prices[0];\n        for (int i = 1; i < len; i++) {\n            min_buy = min(min_buy, prices[i]);\n            first[i] = max(first[i-1], prices[i]-min_buy);\n        }\n\n        //从后往前扫描，第i天买入\n        int max_sold = prices[len-1];\n        for (int i = len-2; i >= 0; i--) {\n            max_sold = max(max_sold, prices[i]);\n            second[i] = max(second[i+1], max_sold - prices[i]);\n        }\n\n        //从头到尾扫描，前后两部分相加。求出最大利润\n        int maxProfit = 0;\n        for (int i = 0; i < len; i++) {\n            maxProfit = max(maxProfit, first[i] + second[i]);\n        }\n\n        return maxProfit;\n    }\n};\n```\n# 188. Best Time to Buy and Sell Stock 4\n**使用动态规划法：** 与**题122**不同的是，股票**最多交易k次**，求最大收益。\n\n使用 **局部最优和全局最优解法，**定义两个二维数组：\n\n- local[i][j]: 表示当前到达第i天，最多可以进行j次交易，且最后一次交易(卖出)在当天卖出的局部最大利润\n- global[i][j]: 表示当前到达第i天，最多可以进行j次交易的全局最大利润\n- diff = prices[i] - prices[i-1]： 表示第i天与第i-1天的价格差\n两者的区别是local[i][j]表明 ** 第i天一定有交易（卖出）发生，** 可以是第i-1天买入，第i天卖出，也可以是第i天买入，并在当天（第i天）卖出。\n\n分析过程：\n1. 局部最优 = max{情况1，情况2}\n    - 情况1：第i-1天已经**恰好**交易j次`(local[i-1][j])`; 而第i天必须有交易（卖出）发生，那么如果第i-1天买入，第i天卖出，并\"不会\"增加交易次数【这里比较难理解，可以这样理解：第一天买入，第二天卖出，然后第二天又买入，第三天卖出的情形和第一天买入，第三天卖出的情形获利效果是一样的，因为没有交易费。】，因此`情况1 = local[i-1][j] + diff`\n    - 情况2：在第i-1天**已经**交易了j-1次`global[i-1][j-1]`; 为了满足 **“第i天过后进行了j次交易，并且第i天必须有交易发生”** 的条件；我们可以选择两种方式：1)第i-1天买入，第i天卖出，收益为diff; 2)第i天买入，第i天卖出，收益为0。 因此`情形2 = global[i-1][j-1]+max{diff, 0}`\n\n\n2. 全局最优 = max{情况1，情况2}； 全局最优`global[i][j]`表示的是第i天最多进行了j次交易的最大收益\n    - 情况1：第i天过后恰好满足j次交易，也就是第i天一定有交易（卖出）发生，此时为局部最优，因此`情况1 = local[i][j]`\n    - 情况2：第i-1天过后已经满足了j次交易，第i天没有没有交易（卖出）发生，因此为前一个的全局最优，`情况2 = global[i-1][j]`\n\n因此可以得到的状态转移方程为：\n- `local[i][j] = max{local[i-1][j] + diff, global[i-1][j-1]+max{diff,0}}`\n- `global[i][j] = max{local[i][j], global[i-1][j]}`\n\n注意：**当k>=days时，** 该情况退化成题122的情形，可以交易多次的情况。\n\n因此我们想要的结果是:`global[days-1][k]` 表示的是最后一天结束后，交易k次的全局最大利润。\n\n复杂度：\n- 时间：o(n*k)\n- 空间：o(n*k)\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(int k, vector<int>& prices) {\n        if (prices.size()<2) {\n            return 0;\n        }\n\n        int days = prices.size();\n        if (k >= days) {\n            return maxProfitHelper(prices);\n        }\n        //初始化二维数组都为0\n        vector<vector<int>> local(days);\n        vector<vector<int>> global(days);\n        for (int i = 0; i < days; i++) {\n            local[i].resize(k+1);\n            global[i].resize(k+1);\n        }\n\n        //迭代计算\n        for (int i = 1; i < days; i++) {\n            int diff = prices[i] - prices[i-1];\n            for (int j = 1; j <= k; j++) {\n                local[i][j] = max(local[i-1][j] + diff, global[i-1][j-1] + max(diff,0));\n                global[i][j] = max(local[i][j], global[i-1][j]);\n            }\n        }\n        return global[days-1][k];\n    }\n\nprivate:\n    int maxProfitHelper(vector<int>& prices) {\n        if(prices.size()<2){\n            return 0;\n        }\n\n        int maxProfit = 0;\n        for(int i =1; i<prices.size(); ++i){\n            int diff = prices[i] - prices[i-1];\n            if(diff > 0){\n                maxProfit += diff;\n            }\n        }\n        return maxProfit;\n    }\n};\n```\n# 309.Best Time to Buy and Sell Stock with Cooldown\n**使用动态规划：** 与122不同的是，这题限制了sell之后需要cooldown一天，然后才能buy，即操作为`[buy, sell, cooldown, buy, sell]`.\n分析：\n维护三个数组：\n- buy[i]表示的是第i天及之前的最后一个操作为买，此时的最大利润\n- sell[i]表示的是第i天及之前的最后一个动作为卖，此时的最大利润\n- rest[i]表示的是第i天及之前的最后一个动作为cooldown或者没有任何动作，此时的最大利润\n\n可以得到三个状态转移方程为：\n- buy[i]=max{buy[i-1], rest[i-1]-prices[i]} 表示的是：1）第i天没有动作，和第i-1天一样, 都是持股的状态；2）第i天买入，转为持股状态\n- sell[i]=max{sell[i-1], buy[i-1]+prices[i]} 表示的是：1）第i天没有动作，和第i-1天一样，都是未持股状态；2）第i-1天买入，第i天卖出，在第i天转为未持股状态\n- rest[i]=max{sell[i-1], buy[i-1], rest[i-1]} 表示的是：过渡期的最大利润有三种状态\n\n由于存在冷冻区，在rest的状态的最大利润可以表示为：`rest[i] = sell[i-1]` ;因此状态转移方程可以精简为：\n- buy[i] = max{buy[i-1], sell[i-2]-prices[i]} 也就是说前天卖了股票，今天才能买\n- sell[i] = max{sell[i-1], buy[i-1]+prices[i]}\n\n因此我们想要的结果是:`maxProfit = sell[n-1]`表示的是最后一天结束后，未持股状态下的最大收益。\n还有一种方法是使用**有限状态机**的方法，也很清晰，详见 **References 3。**\n\n复杂度：\n- 时间o(n)\n- 空间o(n)\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n<2) {\n            return 0;\n        }\n        vector<int> buy(n,0);\n        vector<int> sell(n,0);\n\n        //赋予初始值\n        buy[0]= - prices[0];\n        sell[0]=0;\n        for (int i = 1; i < n; i++) {\n            sell[i] = max(sell[i-1], buy[i-1]+prices[i]);\n            if (i >= 2) {\n                buy[i] = max(buy[i-1], sell[i-2]-prices[i]);\n            }else{\n                buy[i] = max(buy[i-1], -prices[i]);\n            }\n        }\n        return sell[n-1];\n    }\n};\n```\n# 714.Best Time to Buy and Sell Stock with Transaction Fee\n**使用动态规划：**与122题不同的是，加了限制条件，每次买卖有交易费，求最大的收益。\n分析：账户状态只有两种情况，要么满仓持有股票，要么空仓不持股票；\n维护两个变量数组：\n- unhold[i]:表示第i天账户不持有股票，此时的最大收益。只有两种情况：1）与第i-1天一样，空仓不持有股票；2）第i-1天持有股票，第i天卖出股票，空仓。\n- hold[i]:表示第i天持有股票，此时的最大利润。也只有两种情况：1）与第i-1天一样，满仓持有股票；2）第i-1天不持有股票，第i天买入股票，满仓。\n\n因此有状态转移方程：\n- unhold[i]=max{unhold[i-1], hold[i-1]+prices[i]-fee}\n- hold[i]=max{hold[i-1], unhold[i-1]-prices[i]}\n\n初始值为：\n- unhold[0] = 0\n- hold[0]= - prices[0]\n\n因此我们想要的结果是：`unhold[n-1]`, 表示的是最后一天结束后不持有股票的最大收益。\n\n复杂度：\n- 时间o(n)\n- 空间o(n)\n\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.size();\n        if (n<2) {\n            return 0;\n        }\n        vector<int> unhold(n,0);\n        vector<int> hold(n,0);\n\n        //赋予初始值\n        unhold[0] = 0;\n        hold[0] = -prices[0];\n\n        for (int i = 1; i < n; i++) {\n            unhold[i] = max(unhold[i-1], hold[i-1] + prices[i] - fee);\n            hold[i] = max(hold[i-1], unhold[i-1] - prices[i]);\n        }\n        return unhold[n-1];\n    }\n};\n```\n# References\n- [Leetcode动态规划](https://blog.csdn.net/dr_unknown/article/details/51939121)\n- [Best Time to Buy and Sell Stock with Cooldown](https://blog.csdn.net/u013325815/article/details/52829802?locationNum=12&fps=1)\n- [动态规划中五道股票买卖题目详解](https://segmentfault.com/a/1190000006672807)\n","source":"_posts/Leetcode题解-【买卖股票最佳收益系列】.md","raw":"---\ntitle: 'Leetcode题解:【买卖股票最佳收益系列】'\ncopyright: true\ndate: 2018-11-06 15:59:36\ncategories: Leetcode题解\ntags:\n    - stock\n    - maxProfit\n---\n\nleetcode中关于买卖股票最佳时机的题目有：\n\n- [121.Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)\n- [122.Best Time to Buy and Sell Stock 2](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/)\n- [123.Best Time to Buy and Sell Stock 3](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/)\n- [188.Best Time to Buy and Sell Stock 4](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/)\n- [309.Best Time to Buy and Sell Stock with Cooldown](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/)\n- [714.Best Time to Buy and Sell Stock with Transaction Fee](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/)\n\n除了第122使用贪心法，其他题目可以使用动态规划解决。\n<!--more-->\n\n# 121.Best Time to Buy and Sell stock\n**使用动态规划：** 只能买卖一次，求最大收益。\n从前往后扫描，最大化第i天的收益即第i天的价格 - 第i天及之前的最低价格 **（可以当天买当天卖）**，因此可以使用一个数组minPrice记录第i天及之前的最低价格，maxProfit记录最大收益，即有状态转移方程：\n\n- `minPrice[i]=min{minPrice[i-1], prices[i]}`\n- `maxProfit=max{maxProfit, prices[i]-minPrice[i]}`\n\n复杂度：\n- 时间：o(n)\n- 空间：o(n)\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if(prices.size()<2){\n            return 0;\n        }\n        vector<int> minPrice(prices.size());\n        minPrice[0] = prices[0];\n        int maxProfit = 0;\n        for(int i =1;i<prices.size();++i){\n            minPrice[i] = min(minPrice[i-1],prices[i]);\n            maxProfit = max(maxProfit,prices[i]-minPrice[i]);\n        }\n        return maxProfit;\n    }\n};\n```\n\n# 122. Best Time to Buy and Sell Stock 2\n**使用贪心法：** 可以交易多次，但每次只能买卖一只股票，手里只能有一手的股票，买之前必须将手里的股票卖出去。\n从前往后扫描，只要当天的价格比前一天的价格高，就可以卖出去，获取收益，同时当天也可以买入。然后贪心累加即为结果。\n复杂度：\n- 时间：o(n)\n- 空间：o(1)\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if(prices.size()<2){\n            return 0;\n        }\n\n        int maxProfit = 0;\n        for(int i =1; i<prices.size(); ++i){\n            int diff = prices[i] - prices[i-1];\n            if(diff > 0){\n                maxProfit += diff;\n            }\n        }\n        return maxProfit;\n    }\n};\n```\n# 123. Best Time to Buy and Sell Stock 3\n**使用动态规划:** 最多交易两次，求最大收益。\n思路：使用二分法，将`prices[0...n]`分为`prices[0...i] and prices[i+1..n]`，对两部分使用题号为121的方法，求的最大值\n然后，顺序扫描一遍，求的最大值。\n\n方法一：直接复用题号为121的方法，迭代进行求解,会超时；\n复杂度：\n- 时间：o(n^2)\n- 空间：o(n)\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.size()<2) {\n            return 0;\n        }\n        int maxProfit = 0;\n        for (int i = 0; i < prices.size(); i++) {\n            vector<int> firstPart(prices.begin(),prices.begin()+i);\n            vector<int> secondPart(prices.begin()+i,prices.end());\n            int first = maxProfitHelper(firstPart);//o(n^2)\n            int second = maxProfitHelper(secondPart);//o(n^2))\n            maxProfit = max(maxProfit, first+second);\n        }\n        return maxProfit;\n    }\nprivate:\n    int maxProfitHelper(vector<int>& prices) {\n        if(prices.size()<2){\n            return 0;\n        }\n        int* minPrice = new int[prices.size()];\n        minPrice[0] = prices[0];\n        int maxProfit = 0;\n        for(int i =1;i<prices.size();++i){\n            minPrice[i] = min(minPrice[i-1],prices[i]);\n            maxProfit = max(maxProfit,prices[i]-minPrice[i]);\n        }\n        delete[] minPrice;\n        return maxProfit;\n    }\n};\n```\n方法二：对方法一进行改良，使用两个数组将第一部分和第二部分的收益保存到数组，然后依次遍历求结果\n复杂度：\n- 时间o(n);\n- 空间o(n);\n\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if (prices.size()<2) {\n            return 0;\n        }\n\n        int len = prices.size();\n        vector<int> first(len,0);\n        vector<int> second(len,0);\n\n        //从前往后扫描，第i天卖出\n        int min_buy = prices[0];\n        for (int i = 1; i < len; i++) {\n            min_buy = min(min_buy, prices[i]);\n            first[i] = max(first[i-1], prices[i]-min_buy);\n        }\n\n        //从后往前扫描，第i天买入\n        int max_sold = prices[len-1];\n        for (int i = len-2; i >= 0; i--) {\n            max_sold = max(max_sold, prices[i]);\n            second[i] = max(second[i+1], max_sold - prices[i]);\n        }\n\n        //从头到尾扫描，前后两部分相加。求出最大利润\n        int maxProfit = 0;\n        for (int i = 0; i < len; i++) {\n            maxProfit = max(maxProfit, first[i] + second[i]);\n        }\n\n        return maxProfit;\n    }\n};\n```\n# 188. Best Time to Buy and Sell Stock 4\n**使用动态规划法：** 与**题122**不同的是，股票**最多交易k次**，求最大收益。\n\n使用 **局部最优和全局最优解法，**定义两个二维数组：\n\n- local[i][j]: 表示当前到达第i天，最多可以进行j次交易，且最后一次交易(卖出)在当天卖出的局部最大利润\n- global[i][j]: 表示当前到达第i天，最多可以进行j次交易的全局最大利润\n- diff = prices[i] - prices[i-1]： 表示第i天与第i-1天的价格差\n两者的区别是local[i][j]表明 ** 第i天一定有交易（卖出）发生，** 可以是第i-1天买入，第i天卖出，也可以是第i天买入，并在当天（第i天）卖出。\n\n分析过程：\n1. 局部最优 = max{情况1，情况2}\n    - 情况1：第i-1天已经**恰好**交易j次`(local[i-1][j])`; 而第i天必须有交易（卖出）发生，那么如果第i-1天买入，第i天卖出，并\"不会\"增加交易次数【这里比较难理解，可以这样理解：第一天买入，第二天卖出，然后第二天又买入，第三天卖出的情形和第一天买入，第三天卖出的情形获利效果是一样的，因为没有交易费。】，因此`情况1 = local[i-1][j] + diff`\n    - 情况2：在第i-1天**已经**交易了j-1次`global[i-1][j-1]`; 为了满足 **“第i天过后进行了j次交易，并且第i天必须有交易发生”** 的条件；我们可以选择两种方式：1)第i-1天买入，第i天卖出，收益为diff; 2)第i天买入，第i天卖出，收益为0。 因此`情形2 = global[i-1][j-1]+max{diff, 0}`\n\n\n2. 全局最优 = max{情况1，情况2}； 全局最优`global[i][j]`表示的是第i天最多进行了j次交易的最大收益\n    - 情况1：第i天过后恰好满足j次交易，也就是第i天一定有交易（卖出）发生，此时为局部最优，因此`情况1 = local[i][j]`\n    - 情况2：第i-1天过后已经满足了j次交易，第i天没有没有交易（卖出）发生，因此为前一个的全局最优，`情况2 = global[i-1][j]`\n\n因此可以得到的状态转移方程为：\n- `local[i][j] = max{local[i-1][j] + diff, global[i-1][j-1]+max{diff,0}}`\n- `global[i][j] = max{local[i][j], global[i-1][j]}`\n\n注意：**当k>=days时，** 该情况退化成题122的情形，可以交易多次的情况。\n\n因此我们想要的结果是:`global[days-1][k]` 表示的是最后一天结束后，交易k次的全局最大利润。\n\n复杂度：\n- 时间：o(n*k)\n- 空间：o(n*k)\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(int k, vector<int>& prices) {\n        if (prices.size()<2) {\n            return 0;\n        }\n\n        int days = prices.size();\n        if (k >= days) {\n            return maxProfitHelper(prices);\n        }\n        //初始化二维数组都为0\n        vector<vector<int>> local(days);\n        vector<vector<int>> global(days);\n        for (int i = 0; i < days; i++) {\n            local[i].resize(k+1);\n            global[i].resize(k+1);\n        }\n\n        //迭代计算\n        for (int i = 1; i < days; i++) {\n            int diff = prices[i] - prices[i-1];\n            for (int j = 1; j <= k; j++) {\n                local[i][j] = max(local[i-1][j] + diff, global[i-1][j-1] + max(diff,0));\n                global[i][j] = max(local[i][j], global[i-1][j]);\n            }\n        }\n        return global[days-1][k];\n    }\n\nprivate:\n    int maxProfitHelper(vector<int>& prices) {\n        if(prices.size()<2){\n            return 0;\n        }\n\n        int maxProfit = 0;\n        for(int i =1; i<prices.size(); ++i){\n            int diff = prices[i] - prices[i-1];\n            if(diff > 0){\n                maxProfit += diff;\n            }\n        }\n        return maxProfit;\n    }\n};\n```\n# 309.Best Time to Buy and Sell Stock with Cooldown\n**使用动态规划：** 与122不同的是，这题限制了sell之后需要cooldown一天，然后才能buy，即操作为`[buy, sell, cooldown, buy, sell]`.\n分析：\n维护三个数组：\n- buy[i]表示的是第i天及之前的最后一个操作为买，此时的最大利润\n- sell[i]表示的是第i天及之前的最后一个动作为卖，此时的最大利润\n- rest[i]表示的是第i天及之前的最后一个动作为cooldown或者没有任何动作，此时的最大利润\n\n可以得到三个状态转移方程为：\n- buy[i]=max{buy[i-1], rest[i-1]-prices[i]} 表示的是：1）第i天没有动作，和第i-1天一样, 都是持股的状态；2）第i天买入，转为持股状态\n- sell[i]=max{sell[i-1], buy[i-1]+prices[i]} 表示的是：1）第i天没有动作，和第i-1天一样，都是未持股状态；2）第i-1天买入，第i天卖出，在第i天转为未持股状态\n- rest[i]=max{sell[i-1], buy[i-1], rest[i-1]} 表示的是：过渡期的最大利润有三种状态\n\n由于存在冷冻区，在rest的状态的最大利润可以表示为：`rest[i] = sell[i-1]` ;因此状态转移方程可以精简为：\n- buy[i] = max{buy[i-1], sell[i-2]-prices[i]} 也就是说前天卖了股票，今天才能买\n- sell[i] = max{sell[i-1], buy[i-1]+prices[i]}\n\n因此我们想要的结果是:`maxProfit = sell[n-1]`表示的是最后一天结束后，未持股状态下的最大收益。\n还有一种方法是使用**有限状态机**的方法，也很清晰，详见 **References 3。**\n\n复杂度：\n- 时间o(n)\n- 空间o(n)\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int n = prices.size();\n        if (n<2) {\n            return 0;\n        }\n        vector<int> buy(n,0);\n        vector<int> sell(n,0);\n\n        //赋予初始值\n        buy[0]= - prices[0];\n        sell[0]=0;\n        for (int i = 1; i < n; i++) {\n            sell[i] = max(sell[i-1], buy[i-1]+prices[i]);\n            if (i >= 2) {\n                buy[i] = max(buy[i-1], sell[i-2]-prices[i]);\n            }else{\n                buy[i] = max(buy[i-1], -prices[i]);\n            }\n        }\n        return sell[n-1];\n    }\n};\n```\n# 714.Best Time to Buy and Sell Stock with Transaction Fee\n**使用动态规划：**与122题不同的是，加了限制条件，每次买卖有交易费，求最大的收益。\n分析：账户状态只有两种情况，要么满仓持有股票，要么空仓不持股票；\n维护两个变量数组：\n- unhold[i]:表示第i天账户不持有股票，此时的最大收益。只有两种情况：1）与第i-1天一样，空仓不持有股票；2）第i-1天持有股票，第i天卖出股票，空仓。\n- hold[i]:表示第i天持有股票，此时的最大利润。也只有两种情况：1）与第i-1天一样，满仓持有股票；2）第i-1天不持有股票，第i天买入股票，满仓。\n\n因此有状态转移方程：\n- unhold[i]=max{unhold[i-1], hold[i-1]+prices[i]-fee}\n- hold[i]=max{hold[i-1], unhold[i-1]-prices[i]}\n\n初始值为：\n- unhold[0] = 0\n- hold[0]= - prices[0]\n\n因此我们想要的结果是：`unhold[n-1]`, 表示的是最后一天结束后不持有股票的最大收益。\n\n复杂度：\n- 时间o(n)\n- 空间o(n)\n\n\n```cpp\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.size();\n        if (n<2) {\n            return 0;\n        }\n        vector<int> unhold(n,0);\n        vector<int> hold(n,0);\n\n        //赋予初始值\n        unhold[0] = 0;\n        hold[0] = -prices[0];\n\n        for (int i = 1; i < n; i++) {\n            unhold[i] = max(unhold[i-1], hold[i-1] + prices[i] - fee);\n            hold[i] = max(hold[i-1], unhold[i-1] - prices[i]);\n        }\n        return unhold[n-1];\n    }\n};\n```\n# References\n- [Leetcode动态规划](https://blog.csdn.net/dr_unknown/article/details/51939121)\n- [Best Time to Buy and Sell Stock with Cooldown](https://blog.csdn.net/u013325815/article/details/52829802?locationNum=12&fps=1)\n- [动态规划中五道股票买卖题目详解](https://segmentfault.com/a/1190000006672807)\n","slug":"Leetcode题解-【买卖股票最佳收益系列】","published":1,"updated":"2018-11-07T10:37:29.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c6b000e4ov16rmeu3b2","content":"<p>leetcode中关于买卖股票最佳时机的题目有：</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" rel=\"external\">121.Best Time to Buy and Sell Stock</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\" target=\"_blank\" rel=\"external\">122.Best Time to Buy and Sell Stock 2</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\" target=\"_blank\" rel=\"external\">123.Best Time to Buy and Sell Stock 3</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\" target=\"_blank\" rel=\"external\">188.Best Time to Buy and Sell Stock 4</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\" target=\"_blank\" rel=\"external\">309.Best Time to Buy and Sell Stock with Cooldown</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\" target=\"_blank\" rel=\"external\">714.Best Time to Buy and Sell Stock with Transaction Fee</a></li>\n</ul>\n<p>除了第122使用贪心法，其他题目可以使用动态规划解决。<br><a id=\"more\"></a></p>\n<h1 id=\"121-Best-Time-to-Buy-and-Sell-stock\"><a href=\"#121-Best-Time-to-Buy-and-Sell-stock\" class=\"headerlink\" title=\"121.Best Time to Buy and Sell stock\"></a>121.Best Time to Buy and Sell stock</h1><p><strong>使用动态规划：</strong> 只能买卖一次，求最大收益。<br>从前往后扫描，最大化第i天的收益即第i天的价格 - 第i天及之前的最低价格 <strong>（可以当天买当天卖）</strong>，因此可以使用一个数组minPrice记录第i天及之前的最低价格，maxProfit记录最大收益，即有状态转移方程：</p>\n<ul>\n<li><code>minPrice[i]=min{minPrice[i-1], prices[i]}</code></li>\n<li><code>maxProfit=max{maxProfit, prices[i]-minPrice[i]}</code></li>\n</ul>\n<p>复杂度：</p>\n<ul>\n<li>时间：o(n)</li>\n<li>空间：o(n)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prices.size()&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minPrice(prices.size());</div><div class=\"line\">        minPrice[<span class=\"number\">0</span>] = prices[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>;i&lt;prices.size();++i)&#123;</div><div class=\"line\">            minPrice[i] = min(minPrice[i<span class=\"number\">-1</span>],prices[i]);</div><div class=\"line\">            maxProfit = max(maxProfit,prices[i]-minPrice[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"122-Best-Time-to-Buy-and-Sell-Stock-2\"><a href=\"#122-Best-Time-to-Buy-and-Sell-Stock-2\" class=\"headerlink\" title=\"122. Best Time to Buy and Sell Stock 2\"></a>122. Best Time to Buy and Sell Stock 2</h1><p><strong>使用贪心法：</strong> 可以交易多次，但每次只能买卖一只股票，手里只能有一手的股票，买之前必须将手里的股票卖出去。<br>从前往后扫描，只要当天的价格比前一天的价格高，就可以卖出去，获取收益，同时当天也可以买入。然后贪心累加即为结果。<br>复杂度：</p>\n<ul>\n<li>时间：o(n)</li>\n<li>空间：o(1)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prices.size()&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i&lt;prices.size(); ++i)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> diff = prices[i] - prices[i<span class=\"number\">-1</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span>(diff &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                maxProfit += diff;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"123-Best-Time-to-Buy-and-Sell-Stock-3\"><a href=\"#123-Best-Time-to-Buy-and-Sell-Stock-3\" class=\"headerlink\" title=\"123. Best Time to Buy and Sell Stock 3\"></a>123. Best Time to Buy and Sell Stock 3</h1><p><strong>使用动态规划:</strong> 最多交易两次，求最大收益。<br>思路：使用二分法，将<code>prices[0...n]</code>分为<code>prices[0...i] and prices[i+1..n]</code>，对两部分使用题号为121的方法，求的最大值<br>然后，顺序扫描一遍，求的最大值。</p>\n<p>方法一：直接复用题号为121的方法，迭代进行求解,会超时；<br>复杂度：</p>\n<ul>\n<li>时间：o(n^2)</li>\n<li>空间：o(n)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prices.size()&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prices.size(); i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; firstPart(prices.begin(),prices.begin()+i);</div><div class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; secondPart(prices.begin()+i,prices.end());</div><div class=\"line\">            <span class=\"keyword\">int</span> first = maxProfitHelper(firstPart);<span class=\"comment\">//o(n^2)</span></div><div class=\"line\">            <span class=\"keyword\">int</span> second = maxProfitHelper(secondPart);<span class=\"comment\">//o(n^2))</span></div><div class=\"line\">            maxProfit = max(maxProfit, first+second);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfitHelper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prices.size()&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span>* minPrice = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[prices.size()];</div><div class=\"line\">        minPrice[<span class=\"number\">0</span>] = prices[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>;i&lt;prices.size();++i)&#123;</div><div class=\"line\">            minPrice[i] = min(minPrice[i<span class=\"number\">-1</span>],prices[i]);</div><div class=\"line\">            maxProfit = max(maxProfit,prices[i]-minPrice[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">delete</span>[] minPrice;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>方法二：对方法一进行改良，使用两个数组将第一部分和第二部分的收益保存到数组，然后依次遍历求结果<br>复杂度：</p>\n<ul>\n<li>时间o(n);</li>\n<li>空间o(n);</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prices.size()&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> len = prices.size();</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; first(len,<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; second(len,<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//从前往后扫描，第i天卖出</span></div><div class=\"line\">        <span class=\"keyword\">int</span> min_buy = prices[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">            min_buy = min(min_buy, prices[i]);</div><div class=\"line\">            first[i] = max(first[i<span class=\"number\">-1</span>], prices[i]-min_buy);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//从后往前扫描，第i天买入</span></div><div class=\"line\">        <span class=\"keyword\">int</span> max_sold = prices[len<span class=\"number\">-1</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len<span class=\"number\">-2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            max_sold = max(max_sold, prices[i]);</div><div class=\"line\">            second[i] = max(second[i+<span class=\"number\">1</span>], max_sold - prices[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//从头到尾扫描，前后两部分相加。求出最大利润</span></div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">            maxProfit = max(maxProfit, first[i] + second[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"188-Best-Time-to-Buy-and-Sell-Stock-4\"><a href=\"#188-Best-Time-to-Buy-and-Sell-Stock-4\" class=\"headerlink\" title=\"188. Best Time to Buy and Sell Stock 4\"></a>188. Best Time to Buy and Sell Stock 4</h1><p><strong>使用动态规划法：</strong> 与<strong>题122</strong>不同的是，股票<strong>最多交易k次</strong>，求最大收益。</p>\n<p>使用 <strong>局部最优和全局最优解法，</strong>定义两个二维数组：</p>\n<ul>\n<li>local[i][j]: 表示当前到达第i天，最多可以进行j次交易，且最后一次交易(卖出)在当天卖出的局部最大利润</li>\n<li>global[i][j]: 表示当前到达第i天，最多可以进行j次交易的全局最大利润</li>\n<li>diff = prices[i] - prices[i-1]： 表示第i天与第i-1天的价格差<br>两者的区别是local[i][j]表明 <strong> 第i天一定有交易（卖出）发生，</strong> 可以是第i-1天买入，第i天卖出，也可以是第i天买入，并在当天（第i天）卖出。</li>\n</ul>\n<p>分析过程：</p>\n<ol>\n<li>局部最优 = max{情况1，情况2}<ul>\n<li>情况1：第i-1天已经<strong>恰好</strong>交易j次<code>(local[i-1][j])</code>; 而第i天必须有交易（卖出）发生，那么如果第i-1天买入，第i天卖出，并”不会”增加交易次数【这里比较难理解，可以这样理解：第一天买入，第二天卖出，然后第二天又买入，第三天卖出的情形和第一天买入，第三天卖出的情形获利效果是一样的，因为没有交易费。】，因此<code>情况1 = local[i-1][j] + diff</code></li>\n<li>情况2：在第i-1天<strong>已经</strong>交易了j-1次<code>global[i-1][j-1]</code>; 为了满足 <strong>“第i天过后进行了j次交易，并且第i天必须有交易发生”</strong> 的条件；我们可以选择两种方式：1)第i-1天买入，第i天卖出，收益为diff; 2)第i天买入，第i天卖出，收益为0。 因此<code>情形2 = global[i-1][j-1]+max{diff, 0}</code></li>\n</ul>\n</li>\n</ol>\n<ol>\n<li>全局最优 = max{情况1，情况2}； 全局最优<code>global[i][j]</code>表示的是第i天最多进行了j次交易的最大收益<ul>\n<li>情况1：第i天过后恰好满足j次交易，也就是第i天一定有交易（卖出）发生，此时为局部最优，因此<code>情况1 = local[i][j]</code></li>\n<li>情况2：第i-1天过后已经满足了j次交易，第i天没有没有交易（卖出）发生，因此为前一个的全局最优，<code>情况2 = global[i-1][j]</code></li>\n</ul>\n</li>\n</ol>\n<p>因此可以得到的状态转移方程为：</p>\n<ul>\n<li><code>local[i][j] = max{local[i-1][j] + diff, global[i-1][j-1]+max{diff,0}}</code></li>\n<li><code>global[i][j] = max{local[i][j], global[i-1][j]}</code></li>\n</ul>\n<p>注意：<strong>当k&gt;=days时，</strong> 该情况退化成题122的情形，可以交易多次的情况。</p>\n<p>因此我们想要的结果是:<code>global[days-1][k]</code> 表示的是最后一天结束后，交易k次的全局最大利润。</p>\n<p>复杂度：</p>\n<ul>\n<li>时间：o(n*k)</li>\n<li>空间：o(n*k)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prices.size()&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> days = prices.size();</div><div class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= days) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> maxProfitHelper(prices);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//初始化二维数组都为0</span></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; local(days);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; global(days);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; days; i++) &#123;</div><div class=\"line\">            local[i].resize(k+<span class=\"number\">1</span>);</div><div class=\"line\">            global[i].resize(k+<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//迭代计算</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; days; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> diff = prices[i] - prices[i<span class=\"number\">-1</span>];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++) &#123;</div><div class=\"line\">                local[i][j] = max(local[i<span class=\"number\">-1</span>][j] + diff, global[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + max(diff,<span class=\"number\">0</span>));</div><div class=\"line\">                global[i][j] = max(local[i][j], global[i<span class=\"number\">-1</span>][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> global[days<span class=\"number\">-1</span>][k];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfitHelper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prices.size()&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i&lt;prices.size(); ++i)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> diff = prices[i] - prices[i<span class=\"number\">-1</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span>(diff &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                maxProfit += diff;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown\"><a href=\"#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown\" class=\"headerlink\" title=\"309.Best Time to Buy and Sell Stock with Cooldown\"></a>309.Best Time to Buy and Sell Stock with Cooldown</h1><p><strong>使用动态规划：</strong> 与122不同的是，这题限制了sell之后需要cooldown一天，然后才能buy，即操作为<code>[buy, sell, cooldown, buy, sell]</code>.<br>分析：<br>维护三个数组：</p>\n<ul>\n<li>buy[i]表示的是第i天及之前的最后一个操作为买，此时的最大利润</li>\n<li>sell[i]表示的是第i天及之前的最后一个动作为卖，此时的最大利润</li>\n<li>rest[i]表示的是第i天及之前的最后一个动作为cooldown或者没有任何动作，此时的最大利润</li>\n</ul>\n<p>可以得到三个状态转移方程为：</p>\n<ul>\n<li>buy[i]=max{buy[i-1], rest[i-1]-prices[i]} 表示的是：1）第i天没有动作，和第i-1天一样, 都是持股的状态；2）第i天买入，转为持股状态</li>\n<li>sell[i]=max{sell[i-1], buy[i-1]+prices[i]} 表示的是：1）第i天没有动作，和第i-1天一样，都是未持股状态；2）第i-1天买入，第i天卖出，在第i天转为未持股状态</li>\n<li>rest[i]=max{sell[i-1], buy[i-1], rest[i-1]} 表示的是：过渡期的最大利润有三种状态</li>\n</ul>\n<p>由于存在冷冻区，在rest的状态的最大利润可以表示为：<code>rest[i] = sell[i-1]</code> ;因此状态转移方程可以精简为：</p>\n<ul>\n<li>buy[i] = max{buy[i-1], sell[i-2]-prices[i]} 也就是说前天卖了股票，今天才能买</li>\n<li>sell[i] = max{sell[i-1], buy[i-1]+prices[i]}</li>\n</ul>\n<p>因此我们想要的结果是:<code>maxProfit = sell[n-1]</code>表示的是最后一天结束后，未持股状态下的最大收益。<br>还有一种方法是使用<strong>有限状态机</strong>的方法，也很清晰，详见 <strong>References 3。</strong></p>\n<p>复杂度：</p>\n<ul>\n<li>时间o(n)</li>\n<li>空间o(n)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = prices.size();</div><div class=\"line\">        <span class=\"keyword\">if</span> (n&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; buy(n,<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; sell(n,<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//赋予初始值</span></div><div class=\"line\">        buy[<span class=\"number\">0</span>]= - prices[<span class=\"number\">0</span>];</div><div class=\"line\">        sell[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            sell[i] = max(sell[i<span class=\"number\">-1</span>], buy[i<span class=\"number\">-1</span>]+prices[i]);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                buy[i] = max(buy[i<span class=\"number\">-1</span>], sell[i<span class=\"number\">-2</span>]-prices[i]);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                buy[i] = max(buy[i<span class=\"number\">-1</span>], -prices[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sell[n<span class=\"number\">-1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee\"><a href=\"#714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee\" class=\"headerlink\" title=\"714.Best Time to Buy and Sell Stock with Transaction Fee\"></a>714.Best Time to Buy and Sell Stock with Transaction Fee</h1><p><strong>使用动态规划：</strong>与122题不同的是，加了限制条件，每次买卖有交易费，求最大的收益。<br>分析：账户状态只有两种情况，要么满仓持有股票，要么空仓不持股票；<br>维护两个变量数组：</p>\n<ul>\n<li>unhold[i]:表示第i天账户不持有股票，此时的最大收益。只有两种情况：1）与第i-1天一样，空仓不持有股票；2）第i-1天持有股票，第i天卖出股票，空仓。</li>\n<li>hold[i]:表示第i天持有股票，此时的最大利润。也只有两种情况：1）与第i-1天一样，满仓持有股票；2）第i-1天不持有股票，第i天买入股票，满仓。</li>\n</ul>\n<p>因此有状态转移方程：</p>\n<ul>\n<li>unhold[i]=max{unhold[i-1], hold[i-1]+prices[i]-fee}</li>\n<li>hold[i]=max{hold[i-1], unhold[i-1]-prices[i]}</li>\n</ul>\n<p>初始值为：</p>\n<ul>\n<li>unhold[0] = 0</li>\n<li>hold[0]= - prices[0]</li>\n</ul>\n<p>因此我们想要的结果是：<code>unhold[n-1]</code>, 表示的是最后一天结束后不持有股票的最大收益。</p>\n<p>复杂度：</p>\n<ul>\n<li>时间o(n)</li>\n<li>空间o(n)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices, <span class=\"keyword\">int</span> fee)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = prices.size();</div><div class=\"line\">        <span class=\"keyword\">if</span> (n&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; unhold(n,<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; hold(n,<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//赋予初始值</span></div><div class=\"line\">        unhold[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        hold[<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            unhold[i] = max(unhold[i<span class=\"number\">-1</span>], hold[i<span class=\"number\">-1</span>] + prices[i] - fee);</div><div class=\"line\">            hold[i] = max(hold[i<span class=\"number\">-1</span>], unhold[i<span class=\"number\">-1</span>] - prices[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> unhold[n<span class=\"number\">-1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://blog.csdn.net/dr_unknown/article/details/51939121\" target=\"_blank\" rel=\"external\">Leetcode动态规划</a></li>\n<li><a href=\"https://blog.csdn.net/u013325815/article/details/52829802?locationNum=12&amp;fps=1\" target=\"_blank\" rel=\"external\">Best Time to Buy and Sell Stock with Cooldown</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006672807\" target=\"_blank\" rel=\"external\">动态规划中五道股票买卖题目详解</a></li>\n</ul>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>leetcode中关于买卖股票最佳时机的题目有：</p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" rel=\"external\">121.Best Time to Buy and Sell Stock</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\" target=\"_blank\" rel=\"external\">122.Best Time to Buy and Sell Stock 2</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\" target=\"_blank\" rel=\"external\">123.Best Time to Buy and Sell Stock 3</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\" target=\"_blank\" rel=\"external\">188.Best Time to Buy and Sell Stock 4</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\" target=\"_blank\" rel=\"external\">309.Best Time to Buy and Sell Stock with Cooldown</a></li>\n<li><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\" target=\"_blank\" rel=\"external\">714.Best Time to Buy and Sell Stock with Transaction Fee</a></li>\n</ul>\n<p>除了第122使用贪心法，其他题目可以使用动态规划解决。<br>","more":"</p>\n<h1 id=\"121-Best-Time-to-Buy-and-Sell-stock\"><a href=\"#121-Best-Time-to-Buy-and-Sell-stock\" class=\"headerlink\" title=\"121.Best Time to Buy and Sell stock\"></a>121.Best Time to Buy and Sell stock</h1><p><strong>使用动态规划：</strong> 只能买卖一次，求最大收益。<br>从前往后扫描，最大化第i天的收益即第i天的价格 - 第i天及之前的最低价格 <strong>（可以当天买当天卖）</strong>，因此可以使用一个数组minPrice记录第i天及之前的最低价格，maxProfit记录最大收益，即有状态转移方程：</p>\n<ul>\n<li><code>minPrice[i]=min{minPrice[i-1], prices[i]}</code></li>\n<li><code>maxProfit=max{maxProfit, prices[i]-minPrice[i]}</code></li>\n</ul>\n<p>复杂度：</p>\n<ul>\n<li>时间：o(n)</li>\n<li>空间：o(n)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prices.size()&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; minPrice(prices.size());</div><div class=\"line\">        minPrice[<span class=\"number\">0</span>] = prices[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>;i&lt;prices.size();++i)&#123;</div><div class=\"line\">            minPrice[i] = min(minPrice[i<span class=\"number\">-1</span>],prices[i]);</div><div class=\"line\">            maxProfit = max(maxProfit,prices[i]-minPrice[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"122-Best-Time-to-Buy-and-Sell-Stock-2\"><a href=\"#122-Best-Time-to-Buy-and-Sell-Stock-2\" class=\"headerlink\" title=\"122. Best Time to Buy and Sell Stock 2\"></a>122. Best Time to Buy and Sell Stock 2</h1><p><strong>使用贪心法：</strong> 可以交易多次，但每次只能买卖一只股票，手里只能有一手的股票，买之前必须将手里的股票卖出去。<br>从前往后扫描，只要当天的价格比前一天的价格高，就可以卖出去，获取收益，同时当天也可以买入。然后贪心累加即为结果。<br>复杂度：</p>\n<ul>\n<li>时间：o(n)</li>\n<li>空间：o(1)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prices.size()&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i&lt;prices.size(); ++i)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> diff = prices[i] - prices[i<span class=\"number\">-1</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span>(diff &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                maxProfit += diff;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"123-Best-Time-to-Buy-and-Sell-Stock-3\"><a href=\"#123-Best-Time-to-Buy-and-Sell-Stock-3\" class=\"headerlink\" title=\"123. Best Time to Buy and Sell Stock 3\"></a>123. Best Time to Buy and Sell Stock 3</h1><p><strong>使用动态规划:</strong> 最多交易两次，求最大收益。<br>思路：使用二分法，将<code>prices[0...n]</code>分为<code>prices[0...i] and prices[i+1..n]</code>，对两部分使用题号为121的方法，求的最大值<br>然后，顺序扫描一遍，求的最大值。</p>\n<p>方法一：直接复用题号为121的方法，迭代进行求解,会超时；<br>复杂度：</p>\n<ul>\n<li>时间：o(n^2)</li>\n<li>空间：o(n)<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prices.size()&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; prices.size(); i++) &#123;</div><div class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; firstPart(prices.begin(),prices.begin()+i);</div><div class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; secondPart(prices.begin()+i,prices.end());</div><div class=\"line\">            <span class=\"keyword\">int</span> first = maxProfitHelper(firstPart);<span class=\"comment\">//o(n^2)</span></div><div class=\"line\">            <span class=\"keyword\">int</span> second = maxProfitHelper(secondPart);<span class=\"comment\">//o(n^2))</span></div><div class=\"line\">            maxProfit = max(maxProfit, first+second);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfitHelper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prices.size()&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span>* minPrice = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[prices.size()];</div><div class=\"line\">        minPrice[<span class=\"number\">0</span>] = prices[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>;i&lt;prices.size();++i)&#123;</div><div class=\"line\">            minPrice[i] = min(minPrice[i<span class=\"number\">-1</span>],prices[i]);</div><div class=\"line\">            maxProfit = max(maxProfit,prices[i]-minPrice[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">delete</span>[] minPrice;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>方法二：对方法一进行改良，使用两个数组将第一部分和第二部分的收益保存到数组，然后依次遍历求结果<br>复杂度：</p>\n<ul>\n<li>时间o(n);</li>\n<li>空间o(n);</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prices.size()&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> len = prices.size();</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; first(len,<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; second(len,<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//从前往后扫描，第i天卖出</span></div><div class=\"line\">        <span class=\"keyword\">int</span> min_buy = prices[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">            min_buy = min(min_buy, prices[i]);</div><div class=\"line\">            first[i] = max(first[i<span class=\"number\">-1</span>], prices[i]-min_buy);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//从后往前扫描，第i天买入</span></div><div class=\"line\">        <span class=\"keyword\">int</span> max_sold = prices[len<span class=\"number\">-1</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len<span class=\"number\">-2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">            max_sold = max(max_sold, prices[i]);</div><div class=\"line\">            second[i] = max(second[i+<span class=\"number\">1</span>], max_sold - prices[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//从头到尾扫描，前后两部分相加。求出最大利润</span></div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">            maxProfit = max(maxProfit, first[i] + second[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"188-Best-Time-to-Buy-and-Sell-Stock-4\"><a href=\"#188-Best-Time-to-Buy-and-Sell-Stock-4\" class=\"headerlink\" title=\"188. Best Time to Buy and Sell Stock 4\"></a>188. Best Time to Buy and Sell Stock 4</h1><p><strong>使用动态规划法：</strong> 与<strong>题122</strong>不同的是，股票<strong>最多交易k次</strong>，求最大收益。</p>\n<p>使用 <strong>局部最优和全局最优解法，</strong>定义两个二维数组：</p>\n<ul>\n<li>local[i][j]: 表示当前到达第i天，最多可以进行j次交易，且最后一次交易(卖出)在当天卖出的局部最大利润</li>\n<li>global[i][j]: 表示当前到达第i天，最多可以进行j次交易的全局最大利润</li>\n<li>diff = prices[i] - prices[i-1]： 表示第i天与第i-1天的价格差<br>两者的区别是local[i][j]表明 <strong> 第i天一定有交易（卖出）发生，</strong> 可以是第i-1天买入，第i天卖出，也可以是第i天买入，并在当天（第i天）卖出。</li>\n</ul>\n<p>分析过程：</p>\n<ol>\n<li>局部最优 = max{情况1，情况2}<ul>\n<li>情况1：第i-1天已经<strong>恰好</strong>交易j次<code>(local[i-1][j])</code>; 而第i天必须有交易（卖出）发生，那么如果第i-1天买入，第i天卖出，并”不会”增加交易次数【这里比较难理解，可以这样理解：第一天买入，第二天卖出，然后第二天又买入，第三天卖出的情形和第一天买入，第三天卖出的情形获利效果是一样的，因为没有交易费。】，因此<code>情况1 = local[i-1][j] + diff</code></li>\n<li>情况2：在第i-1天<strong>已经</strong>交易了j-1次<code>global[i-1][j-1]</code>; 为了满足 <strong>“第i天过后进行了j次交易，并且第i天必须有交易发生”</strong> 的条件；我们可以选择两种方式：1)第i-1天买入，第i天卖出，收益为diff; 2)第i天买入，第i天卖出，收益为0。 因此<code>情形2 = global[i-1][j-1]+max{diff, 0}</code></li>\n</ul>\n</li>\n</ol>\n<ol>\n<li>全局最优 = max{情况1，情况2}； 全局最优<code>global[i][j]</code>表示的是第i天最多进行了j次交易的最大收益<ul>\n<li>情况1：第i天过后恰好满足j次交易，也就是第i天一定有交易（卖出）发生，此时为局部最优，因此<code>情况1 = local[i][j]</code></li>\n<li>情况2：第i-1天过后已经满足了j次交易，第i天没有没有交易（卖出）发生，因此为前一个的全局最优，<code>情况2 = global[i-1][j]</code></li>\n</ul>\n</li>\n</ol>\n<p>因此可以得到的状态转移方程为：</p>\n<ul>\n<li><code>local[i][j] = max{local[i-1][j] + diff, global[i-1][j-1]+max{diff,0}}</code></li>\n<li><code>global[i][j] = max{local[i][j], global[i-1][j]}</code></li>\n</ul>\n<p>注意：<strong>当k&gt;=days时，</strong> 该情况退化成题122的情形，可以交易多次的情况。</p>\n<p>因此我们想要的结果是:<code>global[days-1][k]</code> 表示的是最后一天结束后，交易k次的全局最大利润。</p>\n<p>复杂度：</p>\n<ul>\n<li>时间：o(n*k)</li>\n<li>空间：o(n*k)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prices.size()&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> days = prices.size();</div><div class=\"line\">        <span class=\"keyword\">if</span> (k &gt;= days) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> maxProfitHelper(prices);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//初始化二维数组都为0</span></div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; local(days);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; global(days);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; days; i++) &#123;</div><div class=\"line\">            local[i].resize(k+<span class=\"number\">1</span>);</div><div class=\"line\">            global[i].resize(k+<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//迭代计算</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; days; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> diff = prices[i] - prices[i<span class=\"number\">-1</span>];</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++) &#123;</div><div class=\"line\">                local[i][j] = max(local[i<span class=\"number\">-1</span>][j] + diff, global[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + max(diff,<span class=\"number\">0</span>));</div><div class=\"line\">                global[i][j] = max(local[i][j], global[i<span class=\"number\">-1</span>][j]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> global[days<span class=\"number\">-1</span>][k];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfitHelper</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prices.size()&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> maxProfit = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i =<span class=\"number\">1</span>; i&lt;prices.size(); ++i)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> diff = prices[i] - prices[i<span class=\"number\">-1</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span>(diff &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                maxProfit += diff;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> maxProfit;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown\"><a href=\"#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown\" class=\"headerlink\" title=\"309.Best Time to Buy and Sell Stock with Cooldown\"></a>309.Best Time to Buy and Sell Stock with Cooldown</h1><p><strong>使用动态规划：</strong> 与122不同的是，这题限制了sell之后需要cooldown一天，然后才能buy，即操作为<code>[buy, sell, cooldown, buy, sell]</code>.<br>分析：<br>维护三个数组：</p>\n<ul>\n<li>buy[i]表示的是第i天及之前的最后一个操作为买，此时的最大利润</li>\n<li>sell[i]表示的是第i天及之前的最后一个动作为卖，此时的最大利润</li>\n<li>rest[i]表示的是第i天及之前的最后一个动作为cooldown或者没有任何动作，此时的最大利润</li>\n</ul>\n<p>可以得到三个状态转移方程为：</p>\n<ul>\n<li>buy[i]=max{buy[i-1], rest[i-1]-prices[i]} 表示的是：1）第i天没有动作，和第i-1天一样, 都是持股的状态；2）第i天买入，转为持股状态</li>\n<li>sell[i]=max{sell[i-1], buy[i-1]+prices[i]} 表示的是：1）第i天没有动作，和第i-1天一样，都是未持股状态；2）第i-1天买入，第i天卖出，在第i天转为未持股状态</li>\n<li>rest[i]=max{sell[i-1], buy[i-1], rest[i-1]} 表示的是：过渡期的最大利润有三种状态</li>\n</ul>\n<p>由于存在冷冻区，在rest的状态的最大利润可以表示为：<code>rest[i] = sell[i-1]</code> ;因此状态转移方程可以精简为：</p>\n<ul>\n<li>buy[i] = max{buy[i-1], sell[i-2]-prices[i]} 也就是说前天卖了股票，今天才能买</li>\n<li>sell[i] = max{sell[i-1], buy[i-1]+prices[i]}</li>\n</ul>\n<p>因此我们想要的结果是:<code>maxProfit = sell[n-1]</code>表示的是最后一天结束后，未持股状态下的最大收益。<br>还有一种方法是使用<strong>有限状态机</strong>的方法，也很清晰，详见 <strong>References 3。</strong></p>\n<p>复杂度：</p>\n<ul>\n<li>时间o(n)</li>\n<li>空间o(n)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = prices.size();</div><div class=\"line\">        <span class=\"keyword\">if</span> (n&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; buy(n,<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; sell(n,<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//赋予初始值</span></div><div class=\"line\">        buy[<span class=\"number\">0</span>]= - prices[<span class=\"number\">0</span>];</div><div class=\"line\">        sell[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            sell[i] = max(sell[i<span class=\"number\">-1</span>], buy[i<span class=\"number\">-1</span>]+prices[i]);</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">                buy[i] = max(buy[i<span class=\"number\">-1</span>], sell[i<span class=\"number\">-2</span>]-prices[i]);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                buy[i] = max(buy[i<span class=\"number\">-1</span>], -prices[i]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sell[n<span class=\"number\">-1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee\"><a href=\"#714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee\" class=\"headerlink\" title=\"714.Best Time to Buy and Sell Stock with Transaction Fee\"></a>714.Best Time to Buy and Sell Stock with Transaction Fee</h1><p><strong>使用动态规划：</strong>与122题不同的是，加了限制条件，每次买卖有交易费，求最大的收益。<br>分析：账户状态只有两种情况，要么满仓持有股票，要么空仓不持股票；<br>维护两个变量数组：</p>\n<ul>\n<li>unhold[i]:表示第i天账户不持有股票，此时的最大收益。只有两种情况：1）与第i-1天一样，空仓不持有股票；2）第i-1天持有股票，第i天卖出股票，空仓。</li>\n<li>hold[i]:表示第i天持有股票，此时的最大利润。也只有两种情况：1）与第i-1天一样，满仓持有股票；2）第i-1天不持有股票，第i天买入股票，满仓。</li>\n</ul>\n<p>因此有状态转移方程：</p>\n<ul>\n<li>unhold[i]=max{unhold[i-1], hold[i-1]+prices[i]-fee}</li>\n<li>hold[i]=max{hold[i-1], unhold[i-1]-prices[i]}</li>\n</ul>\n<p>初始值为：</p>\n<ul>\n<li>unhold[0] = 0</li>\n<li>hold[0]= - prices[0]</li>\n</ul>\n<p>因此我们想要的结果是：<code>unhold[n-1]</code>, 表示的是最后一天结束后不持有股票的最大收益。</p>\n<p>复杂度：</p>\n<ul>\n<li>时间o(n)</li>\n<li>空间o(n)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; prices, <span class=\"keyword\">int</span> fee)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = prices.size();</div><div class=\"line\">        <span class=\"keyword\">if</span> (n&lt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; unhold(n,<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; hold(n,<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//赋予初始值</span></div><div class=\"line\">        unhold[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</div><div class=\"line\">        hold[<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">            unhold[i] = max(unhold[i<span class=\"number\">-1</span>], hold[i<span class=\"number\">-1</span>] + prices[i] - fee);</div><div class=\"line\">            hold[i] = max(hold[i<span class=\"number\">-1</span>], unhold[i<span class=\"number\">-1</span>] - prices[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> unhold[n<span class=\"number\">-1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://blog.csdn.net/dr_unknown/article/details/51939121\" target=\"_blank\" rel=\"external\">Leetcode动态规划</a></li>\n<li><a href=\"https://blog.csdn.net/u013325815/article/details/52829802?locationNum=12&amp;fps=1\" target=\"_blank\" rel=\"external\">Best Time to Buy and Sell Stock with Cooldown</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000006672807\" target=\"_blank\" rel=\"external\">动态规划中五道股票买卖题目详解</a></li>\n</ul>"},{"title":"Network Protocol总结[1]--HTTP协议","copyright":true,"date":"2017-06-29T13:32:50.000Z","_content":"\n# 概念回顾之网络模型（Model）\n\n如下图，左边是OSI参考模型对应的七层结构，中间是TCP/IP参考模型的五层结构，实际中应用广泛的是TCP/IP参考模型，讨论的范围限定于TCP/IP模型。网络中各层次的协议组成了 **TCP/IP协议簇（Internet Protocol Suite）**，右边是各个层次的典型的协议，接下来的几个总结讲挑选各个层次典型的一些协议。\n<!-- more -->\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/TCP_IP%E6%A8%A1%E5%9E%8B.jpg)\n\n## 网络接口层\n包含OSI参考模型中的数据链路层和物理层，**数据链路层(Data Link Layer)又分为逻辑链路控制子层(Logical Link Control --LLC)和媒体接入控制子层(Media Access Control--MAC).**\n\nLLC子层主要负责向其上层提供服务，是在HDLC的基础上发展起来的; MAC子层的主要功能包括数据帧的封装/卸装，帧的寻址和识别，帧的接收与发送，链路的管理，帧的差错控制等, 其非常重要的一项功能是 **仲裁传输介质的使用权**，即规定站点何时可以使用通信介质，局域网中通常使用的载波侦听多路访问（Carrier Sense Multiple Access /Collision Detection，CSMA/CD）.\n\n物理层定义与传输媒体的接口有关的一些特性,即机械特性、电气特性、功能特性、过程特性,并需要完成并行传输和串行传输之间的转换。数据链路层向该层用户提供透明的和可靠的数据传输服务。 透明性是指该层上传输的数据的内容、格式及编码没有限制,也没有必要解释信息结构的意义；可靠性是指在传输过程中将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路,其具体的方法有帧同步、差错控制、流量控制、链路管理。数据链路层中的主要协议有 **点对点协议PPP,CSMA/CD协议,以太网802.3。**\n\n\n## 网际层(IP层)\n网际层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网际层不提供服务质量的承诺,即所传输的分组可能出错、丢失、重复和失序,当然也不保证分组交付的时限。\n\n网际层中主要协议有IP协议,地址解析协议ARP和网际控制报文协议ICMP等。\n- IP协议是网际层的核心,通过路由选择将下一跳IP封装后交给网络接口层。IP 数据报是无连接服务。\n- ICMP是网际层的补充,可以回送报文。用来检测网络是否通畅(使用ping命令)。\n- ARP是通过已知IP,寻找对于主机的MAC地址。\n\n## 运输层\n运输层为应用进程之间提供端到端(host- to-host)的逻辑通信,并具有复用和分用的功能,即发送方不同的应用进程都可以使用同一个运输层协议传送数据；接收方的运输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程。运输层还将对报文进行差错控制,以提供可靠传输。运输层中主要协议有用户数据报协议UDP和传输控制协议TCP。   \n\n## 应用层\n应用层为用户提供应用程序。\n应用层中主要协议有域名系统DNS,文件传输协议FTP,远程终端协议TELNET,超文本传输协议HTTP,简单邮件传送协议SMTP,邮件读取协议POP3和IMAP,动态主机配置协议DHCP等。\n- DNS：提供域名解析服务,提供域名到IP地址之间的转换,使用端口53\n- HTTP：用于实现万维网上的各种链接,即万维网客户程序与万维网服务器之间的连接,使用端口80\n\n# 概念回顾之数据封装（Data Encapsulation）\n\n ![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/data%20encapsulation.jpg)\n\n从上到下是进行数据的加封装，反之是解封装，在网络中传输会经过解封装和加封装的过程，如路由器是网络层设备，需要解封装得到IP地址然后向目的网络转发，需再加封装。\n1.\t应用层: 主机产生需要传输的数据，统一称为 **Message或者PDU（Protocol Data Unit）;**\n2.\t传输层:  加上TCP或者UDP的报头，封装成 **数据段(Segment);**\n3.\t网络层: 加上IP的报头，封装成 **数据包(IP Datagram/Packet);**\n4.\t数据链路层: 加上LLC和MAC的报头，由数据域(Data)通过CRC等方法生成FCS加到数据包尾部，封装成 **数据帧(Frame)**, 最后在物理介质以 **比特流(Bits)** 的形式进行传输。\n\n# 应用层协议之HTTP协议\nHTTP协议是 **Hyper Text Transfer Protocol（超文本传输协议）** 的缩写,是用于从Web服务器传输超文本到本地浏览器的传送协议。\nHTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）; HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n典型的HTTP请求响应过程(Request-Response)如图所示：\n\n ![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/HTTP_Steps.png)\n\n\n## HTTP 请求方法 (request methods)\n\n\n**HTTP1.0** 定义了三种请求方法： GET, POST 和 HEAD方法;\n\n**HTTP1.1** 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n```\nGET      请求指定的页面信息，并返回实体主体。\n\nHEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头\n\nPOST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）,数据被包含在       \n         请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。\n\nPUT      从客户端向服务器传送的数据取代指定的文档的内容。\n\nDELETE   请求服务器删除指定的页面。\n\nCONNECT  HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n\nOPTIONS  允许客户端查看服务器的性能。\n\nTRACE    回显服务器收到的请求，主要用于测试或诊断\n```\n## HTTP响应状态码 (response status codes)\n\n状态代码有 **三位数字** 组成，第一个数字定义了 **响应的类别** ，共分五种类别:\n\n```\nInformation  1xx：指示信息--表示请求已接收，继续处理\n\nSuccess      2xx：成功--表示请求已被成功接收、理解、接受\n\nRedirection  3xx：重定向--要完成请求必须进行更进一步的操作\n\nClient Error 4xx：客户端错误--请求有语法错误或请求无法实现\n\nServer Error 5xx：服务器端错误--服务器未能实现合法的请求\n\n```\n\n**常见状态码：**\n\n```\n100 Continue                  // 服务器仅接收到部分请求，但一旦服务器未拒绝该请求，客户端应该继续发送其余的请求\n200 OK                        //客户端请求成功\n301 Moved Permanently         //所请求的页面转移至新的URI，重定向\n400 Bad Request               //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\n403 Forbidden                 //服务器收到请求，但是拒绝提供服务\n404 Not Found                 //请求资源不存在，eg：输入了错误的URL\n500 Internal Server Error     //服务器发生不可预期的错误\n501 Not Implemented           //请求未完成，服务器不支持所请求的功能\n503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后能恢复正常\n```\n更多的状态码参考:\n[RFC 7231](https://tools.ietf.org/html/rfc7231)\n\n\n# 参考\n- [ranyonsue的博客](http://www.cnblogs.com/ranyonsue/p/5984001.html)\n- [翡青的博客](http://blog.csdn.net/zjf280441589/article/details/44900353)\n- [百度百科](http://baike.baidu.com/link?url=2-ysP8g7KesdPy_V2gMbJcrzqG21Fqthumzu8ObCUCbHPnEvpTByySPC9wKdh0Man7k4OOFm8xuA9ekggxDg4kKL8LvQhnkwYAS494wA342KvthGWUJFOAjcJ0mn_8in9I2UbJHllO6w5YRQtvLyqa)\n- [RFC7231](https://tools.ietf.org/html/rfc7231)\n- [Dartagnan的博客](http://blog.csdn.net/dadoneo/article/details/8315833)\n","source":"_posts/Network-Protocol总结-1-HTTP协议.md","raw":"---\ntitle: 'Network Protocol总结[1]--HTTP协议'\ncopyright: true\ndate: 2017-06-29 21:32:50\ncategories: Computer Network\ntags:\n- HTTP\n- Network Protocol\n---\n\n# 概念回顾之网络模型（Model）\n\n如下图，左边是OSI参考模型对应的七层结构，中间是TCP/IP参考模型的五层结构，实际中应用广泛的是TCP/IP参考模型，讨论的范围限定于TCP/IP模型。网络中各层次的协议组成了 **TCP/IP协议簇（Internet Protocol Suite）**，右边是各个层次的典型的协议，接下来的几个总结讲挑选各个层次典型的一些协议。\n<!-- more -->\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/TCP_IP%E6%A8%A1%E5%9E%8B.jpg)\n\n## 网络接口层\n包含OSI参考模型中的数据链路层和物理层，**数据链路层(Data Link Layer)又分为逻辑链路控制子层(Logical Link Control --LLC)和媒体接入控制子层(Media Access Control--MAC).**\n\nLLC子层主要负责向其上层提供服务，是在HDLC的基础上发展起来的; MAC子层的主要功能包括数据帧的封装/卸装，帧的寻址和识别，帧的接收与发送，链路的管理，帧的差错控制等, 其非常重要的一项功能是 **仲裁传输介质的使用权**，即规定站点何时可以使用通信介质，局域网中通常使用的载波侦听多路访问（Carrier Sense Multiple Access /Collision Detection，CSMA/CD）.\n\n物理层定义与传输媒体的接口有关的一些特性,即机械特性、电气特性、功能特性、过程特性,并需要完成并行传输和串行传输之间的转换。数据链路层向该层用户提供透明的和可靠的数据传输服务。 透明性是指该层上传输的数据的内容、格式及编码没有限制,也没有必要解释信息结构的意义；可靠性是指在传输过程中将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路,其具体的方法有帧同步、差错控制、流量控制、链路管理。数据链路层中的主要协议有 **点对点协议PPP,CSMA/CD协议,以太网802.3。**\n\n\n## 网际层(IP层)\n网际层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网际层不提供服务质量的承诺,即所传输的分组可能出错、丢失、重复和失序,当然也不保证分组交付的时限。\n\n网际层中主要协议有IP协议,地址解析协议ARP和网际控制报文协议ICMP等。\n- IP协议是网际层的核心,通过路由选择将下一跳IP封装后交给网络接口层。IP 数据报是无连接服务。\n- ICMP是网际层的补充,可以回送报文。用来检测网络是否通畅(使用ping命令)。\n- ARP是通过已知IP,寻找对于主机的MAC地址。\n\n## 运输层\n运输层为应用进程之间提供端到端(host- to-host)的逻辑通信,并具有复用和分用的功能,即发送方不同的应用进程都可以使用同一个运输层协议传送数据；接收方的运输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程。运输层还将对报文进行差错控制,以提供可靠传输。运输层中主要协议有用户数据报协议UDP和传输控制协议TCP。   \n\n## 应用层\n应用层为用户提供应用程序。\n应用层中主要协议有域名系统DNS,文件传输协议FTP,远程终端协议TELNET,超文本传输协议HTTP,简单邮件传送协议SMTP,邮件读取协议POP3和IMAP,动态主机配置协议DHCP等。\n- DNS：提供域名解析服务,提供域名到IP地址之间的转换,使用端口53\n- HTTP：用于实现万维网上的各种链接,即万维网客户程序与万维网服务器之间的连接,使用端口80\n\n# 概念回顾之数据封装（Data Encapsulation）\n\n ![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/data%20encapsulation.jpg)\n\n从上到下是进行数据的加封装，反之是解封装，在网络中传输会经过解封装和加封装的过程，如路由器是网络层设备，需要解封装得到IP地址然后向目的网络转发，需再加封装。\n1.\t应用层: 主机产生需要传输的数据，统一称为 **Message或者PDU（Protocol Data Unit）;**\n2.\t传输层:  加上TCP或者UDP的报头，封装成 **数据段(Segment);**\n3.\t网络层: 加上IP的报头，封装成 **数据包(IP Datagram/Packet);**\n4.\t数据链路层: 加上LLC和MAC的报头，由数据域(Data)通过CRC等方法生成FCS加到数据包尾部，封装成 **数据帧(Frame)**, 最后在物理介质以 **比特流(Bits)** 的形式进行传输。\n\n# 应用层协议之HTTP协议\nHTTP协议是 **Hyper Text Transfer Protocol（超文本传输协议）** 的缩写,是用于从Web服务器传输超文本到本地浏览器的传送协议。\nHTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）; HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n典型的HTTP请求响应过程(Request-Response)如图所示：\n\n ![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/HTTP_Steps.png)\n\n\n## HTTP 请求方法 (request methods)\n\n\n**HTTP1.0** 定义了三种请求方法： GET, POST 和 HEAD方法;\n\n**HTTP1.1** 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。\n\n```\nGET      请求指定的页面信息，并返回实体主体。\n\nHEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头\n\nPOST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）,数据被包含在       \n         请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。\n\nPUT      从客户端向服务器传送的数据取代指定的文档的内容。\n\nDELETE   请求服务器删除指定的页面。\n\nCONNECT  HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n\nOPTIONS  允许客户端查看服务器的性能。\n\nTRACE    回显服务器收到的请求，主要用于测试或诊断\n```\n## HTTP响应状态码 (response status codes)\n\n状态代码有 **三位数字** 组成，第一个数字定义了 **响应的类别** ，共分五种类别:\n\n```\nInformation  1xx：指示信息--表示请求已接收，继续处理\n\nSuccess      2xx：成功--表示请求已被成功接收、理解、接受\n\nRedirection  3xx：重定向--要完成请求必须进行更进一步的操作\n\nClient Error 4xx：客户端错误--请求有语法错误或请求无法实现\n\nServer Error 5xx：服务器端错误--服务器未能实现合法的请求\n\n```\n\n**常见状态码：**\n\n```\n100 Continue                  // 服务器仅接收到部分请求，但一旦服务器未拒绝该请求，客户端应该继续发送其余的请求\n200 OK                        //客户端请求成功\n301 Moved Permanently         //所请求的页面转移至新的URI，重定向\n400 Bad Request               //客户端请求有语法错误，不能被服务器所理解\n401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用\n403 Forbidden                 //服务器收到请求，但是拒绝提供服务\n404 Not Found                 //请求资源不存在，eg：输入了错误的URL\n500 Internal Server Error     //服务器发生不可预期的错误\n501 Not Implemented           //请求未完成，服务器不支持所请求的功能\n503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后能恢复正常\n```\n更多的状态码参考:\n[RFC 7231](https://tools.ietf.org/html/rfc7231)\n\n\n# 参考\n- [ranyonsue的博客](http://www.cnblogs.com/ranyonsue/p/5984001.html)\n- [翡青的博客](http://blog.csdn.net/zjf280441589/article/details/44900353)\n- [百度百科](http://baike.baidu.com/link?url=2-ysP8g7KesdPy_V2gMbJcrzqG21Fqthumzu8ObCUCbHPnEvpTByySPC9wKdh0Man7k4OOFm8xuA9ekggxDg4kKL8LvQhnkwYAS494wA342KvthGWUJFOAjcJ0mn_8in9I2UbJHllO6w5YRQtvLyqa)\n- [RFC7231](https://tools.ietf.org/html/rfc7231)\n- [Dartagnan的博客](http://blog.csdn.net/dadoneo/article/details/8315833)\n","slug":"Network-Protocol总结-1-HTTP协议","published":1,"updated":"2017-06-30T01:28:36.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c6m000h4ov1c772e27c","content":"<h1 id=\"概念回顾之网络模型（Model）\"><a href=\"#概念回顾之网络模型（Model）\" class=\"headerlink\" title=\"概念回顾之网络模型（Model）\"></a>概念回顾之网络模型（Model）</h1><p>如下图，左边是OSI参考模型对应的七层结构，中间是TCP/IP参考模型的五层结构，实际中应用广泛的是TCP/IP参考模型，讨论的范围限定于TCP/IP模型。网络中各层次的协议组成了 <strong>TCP/IP协议簇（Internet Protocol Suite）</strong>，右边是各个层次的典型的协议，接下来的几个总结讲挑选各个层次典型的一些协议。<br><a id=\"more\"></a></p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/TCP_IP%E6%A8%A1%E5%9E%8B.jpg\" alt=\"\"></p>\n<h2 id=\"网络接口层\"><a href=\"#网络接口层\" class=\"headerlink\" title=\"网络接口层\"></a>网络接口层</h2><p>包含OSI参考模型中的数据链路层和物理层，<strong>数据链路层(Data Link Layer)又分为逻辑链路控制子层(Logical Link Control –LLC)和媒体接入控制子层(Media Access Control–MAC).</strong></p>\n<p>LLC子层主要负责向其上层提供服务，是在HDLC的基础上发展起来的; MAC子层的主要功能包括数据帧的封装/卸装，帧的寻址和识别，帧的接收与发送，链路的管理，帧的差错控制等, 其非常重要的一项功能是 <strong>仲裁传输介质的使用权</strong>，即规定站点何时可以使用通信介质，局域网中通常使用的载波侦听多路访问（Carrier Sense Multiple Access /Collision Detection，CSMA/CD）.</p>\n<p>物理层定义与传输媒体的接口有关的一些特性,即机械特性、电气特性、功能特性、过程特性,并需要完成并行传输和串行传输之间的转换。数据链路层向该层用户提供透明的和可靠的数据传输服务。 透明性是指该层上传输的数据的内容、格式及编码没有限制,也没有必要解释信息结构的意义；可靠性是指在传输过程中将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路,其具体的方法有帧同步、差错控制、流量控制、链路管理。数据链路层中的主要协议有 <strong>点对点协议PPP,CSMA/CD协议,以太网802.3。</strong></p>\n<h2 id=\"网际层-IP层\"><a href=\"#网际层-IP层\" class=\"headerlink\" title=\"网际层(IP层)\"></a>网际层(IP层)</h2><p>网际层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网际层不提供服务质量的承诺,即所传输的分组可能出错、丢失、重复和失序,当然也不保证分组交付的时限。</p>\n<p>网际层中主要协议有IP协议,地址解析协议ARP和网际控制报文协议ICMP等。</p>\n<ul>\n<li>IP协议是网际层的核心,通过路由选择将下一跳IP封装后交给网络接口层。IP 数据报是无连接服务。</li>\n<li>ICMP是网际层的补充,可以回送报文。用来检测网络是否通畅(使用ping命令)。</li>\n<li>ARP是通过已知IP,寻找对于主机的MAC地址。</li>\n</ul>\n<h2 id=\"运输层\"><a href=\"#运输层\" class=\"headerlink\" title=\"运输层\"></a>运输层</h2><p>运输层为应用进程之间提供端到端(host- to-host)的逻辑通信,并具有复用和分用的功能,即发送方不同的应用进程都可以使用同一个运输层协议传送数据；接收方的运输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程。运输层还将对报文进行差错控制,以提供可靠传输。运输层中主要协议有用户数据报协议UDP和传输控制协议TCP。   </p>\n<h2 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h2><p>应用层为用户提供应用程序。<br>应用层中主要协议有域名系统DNS,文件传输协议FTP,远程终端协议TELNET,超文本传输协议HTTP,简单邮件传送协议SMTP,邮件读取协议POP3和IMAP,动态主机配置协议DHCP等。</p>\n<ul>\n<li>DNS：提供域名解析服务,提供域名到IP地址之间的转换,使用端口53</li>\n<li>HTTP：用于实现万维网上的各种链接,即万维网客户程序与万维网服务器之间的连接,使用端口80</li>\n</ul>\n<h1 id=\"概念回顾之数据封装（Data-Encapsulation）\"><a href=\"#概念回顾之数据封装（Data-Encapsulation）\" class=\"headerlink\" title=\"概念回顾之数据封装（Data Encapsulation）\"></a>概念回顾之数据封装（Data Encapsulation）</h1><p> <img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/data%20encapsulation.jpg\" alt=\"\"></p>\n<p>从上到下是进行数据的加封装，反之是解封装，在网络中传输会经过解封装和加封装的过程，如路由器是网络层设备，需要解封装得到IP地址然后向目的网络转发，需再加封装。</p>\n<ol>\n<li>应用层: 主机产生需要传输的数据，统一称为 <strong>Message或者PDU（Protocol Data Unit）;</strong></li>\n<li>传输层:  加上TCP或者UDP的报头，封装成 <strong>数据段(Segment);</strong></li>\n<li>网络层: 加上IP的报头，封装成 <strong>数据包(IP Datagram/Packet);</strong></li>\n<li>数据链路层: 加上LLC和MAC的报头，由数据域(Data)通过CRC等方法生成FCS加到数据包尾部，封装成 <strong>数据帧(Frame)</strong>, 最后在物理介质以 <strong>比特流(Bits)</strong> 的形式进行传输。</li>\n</ol>\n<h1 id=\"应用层协议之HTTP协议\"><a href=\"#应用层协议之HTTP协议\" class=\"headerlink\" title=\"应用层协议之HTTP协议\"></a>应用层协议之HTTP协议</h1><p>HTTP协议是 <strong>Hyper Text Transfer Protocol（超文本传输协议）</strong> 的缩写,是用于从Web服务器传输超文本到本地浏览器的传送协议。<br>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）; HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。<br>典型的HTTP请求响应过程(Request-Response)如图所示：</p>\n<p> <img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/HTTP_Steps.png\" alt=\"\"></p>\n<h2 id=\"HTTP-请求方法-request-methods\"><a href=\"#HTTP-请求方法-request-methods\" class=\"headerlink\" title=\"HTTP 请求方法 (request methods)\"></a>HTTP 请求方法 (request methods)</h2><p><strong>HTTP1.0</strong> 定义了三种请求方法： GET, POST 和 HEAD方法;</p>\n<p><strong>HTTP1.1</strong> 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET      请求指定的页面信息，并返回实体主体。</div><div class=\"line\"></div><div class=\"line\">HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</div><div class=\"line\"></div><div class=\"line\">POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）,数据被包含在       </div><div class=\"line\">         请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</div><div class=\"line\"></div><div class=\"line\">PUT      从客户端向服务器传送的数据取代指定的文档的内容。</div><div class=\"line\"></div><div class=\"line\">DELETE   请求服务器删除指定的页面。</div><div class=\"line\"></div><div class=\"line\">CONNECT  HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</div><div class=\"line\"></div><div class=\"line\">OPTIONS  允许客户端查看服务器的性能。</div><div class=\"line\"></div><div class=\"line\">TRACE    回显服务器收到的请求，主要用于测试或诊断</div></pre></td></tr></table></figure>\n<h2 id=\"HTTP响应状态码-response-status-codes\"><a href=\"#HTTP响应状态码-response-status-codes\" class=\"headerlink\" title=\"HTTP响应状态码 (response status codes)\"></a>HTTP响应状态码 (response status codes)</h2><p>状态代码有 <strong>三位数字</strong> 组成，第一个数字定义了 <strong>响应的类别</strong> ，共分五种类别:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Information  1xx：指示信息--表示请求已接收，继续处理</div><div class=\"line\"></div><div class=\"line\">Success      2xx：成功--表示请求已被成功接收、理解、接受</div><div class=\"line\"></div><div class=\"line\">Redirection  3xx：重定向--要完成请求必须进行更进一步的操作</div><div class=\"line\"></div><div class=\"line\">Client Error 4xx：客户端错误--请求有语法错误或请求无法实现</div><div class=\"line\"></div><div class=\"line\">Server Error 5xx：服务器端错误--服务器未能实现合法的请求</div></pre></td></tr></table></figure>\n<p><strong>常见状态码：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">100 Continue                  // 服务器仅接收到部分请求，但一旦服务器未拒绝该请求，客户端应该继续发送其余的请求</div><div class=\"line\">200 OK                        //客户端请求成功</div><div class=\"line\">301 Moved Permanently         //所请求的页面转移至新的URI，重定向</div><div class=\"line\">400 Bad Request               //客户端请求有语法错误，不能被服务器所理解</div><div class=\"line\">401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</div><div class=\"line\">403 Forbidden                 //服务器收到请求，但是拒绝提供服务</div><div class=\"line\">404 Not Found                 //请求资源不存在，eg：输入了错误的URL</div><div class=\"line\">500 Internal Server Error     //服务器发生不可预期的错误</div><div class=\"line\">501 Not Implemented           //请求未完成，服务器不支持所请求的功能</div><div class=\"line\">503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后能恢复正常</div></pre></td></tr></table></figure>\n<p>更多的状态码参考:<br><a href=\"https://tools.ietf.org/html/rfc7231\" target=\"_blank\" rel=\"external\">RFC 7231</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.cnblogs.com/ranyonsue/p/5984001.html\" target=\"_blank\" rel=\"external\">ranyonsue的博客</a></li>\n<li><a href=\"http://blog.csdn.net/zjf280441589/article/details/44900353\" target=\"_blank\" rel=\"external\">翡青的博客</a></li>\n<li><a href=\"http://baike.baidu.com/link?url=2-ysP8g7KesdPy_V2gMbJcrzqG21Fqthumzu8ObCUCbHPnEvpTByySPC9wKdh0Man7k4OOFm8xuA9ekggxDg4kKL8LvQhnkwYAS494wA342KvthGWUJFOAjcJ0mn_8in9I2UbJHllO6w5YRQtvLyqa\" target=\"_blank\" rel=\"external\">百度百科</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc7231\" target=\"_blank\" rel=\"external\">RFC7231</a></li>\n<li><a href=\"http://blog.csdn.net/dadoneo/article/details/8315833\" target=\"_blank\" rel=\"external\">Dartagnan的博客</a></li>\n</ul>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"概念回顾之网络模型（Model）\"><a href=\"#概念回顾之网络模型（Model）\" class=\"headerlink\" title=\"概念回顾之网络模型（Model）\"></a>概念回顾之网络模型（Model）</h1><p>如下图，左边是OSI参考模型对应的七层结构，中间是TCP/IP参考模型的五层结构，实际中应用广泛的是TCP/IP参考模型，讨论的范围限定于TCP/IP模型。网络中各层次的协议组成了 <strong>TCP/IP协议簇（Internet Protocol Suite）</strong>，右边是各个层次的典型的协议，接下来的几个总结讲挑选各个层次典型的一些协议。<br>","more":"</p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/TCP_IP%E6%A8%A1%E5%9E%8B.jpg\" alt=\"\"></p>\n<h2 id=\"网络接口层\"><a href=\"#网络接口层\" class=\"headerlink\" title=\"网络接口层\"></a>网络接口层</h2><p>包含OSI参考模型中的数据链路层和物理层，<strong>数据链路层(Data Link Layer)又分为逻辑链路控制子层(Logical Link Control –LLC)和媒体接入控制子层(Media Access Control–MAC).</strong></p>\n<p>LLC子层主要负责向其上层提供服务，是在HDLC的基础上发展起来的; MAC子层的主要功能包括数据帧的封装/卸装，帧的寻址和识别，帧的接收与发送，链路的管理，帧的差错控制等, 其非常重要的一项功能是 <strong>仲裁传输介质的使用权</strong>，即规定站点何时可以使用通信介质，局域网中通常使用的载波侦听多路访问（Carrier Sense Multiple Access /Collision Detection，CSMA/CD）.</p>\n<p>物理层定义与传输媒体的接口有关的一些特性,即机械特性、电气特性、功能特性、过程特性,并需要完成并行传输和串行传输之间的转换。数据链路层向该层用户提供透明的和可靠的数据传输服务。 透明性是指该层上传输的数据的内容、格式及编码没有限制,也没有必要解释信息结构的意义；可靠性是指在传输过程中将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路,其具体的方法有帧同步、差错控制、流量控制、链路管理。数据链路层中的主要协议有 <strong>点对点协议PPP,CSMA/CD协议,以太网802.3。</strong></p>\n<h2 id=\"网际层-IP层\"><a href=\"#网际层-IP层\" class=\"headerlink\" title=\"网际层(IP层)\"></a>网际层(IP层)</h2><p>网际层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网际层不提供服务质量的承诺,即所传输的分组可能出错、丢失、重复和失序,当然也不保证分组交付的时限。</p>\n<p>网际层中主要协议有IP协议,地址解析协议ARP和网际控制报文协议ICMP等。</p>\n<ul>\n<li>IP协议是网际层的核心,通过路由选择将下一跳IP封装后交给网络接口层。IP 数据报是无连接服务。</li>\n<li>ICMP是网际层的补充,可以回送报文。用来检测网络是否通畅(使用ping命令)。</li>\n<li>ARP是通过已知IP,寻找对于主机的MAC地址。</li>\n</ul>\n<h2 id=\"运输层\"><a href=\"#运输层\" class=\"headerlink\" title=\"运输层\"></a>运输层</h2><p>运输层为应用进程之间提供端到端(host- to-host)的逻辑通信,并具有复用和分用的功能,即发送方不同的应用进程都可以使用同一个运输层协议传送数据；接收方的运输层在剥去报文的首部后能够把这些数据正确交付到目的应用进程。运输层还将对报文进行差错控制,以提供可靠传输。运输层中主要协议有用户数据报协议UDP和传输控制协议TCP。   </p>\n<h2 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h2><p>应用层为用户提供应用程序。<br>应用层中主要协议有域名系统DNS,文件传输协议FTP,远程终端协议TELNET,超文本传输协议HTTP,简单邮件传送协议SMTP,邮件读取协议POP3和IMAP,动态主机配置协议DHCP等。</p>\n<ul>\n<li>DNS：提供域名解析服务,提供域名到IP地址之间的转换,使用端口53</li>\n<li>HTTP：用于实现万维网上的各种链接,即万维网客户程序与万维网服务器之间的连接,使用端口80</li>\n</ul>\n<h1 id=\"概念回顾之数据封装（Data-Encapsulation）\"><a href=\"#概念回顾之数据封装（Data-Encapsulation）\" class=\"headerlink\" title=\"概念回顾之数据封装（Data Encapsulation）\"></a>概念回顾之数据封装（Data Encapsulation）</h1><p> <img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/data%20encapsulation.jpg\" alt=\"\"></p>\n<p>从上到下是进行数据的加封装，反之是解封装，在网络中传输会经过解封装和加封装的过程，如路由器是网络层设备，需要解封装得到IP地址然后向目的网络转发，需再加封装。</p>\n<ol>\n<li>应用层: 主机产生需要传输的数据，统一称为 <strong>Message或者PDU（Protocol Data Unit）;</strong></li>\n<li>传输层:  加上TCP或者UDP的报头，封装成 <strong>数据段(Segment);</strong></li>\n<li>网络层: 加上IP的报头，封装成 <strong>数据包(IP Datagram/Packet);</strong></li>\n<li>数据链路层: 加上LLC和MAC的报头，由数据域(Data)通过CRC等方法生成FCS加到数据包尾部，封装成 <strong>数据帧(Frame)</strong>, 最后在物理介质以 <strong>比特流(Bits)</strong> 的形式进行传输。</li>\n</ol>\n<h1 id=\"应用层协议之HTTP协议\"><a href=\"#应用层协议之HTTP协议\" class=\"headerlink\" title=\"应用层协议之HTTP协议\"></a>应用层协议之HTTP协议</h1><p>HTTP协议是 <strong>Hyper Text Transfer Protocol（超文本传输协议）</strong> 的缩写,是用于从Web服务器传输超文本到本地浏览器的传送协议。<br>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）; HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。<br>典型的HTTP请求响应过程(Request-Response)如图所示：</p>\n<p> <img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/HTTP_Steps.png\" alt=\"\"></p>\n<h2 id=\"HTTP-请求方法-request-methods\"><a href=\"#HTTP-请求方法-request-methods\" class=\"headerlink\" title=\"HTTP 请求方法 (request methods)\"></a>HTTP 请求方法 (request methods)</h2><p><strong>HTTP1.0</strong> 定义了三种请求方法： GET, POST 和 HEAD方法;</p>\n<p><strong>HTTP1.1</strong> 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">GET      请求指定的页面信息，并返回实体主体。</div><div class=\"line\"></div><div class=\"line\">HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</div><div class=\"line\"></div><div class=\"line\">POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）,数据被包含在       </div><div class=\"line\">         请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</div><div class=\"line\"></div><div class=\"line\">PUT      从客户端向服务器传送的数据取代指定的文档的内容。</div><div class=\"line\"></div><div class=\"line\">DELETE   请求服务器删除指定的页面。</div><div class=\"line\"></div><div class=\"line\">CONNECT  HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</div><div class=\"line\"></div><div class=\"line\">OPTIONS  允许客户端查看服务器的性能。</div><div class=\"line\"></div><div class=\"line\">TRACE    回显服务器收到的请求，主要用于测试或诊断</div></pre></td></tr></table></figure>\n<h2 id=\"HTTP响应状态码-response-status-codes\"><a href=\"#HTTP响应状态码-response-status-codes\" class=\"headerlink\" title=\"HTTP响应状态码 (response status codes)\"></a>HTTP响应状态码 (response status codes)</h2><p>状态代码有 <strong>三位数字</strong> 组成，第一个数字定义了 <strong>响应的类别</strong> ，共分五种类别:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Information  1xx：指示信息--表示请求已接收，继续处理</div><div class=\"line\"></div><div class=\"line\">Success      2xx：成功--表示请求已被成功接收、理解、接受</div><div class=\"line\"></div><div class=\"line\">Redirection  3xx：重定向--要完成请求必须进行更进一步的操作</div><div class=\"line\"></div><div class=\"line\">Client Error 4xx：客户端错误--请求有语法错误或请求无法实现</div><div class=\"line\"></div><div class=\"line\">Server Error 5xx：服务器端错误--服务器未能实现合法的请求</div></pre></td></tr></table></figure>\n<p><strong>常见状态码：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">100 Continue                  // 服务器仅接收到部分请求，但一旦服务器未拒绝该请求，客户端应该继续发送其余的请求</div><div class=\"line\">200 OK                        //客户端请求成功</div><div class=\"line\">301 Moved Permanently         //所请求的页面转移至新的URI，重定向</div><div class=\"line\">400 Bad Request               //客户端请求有语法错误，不能被服务器所理解</div><div class=\"line\">401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</div><div class=\"line\">403 Forbidden                 //服务器收到请求，但是拒绝提供服务</div><div class=\"line\">404 Not Found                 //请求资源不存在，eg：输入了错误的URL</div><div class=\"line\">500 Internal Server Error     //服务器发生不可预期的错误</div><div class=\"line\">501 Not Implemented           //请求未完成，服务器不支持所请求的功能</div><div class=\"line\">503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后能恢复正常</div></pre></td></tr></table></figure>\n<p>更多的状态码参考:<br><a href=\"https://tools.ietf.org/html/rfc7231\" target=\"_blank\" rel=\"external\">RFC 7231</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"http://www.cnblogs.com/ranyonsue/p/5984001.html\" target=\"_blank\" rel=\"external\">ranyonsue的博客</a></li>\n<li><a href=\"http://blog.csdn.net/zjf280441589/article/details/44900353\" target=\"_blank\" rel=\"external\">翡青的博客</a></li>\n<li><a href=\"http://baike.baidu.com/link?url=2-ysP8g7KesdPy_V2gMbJcrzqG21Fqthumzu8ObCUCbHPnEvpTByySPC9wKdh0Man7k4OOFm8xuA9ekggxDg4kKL8LvQhnkwYAS494wA342KvthGWUJFOAjcJ0mn_8in9I2UbJHllO6w5YRQtvLyqa\" target=\"_blank\" rel=\"external\">百度百科</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc7231\" target=\"_blank\" rel=\"external\">RFC7231</a></li>\n<li><a href=\"http://blog.csdn.net/dadoneo/article/details/8315833\" target=\"_blank\" rel=\"external\">Dartagnan的博客</a></li>\n</ul>"},{"title":"Python基础学习之[IO编程]","copyright":true,"date":"2017-07-14T06:34:03.000Z","_content":"# IO编程\nInput Stream: 数据从外面（磁盘、网络）流进内存\nOutput Stream：数据从内存流出外面\n外设CPU与内存速度不匹配的问题：\n- 同步IO：程序与数据写入按线性运行，一方必须等待另一方做完\n- 异步IO：程序（CPU执行）与数据写入按并行运行。\n\n两者的最大区别是是否 **等待IO执行的结果**,\n异步IO具有相当复杂的编程模型：回调模式、轮询模式等\n<!--more-->\n\n## 文件读写\nPython 内置读写文件的函数，用法和C兼容。\n### 读文件\n- read(): 适用于文件小，文件一次性读取比较方便的情况\n- read(size): 不确定文件大小，可适用循环调用read(size)\n- readlines(): 一行行读，返回一个list，适用于配置文件的读取等\n\n```python\ntry:\n    f = open('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt','r') #打开一个文件对象使用Open()函数\n    print(f.read()) #read()方法可以一次读取文件所有内容\n\nfinally:\n    if f:\n        f.close()\n\n\n#等价于下列方法，with语句自动调用close()方法,此方法是等价的。\nwith open('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt','r') as f:\n    print(f.read())\n```\n\n### 写文件\n调用`open()`函数时，传入标识符`w`或者`wb`表示写文本文件或二进制文件.适用write()函数将要写入的字符串写入文件：\n\n```python\nwith open('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt','w') as f:\n    f.write('haha,so good, i love python ~')\n```\n\n## StringIO 和 BytesIO\n在内存中操作String和Bytes\n\n```python\nfrom io import StringIO\nf=StringIO()\nf.write('hello')\nf.write(' ')\nf.write('good boy!')\nprint(f.getvalue())\n\n\nf2=StringIO('Hello!\\nbad！\\n Guys!')\nwhile True:\n    s=f2.readline()\n    if s=='':\n        break\n    print(s.strip())\n\nfrom io import BytesIO\nf=BytesIO()\nf.write('中文啊'.encode('utf-8'))\nprint(f.getvalue())\n\nf2=BytesIO(b'\\xe4\\xb8\\xad\\xe6\\x96\\x87')\nf2.read()\n```\n\n## 操作文件和目录\n\n```python\n>>>import os\n>>> os.path.abspath('.') #获取当前位置的绝对路径\n'D:\\\\coder\\\\Python\\\\6.27'\n>>> os.path.join('D:\\\\coder\\\\Python\\\\6.27','testdir')#把新目录的完整路劲表示出来\n'D:\\\\coder\\\\Python\\\\6.27\\\\testdir'\n>>> os.mkdir('D:\\\\coder\\\\Python\\\\6.27\\\\testdir') #创建新目录\n>>> os.rmdir('D:\\\\coder\\\\Python\\\\6.27\\\\testdir') #删除该目录\n\n>>> os.path.split('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt') #拆分路径\n('D:\\\\coder\\\\Python\\\\6.27', 'IOtestfiles.txt')\n>>> os.path.splitext('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt') #获得文件扩展名\n('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles', '.txt')\n>>> os.rename('IOtestfiles.txt','IOtestfiles.py') #修改当前目录下文件的命名，重命名\n>>> os.remove('IOtestfiles.py') #删除文件\n\n```\n\n## 序列化（pickling）\n把变量从内存中变成可存储或传输的过程称之为序列化，序列化之后内容可以写入磁盘，或者通过网络传输到另外的机器中。\n反过来，把变量内容从序列化的对象读到内存里称为反序列化，即unpickling。\nPython中提供了`pickle`模块实现序列化。\n\n```Python\nimport pickle\nd=dict(name='li',age=25,score=100)\nwith open('dump.txt','wb') as f:\n    pickle.dump(d,f) #该函数将d序列化成bytes，然后这个bytes写入文件\n\nwith open('dump.txt','rb') as f:\n    d=pickle.load(f) #反序列化\nprint(d)\n\n```\n\n### 序列化成JSON\n该序列化更通用，更符合web标准，一般使用该种方法，进行序列化\n\n```python\nimport json\nd=dict(name='li',age=25,score=100)\nwith open('dump.txt','w') as f:\n    json.dump(d,f) #该方法是返回的JSON字符串str，写入file-like-object文件中\n\nwith open('dump.txt','r') as f:\n    d=json.load(f) #反序列化，将文件中\nprint(d)\n\nimport json\nclass Student(object):\n    def __init__(self, name, age, score):\n       self.name=name\n       self.age=age\n       self.score=score\n\ndef student2dict(std): #下面两个是独立于class的转换函数\n        return{\n        'name': std.name,\n        'age': std.age,\n        'score': std.score\n        }\ndef dict2student(d):\n        return Student(d['name'],d['age'],d['score'])\n\ns=Student('li',20,100)\nprint(json.dumps(s,default=student2dict))\n{\"name\": \"li\", \"score\": 100, \"age\": 20}\n\n>>> print(json.loads(json_str,object_hook=dict2student))\n<__main__.Student object at 0x000000371B3DB0B8>\n```\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431917590955542f9ac5f5c1479faf787ff2b028ab47000)\n","source":"_posts/Python基础学习之-IO编程.md","raw":"---\ntitle: 'Python基础学习之[IO编程]'\ncopyright: true\ndate: 2017-07-14 14:34:03\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n# IO编程\nInput Stream: 数据从外面（磁盘、网络）流进内存\nOutput Stream：数据从内存流出外面\n外设CPU与内存速度不匹配的问题：\n- 同步IO：程序与数据写入按线性运行，一方必须等待另一方做完\n- 异步IO：程序（CPU执行）与数据写入按并行运行。\n\n两者的最大区别是是否 **等待IO执行的结果**,\n异步IO具有相当复杂的编程模型：回调模式、轮询模式等\n<!--more-->\n\n## 文件读写\nPython 内置读写文件的函数，用法和C兼容。\n### 读文件\n- read(): 适用于文件小，文件一次性读取比较方便的情况\n- read(size): 不确定文件大小，可适用循环调用read(size)\n- readlines(): 一行行读，返回一个list，适用于配置文件的读取等\n\n```python\ntry:\n    f = open('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt','r') #打开一个文件对象使用Open()函数\n    print(f.read()) #read()方法可以一次读取文件所有内容\n\nfinally:\n    if f:\n        f.close()\n\n\n#等价于下列方法，with语句自动调用close()方法,此方法是等价的。\nwith open('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt','r') as f:\n    print(f.read())\n```\n\n### 写文件\n调用`open()`函数时，传入标识符`w`或者`wb`表示写文本文件或二进制文件.适用write()函数将要写入的字符串写入文件：\n\n```python\nwith open('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt','w') as f:\n    f.write('haha,so good, i love python ~')\n```\n\n## StringIO 和 BytesIO\n在内存中操作String和Bytes\n\n```python\nfrom io import StringIO\nf=StringIO()\nf.write('hello')\nf.write(' ')\nf.write('good boy!')\nprint(f.getvalue())\n\n\nf2=StringIO('Hello!\\nbad！\\n Guys!')\nwhile True:\n    s=f2.readline()\n    if s=='':\n        break\n    print(s.strip())\n\nfrom io import BytesIO\nf=BytesIO()\nf.write('中文啊'.encode('utf-8'))\nprint(f.getvalue())\n\nf2=BytesIO(b'\\xe4\\xb8\\xad\\xe6\\x96\\x87')\nf2.read()\n```\n\n## 操作文件和目录\n\n```python\n>>>import os\n>>> os.path.abspath('.') #获取当前位置的绝对路径\n'D:\\\\coder\\\\Python\\\\6.27'\n>>> os.path.join('D:\\\\coder\\\\Python\\\\6.27','testdir')#把新目录的完整路劲表示出来\n'D:\\\\coder\\\\Python\\\\6.27\\\\testdir'\n>>> os.mkdir('D:\\\\coder\\\\Python\\\\6.27\\\\testdir') #创建新目录\n>>> os.rmdir('D:\\\\coder\\\\Python\\\\6.27\\\\testdir') #删除该目录\n\n>>> os.path.split('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt') #拆分路径\n('D:\\\\coder\\\\Python\\\\6.27', 'IOtestfiles.txt')\n>>> os.path.splitext('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt') #获得文件扩展名\n('D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles', '.txt')\n>>> os.rename('IOtestfiles.txt','IOtestfiles.py') #修改当前目录下文件的命名，重命名\n>>> os.remove('IOtestfiles.py') #删除文件\n\n```\n\n## 序列化（pickling）\n把变量从内存中变成可存储或传输的过程称之为序列化，序列化之后内容可以写入磁盘，或者通过网络传输到另外的机器中。\n反过来，把变量内容从序列化的对象读到内存里称为反序列化，即unpickling。\nPython中提供了`pickle`模块实现序列化。\n\n```Python\nimport pickle\nd=dict(name='li',age=25,score=100)\nwith open('dump.txt','wb') as f:\n    pickle.dump(d,f) #该函数将d序列化成bytes，然后这个bytes写入文件\n\nwith open('dump.txt','rb') as f:\n    d=pickle.load(f) #反序列化\nprint(d)\n\n```\n\n### 序列化成JSON\n该序列化更通用，更符合web标准，一般使用该种方法，进行序列化\n\n```python\nimport json\nd=dict(name='li',age=25,score=100)\nwith open('dump.txt','w') as f:\n    json.dump(d,f) #该方法是返回的JSON字符串str，写入file-like-object文件中\n\nwith open('dump.txt','r') as f:\n    d=json.load(f) #反序列化，将文件中\nprint(d)\n\nimport json\nclass Student(object):\n    def __init__(self, name, age, score):\n       self.name=name\n       self.age=age\n       self.score=score\n\ndef student2dict(std): #下面两个是独立于class的转换函数\n        return{\n        'name': std.name,\n        'age': std.age,\n        'score': std.score\n        }\ndef dict2student(d):\n        return Student(d['name'],d['age'],d['score'])\n\ns=Student('li',20,100)\nprint(json.dumps(s,default=student2dict))\n{\"name\": \"li\", \"score\": 100, \"age\": 20}\n\n>>> print(json.loads(json_str,object_hook=dict2student))\n<__main__.Student object at 0x000000371B3DB0B8>\n```\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431917590955542f9ac5f5c1479faf787ff2b028ab47000)\n","slug":"Python基础学习之-IO编程","published":1,"updated":"2017-07-14T06:41:19.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c6p000k4ov1rithshme","content":"<h1 id=\"IO编程\"><a href=\"#IO编程\" class=\"headerlink\" title=\"IO编程\"></a>IO编程</h1><p>Input Stream: 数据从外面（磁盘、网络）流进内存<br>Output Stream：数据从内存流出外面<br>外设CPU与内存速度不匹配的问题：</p>\n<ul>\n<li>同步IO：程序与数据写入按线性运行，一方必须等待另一方做完</li>\n<li>异步IO：程序（CPU执行）与数据写入按并行运行。</li>\n</ul>\n<p>两者的最大区别是是否 <strong>等待IO执行的结果</strong>,<br>异步IO具有相当复杂的编程模型：回调模式、轮询模式等<br><a id=\"more\"></a></p>\n<h2 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h2><p>Python 内置读写文件的函数，用法和C兼容。</p>\n<h3 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h3><ul>\n<li>read(): 适用于文件小，文件一次性读取比较方便的情况</li>\n<li>read(size): 不确定文件大小，可适用循环调用read(size)</li>\n<li>readlines(): 一行行读，返回一个list，适用于配置文件的读取等</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    f = open(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"comment\">#打开一个文件对象使用Open()函数</span></div><div class=\"line\">    print(f.read()) <span class=\"comment\">#read()方法可以一次读取文件所有内容</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">finally</span>:</div><div class=\"line\">    <span class=\"keyword\">if</span> f:</div><div class=\"line\">        f.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#等价于下列方法，with语句自动调用close()方法,此方法是等价的。</span></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    print(f.read())</div></pre></td></tr></table></figure>\n<h3 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h3><p>调用<code>open()</code>函数时，传入标识符<code>w</code>或者<code>wb</code>表示写文本文件或二进制文件.适用write()函数将要写入的字符串写入文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    f.write(<span class=\"string\">'haha,so good, i love python ~'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"StringIO-和-BytesIO\"><a href=\"#StringIO-和-BytesIO\" class=\"headerlink\" title=\"StringIO 和 BytesIO\"></a>StringIO 和 BytesIO</h2><p>在内存中操作String和Bytes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</div><div class=\"line\">f=StringIO()</div><div class=\"line\">f.write(<span class=\"string\">'hello'</span>)</div><div class=\"line\">f.write(<span class=\"string\">' '</span>)</div><div class=\"line\">f.write(<span class=\"string\">'good boy!'</span>)</div><div class=\"line\">print(f.getvalue())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">f2=StringIO(<span class=\"string\">'Hello!\\nbad！\\n Guys!'</span>)</div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    s=f2.readline()</div><div class=\"line\">    <span class=\"keyword\">if</span> s==<span class=\"string\">''</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\">    print(s.strip())</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</div><div class=\"line\">f=BytesIO()</div><div class=\"line\">f.write(<span class=\"string\">'中文啊'</span>.encode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\">print(f.getvalue())</div><div class=\"line\"></div><div class=\"line\">f2=BytesIO(<span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>)</div><div class=\"line\">f2.read()</div></pre></td></tr></table></figure>\n<h2 id=\"操作文件和目录\"><a href=\"#操作文件和目录\" class=\"headerlink\" title=\"操作文件和目录\"></a>操作文件和目录</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.abspath(<span class=\"string\">'.'</span>) <span class=\"comment\">#获取当前位置的绝对路径</span></div><div class=\"line\"><span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.join(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27'</span>,<span class=\"string\">'testdir'</span>)<span class=\"comment\">#把新目录的完整路劲表示出来</span></div><div class=\"line\"><span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\testdir'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.mkdir(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\testdir'</span>) <span class=\"comment\">#创建新目录</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rmdir(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\testdir'</span>) <span class=\"comment\">#删除该目录</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.split(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>) <span class=\"comment\">#拆分路径</span></div><div class=\"line\">(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27'</span>, <span class=\"string\">'IOtestfiles.txt'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.splitext(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>) <span class=\"comment\">#获得文件扩展名</span></div><div class=\"line\">(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles'</span>, <span class=\"string\">'.txt'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(<span class=\"string\">'IOtestfiles.txt'</span>,<span class=\"string\">'IOtestfiles.py'</span>) <span class=\"comment\">#修改当前目录下文件的命名，重命名</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.remove(<span class=\"string\">'IOtestfiles.py'</span>) <span class=\"comment\">#删除文件</span></div></pre></td></tr></table></figure>\n<h2 id=\"序列化（pickling）\"><a href=\"#序列化（pickling）\" class=\"headerlink\" title=\"序列化（pickling）\"></a>序列化（pickling）</h2><p>把变量从内存中变成可存储或传输的过程称之为序列化，序列化之后内容可以写入磁盘，或者通过网络传输到另外的机器中。<br>反过来，把变量内容从序列化的对象读到内存里称为反序列化，即unpickling。<br>Python中提供了<code>pickle</code>模块实现序列化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pickle</div><div class=\"line\">d=dict(name=<span class=\"string\">'li'</span>,age=<span class=\"number\">25</span>,score=<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'dump.txt'</span>,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    pickle.dump(d,f) <span class=\"comment\">#该函数将d序列化成bytes，然后这个bytes写入文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'dump.txt'</span>,<span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    d=pickle.load(f) <span class=\"comment\">#反序列化</span></div><div class=\"line\">print(d)</div></pre></td></tr></table></figure>\n<h3 id=\"序列化成JSON\"><a href=\"#序列化成JSON\" class=\"headerlink\" title=\"序列化成JSON\"></a>序列化成JSON</h3><p>该序列化更通用，更符合web标准，一般使用该种方法，进行序列化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\">d=dict(name=<span class=\"string\">'li'</span>,age=<span class=\"number\">25</span>,score=<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'dump.txt'</span>,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    json.dump(d,f) <span class=\"comment\">#该方法是返回的JSON字符串str，写入file-like-object文件中</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'dump.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    d=json.load(f) <span class=\"comment\">#反序列化，将文件中</span></div><div class=\"line\">print(d)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, score)</span>:</span></div><div class=\"line\">       self.name=name</div><div class=\"line\">       self.age=age</div><div class=\"line\">       self.score=score</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student2dict</span><span class=\"params\">(std)</span>:</span> <span class=\"comment\">#下面两个是独立于class的转换函数</span></div><div class=\"line\">        <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">        <span class=\"string\">'name'</span>: std.name,</div><div class=\"line\">        <span class=\"string\">'age'</span>: std.age,</div><div class=\"line\">        <span class=\"string\">'score'</span>: std.score</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dict2student</span><span class=\"params\">(d)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Student(d[<span class=\"string\">'name'</span>],d[<span class=\"string\">'age'</span>],d[<span class=\"string\">'score'</span>])</div><div class=\"line\"></div><div class=\"line\">s=Student(<span class=\"string\">'li'</span>,<span class=\"number\">20</span>,<span class=\"number\">100</span>)</div><div class=\"line\">print(json.dumps(s,default=student2dict))</div><div class=\"line\">&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"li\"</span>, <span class=\"string\">\"score\"</span>: <span class=\"number\">100</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">20</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.loads(json_str,object_hook=dict2student))</div><div class=\"line\">&lt;__main__.Student object at <span class=\"number\">0x000000371B3DB0B8</span>&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431917590955542f9ac5f5c1479faf787ff2b028ab47000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"IO编程\"><a href=\"#IO编程\" class=\"headerlink\" title=\"IO编程\"></a>IO编程</h1><p>Input Stream: 数据从外面（磁盘、网络）流进内存<br>Output Stream：数据从内存流出外面<br>外设CPU与内存速度不匹配的问题：</p>\n<ul>\n<li>同步IO：程序与数据写入按线性运行，一方必须等待另一方做完</li>\n<li>异步IO：程序（CPU执行）与数据写入按并行运行。</li>\n</ul>\n<p>两者的最大区别是是否 <strong>等待IO执行的结果</strong>,<br>异步IO具有相当复杂的编程模型：回调模式、轮询模式等<br>","more":"</p>\n<h2 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h2><p>Python 内置读写文件的函数，用法和C兼容。</p>\n<h3 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h3><ul>\n<li>read(): 适用于文件小，文件一次性读取比较方便的情况</li>\n<li>read(size): 不确定文件大小，可适用循环调用read(size)</li>\n<li>readlines(): 一行行读，返回一个list，适用于配置文件的读取等</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    f = open(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"comment\">#打开一个文件对象使用Open()函数</span></div><div class=\"line\">    print(f.read()) <span class=\"comment\">#read()方法可以一次读取文件所有内容</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">finally</span>:</div><div class=\"line\">    <span class=\"keyword\">if</span> f:</div><div class=\"line\">        f.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#等价于下列方法，with语句自动调用close()方法,此方法是等价的。</span></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    print(f.read())</div></pre></td></tr></table></figure>\n<h3 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h3><p>调用<code>open()</code>函数时，传入标识符<code>w</code>或者<code>wb</code>表示写文本文件或二进制文件.适用write()函数将要写入的字符串写入文件：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    f.write(<span class=\"string\">'haha,so good, i love python ~'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"StringIO-和-BytesIO\"><a href=\"#StringIO-和-BytesIO\" class=\"headerlink\" title=\"StringIO 和 BytesIO\"></a>StringIO 和 BytesIO</h2><p>在内存中操作String和Bytes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> StringIO</div><div class=\"line\">f=StringIO()</div><div class=\"line\">f.write(<span class=\"string\">'hello'</span>)</div><div class=\"line\">f.write(<span class=\"string\">' '</span>)</div><div class=\"line\">f.write(<span class=\"string\">'good boy!'</span>)</div><div class=\"line\">print(f.getvalue())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">f2=StringIO(<span class=\"string\">'Hello!\\nbad！\\n Guys!'</span>)</div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    s=f2.readline()</div><div class=\"line\">    <span class=\"keyword\">if</span> s==<span class=\"string\">''</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\">    print(s.strip())</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</div><div class=\"line\">f=BytesIO()</div><div class=\"line\">f.write(<span class=\"string\">'中文啊'</span>.encode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\">print(f.getvalue())</div><div class=\"line\"></div><div class=\"line\">f2=BytesIO(<span class=\"string\">b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'</span>)</div><div class=\"line\">f2.read()</div></pre></td></tr></table></figure>\n<h2 id=\"操作文件和目录\"><a href=\"#操作文件和目录\" class=\"headerlink\" title=\"操作文件和目录\"></a>操作文件和目录</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.abspath(<span class=\"string\">'.'</span>) <span class=\"comment\">#获取当前位置的绝对路径</span></div><div class=\"line\"><span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.join(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27'</span>,<span class=\"string\">'testdir'</span>)<span class=\"comment\">#把新目录的完整路劲表示出来</span></div><div class=\"line\"><span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\testdir'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.mkdir(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\testdir'</span>) <span class=\"comment\">#创建新目录</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rmdir(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\testdir'</span>) <span class=\"comment\">#删除该目录</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.split(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>) <span class=\"comment\">#拆分路径</span></div><div class=\"line\">(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27'</span>, <span class=\"string\">'IOtestfiles.txt'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.path.splitext(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles.txt'</span>) <span class=\"comment\">#获得文件扩展名</span></div><div class=\"line\">(<span class=\"string\">'D:\\\\coder\\\\Python\\\\6.27\\\\IOtestfiles'</span>, <span class=\"string\">'.txt'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(<span class=\"string\">'IOtestfiles.txt'</span>,<span class=\"string\">'IOtestfiles.py'</span>) <span class=\"comment\">#修改当前目录下文件的命名，重命名</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.remove(<span class=\"string\">'IOtestfiles.py'</span>) <span class=\"comment\">#删除文件</span></div></pre></td></tr></table></figure>\n<h2 id=\"序列化（pickling）\"><a href=\"#序列化（pickling）\" class=\"headerlink\" title=\"序列化（pickling）\"></a>序列化（pickling）</h2><p>把变量从内存中变成可存储或传输的过程称之为序列化，序列化之后内容可以写入磁盘，或者通过网络传输到另外的机器中。<br>反过来，把变量内容从序列化的对象读到内存里称为反序列化，即unpickling。<br>Python中提供了<code>pickle</code>模块实现序列化。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> pickle</div><div class=\"line\">d=dict(name=<span class=\"string\">'li'</span>,age=<span class=\"number\">25</span>,score=<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'dump.txt'</span>,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    pickle.dump(d,f) <span class=\"comment\">#该函数将d序列化成bytes，然后这个bytes写入文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'dump.txt'</span>,<span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    d=pickle.load(f) <span class=\"comment\">#反序列化</span></div><div class=\"line\">print(d)</div></pre></td></tr></table></figure>\n<h3 id=\"序列化成JSON\"><a href=\"#序列化成JSON\" class=\"headerlink\" title=\"序列化成JSON\"></a>序列化成JSON</h3><p>该序列化更通用，更符合web标准，一般使用该种方法，进行序列化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\">d=dict(name=<span class=\"string\">'li'</span>,age=<span class=\"number\">25</span>,score=<span class=\"number\">100</span>)</div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'dump.txt'</span>,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    json.dump(d,f) <span class=\"comment\">#该方法是返回的JSON字符串str，写入file-like-object文件中</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'dump.txt'</span>,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    d=json.load(f) <span class=\"comment\">#反序列化，将文件中</span></div><div class=\"line\">print(d)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, age, score)</span>:</span></div><div class=\"line\">       self.name=name</div><div class=\"line\">       self.age=age</div><div class=\"line\">       self.score=score</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">student2dict</span><span class=\"params\">(std)</span>:</span> <span class=\"comment\">#下面两个是独立于class的转换函数</span></div><div class=\"line\">        <span class=\"keyword\">return</span>&#123;</div><div class=\"line\">        <span class=\"string\">'name'</span>: std.name,</div><div class=\"line\">        <span class=\"string\">'age'</span>: std.age,</div><div class=\"line\">        <span class=\"string\">'score'</span>: std.score</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dict2student</span><span class=\"params\">(d)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Student(d[<span class=\"string\">'name'</span>],d[<span class=\"string\">'age'</span>],d[<span class=\"string\">'score'</span>])</div><div class=\"line\"></div><div class=\"line\">s=Student(<span class=\"string\">'li'</span>,<span class=\"number\">20</span>,<span class=\"number\">100</span>)</div><div class=\"line\">print(json.dumps(s,default=student2dict))</div><div class=\"line\">&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"li\"</span>, <span class=\"string\">\"score\"</span>: <span class=\"number\">100</span>, <span class=\"string\">\"age\"</span>: <span class=\"number\">20</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(json.loads(json_str,object_hook=dict2student))</div><div class=\"line\">&lt;__main__.Student object at <span class=\"number\">0x000000371B3DB0B8</span>&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431917590955542f9ac5f5c1479faf787ff2b028ab47000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>"},{"title":"Python基础学习之[TCP/UDP编程]","copyright":true,"date":"2017-07-22T06:41:50.000Z","_content":"\n# TCP编程\nTCP是建立可靠连接，通信双方可以使用流的形式发送数据。\n`Socket`表示 **打开一个网络链接，** 需要目标地址的  **IP地址和端口号，并指定协议类型（TCP or UDP）。**\n\n<!--more-->\n\n## 客户端(Client)\n\n创建一个基于TCP连接的 **Socket：**\n\n```python\n\nimport socket #导入socket库\n#创建一个socket，AF_INET指定的是IPv4协议，SOCK_STREAM是使用面向流的TCP协议\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\n#提供web服务的IP或者域名，一般web服务的端口是80端口，里面是一个tuple\ns.connect(('www.sina.com.cn', 80))\n\n#发送HTTP请求，使用HTTP协议的格式，\\r\\n是回车换行\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n')\n\n#接收数据\nbuffer=[]\nwhile True:\n    d=s.recv(1024) #每次最多接收1k字节的数据\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata=b''.join(buffer)\n\ns.close() #关闭连接\n\n#接收到的数据包含http的header和body，将两者分离，使用回车换行符作为分隔符\nheader, html = data.split(b'\\r\\n\\r\\n',1)\nprint(header.decode('utf-8'))\n\nwith open('sina.html','wb') as f:\n    f.write(html)\n\n```\n\n## 服务器(Server)\n服务器首先需要绑定一个端口（web服务器一般是绑定固定端口80）并监听来自其他客户端的连接，一旦有客户端请求连接，就创建该Socket连接。\n一个Socket依赖4项：** 服务器地址、服务器端口、客户端地址、客户端端口。** 这些地址指的是IP地址。\n每个新的连接需要一个新的进程或者新的线程来处理。\n\n```python\n# TcpServer.py\nimport socket,threading,time\n# 线程处理模块\ndef tcplink(sock,addr):\n    print('Accept new connection from %s:%s...' % addr)\n    sock.send(b'Welcome!')\n    while True:\n        data= sock.recv(1024)\n        time.sleep(1)\n        if not data or data.decode('utf-8') == 'exit':\n            break\n        sock.send(('Hello,%s!' %data.decode('utf-8')).encode('utf-8'))\n    sock.close()\n    print('connection from %s:%s closed.' %addr)\n\n\n#创建一个基于IPv4和TCP协议的socket\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\n#绑定监听的地址和端口，127.0.0.1表示的是本机地址，小于1024的端口号必须要有管理员权限才能够绑定\ns.bind(('127.0.0.1',9999)) #注意传进去的是一个tuple\n\n#监听端口,传入的参数表示的是指定等待连接的最大数量\ns.listen(5)\nprint('Waiting for connection...')\n\n#接受来自客户端的连接，accept()等待返回一个客户端的连接\nwhile True:\n    sock, addr = s.accept() #接收一个新连接\n    t = threading.Thread(target=tcplink, args=(sock,addr)) #创建新线程来处理TCP连接\n    t.start()\n\n\n# 测试所用客户端程序\n# TcpClient.py\nimport socket\ns= socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect(('127.0.0.1',9999)) #建立连接,注意传进去的是一个tuple\n\nprint(s.recv(1024).decode('utf-8')) #接收欢迎信息，welcome！\nfor data in [b'Li','Cheng','victor']: #发送数据\n    s.send(data)\n    print(s.recv(1024).decode('utf-8'))\ns.send(b'exit') #退出连接\ns.close()\n\n结果如下：\nServer side：\n[root@localhost Python]# python TcpServer.py\nWaiting for connection...\nAccept new connection from 127.0.0.1:55828...\nconnection from 127.0.0.1:55828 closed.\n\nClient side：\n[root@localhost Python]# python TcpClient.py\nWelcome!\nHello,Li!\nHello,Cheng!\nHello,victor!\n\n```\n\n# UDP编程\nUDP是面向无连接的协议，使用UDP协议，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发送数据包。UDP传输数据是不可靠的，但速度快，，比如有些视频数据可以使用UDP传送。\n\n** 服务器绑定UDP端口和TCP端口互不冲突，端口号9999既可以与UDP绑定又可以与TCP绑定。 **\n\n```python\n# UDPServer.py\n\nimport socket\n\n# SOCK_DGRAM指定了socket的类型是UDP，绑定端口和地址\ns=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\n\ns.bind(('127.0.0.1',9999))\nprint('Bind UDP on 9999...')\nwhile True:\n     # recvfrom函数返回数据和客户端的地址（包含IP和端口号），与TCP不同的是，tcp使用accept函数（返回socket对象和地址addr）\n\tdata, addr=s.recvfrom(1024)\n\tprint('Receive from %s:%s.' %addr)\n\ts.sendto(b'hello %s!' %data,addr) #调用sendto函数将数据用UDP发送回客户端\n\n# UDPClent.py\nimport socket\ns=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\nfor data in [b'Li', b'Cheng', b'victor']: #发送数据\n    s.sendto(data,('127.0.0.1',9999)) # 通过sendto函数将数据发送给服务器\n    print(s.recv(1024).decode('utf-8')) #打印出从服务器返回的信息，从服务器接收数据仍然调用recv()方法。\ns.close()\n\n结果是：\nServer side：\n[root@localhost Python]# python UDPServer.py\nBind UDP on 9999...\nReceive from 127.0.0.1:60359.\nReceive from 127.0.0.1:60359.\nReceive from 127.0.0.1:60359.\n\nClient side：\n[root@localhost Python]# python UDPClient.py\nhello Li!\nhello Cheng!\nhello victor!\n\n```\n# Reference\n[liaoxuefeng的博客](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432004374523e495f640612f4b08975398796939ec3c000#0)\n","source":"_posts/Python基础学习之-TCP-UDP编程.md","raw":"---\ntitle: 'Python基础学习之[TCP/UDP编程]'\ncopyright: true\ndate: 2017-07-22 14:41:50\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n\n# TCP编程\nTCP是建立可靠连接，通信双方可以使用流的形式发送数据。\n`Socket`表示 **打开一个网络链接，** 需要目标地址的  **IP地址和端口号，并指定协议类型（TCP or UDP）。**\n\n<!--more-->\n\n## 客户端(Client)\n\n创建一个基于TCP连接的 **Socket：**\n\n```python\n\nimport socket #导入socket库\n#创建一个socket，AF_INET指定的是IPv4协议，SOCK_STREAM是使用面向流的TCP协议\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\n#提供web服务的IP或者域名，一般web服务的端口是80端口，里面是一个tuple\ns.connect(('www.sina.com.cn', 80))\n\n#发送HTTP请求，使用HTTP协议的格式，\\r\\n是回车换行\ns.send(b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n')\n\n#接收数据\nbuffer=[]\nwhile True:\n    d=s.recv(1024) #每次最多接收1k字节的数据\n    if d:\n        buffer.append(d)\n    else:\n        break\ndata=b''.join(buffer)\n\ns.close() #关闭连接\n\n#接收到的数据包含http的header和body，将两者分离，使用回车换行符作为分隔符\nheader, html = data.split(b'\\r\\n\\r\\n',1)\nprint(header.decode('utf-8'))\n\nwith open('sina.html','wb') as f:\n    f.write(html)\n\n```\n\n## 服务器(Server)\n服务器首先需要绑定一个端口（web服务器一般是绑定固定端口80）并监听来自其他客户端的连接，一旦有客户端请求连接，就创建该Socket连接。\n一个Socket依赖4项：** 服务器地址、服务器端口、客户端地址、客户端端口。** 这些地址指的是IP地址。\n每个新的连接需要一个新的进程或者新的线程来处理。\n\n```python\n# TcpServer.py\nimport socket,threading,time\n# 线程处理模块\ndef tcplink(sock,addr):\n    print('Accept new connection from %s:%s...' % addr)\n    sock.send(b'Welcome!')\n    while True:\n        data= sock.recv(1024)\n        time.sleep(1)\n        if not data or data.decode('utf-8') == 'exit':\n            break\n        sock.send(('Hello,%s!' %data.decode('utf-8')).encode('utf-8'))\n    sock.close()\n    print('connection from %s:%s closed.' %addr)\n\n\n#创建一个基于IPv4和TCP协议的socket\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n\n#绑定监听的地址和端口，127.0.0.1表示的是本机地址，小于1024的端口号必须要有管理员权限才能够绑定\ns.bind(('127.0.0.1',9999)) #注意传进去的是一个tuple\n\n#监听端口,传入的参数表示的是指定等待连接的最大数量\ns.listen(5)\nprint('Waiting for connection...')\n\n#接受来自客户端的连接，accept()等待返回一个客户端的连接\nwhile True:\n    sock, addr = s.accept() #接收一个新连接\n    t = threading.Thread(target=tcplink, args=(sock,addr)) #创建新线程来处理TCP连接\n    t.start()\n\n\n# 测试所用客户端程序\n# TcpClient.py\nimport socket\ns= socket.socket(socket.AF_INET,socket.SOCK_STREAM)\ns.connect(('127.0.0.1',9999)) #建立连接,注意传进去的是一个tuple\n\nprint(s.recv(1024).decode('utf-8')) #接收欢迎信息，welcome！\nfor data in [b'Li','Cheng','victor']: #发送数据\n    s.send(data)\n    print(s.recv(1024).decode('utf-8'))\ns.send(b'exit') #退出连接\ns.close()\n\n结果如下：\nServer side：\n[root@localhost Python]# python TcpServer.py\nWaiting for connection...\nAccept new connection from 127.0.0.1:55828...\nconnection from 127.0.0.1:55828 closed.\n\nClient side：\n[root@localhost Python]# python TcpClient.py\nWelcome!\nHello,Li!\nHello,Cheng!\nHello,victor!\n\n```\n\n# UDP编程\nUDP是面向无连接的协议，使用UDP协议，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发送数据包。UDP传输数据是不可靠的，但速度快，，比如有些视频数据可以使用UDP传送。\n\n** 服务器绑定UDP端口和TCP端口互不冲突，端口号9999既可以与UDP绑定又可以与TCP绑定。 **\n\n```python\n# UDPServer.py\n\nimport socket\n\n# SOCK_DGRAM指定了socket的类型是UDP，绑定端口和地址\ns=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\n\ns.bind(('127.0.0.1',9999))\nprint('Bind UDP on 9999...')\nwhile True:\n     # recvfrom函数返回数据和客户端的地址（包含IP和端口号），与TCP不同的是，tcp使用accept函数（返回socket对象和地址addr）\n\tdata, addr=s.recvfrom(1024)\n\tprint('Receive from %s:%s.' %addr)\n\ts.sendto(b'hello %s!' %data,addr) #调用sendto函数将数据用UDP发送回客户端\n\n# UDPClent.py\nimport socket\ns=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\nfor data in [b'Li', b'Cheng', b'victor']: #发送数据\n    s.sendto(data,('127.0.0.1',9999)) # 通过sendto函数将数据发送给服务器\n    print(s.recv(1024).decode('utf-8')) #打印出从服务器返回的信息，从服务器接收数据仍然调用recv()方法。\ns.close()\n\n结果是：\nServer side：\n[root@localhost Python]# python UDPServer.py\nBind UDP on 9999...\nReceive from 127.0.0.1:60359.\nReceive from 127.0.0.1:60359.\nReceive from 127.0.0.1:60359.\n\nClient side：\n[root@localhost Python]# python UDPClient.py\nhello Li!\nhello Cheng!\nhello victor!\n\n```\n# Reference\n[liaoxuefeng的博客](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432004374523e495f640612f4b08975398796939ec3c000#0)\n","slug":"Python基础学习之-TCP-UDP编程","published":1,"updated":"2017-07-22T06:50:57.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c6v000p4ov120unvpt1","content":"<h1 id=\"TCP编程\"><a href=\"#TCP编程\" class=\"headerlink\" title=\"TCP编程\"></a>TCP编程</h1><p>TCP是建立可靠连接，通信双方可以使用流的形式发送数据。<br><code>Socket</code>表示 <strong>打开一个网络链接，</strong> 需要目标地址的  <strong>IP地址和端口号，并指定协议类型（TCP or UDP）。</strong></p>\n<a id=\"more\"></a>\n<h2 id=\"客户端-Client\"><a href=\"#客户端-Client\" class=\"headerlink\" title=\"客户端(Client)\"></a>客户端(Client)</h2><p>创建一个基于TCP连接的 <strong>Socket：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket <span class=\"comment\">#导入socket库</span></div><div class=\"line\"><span class=\"comment\">#创建一个socket，AF_INET指定的是IPv4协议，SOCK_STREAM是使用面向流的TCP协议</span></div><div class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#提供web服务的IP或者域名，一般web服务的端口是80端口，里面是一个tuple</span></div><div class=\"line\">s.connect((<span class=\"string\">'www.sina.com.cn'</span>, <span class=\"number\">80</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#发送HTTP请求，使用HTTP协议的格式，\\r\\n是回车换行</span></div><div class=\"line\">s.send(<span class=\"string\">b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#接收数据</span></div><div class=\"line\">buffer=[]</div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    d=s.recv(<span class=\"number\">1024</span>) <span class=\"comment\">#每次最多接收1k字节的数据</span></div><div class=\"line\">    <span class=\"keyword\">if</span> d:</div><div class=\"line\">        buffer.append(d)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\">data=<span class=\"string\">b''</span>.join(buffer)</div><div class=\"line\"></div><div class=\"line\">s.close() <span class=\"comment\">#关闭连接</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#接收到的数据包含http的header和body，将两者分离，使用回车换行符作为分隔符</span></div><div class=\"line\">header, html = data.split(<span class=\"string\">b'\\r\\n\\r\\n'</span>,<span class=\"number\">1</span>)</div><div class=\"line\">print(header.decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'sina.html'</span>,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    f.write(html)</div></pre></td></tr></table></figure>\n<h2 id=\"服务器-Server\"><a href=\"#服务器-Server\" class=\"headerlink\" title=\"服务器(Server)\"></a>服务器(Server)</h2><p>服务器首先需要绑定一个端口（web服务器一般是绑定固定端口80）并监听来自其他客户端的连接，一旦有客户端请求连接，就创建该Socket连接。<br>一个Socket依赖4项：<strong> 服务器地址、服务器端口、客户端地址、客户端端口。</strong> 这些地址指的是IP地址。<br>每个新的连接需要一个新的进程或者新的线程来处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># TcpServer.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> socket,threading,time</div><div class=\"line\"><span class=\"comment\"># 线程处理模块</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tcplink</span><span class=\"params\">(sock,addr)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Accept new connection from %s:%s...'</span> % addr)</div><div class=\"line\">    sock.send(<span class=\"string\">b'Welcome!'</span>)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        data= sock.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">        time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">or</span> data.decode(<span class=\"string\">'utf-8'</span>) == <span class=\"string\">'exit'</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        sock.send((<span class=\"string\">'Hello,%s!'</span> %data.decode(<span class=\"string\">'utf-8'</span>)).encode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\">    sock.close()</div><div class=\"line\">    print(<span class=\"string\">'connection from %s:%s closed.'</span> %addr)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#创建一个基于IPv4和TCP协议的socket</span></div><div class=\"line\">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#绑定监听的地址和端口，127.0.0.1表示的是本机地址，小于1024的端口号必须要有管理员权限才能够绑定</span></div><div class=\"line\">s.bind((<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">9999</span>)) <span class=\"comment\">#注意传进去的是一个tuple</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#监听端口,传入的参数表示的是指定等待连接的最大数量</span></div><div class=\"line\">s.listen(<span class=\"number\">5</span>)</div><div class=\"line\">print(<span class=\"string\">'Waiting for connection...'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#接受来自客户端的连接，accept()等待返回一个客户端的连接</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    sock, addr = s.accept() <span class=\"comment\">#接收一个新连接</span></div><div class=\"line\">    t = threading.Thread(target=tcplink, args=(sock,addr)) <span class=\"comment\">#创建新线程来处理TCP连接</span></div><div class=\"line\">    t.start()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 测试所用客户端程序</span></div><div class=\"line\"><span class=\"comment\"># TcpClient.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\">s= socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class=\"line\">s.connect((<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">9999</span>)) <span class=\"comment\">#建立连接,注意传进去的是一个tuple</span></div><div class=\"line\"></div><div class=\"line\">print(s.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf-8'</span>)) <span class=\"comment\">#接收欢迎信息，welcome！</span></div><div class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> [<span class=\"string\">b'Li'</span>,<span class=\"string\">'Cheng'</span>,<span class=\"string\">'victor'</span>]: <span class=\"comment\">#发送数据</span></div><div class=\"line\">    s.send(data)</div><div class=\"line\">    print(s.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\">s.send(<span class=\"string\">b'exit'</span>) <span class=\"comment\">#退出连接</span></div><div class=\"line\">s.close()</div><div class=\"line\"></div><div class=\"line\">结果如下：</div><div class=\"line\">Server side：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python TcpServer.py</span></div><div class=\"line\">Waiting <span class=\"keyword\">for</span> connection...</div><div class=\"line\">Accept new connection <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">55828.</span>..</div><div class=\"line\">connection <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">55828</span> closed.</div><div class=\"line\"></div><div class=\"line\">Client side：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python TcpClient.py</span></div><div class=\"line\">Welcome!</div><div class=\"line\">Hello,Li!</div><div class=\"line\">Hello,Cheng!</div><div class=\"line\">Hello,victor!</div></pre></td></tr></table></figure>\n<h1 id=\"UDP编程\"><a href=\"#UDP编程\" class=\"headerlink\" title=\"UDP编程\"></a>UDP编程</h1><p>UDP是面向无连接的协议，使用UDP协议，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发送数据包。UDP传输数据是不可靠的，但速度快，，比如有些视频数据可以使用UDP传送。</p>\n<p><strong> 服务器绑定UDP端口和TCP端口互不冲突，端口号9999既可以与UDP绑定又可以与TCP绑定。 </strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># UDPServer.py</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># SOCK_DGRAM指定了socket的类型是UDP，绑定端口和地址</span></div><div class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</div><div class=\"line\"></div><div class=\"line\">s.bind((<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">9999</span>))</div><div class=\"line\">print(<span class=\"string\">'Bind UDP on 9999...'</span>)</div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">     <span class=\"comment\"># recvfrom函数返回数据和客户端的地址（包含IP和端口号），与TCP不同的是，tcp使用accept函数（返回socket对象和地址addr）</span></div><div class=\"line\">\tdata, addr=s.recvfrom(<span class=\"number\">1024</span>)</div><div class=\"line\">\tprint(<span class=\"string\">'Receive from %s:%s.'</span> %addr)</div><div class=\"line\">\ts.sendto(<span class=\"string\">b'hello %s!'</span> %data,addr) <span class=\"comment\">#调用sendto函数将数据用UDP发送回客户端</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># UDPClent.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</div><div class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> [<span class=\"string\">b'Li'</span>, <span class=\"string\">b'Cheng'</span>, <span class=\"string\">b'victor'</span>]: <span class=\"comment\">#发送数据</span></div><div class=\"line\">    s.sendto(data,(<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">9999</span>)) <span class=\"comment\"># 通过sendto函数将数据发送给服务器</span></div><div class=\"line\">    print(s.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf-8'</span>)) <span class=\"comment\">#打印出从服务器返回的信息，从服务器接收数据仍然调用recv()方法。</span></div><div class=\"line\">s.close()</div><div class=\"line\"></div><div class=\"line\">结果是：</div><div class=\"line\">Server side：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python UDPServer.py</span></div><div class=\"line\">Bind UDP on <span class=\"number\">9999.</span>..</div><div class=\"line\">Receive <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">60359.</span></div><div class=\"line\">Receive <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">60359.</span></div><div class=\"line\">Receive <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">60359.</span></div><div class=\"line\"></div><div class=\"line\">Client side：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python UDPClient.py</span></div><div class=\"line\">hello Li!</div><div class=\"line\">hello Cheng!</div><div class=\"line\">hello victor!</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432004374523e495f640612f4b08975398796939ec3c000#0\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"TCP编程\"><a href=\"#TCP编程\" class=\"headerlink\" title=\"TCP编程\"></a>TCP编程</h1><p>TCP是建立可靠连接，通信双方可以使用流的形式发送数据。<br><code>Socket</code>表示 <strong>打开一个网络链接，</strong> 需要目标地址的  <strong>IP地址和端口号，并指定协议类型（TCP or UDP）。</strong></p>","more":"<h2 id=\"客户端-Client\"><a href=\"#客户端-Client\" class=\"headerlink\" title=\"客户端(Client)\"></a>客户端(Client)</h2><p>创建一个基于TCP连接的 <strong>Socket：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket <span class=\"comment\">#导入socket库</span></div><div class=\"line\"><span class=\"comment\">#创建一个socket，AF_INET指定的是IPv4协议，SOCK_STREAM是使用面向流的TCP协议</span></div><div class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#提供web服务的IP或者域名，一般web服务的端口是80端口，里面是一个tuple</span></div><div class=\"line\">s.connect((<span class=\"string\">'www.sina.com.cn'</span>, <span class=\"number\">80</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#发送HTTP请求，使用HTTP协议的格式，\\r\\n是回车换行</span></div><div class=\"line\">s.send(<span class=\"string\">b'GET / HTTP/1.1\\r\\nHost: www.sina.com.cn\\r\\nConnection: close\\r\\n\\r\\n'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#接收数据</span></div><div class=\"line\">buffer=[]</div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    d=s.recv(<span class=\"number\">1024</span>) <span class=\"comment\">#每次最多接收1k字节的数据</span></div><div class=\"line\">    <span class=\"keyword\">if</span> d:</div><div class=\"line\">        buffer.append(d)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\">data=<span class=\"string\">b''</span>.join(buffer)</div><div class=\"line\"></div><div class=\"line\">s.close() <span class=\"comment\">#关闭连接</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#接收到的数据包含http的header和body，将两者分离，使用回车换行符作为分隔符</span></div><div class=\"line\">header, html = data.split(<span class=\"string\">b'\\r\\n\\r\\n'</span>,<span class=\"number\">1</span>)</div><div class=\"line\">print(header.decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'sina.html'</span>,<span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">    f.write(html)</div></pre></td></tr></table></figure>\n<h2 id=\"服务器-Server\"><a href=\"#服务器-Server\" class=\"headerlink\" title=\"服务器(Server)\"></a>服务器(Server)</h2><p>服务器首先需要绑定一个端口（web服务器一般是绑定固定端口80）并监听来自其他客户端的连接，一旦有客户端请求连接，就创建该Socket连接。<br>一个Socket依赖4项：<strong> 服务器地址、服务器端口、客户端地址、客户端端口。</strong> 这些地址指的是IP地址。<br>每个新的连接需要一个新的进程或者新的线程来处理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># TcpServer.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> socket,threading,time</div><div class=\"line\"><span class=\"comment\"># 线程处理模块</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tcplink</span><span class=\"params\">(sock,addr)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Accept new connection from %s:%s...'</span> % addr)</div><div class=\"line\">    sock.send(<span class=\"string\">b'Welcome!'</span>)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        data= sock.recv(<span class=\"number\">1024</span>)</div><div class=\"line\">        time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data <span class=\"keyword\">or</span> data.decode(<span class=\"string\">'utf-8'</span>) == <span class=\"string\">'exit'</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        sock.send((<span class=\"string\">'Hello,%s!'</span> %data.decode(<span class=\"string\">'utf-8'</span>)).encode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\">    sock.close()</div><div class=\"line\">    print(<span class=\"string\">'connection from %s:%s closed.'</span> %addr)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#创建一个基于IPv4和TCP协议的socket</span></div><div class=\"line\">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#绑定监听的地址和端口，127.0.0.1表示的是本机地址，小于1024的端口号必须要有管理员权限才能够绑定</span></div><div class=\"line\">s.bind((<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">9999</span>)) <span class=\"comment\">#注意传进去的是一个tuple</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#监听端口,传入的参数表示的是指定等待连接的最大数量</span></div><div class=\"line\">s.listen(<span class=\"number\">5</span>)</div><div class=\"line\">print(<span class=\"string\">'Waiting for connection...'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#接受来自客户端的连接，accept()等待返回一个客户端的连接</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    sock, addr = s.accept() <span class=\"comment\">#接收一个新连接</span></div><div class=\"line\">    t = threading.Thread(target=tcplink, args=(sock,addr)) <span class=\"comment\">#创建新线程来处理TCP连接</span></div><div class=\"line\">    t.start()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 测试所用客户端程序</span></div><div class=\"line\"><span class=\"comment\"># TcpClient.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\">s= socket.socket(socket.AF_INET,socket.SOCK_STREAM)</div><div class=\"line\">s.connect((<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">9999</span>)) <span class=\"comment\">#建立连接,注意传进去的是一个tuple</span></div><div class=\"line\"></div><div class=\"line\">print(s.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf-8'</span>)) <span class=\"comment\">#接收欢迎信息，welcome！</span></div><div class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> [<span class=\"string\">b'Li'</span>,<span class=\"string\">'Cheng'</span>,<span class=\"string\">'victor'</span>]: <span class=\"comment\">#发送数据</span></div><div class=\"line\">    s.send(data)</div><div class=\"line\">    print(s.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\">s.send(<span class=\"string\">b'exit'</span>) <span class=\"comment\">#退出连接</span></div><div class=\"line\">s.close()</div><div class=\"line\"></div><div class=\"line\">结果如下：</div><div class=\"line\">Server side：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python TcpServer.py</span></div><div class=\"line\">Waiting <span class=\"keyword\">for</span> connection...</div><div class=\"line\">Accept new connection <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">55828.</span>..</div><div class=\"line\">connection <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">55828</span> closed.</div><div class=\"line\"></div><div class=\"line\">Client side：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python TcpClient.py</span></div><div class=\"line\">Welcome!</div><div class=\"line\">Hello,Li!</div><div class=\"line\">Hello,Cheng!</div><div class=\"line\">Hello,victor!</div></pre></td></tr></table></figure>\n<h1 id=\"UDP编程\"><a href=\"#UDP编程\" class=\"headerlink\" title=\"UDP编程\"></a>UDP编程</h1><p>UDP是面向无连接的协议，使用UDP协议，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发送数据包。UDP传输数据是不可靠的，但速度快，，比如有些视频数据可以使用UDP传送。</p>\n<p><strong> 服务器绑定UDP端口和TCP端口互不冲突，端口号9999既可以与UDP绑定又可以与TCP绑定。 </strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># UDPServer.py</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># SOCK_DGRAM指定了socket的类型是UDP，绑定端口和地址</span></div><div class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</div><div class=\"line\"></div><div class=\"line\">s.bind((<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">9999</span>))</div><div class=\"line\">print(<span class=\"string\">'Bind UDP on 9999...'</span>)</div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">     <span class=\"comment\"># recvfrom函数返回数据和客户端的地址（包含IP和端口号），与TCP不同的是，tcp使用accept函数（返回socket对象和地址addr）</span></div><div class=\"line\">\tdata, addr=s.recvfrom(<span class=\"number\">1024</span>)</div><div class=\"line\">\tprint(<span class=\"string\">'Receive from %s:%s.'</span> %addr)</div><div class=\"line\">\ts.sendto(<span class=\"string\">b'hello %s!'</span> %data,addr) <span class=\"comment\">#调用sendto函数将数据用UDP发送回客户端</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># UDPClent.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\">s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</div><div class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> [<span class=\"string\">b'Li'</span>, <span class=\"string\">b'Cheng'</span>, <span class=\"string\">b'victor'</span>]: <span class=\"comment\">#发送数据</span></div><div class=\"line\">    s.sendto(data,(<span class=\"string\">'127.0.0.1'</span>,<span class=\"number\">9999</span>)) <span class=\"comment\"># 通过sendto函数将数据发送给服务器</span></div><div class=\"line\">    print(s.recv(<span class=\"number\">1024</span>).decode(<span class=\"string\">'utf-8'</span>)) <span class=\"comment\">#打印出从服务器返回的信息，从服务器接收数据仍然调用recv()方法。</span></div><div class=\"line\">s.close()</div><div class=\"line\"></div><div class=\"line\">结果是：</div><div class=\"line\">Server side：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python UDPServer.py</span></div><div class=\"line\">Bind UDP on <span class=\"number\">9999.</span>..</div><div class=\"line\">Receive <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">60359.</span></div><div class=\"line\">Receive <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">60359.</span></div><div class=\"line\">Receive <span class=\"keyword\">from</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">60359.</span></div><div class=\"line\"></div><div class=\"line\">Client side：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python UDPClient.py</span></div><div class=\"line\">hello Li!</div><div class=\"line\">hello Cheng!</div><div class=\"line\">hello victor!</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432004374523e495f640612f4b08975398796939ec3c000#0\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>"},{"title":"Python基础学习之[list、tuple、dic & set]","copyright":true,"date":"2017-07-07T15:16:04.000Z","_content":"\n**list和tuple是Python内置的有序集合，一个可变，一个不可变**\n# list\npython 内置的数据类型列表：**list**\n例如：classmates = ['Michael','Bob','Tracy']\n使用 **[ ]** 表示的是list，是一个可变的有序表，可用append方法在末尾添加元素，也可以使用insert方法在指定位置添加，相应位置后的元素往后移，使用pop方法删除末尾或者指定索引位置的元素。\n<!--more-->\n\n# tuple\n有序表元组：tuple\ntuple一旦初始化后就不能够修改，使用 **（）** 表示的是tuple\n例如：classmates = ('Michael','Bob','Tracy')\n定义空tuple：t=();\n定义只有一个元素的tuple：t=(1,)\n **必须加一个逗号，消除歧义，否则会将括号认为是数学公式中的小括号，计算结果是1**\n\n# list & tuple 混合使用\n  t = ('a', 'b', ['A', 'B'])\n  tuple中含有list，则我们可以有操作：\nt[2][0] = 'X'\nt[2][1] = 'Y'\nt=('a', 'b', ['X', 'Y'])\n\n# dict\nPython内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储\nkey是唯一的，key只能对应一个value\n\n和list比较，dict有以下几个特点：\n\n1. 查找和插入的速度极快，不会随着key的增加而变慢；\n2. 需要占用大量的内存，内存浪费多。\n而list相反：\n\n1. 查找和插入的时间随着元素的增加而增加；\n2. 占用空间小，浪费内存很少。\n所以，dict是用空间来换取时间的一种方法。\n**dict的key必须是不可变对象**\n\n# set\nset和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。\nset可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作\n**str是不变对象，而list是可变对象，最常用的key是字符串str**\n\n# 定义函数\n定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回\n```python\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n## 返回多值\n\n```python\nimport math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n\n x, y = move(100, 100, 60, math.pi / 6)\nprint(x, y)\n```\n**Python函数返回的仍然是单一值，实际上返回值是一个tuple！返回一个tuple实际上可以省略括号（）**\n\n## 函数参数问题\nPython中定义函数有五种参数：**必选参数、默认参数、可变参数、关键字参数和命名关键字参数**\nPython的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数\n如：**def power(x, n=2): #是默认参数，默认参数必须指向不变对象！**\n\n### 可变参数\n可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个**tuple**\n```python\n\ndef calc(*numbers): #表示的是参数numbers接收到的是一个tuple\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n\n  调用的时候\n  calc(1,2,3)\n  或者 nums = [1,2,3]\n       calc(*nums) #*nums表示把nums这个list的所有元素作为可变参数传进去\n\n```\n\n### 关键字参数\n关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个**dict**\n下例中**kw为关键字参数，调用函数时可以只传入必选参数，关键字参数可以不传入。\n\n```python\ndef person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n\n    >>> person('Michael', 30)\n    name: Michael age: 30 other: {}\n\n  >>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n  >>> person('Jack', 24, city=extra['city'], job=extra['job'])\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n\n>>> person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'} # **extra表示把extra这个dict的所有key-value用关键字参数传入到函数**kw中\n\n```\n### 命名关键字参数\n限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：\n\n```python\n\ndef person(name, age, *, city, job):\n    print(name, age, city, job)\n\n如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：\ndef person(name, age, *args, city, job): # name, age是位置参数，args是可变参数（tuple），city和job是命名关键字参数\n    print(name, age, args, city, job)\n\n```\n### 5种参数的混合使用\n\n```python\ndef f1(a, b, c=0, *args, **kw): # args是可变参数（tuple），kw是关键字参数（dic）\n    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)\n\ndef f2(a, b, c=0, *, d, **kw): #分别是ab是必选参数，c是默认参数，d是命名关键字参数，kw是关键字参数\n    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)\n\n\n```\n## 函数总结\n对于任意参数，都可以通过类似 **func(*args, **kw)** 调用，注意两点：\n\n- args是可变参数，args接收的是一个tuple；\n- kw是关键字参数，kw接收的是一个dict。\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000)\n","source":"_posts/Python基础学习之-list、tuple、dic-set.md","raw":"---\ntitle: 'Python基础学习之[list、tuple、dic & set]'\ncopyright: true\ndate: 2017-07-07 23:16:04\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n\n**list和tuple是Python内置的有序集合，一个可变，一个不可变**\n# list\npython 内置的数据类型列表：**list**\n例如：classmates = ['Michael','Bob','Tracy']\n使用 **[ ]** 表示的是list，是一个可变的有序表，可用append方法在末尾添加元素，也可以使用insert方法在指定位置添加，相应位置后的元素往后移，使用pop方法删除末尾或者指定索引位置的元素。\n<!--more-->\n\n# tuple\n有序表元组：tuple\ntuple一旦初始化后就不能够修改，使用 **（）** 表示的是tuple\n例如：classmates = ('Michael','Bob','Tracy')\n定义空tuple：t=();\n定义只有一个元素的tuple：t=(1,)\n **必须加一个逗号，消除歧义，否则会将括号认为是数学公式中的小括号，计算结果是1**\n\n# list & tuple 混合使用\n  t = ('a', 'b', ['A', 'B'])\n  tuple中含有list，则我们可以有操作：\nt[2][0] = 'X'\nt[2][1] = 'Y'\nt=('a', 'b', ['X', 'Y'])\n\n# dict\nPython内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储\nkey是唯一的，key只能对应一个value\n\n和list比较，dict有以下几个特点：\n\n1. 查找和插入的速度极快，不会随着key的增加而变慢；\n2. 需要占用大量的内存，内存浪费多。\n而list相反：\n\n1. 查找和插入的时间随着元素的增加而增加；\n2. 占用空间小，浪费内存很少。\n所以，dict是用空间来换取时间的一种方法。\n**dict的key必须是不可变对象**\n\n# set\nset和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。\nset可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作\n**str是不变对象，而list是可变对象，最常用的key是字符串str**\n\n# 定义函数\n定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回\n```python\ndef my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n```\n## 返回多值\n\n```python\nimport math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n\n x, y = move(100, 100, 60, math.pi / 6)\nprint(x, y)\n```\n**Python函数返回的仍然是单一值，实际上返回值是一个tuple！返回一个tuple实际上可以省略括号（）**\n\n## 函数参数问题\nPython中定义函数有五种参数：**必选参数、默认参数、可变参数、关键字参数和命名关键字参数**\nPython的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数\n如：**def power(x, n=2): #是默认参数，默认参数必须指向不变对象！**\n\n### 可变参数\n可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个**tuple**\n```python\n\ndef calc(*numbers): #表示的是参数numbers接收到的是一个tuple\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n\n  调用的时候\n  calc(1,2,3)\n  或者 nums = [1,2,3]\n       calc(*nums) #*nums表示把nums这个list的所有元素作为可变参数传进去\n\n```\n\n### 关键字参数\n关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个**dict**\n下例中**kw为关键字参数，调用函数时可以只传入必选参数，关键字参数可以不传入。\n\n```python\ndef person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n\n    >>> person('Michael', 30)\n    name: Michael age: 30 other: {}\n\n  >>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n  >>> person('Jack', 24, city=extra['city'], job=extra['job'])\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n\n>>> person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'} # **extra表示把extra这个dict的所有key-value用关键字参数传入到函数**kw中\n\n```\n### 命名关键字参数\n限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：\n\n```python\n\ndef person(name, age, *, city, job):\n    print(name, age, city, job)\n\n如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：\ndef person(name, age, *args, city, job): # name, age是位置参数，args是可变参数（tuple），city和job是命名关键字参数\n    print(name, age, args, city, job)\n\n```\n### 5种参数的混合使用\n\n```python\ndef f1(a, b, c=0, *args, **kw): # args是可变参数（tuple），kw是关键字参数（dic）\n    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)\n\ndef f2(a, b, c=0, *, d, **kw): #分别是ab是必选参数，c是默认参数，d是命名关键字参数，kw是关键字参数\n    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)\n\n\n```\n## 函数总结\n对于任意参数，都可以通过类似 **func(*args, **kw)** 调用，注意两点：\n\n- args是可变参数，args接收的是一个tuple；\n- kw是关键字参数，kw接收的是一个dict。\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000)\n","slug":"Python基础学习之-list、tuple、dic-set","published":1,"updated":"2017-07-08T12:19:16.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c6y000r4ov1b2u8nakq","content":"<p><strong>list和tuple是Python内置的有序集合，一个可变，一个不可变</strong></p>\n<h1 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h1><p>python 内置的数据类型列表：<strong>list</strong><br>例如：classmates = [‘Michael’,’Bob’,’Tracy’]<br>使用 <strong>[ ]</strong> 表示的是list，是一个可变的有序表，可用append方法在末尾添加元素，也可以使用insert方法在指定位置添加，相应位置后的元素往后移，使用pop方法删除末尾或者指定索引位置的元素。<br><a id=\"more\"></a></p>\n<h1 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h1><p>有序表元组：tuple<br>tuple一旦初始化后就不能够修改，使用 <strong>（）</strong> 表示的是tuple<br>例如：classmates = (‘Michael’,’Bob’,’Tracy’)<br>定义空tuple：t=();<br>定义只有一个元素的tuple：t=(1,)<br> <strong>必须加一个逗号，消除歧义，否则会将括号认为是数学公式中的小括号，计算结果是1</strong></p>\n<h1 id=\"list-amp-tuple-混合使用\"><a href=\"#list-amp-tuple-混合使用\" class=\"headerlink\" title=\"list &amp; tuple 混合使用\"></a>list &amp; tuple 混合使用</h1><p>  t = (‘a’, ‘b’, [‘A’, ‘B’])<br>  tuple中含有list，则我们可以有操作：<br>t[2][0] = ‘X’<br>t[2][1] = ‘Y’<br>t=(‘a’, ‘b’, [‘X’, ‘Y’])</p>\n<h1 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h1><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储<br>key是唯一的，key只能对应一个value</p>\n<p>和list比较，dict有以下几个特点：</p>\n<ol>\n<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>\n<li><p>需要占用大量的内存，内存浪费多。<br>而list相反：</p>\n</li>\n<li><p>查找和插入的时间随着元素的增加而增加；</p>\n</li>\n<li>占用空间小，浪费内存很少。<br>所以，dict是用空间来换取时间的一种方法。<br><strong>dict的key必须是不可变对象</strong></li>\n</ol>\n<h1 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h1><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作<br><strong>str是不变对象，而list是可变对象，最常用的key是字符串str</strong></p>\n<h1 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h1><p>定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> x</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> -x</div></pre></td></tr></table></figure></p>\n<h2 id=\"返回多值\"><a href=\"#返回多值\" class=\"headerlink\" title=\"返回多值\"></a>返回多值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y, step, angle=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    nx = x + step * math.cos(angle)</div><div class=\"line\">    ny = y - step * math.sin(angle)</div><div class=\"line\">    <span class=\"keyword\">return</span> nx, ny</div><div class=\"line\"></div><div class=\"line\"> x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</div><div class=\"line\">print(x, y)</div></pre></td></tr></table></figure>\n<p><strong>Python函数返回的仍然是单一值，实际上返回值是一个tuple！返回一个tuple实际上可以省略括号（）</strong></p>\n<h2 id=\"函数参数问题\"><a href=\"#函数参数问题\" class=\"headerlink\" title=\"函数参数问题\"></a>函数参数问题</h2><p>Python中定义函数有五种参数：<strong>必选参数、默认参数、可变参数、关键字参数和命名关键字参数</strong><br>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数<br>如：<strong>def power(x, n=2): #是默认参数，默认参数必须指向不变对象！</strong></p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个<strong>tuple</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(*numbers)</span>:</span> <span class=\"comment\">#表示的是参数numbers接收到的是一个tuple</span></div><div class=\"line\">    sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</div><div class=\"line\">        sum = sum + n * n</div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\"></div><div class=\"line\">  调用的时候</div><div class=\"line\">  calc(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">  或者 nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">       calc(*nums) <span class=\"comment\">#*nums表示把nums这个list的所有元素作为可变参数传进去</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"关键字参数\"><a href=\"#关键字参数\" class=\"headerlink\" title=\"关键字参数\"></a>关键字参数</h3><p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<strong>dict</strong><br>下例中**kw为关键字参数，调用函数时可以只传入必选参数，关键字参数可以不传入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; person(<span class=\"string\">'Michael'</span>, <span class=\"number\">30</span>)</div><div class=\"line\">    name: Michael age: <span class=\"number\">30</span> other: &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  &gt;&gt;&gt; extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div><div class=\"line\">  &gt;&gt;&gt; person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, city=extra[<span class=\"string\">'city'</span>], job=extra[<span class=\"string\">'job'</span>])</div><div class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, **extra)</div><div class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125; <span class=\"comment\"># **extra表示把extra这个dict的所有key-value用关键字参数传入到函数**kw中</span></div></pre></td></tr></table></figure>\n<h3 id=\"命名关键字参数\"><a href=\"#命名关键字参数\" class=\"headerlink\" title=\"命名关键字参数\"></a>命名关键字参数</h3><p>限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *, city, job)</span>:</span></div><div class=\"line\">    print(name, age, city, job)</div><div class=\"line\"></div><div class=\"line\">如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *args, city, job)</span>:</span> <span class=\"comment\"># name, age是位置参数，args是可变参数（tuple），city和job是命名关键字参数</span></div><div class=\"line\">    print(name, age, args, city, job)</div></pre></td></tr></table></figure>\n<h3 id=\"5种参数的混合使用\"><a href=\"#5种参数的混合使用\" class=\"headerlink\" title=\"5种参数的混合使用\"></a>5种参数的混合使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(a, b, c=<span class=\"number\">0</span>, *args, **kw)</span>:</span> <span class=\"comment\"># args是可变参数（tuple），kw是关键字参数（dic）</span></div><div class=\"line\">    print(<span class=\"string\">'a ='</span>, a, <span class=\"string\">'b ='</span>, b, <span class=\"string\">'c ='</span>, c, <span class=\"string\">'args ='</span>, args, <span class=\"string\">'kw ='</span>, kw)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a, b, c=<span class=\"number\">0</span>, *, d, **kw)</span>:</span> <span class=\"comment\">#分别是ab是必选参数，c是默认参数，d是命名关键字参数，kw是关键字参数</span></div><div class=\"line\">    print(<span class=\"string\">'a ='</span>, a, <span class=\"string\">'b ='</span>, b, <span class=\"string\">'c ='</span>, c, <span class=\"string\">'d ='</span>, d, <span class=\"string\">'kw ='</span>, kw)</div></pre></td></tr></table></figure>\n<h2 id=\"函数总结\"><a href=\"#函数总结\" class=\"headerlink\" title=\"函数总结\"></a>函数总结</h2><p>对于任意参数，都可以通过类似 <strong>func(*args, </strong>kw)** 调用，注意两点：</p>\n<ul>\n<li>args是可变参数，args接收的是一个tuple；</li>\n<li>kw是关键字参数，kw接收的是一个dict。<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></li>\n</ul>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p><strong>list和tuple是Python内置的有序集合，一个可变，一个不可变</strong></p>\n<h1 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h1><p>python 内置的数据类型列表：<strong>list</strong><br>例如：classmates = [‘Michael’,’Bob’,’Tracy’]<br>使用 <strong>[ ]</strong> 表示的是list，是一个可变的有序表，可用append方法在末尾添加元素，也可以使用insert方法在指定位置添加，相应位置后的元素往后移，使用pop方法删除末尾或者指定索引位置的元素。<br>","more":"</p>\n<h1 id=\"tuple\"><a href=\"#tuple\" class=\"headerlink\" title=\"tuple\"></a>tuple</h1><p>有序表元组：tuple<br>tuple一旦初始化后就不能够修改，使用 <strong>（）</strong> 表示的是tuple<br>例如：classmates = (‘Michael’,’Bob’,’Tracy’)<br>定义空tuple：t=();<br>定义只有一个元素的tuple：t=(1,)<br> <strong>必须加一个逗号，消除歧义，否则会将括号认为是数学公式中的小括号，计算结果是1</strong></p>\n<h1 id=\"list-amp-tuple-混合使用\"><a href=\"#list-amp-tuple-混合使用\" class=\"headerlink\" title=\"list &amp; tuple 混合使用\"></a>list &amp; tuple 混合使用</h1><p>  t = (‘a’, ‘b’, [‘A’, ‘B’])<br>  tuple中含有list，则我们可以有操作：<br>t[2][0] = ‘X’<br>t[2][1] = ‘Y’<br>t=(‘a’, ‘b’, [‘X’, ‘Y’])</p>\n<h1 id=\"dict\"><a href=\"#dict\" class=\"headerlink\" title=\"dict\"></a>dict</h1><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储<br>key是唯一的，key只能对应一个value</p>\n<p>和list比较，dict有以下几个特点：</p>\n<ol>\n<li>查找和插入的速度极快，不会随着key的增加而变慢；</li>\n<li><p>需要占用大量的内存，内存浪费多。<br>而list相反：</p>\n</li>\n<li><p>查找和插入的时间随着元素的增加而增加；</p>\n</li>\n<li>占用空间小，浪费内存很少。<br>所以，dict是用空间来换取时间的一种方法。<br><strong>dict的key必须是不可变对象</strong></li>\n</ol>\n<h1 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h1><p>set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。<br>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作<br><strong>str是不变对象，而list是可变对象，最常用的key是字符串str</strong></p>\n<h1 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h1><p>定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_abs</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> x &gt;= <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> x</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> -x</div></pre></td></tr></table></figure></p>\n<h2 id=\"返回多值\"><a href=\"#返回多值\" class=\"headerlink\" title=\"返回多值\"></a>返回多值</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> math</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y, step, angle=<span class=\"number\">0</span>)</span>:</span></div><div class=\"line\">    nx = x + step * math.cos(angle)</div><div class=\"line\">    ny = y - step * math.sin(angle)</div><div class=\"line\">    <span class=\"keyword\">return</span> nx, ny</div><div class=\"line\"></div><div class=\"line\"> x, y = move(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"number\">60</span>, math.pi / <span class=\"number\">6</span>)</div><div class=\"line\">print(x, y)</div></pre></td></tr></table></figure>\n<p><strong>Python函数返回的仍然是单一值，实际上返回值是一个tuple！返回一个tuple实际上可以省略括号（）</strong></p>\n<h2 id=\"函数参数问题\"><a href=\"#函数参数问题\" class=\"headerlink\" title=\"函数参数问题\"></a>函数参数问题</h2><p>Python中定义函数有五种参数：<strong>必选参数、默认参数、可变参数、关键字参数和命名关键字参数</strong><br>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数<br>如：<strong>def power(x, n=2): #是默认参数，默认参数必须指向不变对象！</strong></p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个<strong>tuple</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(*numbers)</span>:</span> <span class=\"comment\">#表示的是参数numbers接收到的是一个tuple</span></div><div class=\"line\">    sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</div><div class=\"line\">        sum = sum + n * n</div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\"></div><div class=\"line\">  调用的时候</div><div class=\"line\">  calc(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</div><div class=\"line\">  或者 nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</div><div class=\"line\">       calc(*nums) <span class=\"comment\">#*nums表示把nums这个list的所有元素作为可变参数传进去</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"关键字参数\"><a href=\"#关键字参数\" class=\"headerlink\" title=\"关键字参数\"></a>关键字参数</h3><p>关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<strong>dict</strong><br>下例中**kw为关键字参数，调用函数时可以只传入必选参数，关键字参数可以不传入。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; person(<span class=\"string\">'Michael'</span>, <span class=\"number\">30</span>)</div><div class=\"line\">    name: Michael age: <span class=\"number\">30</span> other: &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  &gt;&gt;&gt; extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div><div class=\"line\">  &gt;&gt;&gt; person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, city=extra[<span class=\"string\">'city'</span>], job=extra[<span class=\"string\">'job'</span>])</div><div class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, **extra)</div><div class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125; <span class=\"comment\"># **extra表示把extra这个dict的所有key-value用关键字参数传入到函数**kw中</span></div></pre></td></tr></table></figure>\n<h3 id=\"命名关键字参数\"><a href=\"#命名关键字参数\" class=\"headerlink\" title=\"命名关键字参数\"></a>命名关键字参数</h3><p>限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义的函数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *, city, job)</span>:</span></div><div class=\"line\">    print(name, age, city, job)</div><div class=\"line\"></div><div class=\"line\">如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *args, city, job)</span>:</span> <span class=\"comment\"># name, age是位置参数，args是可变参数（tuple），city和job是命名关键字参数</span></div><div class=\"line\">    print(name, age, args, city, job)</div></pre></td></tr></table></figure>\n<h3 id=\"5种参数的混合使用\"><a href=\"#5种参数的混合使用\" class=\"headerlink\" title=\"5种参数的混合使用\"></a>5种参数的混合使用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f1</span><span class=\"params\">(a, b, c=<span class=\"number\">0</span>, *args, **kw)</span>:</span> <span class=\"comment\"># args是可变参数（tuple），kw是关键字参数（dic）</span></div><div class=\"line\">    print(<span class=\"string\">'a ='</span>, a, <span class=\"string\">'b ='</span>, b, <span class=\"string\">'c ='</span>, c, <span class=\"string\">'args ='</span>, args, <span class=\"string\">'kw ='</span>, kw)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f2</span><span class=\"params\">(a, b, c=<span class=\"number\">0</span>, *, d, **kw)</span>:</span> <span class=\"comment\">#分别是ab是必选参数，c是默认参数，d是命名关键字参数，kw是关键字参数</span></div><div class=\"line\">    print(<span class=\"string\">'a ='</span>, a, <span class=\"string\">'b ='</span>, b, <span class=\"string\">'c ='</span>, c, <span class=\"string\">'d ='</span>, d, <span class=\"string\">'kw ='</span>, kw)</div></pre></td></tr></table></figure>\n<h2 id=\"函数总结\"><a href=\"#函数总结\" class=\"headerlink\" title=\"函数总结\"></a>函数总结</h2><p>对于任意参数，都可以通过类似 <strong>func(*args, </strong>kw)** 调用，注意两点：</p>\n<ul>\n<li>args是可变参数，args接收的是一个tuple；</li>\n<li>kw是关键字参数，kw接收的是一个dict。<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></li>\n</ul>"},{"title":"Python基础学习之[初识正则表达式]","copyright":true,"date":"2017-07-16T07:52:06.000Z","_content":"# 正则表达式(Regrelar Expression)\n\n正则表达式是一种描述性的语言表达，本身是字符串；它是给字符串定义一个规则，凡是符合规则的字符串，认为它“匹配了”，否则就是匹配失败，被任务是不合法的，常见的有Email格式，密码格式的匹配等，\n\n<!--more-->\n\n例如：\n- \\d{n,m} 表示匹配n~m个数字\n- \\w 表示匹配一个字母或者数字\n- . 表示匹配任意字符，如`py.`可以匹配到`pyo`, `py!`等\n- \\s 表示可以匹配一个空格\n- ^ 表示行的开头，`^\\d`表示必须以数字开头\n- $ 表示行的结束，`\\d$`表示必须以数字结束\n- \\+ 表示贪婪匹配，可以多个匹配`\\s+`表示匹配多个连续的空格\n- \\* 表示连续匹配，或者叫通配符，例如：`0*`表示可以将000,00000等匹配出来\n\n需要注意的是，下划线`_`或者横杠`-` 需要用转义字符`\\_ \\-`。\n\nPython中提供内建模块`re`,代表: **regular expression** 正则表达式。\n\n## re模块\n在Python中要用到正则表达式时，建议要再匹配的字符串前加上`r`前缀，表示告诉编译器这个String(也就是写的正则表达式)是Raw String，在字符串中含有的特殊字符不需要转义，原样输出.例如：r`ABC\\n001\\-234`\n\n- match() 方法\n\n```python\nimport re\ntest = '010-123456'\nif re.match(r'^\\d{3}\\-\\d{3, 8}$',test): #该方法匹配成功返回的是mathch的对象，这里返回的是test对象\n    print('match success!')\nelse:\n    print('match failed!')\n```\n\n- spilt() 方法切分字符串，可以结合正则表达式使用\n\n```python\n# 正则表达式表达的是匹配规则，也就是匹配了按该匹配的符号进行分割。\n>>> re.split(r'[\\s\\,\\;]+','abcd;;s;c,k h') #第一个参数是表示以什么分割符进行分割，第二个参数表示的是待分割的字符串\n['abcd', 's', 'c', 'k', 'h']\n```\n- 分组提取（基于match方法）\n`()`表示的是就是要提取的分组（Group）\n\n```python\n>>> k=re.match(r'^(\\d{3})-(\\d{3,8})$','010-12345678') #注意-不需要斜杠转义了\n>>> k\n<_sre.SRE_Match object; span=(0, 12), match='010-12345678'>\n>>> k.group(0) #group(0)表示的是原始字符串，后面的group(1),group(2)表示的是第1、2子串。   \n'010-12345678'\n>>> k.group(1)   \n'010'\n>>> k.group(2)\n'12345678'\n>>>\n```\n## 编译（compile）\n在Python脚本中使用正则表达式，re模块内部会干两件事情：\n1. 编译正则表达式，如果正则表达式本身不合法，会报错；\n2. 用编译后的正则表达式去匹配字符串。\n\n```python\n>>> import re\n>>> re_phone=re.compile(r'^(\\d{3})-(\\d{3,8})$') #编译\n>>> re_phone.match('010-12345678').groups() #使用，匹配\n('010', '12345678')\n```\n# Reference\n[liaoxuefeng的博客](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000)\n","source":"_posts/Python基础学习之-初识正则表达式.md","raw":"---\ntitle: 'Python基础学习之[初识正则表达式]'\ncopyright: true\ndate: 2017-07-16 15:52:06\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n# 正则表达式(Regrelar Expression)\n\n正则表达式是一种描述性的语言表达，本身是字符串；它是给字符串定义一个规则，凡是符合规则的字符串，认为它“匹配了”，否则就是匹配失败，被任务是不合法的，常见的有Email格式，密码格式的匹配等，\n\n<!--more-->\n\n例如：\n- \\d{n,m} 表示匹配n~m个数字\n- \\w 表示匹配一个字母或者数字\n- . 表示匹配任意字符，如`py.`可以匹配到`pyo`, `py!`等\n- \\s 表示可以匹配一个空格\n- ^ 表示行的开头，`^\\d`表示必须以数字开头\n- $ 表示行的结束，`\\d$`表示必须以数字结束\n- \\+ 表示贪婪匹配，可以多个匹配`\\s+`表示匹配多个连续的空格\n- \\* 表示连续匹配，或者叫通配符，例如：`0*`表示可以将000,00000等匹配出来\n\n需要注意的是，下划线`_`或者横杠`-` 需要用转义字符`\\_ \\-`。\n\nPython中提供内建模块`re`,代表: **regular expression** 正则表达式。\n\n## re模块\n在Python中要用到正则表达式时，建议要再匹配的字符串前加上`r`前缀，表示告诉编译器这个String(也就是写的正则表达式)是Raw String，在字符串中含有的特殊字符不需要转义，原样输出.例如：r`ABC\\n001\\-234`\n\n- match() 方法\n\n```python\nimport re\ntest = '010-123456'\nif re.match(r'^\\d{3}\\-\\d{3, 8}$',test): #该方法匹配成功返回的是mathch的对象，这里返回的是test对象\n    print('match success!')\nelse:\n    print('match failed!')\n```\n\n- spilt() 方法切分字符串，可以结合正则表达式使用\n\n```python\n# 正则表达式表达的是匹配规则，也就是匹配了按该匹配的符号进行分割。\n>>> re.split(r'[\\s\\,\\;]+','abcd;;s;c,k h') #第一个参数是表示以什么分割符进行分割，第二个参数表示的是待分割的字符串\n['abcd', 's', 'c', 'k', 'h']\n```\n- 分组提取（基于match方法）\n`()`表示的是就是要提取的分组（Group）\n\n```python\n>>> k=re.match(r'^(\\d{3})-(\\d{3,8})$','010-12345678') #注意-不需要斜杠转义了\n>>> k\n<_sre.SRE_Match object; span=(0, 12), match='010-12345678'>\n>>> k.group(0) #group(0)表示的是原始字符串，后面的group(1),group(2)表示的是第1、2子串。   \n'010-12345678'\n>>> k.group(1)   \n'010'\n>>> k.group(2)\n'12345678'\n>>>\n```\n## 编译（compile）\n在Python脚本中使用正则表达式，re模块内部会干两件事情：\n1. 编译正则表达式，如果正则表达式本身不合法，会报错；\n2. 用编译后的正则表达式去匹配字符串。\n\n```python\n>>> import re\n>>> re_phone=re.compile(r'^(\\d{3})-(\\d{3,8})$') #编译\n>>> re_phone.match('010-12345678').groups() #使用，匹配\n('010', '12345678')\n```\n# Reference\n[liaoxuefeng的博客](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000)\n","slug":"Python基础学习之-初识正则表达式","published":1,"updated":"2017-07-16T08:08:14.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c71000v4ov1q8k9vuo8","content":"<h1 id=\"正则表达式-Regrelar-Expression\"><a href=\"#正则表达式-Regrelar-Expression\" class=\"headerlink\" title=\"正则表达式(Regrelar Expression)\"></a>正则表达式(Regrelar Expression)</h1><p>正则表达式是一种描述性的语言表达，本身是字符串；它是给字符串定义一个规则，凡是符合规则的字符串，认为它“匹配了”，否则就是匹配失败，被任务是不合法的，常见的有Email格式，密码格式的匹配等，</p>\n<a id=\"more\"></a>\n<p>例如：</p>\n<ul>\n<li>\\d{n,m} 表示匹配n~m个数字</li>\n<li>\\w 表示匹配一个字母或者数字</li>\n<li>. 表示匹配任意字符，如<code>py.</code>可以匹配到<code>pyo</code>, <code>py!</code>等</li>\n<li>\\s 表示可以匹配一个空格</li>\n<li>^ 表示行的开头，<code>^\\d</code>表示必须以数字开头</li>\n<li>$ 表示行的结束，<code>\\d$</code>表示必须以数字结束</li>\n<li>+ 表示贪婪匹配，可以多个匹配<code>\\s+</code>表示匹配多个连续的空格</li>\n<li>* 表示连续匹配，或者叫通配符，例如：<code>0*</code>表示可以将000,00000等匹配出来</li>\n</ul>\n<p>需要注意的是，下划线<code>_</code>或者横杠<code>-</code> 需要用转义字符<code>\\_ \\-</code>。</p>\n<p>Python中提供内建模块<code>re</code>,代表: <strong>regular expression</strong> 正则表达式。</p>\n<h2 id=\"re模块\"><a href=\"#re模块\" class=\"headerlink\" title=\"re模块\"></a>re模块</h2><p>在Python中要用到正则表达式时，建议要再匹配的字符串前加上<code>r</code>前缀，表示告诉编译器这个String(也就是写的正则表达式)是Raw String，在字符串中含有的特殊字符不需要转义，原样输出.例如：r<code>ABC\\n001\\-234</code></p>\n<ul>\n<li>match() 方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">test = <span class=\"string\">'010-123456'</span></div><div class=\"line\"><span class=\"keyword\">if</span> re.match(<span class=\"string\">r'^\\d&#123;3&#125;\\-\\d&#123;3, 8&#125;$'</span>,test): <span class=\"comment\">#该方法匹配成功返回的是mathch的对象，这里返回的是test对象</span></div><div class=\"line\">    print(<span class=\"string\">'match success!'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'match failed!'</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li>spilt() 方法切分字符串，可以结合正则表达式使用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 正则表达式表达的是匹配规则，也就是匹配了按该匹配的符号进行分割。</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.split(<span class=\"string\">r'[\\s\\,\\;]+'</span>,<span class=\"string\">'abcd;;s;c,k h'</span>) <span class=\"comment\">#第一个参数是表示以什么分割符进行分割，第二个参数表示的是待分割的字符串</span></div><div class=\"line\">[<span class=\"string\">'abcd'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'h'</span>]</div></pre></td></tr></table></figure>\n<ul>\n<li>分组提取（基于match方法）<br><code>()</code>表示的是就是要提取的分组（Group）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k=re.match(<span class=\"string\">r'^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$'</span>,<span class=\"string\">'010-12345678'</span>) <span class=\"comment\">#注意-不需要斜杠转义了</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k</div><div class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">12</span>), match=<span class=\"string\">'010-12345678'</span>&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k.group(<span class=\"number\">0</span>) <span class=\"comment\">#group(0)表示的是原始字符串，后面的group(1),group(2)表示的是第1、2子串。   </span></div><div class=\"line\"><span class=\"string\">'010-12345678'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k.group(<span class=\"number\">1</span>)   </div><div class=\"line\"><span class=\"string\">'010'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k.group(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"string\">'12345678'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"编译（compile）\"><a href=\"#编译（compile）\" class=\"headerlink\" title=\"编译（compile）\"></a>编译（compile）</h2><p>在Python脚本中使用正则表达式，re模块内部会干两件事情：</p>\n<ol>\n<li>编译正则表达式，如果正则表达式本身不合法，会报错；</li>\n<li>用编译后的正则表达式去匹配字符串。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_phone=re.compile(<span class=\"string\">r'^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$'</span>) <span class=\"comment\">#编译</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_phone.match(<span class=\"string\">'010-12345678'</span>).groups() <span class=\"comment\">#使用，匹配</span></div><div class=\"line\">(<span class=\"string\">'010'</span>, <span class=\"string\">'12345678'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"正则表达式-Regrelar-Expression\"><a href=\"#正则表达式-Regrelar-Expression\" class=\"headerlink\" title=\"正则表达式(Regrelar Expression)\"></a>正则表达式(Regrelar Expression)</h1><p>正则表达式是一种描述性的语言表达，本身是字符串；它是给字符串定义一个规则，凡是符合规则的字符串，认为它“匹配了”，否则就是匹配失败，被任务是不合法的，常见的有Email格式，密码格式的匹配等，</p>","more":"<p>例如：</p>\n<ul>\n<li>\\d{n,m} 表示匹配n~m个数字</li>\n<li>\\w 表示匹配一个字母或者数字</li>\n<li>. 表示匹配任意字符，如<code>py.</code>可以匹配到<code>pyo</code>, <code>py!</code>等</li>\n<li>\\s 表示可以匹配一个空格</li>\n<li>^ 表示行的开头，<code>^\\d</code>表示必须以数字开头</li>\n<li>$ 表示行的结束，<code>\\d$</code>表示必须以数字结束</li>\n<li>+ 表示贪婪匹配，可以多个匹配<code>\\s+</code>表示匹配多个连续的空格</li>\n<li>* 表示连续匹配，或者叫通配符，例如：<code>0*</code>表示可以将000,00000等匹配出来</li>\n</ul>\n<p>需要注意的是，下划线<code>_</code>或者横杠<code>-</code> 需要用转义字符<code>\\_ \\-</code>。</p>\n<p>Python中提供内建模块<code>re</code>,代表: <strong>regular expression</strong> 正则表达式。</p>\n<h2 id=\"re模块\"><a href=\"#re模块\" class=\"headerlink\" title=\"re模块\"></a>re模块</h2><p>在Python中要用到正则表达式时，建议要再匹配的字符串前加上<code>r</code>前缀，表示告诉编译器这个String(也就是写的正则表达式)是Raw String，在字符串中含有的特殊字符不需要转义，原样输出.例如：r<code>ABC\\n001\\-234</code></p>\n<ul>\n<li>match() 方法</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\">test = <span class=\"string\">'010-123456'</span></div><div class=\"line\"><span class=\"keyword\">if</span> re.match(<span class=\"string\">r'^\\d&#123;3&#125;\\-\\d&#123;3, 8&#125;$'</span>,test): <span class=\"comment\">#该方法匹配成功返回的是mathch的对象，这里返回的是test对象</span></div><div class=\"line\">    print(<span class=\"string\">'match success!'</span>)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'match failed!'</span>)</div></pre></td></tr></table></figure>\n<ul>\n<li>spilt() 方法切分字符串，可以结合正则表达式使用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 正则表达式表达的是匹配规则，也就是匹配了按该匹配的符号进行分割。</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re.split(<span class=\"string\">r'[\\s\\,\\;]+'</span>,<span class=\"string\">'abcd;;s;c,k h'</span>) <span class=\"comment\">#第一个参数是表示以什么分割符进行分割，第二个参数表示的是待分割的字符串</span></div><div class=\"line\">[<span class=\"string\">'abcd'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'k'</span>, <span class=\"string\">'h'</span>]</div></pre></td></tr></table></figure>\n<ul>\n<li>分组提取（基于match方法）<br><code>()</code>表示的是就是要提取的分组（Group）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k=re.match(<span class=\"string\">r'^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$'</span>,<span class=\"string\">'010-12345678'</span>) <span class=\"comment\">#注意-不需要斜杠转义了</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k</div><div class=\"line\">&lt;_sre.SRE_Match object; span=(<span class=\"number\">0</span>, <span class=\"number\">12</span>), match=<span class=\"string\">'010-12345678'</span>&gt;</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k.group(<span class=\"number\">0</span>) <span class=\"comment\">#group(0)表示的是原始字符串，后面的group(1),group(2)表示的是第1、2子串。   </span></div><div class=\"line\"><span class=\"string\">'010-12345678'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k.group(<span class=\"number\">1</span>)   </div><div class=\"line\"><span class=\"string\">'010'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>k.group(<span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"string\">'12345678'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"编译（compile）\"><a href=\"#编译（compile）\" class=\"headerlink\" title=\"编译（compile）\"></a>编译（compile）</h2><p>在Python脚本中使用正则表达式，re模块内部会干两件事情：</p>\n<ol>\n<li>编译正则表达式，如果正则表达式本身不合法，会报错；</li>\n<li>用编译后的正则表达式去匹配字符串。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_phone=re.compile(<span class=\"string\">r'^(\\d&#123;3&#125;)-(\\d&#123;3,8&#125;)$'</span>) <span class=\"comment\">#编译</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>re_phone.match(<span class=\"string\">'010-12345678'</span>).groups() <span class=\"comment\">#使用，匹配</span></div><div class=\"line\">(<span class=\"string\">'010'</span>, <span class=\"string\">'12345678'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143193331387014ccd1040c814dee8b2164bb4f064cff000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>"},{"title":"Python基础学习之[进程和线程]","copyright":true,"date":"2017-07-16T07:46:32.000Z","_content":"\n# 进程和线程（Process and Thread）\n一个进程可以有多个线程，也可以有单个线程，但一个进程 **至少有一个** 线程，多进程和多线程的程序涉及到同步、数据共享的问题，编写起来要考虑的问题比较多。\n多任务的实现方式一般有 **3种**：\n\n- 多进程模式\n- 多线程模式\n- 多进程+多线程模式\n\n**Python既支持多进程，又支持多线程**\n<!--more-->\n\n## 多进程（multiprocessing）\nPython的`os`模块封装了常见的系统调用，比如`fork()`系统调用，该系统调用是创建一个与原来进程几乎完全相同的进程，一个进程调用 `fork()` 函数后，系统先给新的进程分配资源，例如存储数据和代码空间，然后把原来的进程的所有值都复制到新的进程中，只有少数值与原来的进程值不同，相当于克隆了一个自己。子进程永远返回0，而父进程返回子进程的ID，子进程调用`getppid()`拿到父进程的ID，而`getpid()`是得到本身的进程ID。 ** Windows 没有`fork`系统调用 。**\n\n```python\nimport os\nprint('Process (%s) start...' %os.getpid())\npid = os.fork() #如果是子进程，则返回0，父进程是返回子进程的ID\nif pid ==0:\n    print('I am child Process (%s) and my parent is %s.' %(os.getpid(),os.getppid()))\nelse:\n    print('I (%s) just created a child process (%s).' %(os.getpid(),pid))\n\n结果如下：\n[root@localhost Python]# python processing.py\nProcess (4563) start...\nI am child Process (4564) and my parent is 4563.\nI (4563) just created a child process (4564).\n\n```\n\n`multiprocessing`模块提供了`Process`类代表一个进程对象\n\n```python\nfrom multiprocessing import Process\nimport os\n\ndef run_proc(name):\n    print('Run chilid process %s(%s)' %(name,os.getpid()))\n\nif __name__ == '__main__':\n    print('Parent process %s.' %os.getpid()) # 程序启动时，产生一个进程，拥有进程号\n    p=Process(target=run_proc,args=('test',)) # p是子进程实例对象，由当前进程产生的进程。\n    print('Child process will start...')\n    p.start()\n    p.join()\n    print('Child process end...')\n\n结果如下：\n[root@localhost Python]# python processing.py\nParent process 4608.\nChild process will start...\nRun chilid process test(4609)\nChild process end...\n\n\n```\n\n## 进程池（Pool）\n如果需要启动大量的子进程，可以用进程池（Pool）的方式批量创建子进程。\n\n```python\nfrom multiprocessing import Pool #提供跨平台的多进程支持\nimport os, time, random\n\ndef long_time_task(name):\n    print('Run task %s (%s)...' %(name,os.getpid()))\n    start=time.time()\n    time.sleep(random.random()*3)\n    end=time.time()\n    print('Task %s runs %0.2f seconds.'%(name,(end-start)))\n\nif __name__ == '__main__':\n    print('Parent process %s.' %os.getpid())\n    p=Pool(4) #创建进程池，共有四个进程，默认的大小是CPU的核数，最多同时创建4个进程\n    for i in range(5):\n        p.apply_async(long_time_task,args=(i,)) # apply the async to invoke process， 使用异步的方式调用进程\n    print('waiting for all subprocesses done...')\n    p.close()\n    p.join() #调用join方法会等待所有子进程执行完毕，之前必须调用close（）\n    print('All subprocesses done...')\n\n结果如下：\nParent process 4752.\nwaiting for all subprocesses done...\nRun task 0 (4753)...\nRun task 1 (4755)...\nRun task 2 (4754)...\nRun task 3 (4756)...\nTask 3 runs 0.24 seconds.  #最多同时执行4个进程，只有结束了一个进程后，下个进程才能执行\nRun task 4 (4756)...\nTask 0 runs 0.47 seconds.\nTask 4 runs 0.75 seconds.\nTask 1 runs 1.18 seconds.\nTask 2 runs 2.47 seconds.\nAll subprocesses done...\n\n```\n\n### 子进程及进程间的通讯\n\n```python\n\nimport subprocess #该模块可以比较方便启动一个子进程，然后控制输入输出\n\nprint('$ nslookup www.python.org')\nr= subprocess.call(['nslookup','www.python.org'])\nprint('Exit code:',r)\n\n\nprint('$ nslookup')\np=subprocess.Popen(['nslookup'],stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\noutput, err=p.communicate(b'set q=mx\\npython.org\\nexit\\n') #子进程需要输入参数的话，使用communicate。\nprint(output.decode('utf-8'))\nprint('Exit code:',p.returncode)\n\n运行结果如下：\n\n[root@localhost Python]# python processing.py\n$ nslookup www.python.org\nServer:\t\t114.114.114.114\nAddress:\t114.114.114.114#53\n\nNon-authoritative answer:\nwww.python.org\tcanonical name = python.map.fastly.net.\nName:\tpython.map.fastly.net\nAddress: 151.101.72.223\n\nExit code: 0\n$ nslookup\nServer:\t\t61.177.7.1\nAddress:\t61.177.7.1#53\n\nNon-authoritative answer:\npython.org\tmail exchanger = 50 mail.python.org.\n\nAuthoritative answers can be found from:\npython.org\tnameserver = ns3.p11.dynect.net.\npython.org\tnameserver = ns2.p11.dynect.net.\npython.org\tnameserver = ns1.p11.dynect.net.\npython.org\tnameserver = ns4.p11.dynect.net.\nmail.python.org\tinternet address = 188.166.95.178\nmail.python.org\thas AAAA address 2a03:b0c0:2:d0::71:1\nns1.p11.dynect.net\tinternet address = 208.78.70.11\nns2.p11.dynect.net\tinternet address = 204.13.250.11\nns3.p11.dynect.net\tinternet address = 208.78.71.11\nns4.p11.dynect.net\tinternet address = 204.13.251.11\n\n\nExit code: 0\n\n```\n进程间的通讯，在模块`multiprocessing`模块提供了`Queue`,`Pipes`等方式交换数据。这个交换可以是读，也可以是写。\n\n```python\nfrom multiprocessing import Process,Queue\nimport os,time,random\n\n# process that write data\ndef write(q):\n    print('Process to write: %s' %os.getpid())\n    for value in ['A', 'B', 'C']:\n        print('Put %s to queue...' %value)\n        q.put(value)\n        time.sleep(random.random()) #写进程稍微沉睡几秒\n\n\n# process that read data\ndef read(q):\n    print('Process to read: %s' %os.getpid())\n    while True:\n        value =q.get(True)\n        print('Get %s from queue.' %value)\n\nif __name__ == '__main__':\n\n    #father process create Queue, and pass it to subprocess:\n    q=Queue()\n\n    pw=Process(target=write,args=(q,))\n    pr=Process(target=read,args=(q,))\n\n    # start subprocess pw, write data:\n    pw.start()\n    # start subprocess pr, read data:\n    pr.start()\n    # waite subprocess pw finish\n    pw.join()\n    # pr进程是死循环，见while true。\n    pr.terminate()\n\n结果是：\n[root@localhost Python]# python processing.py\nProcess to write: 5229\nPut A to queue...\nProcess to read: 5230\nGet A from queue.\nPut B to queue...\nGet B from queue.\nPut C to queue...\nGet C from queue.\n\n```\n\n## 多线程\n线程是操作系统直接支持的执行单元，Python的标准库提供两个模块：`_thread`和 `threading`,前者是低级模块，后者是高级模块，是对前者的封装。\n启动一个线程就是把一个函数传入并创建`Thread`实例（一个方法，创建出来），然后调用`start()`开始执行：\n\n```python\nimport time, threading\n\ndef loop():\n    #函数current_thread()永远返回当前线程的实例\n    print('thread %s is running...' %threading.current_thread().name)\n    n=0\n    while n<5:\n        n=n+1\n        print('thread %s ---> %s' %(threading.current_thread().name,n))\n        time.sleep(1)\n    print('thread %s ended.'%threading.current_thread().name)\n\n\n\nprint('thread %s is running...' %threading.current_thread().name)\nt=threading.Thread(target=loop,name='Loopthread')\n# 把一个函数传入，并创建线程实例，然后调用start开始执行\nt.start()\nt.join()\nprint('thread %s ended.'%threading.current_thread().name)\n```\n\n## 加锁（Lock）\n可能存在读脏数据的问题，两个线程同时更新一个变量，导致出现意想不到的结果，所以多线程的时候，必须加锁（写的时候）。\n\n```python\nimport time, threading\n\nbalance =0\nlock=threading.Lock() #申请一把锁\n\ndef change(n):\n\n    global balance\n    balance =balance+n\n    balance =balance-n\n\ndef run_thread(n):\n    for i in range(100000):\n\n        lock.acquire() #加锁，进行互斥访问\n\n        try:\n            change(n)\n        finally:\n            lock.release() #用完必须释放锁\n\nt1=threading.Thread(target=run_thread,args=(5,))\nt2=threading.Thread(target=run_thread,args=(8,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\nprint(balance)\n```\nPython解释器设计时带有 **GIL（Global Interpreter Lock）**，任何线程执行前，必须获得该锁，每100条字节码后，自动释放该锁，因而多线程无法利用多核。\n\n## ThreadLocal\n\n解决多线程局部变量传递，调用的问题。\n\n```python\n# 方式一，使用dic，避免参数的每层传递\nglobal_dict={}\n\ndef std_thread(name):\n    global_dict[threading.current_thread()] =std\n    do_task_1()\n    do_task_2()\n\ndef do_task_1():\n    std = global_dict[threading.current_thread()]\n    do something here\n\ndef do_task_2():\n    std = global_dict[threading.current_thread()]\n    do something here\n\n\n# 方式二，使用ThreadLocal\nimport threading\n\nlocal_school =threading.local() #创建全局变量ThreadLocal\n\ndef process_student():\n    #获取当前线程关联的student\n    std =local_school.student\n    print('Hello,%s (in %s)' %(std,threading.current_thread().name))\n\n\ndef process_thread(name):\n    #绑定ThreLocal的student变量\n    local_school.student=name\n    process_student()\n\nt1= threading.Thread(target=process_thread,args=('li',),name='Thread-1')\nt2=threading.Thread(target=process_thread,args=('cheng',),name='Thread-2')\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n\n可以这样理解，local_school是一个ThreaLocal对象（类似于一个dict），是一个全局变量，但local_school的每个属性local_school.student都是线程的局部变量，可以任意读写，线程之间互不干扰，不用管理锁的问题。\n```\n## 进程 vs. 线程\n多任务情况下，通常是 **Master-Worker** 模式， Master负责分配任务，Worker负责执行任务，通常只有一个Master，多个Worker。\n\n- 主进程是Master，其他进程是Worker（**多进程** 实现该模式），稳定性高，代价大\n- 主线程是Master，其他线程是Worker（**多线程** 实现该模式），效率高，不稳定\n\n### 计算密集型 vs. IO密集型\n任务的类型分为这两类：\n\n- 计算密集型：需要进行大量的计算，任务同时进行的数量应当等于CPU的核心数，需要高效率的代码，一般使用C\n- IO密集型：CPU消耗少，涉及网络、磁盘IO的任务，最合适的语言是脚本语言，如Python\n\n### 异步IO\n充分利用OS的异步IO支持，可以实现单进程单线程模型执行多任务，被称为事件驱动模型，Python中，单线程的异步编程模型称为 **协程**。\n\n## 分布式进程（Distributed Process）\n\nProcess可以分布到多台机器中，而Thread只能分布在同一台机器的多个CPU中\n在Python中的`multiprocessing`模块的子模块`managers`支持把多进程分布到多台机器上。\n\n```python\n# task_master.py\nimport random, time, queue\nfrom multiprocessing.managers import BaseManager\n\ntask_queue=queue.Queue() #发送任务的队列\nresult_queue=queue.Queue() #接收结果的队列\n\nclass QueueManager(BaseManager):\n\tpass\n\n#将两个队列注册到网络上，callable关联Queue的对象\nQueueManager.register('get_task_queue',callable=lambda:task_queue)\nQueueManager.register('get_result_queue',callable=lambda:result_queue)\n\n#绑定端口5000，设置验证码‘key’\nmanager=QueueManager(address=('',5000),authkey=b'key')\n#启动Queue\nmanager.start()\n\n#通过网络访问Queue对象，获得两个对象，这两个Queue对象是在网络中共享的\ntask=manager.get_task_queue()\nresult=manager.get_result_queue()\n\n# 分配任务到task\nfor i in range(10):\n\tn=random.randint(0,10000)\n\tprint('Put task %d...' %n)\n\ttask.put(n) #将任务写入task的Queue\nprint('Try get result...')\n# 从result队列中获取结果\nfor i in range(10):\n\tr = result.get(timeout=100) #从result中获取到相应结果\n\tprint('Result: %s' %r)\n# 关闭任务\nmanager.shutdown()\nprint('master exit.')\n\n#task_worker.py\nimport time, sys, queue\nfrom multiprocessing.managers import BaseManager\n\nclass QueueManager(BaseManager):\n\tpass\n\n# QueueManager从网络上获取Queue，也就是master在网络上注册的队列\nQueueManager.register('get_task_queue')\nQueueManager.register('get_result_queue')\n#连接服务器，是运行Master机器的IP地址\nserver_adr = '172.16.120.70'\nprint('Connect to server %s...' %server_adr)\n#端口和验证码和master一致\nm=QueueManager(address=(server_adr,5000),authkey=b'key')\nm.connect() #连接该Queue\n\n#获取到网络中共享的Queue对象\ntask =m.get_task_queue()\nresult=m.get_result_queue()\n\nfor i in range(10):\n\ttry:\n\t\tn=task.get(timeout=100) #从Queue中获取数据，也就是获取任务\n\t\tprint('run task %d*%d...'%(n,n))\n\t\tr='%d*%d=%d' %(n,n,n*n) #进行处理\n\t\tresult.put(r) #将结果写入result的Queue\n\n\texcept Queue.Empty:\n\t\tprint('task queue is empty.')\n\nprint('worker exit')\n\n结果如下（依次运行master和worker）：\n[root@localhost Python]# python task_master.py\nPut task 2510...\nPut task 4137...\nPut task 4813...\nPut task 8463...\nPut task 8600...\nPut task 2369...\nPut task 3680...\nPut task 1531...\nPut task 4798...\nPut task 1694...\nTry get result...\nResult: 2510*2510=6300100\nResult: 4137*4137=17114769\nResult: 4813*4813=23164969\nResult: 8463*8463=71622369\nResult: 8600*8600=73960000\nResult: 2369*2369=5612161\nResult: 3680*3680=13542400\nResult: 1531*1531=2343961\nResult: 4798*4798=23020804\nResult: 1694*1694=2869636\nmaster exit.\n\n[root@localhost Python]# python task_worker.py\nConnect to server 172.16.120.70...\nrun task 2510*2510...\nrun task 4137*4137...\nrun task 4813*4813...\nrun task 8463*8463...\nrun task 8600*8600...\nrun task 2369*2369...\nrun task 3680*3680...\nrun task 1531*1531...\nrun task 4798*4798...\nrun task 1694*1694...\nworker exit\n\n```\n\n# Reference\n[liaoxuefeng的博客](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319272686365ec7ceaeca33428c914edf8f70cca383000)\n","source":"_posts/Python基础学习之-进程和线程.md","raw":"---\ntitle: 'Python基础学习之[进程和线程]'\ncopyright: true\ndate: 2017-07-16 15:46:32\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n\n# 进程和线程（Process and Thread）\n一个进程可以有多个线程，也可以有单个线程，但一个进程 **至少有一个** 线程，多进程和多线程的程序涉及到同步、数据共享的问题，编写起来要考虑的问题比较多。\n多任务的实现方式一般有 **3种**：\n\n- 多进程模式\n- 多线程模式\n- 多进程+多线程模式\n\n**Python既支持多进程，又支持多线程**\n<!--more-->\n\n## 多进程（multiprocessing）\nPython的`os`模块封装了常见的系统调用，比如`fork()`系统调用，该系统调用是创建一个与原来进程几乎完全相同的进程，一个进程调用 `fork()` 函数后，系统先给新的进程分配资源，例如存储数据和代码空间，然后把原来的进程的所有值都复制到新的进程中，只有少数值与原来的进程值不同，相当于克隆了一个自己。子进程永远返回0，而父进程返回子进程的ID，子进程调用`getppid()`拿到父进程的ID，而`getpid()`是得到本身的进程ID。 ** Windows 没有`fork`系统调用 。**\n\n```python\nimport os\nprint('Process (%s) start...' %os.getpid())\npid = os.fork() #如果是子进程，则返回0，父进程是返回子进程的ID\nif pid ==0:\n    print('I am child Process (%s) and my parent is %s.' %(os.getpid(),os.getppid()))\nelse:\n    print('I (%s) just created a child process (%s).' %(os.getpid(),pid))\n\n结果如下：\n[root@localhost Python]# python processing.py\nProcess (4563) start...\nI am child Process (4564) and my parent is 4563.\nI (4563) just created a child process (4564).\n\n```\n\n`multiprocessing`模块提供了`Process`类代表一个进程对象\n\n```python\nfrom multiprocessing import Process\nimport os\n\ndef run_proc(name):\n    print('Run chilid process %s(%s)' %(name,os.getpid()))\n\nif __name__ == '__main__':\n    print('Parent process %s.' %os.getpid()) # 程序启动时，产生一个进程，拥有进程号\n    p=Process(target=run_proc,args=('test',)) # p是子进程实例对象，由当前进程产生的进程。\n    print('Child process will start...')\n    p.start()\n    p.join()\n    print('Child process end...')\n\n结果如下：\n[root@localhost Python]# python processing.py\nParent process 4608.\nChild process will start...\nRun chilid process test(4609)\nChild process end...\n\n\n```\n\n## 进程池（Pool）\n如果需要启动大量的子进程，可以用进程池（Pool）的方式批量创建子进程。\n\n```python\nfrom multiprocessing import Pool #提供跨平台的多进程支持\nimport os, time, random\n\ndef long_time_task(name):\n    print('Run task %s (%s)...' %(name,os.getpid()))\n    start=time.time()\n    time.sleep(random.random()*3)\n    end=time.time()\n    print('Task %s runs %0.2f seconds.'%(name,(end-start)))\n\nif __name__ == '__main__':\n    print('Parent process %s.' %os.getpid())\n    p=Pool(4) #创建进程池，共有四个进程，默认的大小是CPU的核数，最多同时创建4个进程\n    for i in range(5):\n        p.apply_async(long_time_task,args=(i,)) # apply the async to invoke process， 使用异步的方式调用进程\n    print('waiting for all subprocesses done...')\n    p.close()\n    p.join() #调用join方法会等待所有子进程执行完毕，之前必须调用close（）\n    print('All subprocesses done...')\n\n结果如下：\nParent process 4752.\nwaiting for all subprocesses done...\nRun task 0 (4753)...\nRun task 1 (4755)...\nRun task 2 (4754)...\nRun task 3 (4756)...\nTask 3 runs 0.24 seconds.  #最多同时执行4个进程，只有结束了一个进程后，下个进程才能执行\nRun task 4 (4756)...\nTask 0 runs 0.47 seconds.\nTask 4 runs 0.75 seconds.\nTask 1 runs 1.18 seconds.\nTask 2 runs 2.47 seconds.\nAll subprocesses done...\n\n```\n\n### 子进程及进程间的通讯\n\n```python\n\nimport subprocess #该模块可以比较方便启动一个子进程，然后控制输入输出\n\nprint('$ nslookup www.python.org')\nr= subprocess.call(['nslookup','www.python.org'])\nprint('Exit code:',r)\n\n\nprint('$ nslookup')\np=subprocess.Popen(['nslookup'],stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr=subprocess.PIPE)\noutput, err=p.communicate(b'set q=mx\\npython.org\\nexit\\n') #子进程需要输入参数的话，使用communicate。\nprint(output.decode('utf-8'))\nprint('Exit code:',p.returncode)\n\n运行结果如下：\n\n[root@localhost Python]# python processing.py\n$ nslookup www.python.org\nServer:\t\t114.114.114.114\nAddress:\t114.114.114.114#53\n\nNon-authoritative answer:\nwww.python.org\tcanonical name = python.map.fastly.net.\nName:\tpython.map.fastly.net\nAddress: 151.101.72.223\n\nExit code: 0\n$ nslookup\nServer:\t\t61.177.7.1\nAddress:\t61.177.7.1#53\n\nNon-authoritative answer:\npython.org\tmail exchanger = 50 mail.python.org.\n\nAuthoritative answers can be found from:\npython.org\tnameserver = ns3.p11.dynect.net.\npython.org\tnameserver = ns2.p11.dynect.net.\npython.org\tnameserver = ns1.p11.dynect.net.\npython.org\tnameserver = ns4.p11.dynect.net.\nmail.python.org\tinternet address = 188.166.95.178\nmail.python.org\thas AAAA address 2a03:b0c0:2:d0::71:1\nns1.p11.dynect.net\tinternet address = 208.78.70.11\nns2.p11.dynect.net\tinternet address = 204.13.250.11\nns3.p11.dynect.net\tinternet address = 208.78.71.11\nns4.p11.dynect.net\tinternet address = 204.13.251.11\n\n\nExit code: 0\n\n```\n进程间的通讯，在模块`multiprocessing`模块提供了`Queue`,`Pipes`等方式交换数据。这个交换可以是读，也可以是写。\n\n```python\nfrom multiprocessing import Process,Queue\nimport os,time,random\n\n# process that write data\ndef write(q):\n    print('Process to write: %s' %os.getpid())\n    for value in ['A', 'B', 'C']:\n        print('Put %s to queue...' %value)\n        q.put(value)\n        time.sleep(random.random()) #写进程稍微沉睡几秒\n\n\n# process that read data\ndef read(q):\n    print('Process to read: %s' %os.getpid())\n    while True:\n        value =q.get(True)\n        print('Get %s from queue.' %value)\n\nif __name__ == '__main__':\n\n    #father process create Queue, and pass it to subprocess:\n    q=Queue()\n\n    pw=Process(target=write,args=(q,))\n    pr=Process(target=read,args=(q,))\n\n    # start subprocess pw, write data:\n    pw.start()\n    # start subprocess pr, read data:\n    pr.start()\n    # waite subprocess pw finish\n    pw.join()\n    # pr进程是死循环，见while true。\n    pr.terminate()\n\n结果是：\n[root@localhost Python]# python processing.py\nProcess to write: 5229\nPut A to queue...\nProcess to read: 5230\nGet A from queue.\nPut B to queue...\nGet B from queue.\nPut C to queue...\nGet C from queue.\n\n```\n\n## 多线程\n线程是操作系统直接支持的执行单元，Python的标准库提供两个模块：`_thread`和 `threading`,前者是低级模块，后者是高级模块，是对前者的封装。\n启动一个线程就是把一个函数传入并创建`Thread`实例（一个方法，创建出来），然后调用`start()`开始执行：\n\n```python\nimport time, threading\n\ndef loop():\n    #函数current_thread()永远返回当前线程的实例\n    print('thread %s is running...' %threading.current_thread().name)\n    n=0\n    while n<5:\n        n=n+1\n        print('thread %s ---> %s' %(threading.current_thread().name,n))\n        time.sleep(1)\n    print('thread %s ended.'%threading.current_thread().name)\n\n\n\nprint('thread %s is running...' %threading.current_thread().name)\nt=threading.Thread(target=loop,name='Loopthread')\n# 把一个函数传入，并创建线程实例，然后调用start开始执行\nt.start()\nt.join()\nprint('thread %s ended.'%threading.current_thread().name)\n```\n\n## 加锁（Lock）\n可能存在读脏数据的问题，两个线程同时更新一个变量，导致出现意想不到的结果，所以多线程的时候，必须加锁（写的时候）。\n\n```python\nimport time, threading\n\nbalance =0\nlock=threading.Lock() #申请一把锁\n\ndef change(n):\n\n    global balance\n    balance =balance+n\n    balance =balance-n\n\ndef run_thread(n):\n    for i in range(100000):\n\n        lock.acquire() #加锁，进行互斥访问\n\n        try:\n            change(n)\n        finally:\n            lock.release() #用完必须释放锁\n\nt1=threading.Thread(target=run_thread,args=(5,))\nt2=threading.Thread(target=run_thread,args=(8,))\n\nt1.start()\nt2.start()\n\nt1.join()\nt2.join()\nprint(balance)\n```\nPython解释器设计时带有 **GIL（Global Interpreter Lock）**，任何线程执行前，必须获得该锁，每100条字节码后，自动释放该锁，因而多线程无法利用多核。\n\n## ThreadLocal\n\n解决多线程局部变量传递，调用的问题。\n\n```python\n# 方式一，使用dic，避免参数的每层传递\nglobal_dict={}\n\ndef std_thread(name):\n    global_dict[threading.current_thread()] =std\n    do_task_1()\n    do_task_2()\n\ndef do_task_1():\n    std = global_dict[threading.current_thread()]\n    do something here\n\ndef do_task_2():\n    std = global_dict[threading.current_thread()]\n    do something here\n\n\n# 方式二，使用ThreadLocal\nimport threading\n\nlocal_school =threading.local() #创建全局变量ThreadLocal\n\ndef process_student():\n    #获取当前线程关联的student\n    std =local_school.student\n    print('Hello,%s (in %s)' %(std,threading.current_thread().name))\n\n\ndef process_thread(name):\n    #绑定ThreLocal的student变量\n    local_school.student=name\n    process_student()\n\nt1= threading.Thread(target=process_thread,args=('li',),name='Thread-1')\nt2=threading.Thread(target=process_thread,args=('cheng',),name='Thread-2')\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n\n可以这样理解，local_school是一个ThreaLocal对象（类似于一个dict），是一个全局变量，但local_school的每个属性local_school.student都是线程的局部变量，可以任意读写，线程之间互不干扰，不用管理锁的问题。\n```\n## 进程 vs. 线程\n多任务情况下，通常是 **Master-Worker** 模式， Master负责分配任务，Worker负责执行任务，通常只有一个Master，多个Worker。\n\n- 主进程是Master，其他进程是Worker（**多进程** 实现该模式），稳定性高，代价大\n- 主线程是Master，其他线程是Worker（**多线程** 实现该模式），效率高，不稳定\n\n### 计算密集型 vs. IO密集型\n任务的类型分为这两类：\n\n- 计算密集型：需要进行大量的计算，任务同时进行的数量应当等于CPU的核心数，需要高效率的代码，一般使用C\n- IO密集型：CPU消耗少，涉及网络、磁盘IO的任务，最合适的语言是脚本语言，如Python\n\n### 异步IO\n充分利用OS的异步IO支持，可以实现单进程单线程模型执行多任务，被称为事件驱动模型，Python中，单线程的异步编程模型称为 **协程**。\n\n## 分布式进程（Distributed Process）\n\nProcess可以分布到多台机器中，而Thread只能分布在同一台机器的多个CPU中\n在Python中的`multiprocessing`模块的子模块`managers`支持把多进程分布到多台机器上。\n\n```python\n# task_master.py\nimport random, time, queue\nfrom multiprocessing.managers import BaseManager\n\ntask_queue=queue.Queue() #发送任务的队列\nresult_queue=queue.Queue() #接收结果的队列\n\nclass QueueManager(BaseManager):\n\tpass\n\n#将两个队列注册到网络上，callable关联Queue的对象\nQueueManager.register('get_task_queue',callable=lambda:task_queue)\nQueueManager.register('get_result_queue',callable=lambda:result_queue)\n\n#绑定端口5000，设置验证码‘key’\nmanager=QueueManager(address=('',5000),authkey=b'key')\n#启动Queue\nmanager.start()\n\n#通过网络访问Queue对象，获得两个对象，这两个Queue对象是在网络中共享的\ntask=manager.get_task_queue()\nresult=manager.get_result_queue()\n\n# 分配任务到task\nfor i in range(10):\n\tn=random.randint(0,10000)\n\tprint('Put task %d...' %n)\n\ttask.put(n) #将任务写入task的Queue\nprint('Try get result...')\n# 从result队列中获取结果\nfor i in range(10):\n\tr = result.get(timeout=100) #从result中获取到相应结果\n\tprint('Result: %s' %r)\n# 关闭任务\nmanager.shutdown()\nprint('master exit.')\n\n#task_worker.py\nimport time, sys, queue\nfrom multiprocessing.managers import BaseManager\n\nclass QueueManager(BaseManager):\n\tpass\n\n# QueueManager从网络上获取Queue，也就是master在网络上注册的队列\nQueueManager.register('get_task_queue')\nQueueManager.register('get_result_queue')\n#连接服务器，是运行Master机器的IP地址\nserver_adr = '172.16.120.70'\nprint('Connect to server %s...' %server_adr)\n#端口和验证码和master一致\nm=QueueManager(address=(server_adr,5000),authkey=b'key')\nm.connect() #连接该Queue\n\n#获取到网络中共享的Queue对象\ntask =m.get_task_queue()\nresult=m.get_result_queue()\n\nfor i in range(10):\n\ttry:\n\t\tn=task.get(timeout=100) #从Queue中获取数据，也就是获取任务\n\t\tprint('run task %d*%d...'%(n,n))\n\t\tr='%d*%d=%d' %(n,n,n*n) #进行处理\n\t\tresult.put(r) #将结果写入result的Queue\n\n\texcept Queue.Empty:\n\t\tprint('task queue is empty.')\n\nprint('worker exit')\n\n结果如下（依次运行master和worker）：\n[root@localhost Python]# python task_master.py\nPut task 2510...\nPut task 4137...\nPut task 4813...\nPut task 8463...\nPut task 8600...\nPut task 2369...\nPut task 3680...\nPut task 1531...\nPut task 4798...\nPut task 1694...\nTry get result...\nResult: 2510*2510=6300100\nResult: 4137*4137=17114769\nResult: 4813*4813=23164969\nResult: 8463*8463=71622369\nResult: 8600*8600=73960000\nResult: 2369*2369=5612161\nResult: 3680*3680=13542400\nResult: 1531*1531=2343961\nResult: 4798*4798=23020804\nResult: 1694*1694=2869636\nmaster exit.\n\n[root@localhost Python]# python task_worker.py\nConnect to server 172.16.120.70...\nrun task 2510*2510...\nrun task 4137*4137...\nrun task 4813*4813...\nrun task 8463*8463...\nrun task 8600*8600...\nrun task 2369*2369...\nrun task 3680*3680...\nrun task 1531*1531...\nrun task 4798*4798...\nrun task 1694*1694...\nworker exit\n\n```\n\n# Reference\n[liaoxuefeng的博客](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319272686365ec7ceaeca33428c914edf8f70cca383000)\n","slug":"Python基础学习之-进程和线程","published":1,"updated":"2017-07-16T08:08:36.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c75000x4ov16t4enk77","content":"<h1 id=\"进程和线程（Process-and-Thread）\"><a href=\"#进程和线程（Process-and-Thread）\" class=\"headerlink\" title=\"进程和线程（Process and Thread）\"></a>进程和线程（Process and Thread）</h1><p>一个进程可以有多个线程，也可以有单个线程，但一个进程 <strong>至少有一个</strong> 线程，多进程和多线程的程序涉及到同步、数据共享的问题，编写起来要考虑的问题比较多。<br>多任务的实现方式一般有 <strong>3种</strong>：</p>\n<ul>\n<li>多进程模式</li>\n<li>多线程模式</li>\n<li>多进程+多线程模式</li>\n</ul>\n<p><strong>Python既支持多进程，又支持多线程</strong><br><a id=\"more\"></a></p>\n<h2 id=\"多进程（multiprocessing）\"><a href=\"#多进程（multiprocessing）\" class=\"headerlink\" title=\"多进程（multiprocessing）\"></a>多进程（multiprocessing）</h2><p>Python的<code>os</code>模块封装了常见的系统调用，比如<code>fork()</code>系统调用，该系统调用是创建一个与原来进程几乎完全相同的进程，一个进程调用 <code>fork()</code> 函数后，系统先给新的进程分配资源，例如存储数据和代码空间，然后把原来的进程的所有值都复制到新的进程中，只有少数值与原来的进程值不同，相当于克隆了一个自己。子进程永远返回0，而父进程返回子进程的ID，子进程调用<code>getppid()</code>拿到父进程的ID，而<code>getpid()</code>是得到本身的进程ID。 <strong> Windows 没有<code>fork</code>系统调用 。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\">print(<span class=\"string\">'Process (%s) start...'</span> %os.getpid())</div><div class=\"line\">pid = os.fork() <span class=\"comment\">#如果是子进程，则返回0，父进程是返回子进程的ID</span></div><div class=\"line\"><span class=\"keyword\">if</span> pid ==<span class=\"number\">0</span>:</div><div class=\"line\">    print(<span class=\"string\">'I am child Process (%s) and my parent is %s.'</span> %(os.getpid(),os.getppid()))</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'I (%s) just created a child process (%s).'</span> %(os.getpid(),pid))</div><div class=\"line\"></div><div class=\"line\">结果如下：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python processing.py</span></div><div class=\"line\">Process (<span class=\"number\">4563</span>) start...</div><div class=\"line\">I am child Process (<span class=\"number\">4564</span>) <span class=\"keyword\">and</span> my parent <span class=\"keyword\">is</span> <span class=\"number\">4563.</span></div><div class=\"line\">I (<span class=\"number\">4563</span>) just created a child process (<span class=\"number\">4564</span>).</div></pre></td></tr></table></figure>\n<p><code>multiprocessing</code>模块提供了<code>Process</code>类代表一个进程对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_proc</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Run chilid process %s(%s)'</span> %(name,os.getpid()))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Parent process %s.'</span> %os.getpid()) <span class=\"comment\"># 程序启动时，产生一个进程，拥有进程号</span></div><div class=\"line\">    p=Process(target=run_proc,args=(<span class=\"string\">'test'</span>,)) <span class=\"comment\"># p是子进程实例对象，由当前进程产生的进程。</span></div><div class=\"line\">    print(<span class=\"string\">'Child process will start...'</span>)</div><div class=\"line\">    p.start()</div><div class=\"line\">    p.join()</div><div class=\"line\">    print(<span class=\"string\">'Child process end...'</span>)</div><div class=\"line\"></div><div class=\"line\">结果如下：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python processing.py</span></div><div class=\"line\">Parent process <span class=\"number\">4608.</span></div><div class=\"line\">Child process will start...</div><div class=\"line\">Run chilid process test(<span class=\"number\">4609</span>)</div><div class=\"line\">Child process end...</div></pre></td></tr></table></figure>\n<h2 id=\"进程池（Pool）\"><a href=\"#进程池（Pool）\" class=\"headerlink\" title=\"进程池（Pool）\"></a>进程池（Pool）</h2><p>如果需要启动大量的子进程，可以用进程池（Pool）的方式批量创建子进程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool <span class=\"comment\">#提供跨平台的多进程支持</span></div><div class=\"line\"><span class=\"keyword\">import</span> os, time, random</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_time_task</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Run task %s (%s)...'</span> %(name,os.getpid()))</div><div class=\"line\">    start=time.time()</div><div class=\"line\">    time.sleep(random.random()*<span class=\"number\">3</span>)</div><div class=\"line\">    end=time.time()</div><div class=\"line\">    print(<span class=\"string\">'Task %s runs %0.2f seconds.'</span>%(name,(end-start)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Parent process %s.'</span> %os.getpid())</div><div class=\"line\">    p=Pool(<span class=\"number\">4</span>) <span class=\"comment\">#创建进程池，共有四个进程，默认的大小是CPU的核数，最多同时创建4个进程</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</div><div class=\"line\">        p.apply_async(long_time_task,args=(i,)) <span class=\"comment\"># apply the async to invoke process， 使用异步的方式调用进程</span></div><div class=\"line\">    print(<span class=\"string\">'waiting for all subprocesses done...'</span>)</div><div class=\"line\">    p.close()</div><div class=\"line\">    p.join() <span class=\"comment\">#调用join方法会等待所有子进程执行完毕，之前必须调用close（）</span></div><div class=\"line\">    print(<span class=\"string\">'All subprocesses done...'</span>)</div><div class=\"line\"></div><div class=\"line\">结果如下：</div><div class=\"line\">Parent process <span class=\"number\">4752.</span></div><div class=\"line\">waiting <span class=\"keyword\">for</span> all subprocesses done...</div><div class=\"line\">Run task <span class=\"number\">0</span> (<span class=\"number\">4753</span>)...</div><div class=\"line\">Run task <span class=\"number\">1</span> (<span class=\"number\">4755</span>)...</div><div class=\"line\">Run task <span class=\"number\">2</span> (<span class=\"number\">4754</span>)...</div><div class=\"line\">Run task <span class=\"number\">3</span> (<span class=\"number\">4756</span>)...</div><div class=\"line\">Task <span class=\"number\">3</span> runs <span class=\"number\">0.24</span> seconds.  <span class=\"comment\">#最多同时执行4个进程，只有结束了一个进程后，下个进程才能执行</span></div><div class=\"line\">Run task <span class=\"number\">4</span> (<span class=\"number\">4756</span>)...</div><div class=\"line\">Task <span class=\"number\">0</span> runs <span class=\"number\">0.47</span> seconds.</div><div class=\"line\">Task <span class=\"number\">4</span> runs <span class=\"number\">0.75</span> seconds.</div><div class=\"line\">Task <span class=\"number\">1</span> runs <span class=\"number\">1.18</span> seconds.</div><div class=\"line\">Task <span class=\"number\">2</span> runs <span class=\"number\">2.47</span> seconds.</div><div class=\"line\">All subprocesses done...</div></pre></td></tr></table></figure>\n<h3 id=\"子进程及进程间的通讯\"><a href=\"#子进程及进程间的通讯\" class=\"headerlink\" title=\"子进程及进程间的通讯\"></a>子进程及进程间的通讯</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> subprocess <span class=\"comment\">#该模块可以比较方便启动一个子进程，然后控制输入输出</span></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'$ nslookup www.python.org'</span>)</div><div class=\"line\">r= subprocess.call([<span class=\"string\">'nslookup'</span>,<span class=\"string\">'www.python.org'</span>])</div><div class=\"line\">print(<span class=\"string\">'Exit code:'</span>,r)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'$ nslookup'</span>)</div><div class=\"line\">p=subprocess.Popen([<span class=\"string\">'nslookup'</span>],stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr=subprocess.PIPE)</div><div class=\"line\">output, err=p.communicate(<span class=\"string\">b'set q=mx\\npython.org\\nexit\\n'</span>) <span class=\"comment\">#子进程需要输入参数的话，使用communicate。</span></div><div class=\"line\">print(output.decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\">print(<span class=\"string\">'Exit code:'</span>,p.returncode)</div><div class=\"line\"></div><div class=\"line\">运行结果如下：</div><div class=\"line\"></div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python processing.py</span></div><div class=\"line\">$ nslookup www.python.org</div><div class=\"line\">Server:\t\t<span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span></div><div class=\"line\">Address:\t<span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span><span class=\"comment\">#53</span></div><div class=\"line\"></div><div class=\"line\">Non-authoritative answer:</div><div class=\"line\">www.python.org\tcanonical name = python.map.fastly.net.</div><div class=\"line\">Name:\tpython.map.fastly.net</div><div class=\"line\">Address: <span class=\"number\">151.101</span><span class=\"number\">.72</span><span class=\"number\">.223</span></div><div class=\"line\"></div><div class=\"line\">Exit code: <span class=\"number\">0</span></div><div class=\"line\">$ nslookup</div><div class=\"line\">Server:\t\t<span class=\"number\">61.177</span><span class=\"number\">.7</span><span class=\"number\">.1</span></div><div class=\"line\">Address:\t<span class=\"number\">61.177</span><span class=\"number\">.7</span><span class=\"number\">.1</span><span class=\"comment\">#53</span></div><div class=\"line\"></div><div class=\"line\">Non-authoritative answer:</div><div class=\"line\">python.org\tmail exchanger = <span class=\"number\">50</span> mail.python.org.</div><div class=\"line\"></div><div class=\"line\">Authoritative answers can be found <span class=\"keyword\">from</span>:</div><div class=\"line\">python.org\tnameserver = ns3.p11.dynect.net.</div><div class=\"line\">python.org\tnameserver = ns2.p11.dynect.net.</div><div class=\"line\">python.org\tnameserver = ns1.p11.dynect.net.</div><div class=\"line\">python.org\tnameserver = ns4.p11.dynect.net.</div><div class=\"line\">mail.python.org\tinternet address = <span class=\"number\">188.166</span><span class=\"number\">.95</span><span class=\"number\">.178</span></div><div class=\"line\">mail.python.org\thas AAAA address <span class=\"number\">2</span>a03:b0c0:<span class=\"number\">2</span>:d0::<span class=\"number\">71</span>:<span class=\"number\">1</span></div><div class=\"line\">ns1.p11.dynect.net\tinternet address = <span class=\"number\">208.78</span><span class=\"number\">.70</span><span class=\"number\">.11</span></div><div class=\"line\">ns2.p11.dynect.net\tinternet address = <span class=\"number\">204.13</span><span class=\"number\">.250</span><span class=\"number\">.11</span></div><div class=\"line\">ns3.p11.dynect.net\tinternet address = <span class=\"number\">208.78</span><span class=\"number\">.71</span><span class=\"number\">.11</span></div><div class=\"line\">ns4.p11.dynect.net\tinternet address = <span class=\"number\">204.13</span><span class=\"number\">.251</span><span class=\"number\">.11</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Exit code: <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>进程间的通讯，在模块<code>multiprocessing</code>模块提供了<code>Queue</code>,<code>Pipes</code>等方式交换数据。这个交换可以是读，也可以是写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process,Queue</div><div class=\"line\"><span class=\"keyword\">import</span> os,time,random</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># process that write data</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(q)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Process to write: %s'</span> %os.getpid())</div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]:</div><div class=\"line\">        print(<span class=\"string\">'Put %s to queue...'</span> %value)</div><div class=\"line\">        q.put(value)</div><div class=\"line\">        time.sleep(random.random()) <span class=\"comment\">#写进程稍微沉睡几秒</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># process that read data</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span><span class=\"params\">(q)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Process to read: %s'</span> %os.getpid())</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        value =q.get(<span class=\"keyword\">True</span>)</div><div class=\"line\">        print(<span class=\"string\">'Get %s from queue.'</span> %value)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#father process create Queue, and pass it to subprocess:</span></div><div class=\"line\">    q=Queue()</div><div class=\"line\"></div><div class=\"line\">    pw=Process(target=write,args=(q,))</div><div class=\"line\">    pr=Process(target=read,args=(q,))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># start subprocess pw, write data:</span></div><div class=\"line\">    pw.start()</div><div class=\"line\">    <span class=\"comment\"># start subprocess pr, read data:</span></div><div class=\"line\">    pr.start()</div><div class=\"line\">    <span class=\"comment\"># waite subprocess pw finish</span></div><div class=\"line\">    pw.join()</div><div class=\"line\">    <span class=\"comment\"># pr进程是死循环，见while true。</span></div><div class=\"line\">    pr.terminate()</div><div class=\"line\"></div><div class=\"line\">结果是：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python processing.py</span></div><div class=\"line\">Process to write: <span class=\"number\">5229</span></div><div class=\"line\">Put A to queue...</div><div class=\"line\">Process to read: <span class=\"number\">5230</span></div><div class=\"line\">Get A <span class=\"keyword\">from</span> queue.</div><div class=\"line\">Put B to queue...</div><div class=\"line\">Get B <span class=\"keyword\">from</span> queue.</div><div class=\"line\">Put C to queue...</div><div class=\"line\">Get C <span class=\"keyword\">from</span> queue.</div></pre></td></tr></table></figure>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>线程是操作系统直接支持的执行单元，Python的标准库提供两个模块：<code>_thread</code>和 <code>threading</code>,前者是低级模块，后者是高级模块，是对前者的封装。<br>启动一个线程就是把一个函数传入并创建<code>Thread</code>实例（一个方法，创建出来），然后调用<code>start()</code>开始执行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time, threading</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\">#函数current_thread()永远返回当前线程的实例</span></div><div class=\"line\">    print(<span class=\"string\">'thread %s is running...'</span> %threading.current_thread().name)</div><div class=\"line\">    n=<span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n&lt;<span class=\"number\">5</span>:</div><div class=\"line\">        n=n+<span class=\"number\">1</span></div><div class=\"line\">        print(<span class=\"string\">'thread %s ---&gt; %s'</span> %(threading.current_thread().name,n))</div><div class=\"line\">        time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">'thread %s ended.'</span>%threading.current_thread().name)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'thread %s is running...'</span> %threading.current_thread().name)</div><div class=\"line\">t=threading.Thread(target=loop,name=<span class=\"string\">'Loopthread'</span>)</div><div class=\"line\"><span class=\"comment\"># 把一个函数传入，并创建线程实例，然后调用start开始执行</span></div><div class=\"line\">t.start()</div><div class=\"line\">t.join()</div><div class=\"line\">print(<span class=\"string\">'thread %s ended.'</span>%threading.current_thread().name)</div></pre></td></tr></table></figure>\n<h2 id=\"加锁（Lock）\"><a href=\"#加锁（Lock）\" class=\"headerlink\" title=\"加锁（Lock）\"></a>加锁（Lock）</h2><p>可能存在读脏数据的问题，两个线程同时更新一个变量，导致出现意想不到的结果，所以多线程的时候，必须加锁（写的时候）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time, threading</div><div class=\"line\"></div><div class=\"line\">balance =<span class=\"number\">0</span></div><div class=\"line\">lock=threading.Lock() <span class=\"comment\">#申请一把锁</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">global</span> balance</div><div class=\"line\">    balance =balance+n</div><div class=\"line\">    balance =balance-n</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_thread</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100000</span>):</div><div class=\"line\"></div><div class=\"line\">        lock.acquire() <span class=\"comment\">#加锁，进行互斥访问</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            change(n)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            lock.release() <span class=\"comment\">#用完必须释放锁</span></div><div class=\"line\"></div><div class=\"line\">t1=threading.Thread(target=run_thread,args=(<span class=\"number\">5</span>,))</div><div class=\"line\">t2=threading.Thread(target=run_thread,args=(<span class=\"number\">8</span>,))</div><div class=\"line\"></div><div class=\"line\">t1.start()</div><div class=\"line\">t2.start()</div><div class=\"line\"></div><div class=\"line\">t1.join()</div><div class=\"line\">t2.join()</div><div class=\"line\">print(balance)</div></pre></td></tr></table></figure>\n<p>Python解释器设计时带有 <strong>GIL（Global Interpreter Lock）</strong>，任何线程执行前，必须获得该锁，每100条字节码后，自动释放该锁，因而多线程无法利用多核。</p>\n<h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><p>解决多线程局部变量传递，调用的问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 方式一，使用dic，避免参数的每层传递</span></div><div class=\"line\">global_dict=&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">std_thread</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    global_dict[threading.current_thread()] =std</div><div class=\"line\">    do_task_1()</div><div class=\"line\">    do_task_2()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_task_1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    std = global_dict[threading.current_thread()]</div><div class=\"line\">    do something here</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_task_2</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    std = global_dict[threading.current_thread()]</div><div class=\"line\">    do something here</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 方式二，使用ThreadLocal</span></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\">local_school =threading.local() <span class=\"comment\">#创建全局变量ThreadLocal</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\">#获取当前线程关联的student</span></div><div class=\"line\">    std =local_school.student</div><div class=\"line\">    print(<span class=\"string\">'Hello,%s (in %s)'</span> %(std,threading.current_thread().name))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_thread</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#绑定ThreLocal的student变量</span></div><div class=\"line\">    local_school.student=name</div><div class=\"line\">    process_student()</div><div class=\"line\"></div><div class=\"line\">t1= threading.Thread(target=process_thread,args=(<span class=\"string\">'li'</span>,),name=<span class=\"string\">'Thread-1'</span>)</div><div class=\"line\">t2=threading.Thread(target=process_thread,args=(<span class=\"string\">'cheng'</span>,),name=<span class=\"string\">'Thread-2'</span>)</div><div class=\"line\">t1.start()</div><div class=\"line\">t2.start()</div><div class=\"line\">t1.join()</div><div class=\"line\">t2.join()</div><div class=\"line\"></div><div class=\"line\">可以这样理解，local_school是一个ThreaLocal对象（类似于一个dict），是一个全局变量，但local_school的每个属性local_school.student都是线程的局部变量，可以任意读写，线程之间互不干扰，不用管理锁的问题。</div></pre></td></tr></table></figure>\n<h2 id=\"进程-vs-线程\"><a href=\"#进程-vs-线程\" class=\"headerlink\" title=\"进程 vs. 线程\"></a>进程 vs. 线程</h2><p>多任务情况下，通常是 <strong>Master-Worker</strong> 模式， Master负责分配任务，Worker负责执行任务，通常只有一个Master，多个Worker。</p>\n<ul>\n<li>主进程是Master，其他进程是Worker（<strong>多进程</strong> 实现该模式），稳定性高，代价大</li>\n<li>主线程是Master，其他线程是Worker（<strong>多线程</strong> 实现该模式），效率高，不稳定</li>\n</ul>\n<h3 id=\"计算密集型-vs-IO密集型\"><a href=\"#计算密集型-vs-IO密集型\" class=\"headerlink\" title=\"计算密集型 vs. IO密集型\"></a>计算密集型 vs. IO密集型</h3><p>任务的类型分为这两类：</p>\n<ul>\n<li>计算密集型：需要进行大量的计算，任务同时进行的数量应当等于CPU的核心数，需要高效率的代码，一般使用C</li>\n<li>IO密集型：CPU消耗少，涉及网络、磁盘IO的任务，最合适的语言是脚本语言，如Python</li>\n</ul>\n<h3 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h3><p>充分利用OS的异步IO支持，可以实现单进程单线程模型执行多任务，被称为事件驱动模型，Python中，单线程的异步编程模型称为 <strong>协程</strong>。</p>\n<h2 id=\"分布式进程（Distributed-Process）\"><a href=\"#分布式进程（Distributed-Process）\" class=\"headerlink\" title=\"分布式进程（Distributed Process）\"></a>分布式进程（Distributed Process）</h2><p>Process可以分布到多台机器中，而Thread只能分布在同一台机器的多个CPU中<br>在Python中的<code>multiprocessing</code>模块的子模块<code>managers</code>支持把多进程分布到多台机器上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># task_master.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> random, time, queue</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.managers <span class=\"keyword\">import</span> BaseManager</div><div class=\"line\"></div><div class=\"line\">task_queue=queue.Queue() <span class=\"comment\">#发送任务的队列</span></div><div class=\"line\">result_queue=queue.Queue() <span class=\"comment\">#接收结果的队列</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueManager</span><span class=\"params\">(BaseManager)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#将两个队列注册到网络上，callable关联Queue的对象</span></div><div class=\"line\">QueueManager.register(<span class=\"string\">'get_task_queue'</span>,callable=<span class=\"keyword\">lambda</span>:task_queue)</div><div class=\"line\">QueueManager.register(<span class=\"string\">'get_result_queue'</span>,callable=<span class=\"keyword\">lambda</span>:result_queue)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#绑定端口5000，设置验证码‘key’</span></div><div class=\"line\">manager=QueueManager(address=(<span class=\"string\">''</span>,<span class=\"number\">5000</span>),authkey=<span class=\"string\">b'key'</span>)</div><div class=\"line\"><span class=\"comment\">#启动Queue</span></div><div class=\"line\">manager.start()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#通过网络访问Queue对象，获得两个对象，这两个Queue对象是在网络中共享的</span></div><div class=\"line\">task=manager.get_task_queue()</div><div class=\"line\">result=manager.get_result_queue()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 分配任务到task</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">\tn=random.randint(<span class=\"number\">0</span>,<span class=\"number\">10000</span>)</div><div class=\"line\">\tprint(<span class=\"string\">'Put task %d...'</span> %n)</div><div class=\"line\">\ttask.put(n) <span class=\"comment\">#将任务写入task的Queue</span></div><div class=\"line\">print(<span class=\"string\">'Try get result...'</span>)</div><div class=\"line\"><span class=\"comment\"># 从result队列中获取结果</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">\tr = result.get(timeout=<span class=\"number\">100</span>) <span class=\"comment\">#从result中获取到相应结果</span></div><div class=\"line\">\tprint(<span class=\"string\">'Result: %s'</span> %r)</div><div class=\"line\"><span class=\"comment\"># 关闭任务</span></div><div class=\"line\">manager.shutdown()</div><div class=\"line\">print(<span class=\"string\">'master exit.'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#task_worker.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> time, sys, queue</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.managers <span class=\"keyword\">import</span> BaseManager</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueManager</span><span class=\"params\">(BaseManager)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># QueueManager从网络上获取Queue，也就是master在网络上注册的队列</span></div><div class=\"line\">QueueManager.register(<span class=\"string\">'get_task_queue'</span>)</div><div class=\"line\">QueueManager.register(<span class=\"string\">'get_result_queue'</span>)</div><div class=\"line\"><span class=\"comment\">#连接服务器，是运行Master机器的IP地址</span></div><div class=\"line\">server_adr = <span class=\"string\">'172.16.120.70'</span></div><div class=\"line\">print(<span class=\"string\">'Connect to server %s...'</span> %server_adr)</div><div class=\"line\"><span class=\"comment\">#端口和验证码和master一致</span></div><div class=\"line\">m=QueueManager(address=(server_adr,<span class=\"number\">5000</span>),authkey=<span class=\"string\">b'key'</span>)</div><div class=\"line\">m.connect() <span class=\"comment\">#连接该Queue</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#获取到网络中共享的Queue对象</span></div><div class=\"line\">task =m.get_task_queue()</div><div class=\"line\">result=m.get_result_queue()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\tn=task.get(timeout=<span class=\"number\">100</span>) <span class=\"comment\">#从Queue中获取数据，也就是获取任务</span></div><div class=\"line\">\t\tprint(<span class=\"string\">'run task %d*%d...'</span>%(n,n))</div><div class=\"line\">\t\tr=<span class=\"string\">'%d*%d=%d'</span> %(n,n,n*n) <span class=\"comment\">#进行处理</span></div><div class=\"line\">\t\tresult.put(r) <span class=\"comment\">#将结果写入result的Queue</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">except</span> Queue.Empty:</div><div class=\"line\">\t\tprint(<span class=\"string\">'task queue is empty.'</span>)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'worker exit'</span>)</div><div class=\"line\"></div><div class=\"line\">结果如下（依次运行master和worker）：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python task_master.py</span></div><div class=\"line\">Put task <span class=\"number\">2510.</span>..</div><div class=\"line\">Put task <span class=\"number\">4137.</span>..</div><div class=\"line\">Put task <span class=\"number\">4813.</span>..</div><div class=\"line\">Put task <span class=\"number\">8463.</span>..</div><div class=\"line\">Put task <span class=\"number\">8600.</span>..</div><div class=\"line\">Put task <span class=\"number\">2369.</span>..</div><div class=\"line\">Put task <span class=\"number\">3680.</span>..</div><div class=\"line\">Put task <span class=\"number\">1531.</span>..</div><div class=\"line\">Put task <span class=\"number\">4798.</span>..</div><div class=\"line\">Put task <span class=\"number\">1694.</span>..</div><div class=\"line\">Try get result...</div><div class=\"line\">Result: <span class=\"number\">2510</span>*<span class=\"number\">2510</span>=<span class=\"number\">6300100</span></div><div class=\"line\">Result: <span class=\"number\">4137</span>*<span class=\"number\">4137</span>=<span class=\"number\">17114769</span></div><div class=\"line\">Result: <span class=\"number\">4813</span>*<span class=\"number\">4813</span>=<span class=\"number\">23164969</span></div><div class=\"line\">Result: <span class=\"number\">8463</span>*<span class=\"number\">8463</span>=<span class=\"number\">71622369</span></div><div class=\"line\">Result: <span class=\"number\">8600</span>*<span class=\"number\">8600</span>=<span class=\"number\">73960000</span></div><div class=\"line\">Result: <span class=\"number\">2369</span>*<span class=\"number\">2369</span>=<span class=\"number\">5612161</span></div><div class=\"line\">Result: <span class=\"number\">3680</span>*<span class=\"number\">3680</span>=<span class=\"number\">13542400</span></div><div class=\"line\">Result: <span class=\"number\">1531</span>*<span class=\"number\">1531</span>=<span class=\"number\">2343961</span></div><div class=\"line\">Result: <span class=\"number\">4798</span>*<span class=\"number\">4798</span>=<span class=\"number\">23020804</span></div><div class=\"line\">Result: <span class=\"number\">1694</span>*<span class=\"number\">1694</span>=<span class=\"number\">2869636</span></div><div class=\"line\">master exit.</div><div class=\"line\"></div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python task_worker.py</span></div><div class=\"line\">Connect to server <span class=\"number\">172.16</span><span class=\"number\">.120</span><span class=\"number\">.70</span>...</div><div class=\"line\">run task <span class=\"number\">2510</span>*<span class=\"number\">2510.</span>..</div><div class=\"line\">run task <span class=\"number\">4137</span>*<span class=\"number\">4137.</span>..</div><div class=\"line\">run task <span class=\"number\">4813</span>*<span class=\"number\">4813.</span>..</div><div class=\"line\">run task <span class=\"number\">8463</span>*<span class=\"number\">8463.</span>..</div><div class=\"line\">run task <span class=\"number\">8600</span>*<span class=\"number\">8600.</span>..</div><div class=\"line\">run task <span class=\"number\">2369</span>*<span class=\"number\">2369.</span>..</div><div class=\"line\">run task <span class=\"number\">3680</span>*<span class=\"number\">3680.</span>..</div><div class=\"line\">run task <span class=\"number\">1531</span>*<span class=\"number\">1531.</span>..</div><div class=\"line\">run task <span class=\"number\">4798</span>*<span class=\"number\">4798.</span>..</div><div class=\"line\">run task <span class=\"number\">1694</span>*<span class=\"number\">1694.</span>..</div><div class=\"line\">worker exit</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319272686365ec7ceaeca33428c914edf8f70cca383000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"进程和线程（Process-and-Thread）\"><a href=\"#进程和线程（Process-and-Thread）\" class=\"headerlink\" title=\"进程和线程（Process and Thread）\"></a>进程和线程（Process and Thread）</h1><p>一个进程可以有多个线程，也可以有单个线程，但一个进程 <strong>至少有一个</strong> 线程，多进程和多线程的程序涉及到同步、数据共享的问题，编写起来要考虑的问题比较多。<br>多任务的实现方式一般有 <strong>3种</strong>：</p>\n<ul>\n<li>多进程模式</li>\n<li>多线程模式</li>\n<li>多进程+多线程模式</li>\n</ul>\n<p><strong>Python既支持多进程，又支持多线程</strong><br>","more":"</p>\n<h2 id=\"多进程（multiprocessing）\"><a href=\"#多进程（multiprocessing）\" class=\"headerlink\" title=\"多进程（multiprocessing）\"></a>多进程（multiprocessing）</h2><p>Python的<code>os</code>模块封装了常见的系统调用，比如<code>fork()</code>系统调用，该系统调用是创建一个与原来进程几乎完全相同的进程，一个进程调用 <code>fork()</code> 函数后，系统先给新的进程分配资源，例如存储数据和代码空间，然后把原来的进程的所有值都复制到新的进程中，只有少数值与原来的进程值不同，相当于克隆了一个自己。子进程永远返回0，而父进程返回子进程的ID，子进程调用<code>getppid()</code>拿到父进程的ID，而<code>getpid()</code>是得到本身的进程ID。 <strong> Windows 没有<code>fork</code>系统调用 。</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\">print(<span class=\"string\">'Process (%s) start...'</span> %os.getpid())</div><div class=\"line\">pid = os.fork() <span class=\"comment\">#如果是子进程，则返回0，父进程是返回子进程的ID</span></div><div class=\"line\"><span class=\"keyword\">if</span> pid ==<span class=\"number\">0</span>:</div><div class=\"line\">    print(<span class=\"string\">'I am child Process (%s) and my parent is %s.'</span> %(os.getpid(),os.getppid()))</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'I (%s) just created a child process (%s).'</span> %(os.getpid(),pid))</div><div class=\"line\"></div><div class=\"line\">结果如下：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python processing.py</span></div><div class=\"line\">Process (<span class=\"number\">4563</span>) start...</div><div class=\"line\">I am child Process (<span class=\"number\">4564</span>) <span class=\"keyword\">and</span> my parent <span class=\"keyword\">is</span> <span class=\"number\">4563.</span></div><div class=\"line\">I (<span class=\"number\">4563</span>) just created a child process (<span class=\"number\">4564</span>).</div></pre></td></tr></table></figure>\n<p><code>multiprocessing</code>模块提供了<code>Process</code>类代表一个进程对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_proc</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Run chilid process %s(%s)'</span> %(name,os.getpid()))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Parent process %s.'</span> %os.getpid()) <span class=\"comment\"># 程序启动时，产生一个进程，拥有进程号</span></div><div class=\"line\">    p=Process(target=run_proc,args=(<span class=\"string\">'test'</span>,)) <span class=\"comment\"># p是子进程实例对象，由当前进程产生的进程。</span></div><div class=\"line\">    print(<span class=\"string\">'Child process will start...'</span>)</div><div class=\"line\">    p.start()</div><div class=\"line\">    p.join()</div><div class=\"line\">    print(<span class=\"string\">'Child process end...'</span>)</div><div class=\"line\"></div><div class=\"line\">结果如下：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python processing.py</span></div><div class=\"line\">Parent process <span class=\"number\">4608.</span></div><div class=\"line\">Child process will start...</div><div class=\"line\">Run chilid process test(<span class=\"number\">4609</span>)</div><div class=\"line\">Child process end...</div></pre></td></tr></table></figure>\n<h2 id=\"进程池（Pool）\"><a href=\"#进程池（Pool）\" class=\"headerlink\" title=\"进程池（Pool）\"></a>进程池（Pool）</h2><p>如果需要启动大量的子进程，可以用进程池（Pool）的方式批量创建子进程。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Pool <span class=\"comment\">#提供跨平台的多进程支持</span></div><div class=\"line\"><span class=\"keyword\">import</span> os, time, random</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_time_task</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Run task %s (%s)...'</span> %(name,os.getpid()))</div><div class=\"line\">    start=time.time()</div><div class=\"line\">    time.sleep(random.random()*<span class=\"number\">3</span>)</div><div class=\"line\">    end=time.time()</div><div class=\"line\">    print(<span class=\"string\">'Task %s runs %0.2f seconds.'</span>%(name,(end-start)))</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    print(<span class=\"string\">'Parent process %s.'</span> %os.getpid())</div><div class=\"line\">    p=Pool(<span class=\"number\">4</span>) <span class=\"comment\">#创建进程池，共有四个进程，默认的大小是CPU的核数，最多同时创建4个进程</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</div><div class=\"line\">        p.apply_async(long_time_task,args=(i,)) <span class=\"comment\"># apply the async to invoke process， 使用异步的方式调用进程</span></div><div class=\"line\">    print(<span class=\"string\">'waiting for all subprocesses done...'</span>)</div><div class=\"line\">    p.close()</div><div class=\"line\">    p.join() <span class=\"comment\">#调用join方法会等待所有子进程执行完毕，之前必须调用close（）</span></div><div class=\"line\">    print(<span class=\"string\">'All subprocesses done...'</span>)</div><div class=\"line\"></div><div class=\"line\">结果如下：</div><div class=\"line\">Parent process <span class=\"number\">4752.</span></div><div class=\"line\">waiting <span class=\"keyword\">for</span> all subprocesses done...</div><div class=\"line\">Run task <span class=\"number\">0</span> (<span class=\"number\">4753</span>)...</div><div class=\"line\">Run task <span class=\"number\">1</span> (<span class=\"number\">4755</span>)...</div><div class=\"line\">Run task <span class=\"number\">2</span> (<span class=\"number\">4754</span>)...</div><div class=\"line\">Run task <span class=\"number\">3</span> (<span class=\"number\">4756</span>)...</div><div class=\"line\">Task <span class=\"number\">3</span> runs <span class=\"number\">0.24</span> seconds.  <span class=\"comment\">#最多同时执行4个进程，只有结束了一个进程后，下个进程才能执行</span></div><div class=\"line\">Run task <span class=\"number\">4</span> (<span class=\"number\">4756</span>)...</div><div class=\"line\">Task <span class=\"number\">0</span> runs <span class=\"number\">0.47</span> seconds.</div><div class=\"line\">Task <span class=\"number\">4</span> runs <span class=\"number\">0.75</span> seconds.</div><div class=\"line\">Task <span class=\"number\">1</span> runs <span class=\"number\">1.18</span> seconds.</div><div class=\"line\">Task <span class=\"number\">2</span> runs <span class=\"number\">2.47</span> seconds.</div><div class=\"line\">All subprocesses done...</div></pre></td></tr></table></figure>\n<h3 id=\"子进程及进程间的通讯\"><a href=\"#子进程及进程间的通讯\" class=\"headerlink\" title=\"子进程及进程间的通讯\"></a>子进程及进程间的通讯</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> subprocess <span class=\"comment\">#该模块可以比较方便启动一个子进程，然后控制输入输出</span></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'$ nslookup www.python.org'</span>)</div><div class=\"line\">r= subprocess.call([<span class=\"string\">'nslookup'</span>,<span class=\"string\">'www.python.org'</span>])</div><div class=\"line\">print(<span class=\"string\">'Exit code:'</span>,r)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'$ nslookup'</span>)</div><div class=\"line\">p=subprocess.Popen([<span class=\"string\">'nslookup'</span>],stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr=subprocess.PIPE)</div><div class=\"line\">output, err=p.communicate(<span class=\"string\">b'set q=mx\\npython.org\\nexit\\n'</span>) <span class=\"comment\">#子进程需要输入参数的话，使用communicate。</span></div><div class=\"line\">print(output.decode(<span class=\"string\">'utf-8'</span>))</div><div class=\"line\">print(<span class=\"string\">'Exit code:'</span>,p.returncode)</div><div class=\"line\"></div><div class=\"line\">运行结果如下：</div><div class=\"line\"></div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python processing.py</span></div><div class=\"line\">$ nslookup www.python.org</div><div class=\"line\">Server:\t\t<span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span></div><div class=\"line\">Address:\t<span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span><span class=\"comment\">#53</span></div><div class=\"line\"></div><div class=\"line\">Non-authoritative answer:</div><div class=\"line\">www.python.org\tcanonical name = python.map.fastly.net.</div><div class=\"line\">Name:\tpython.map.fastly.net</div><div class=\"line\">Address: <span class=\"number\">151.101</span><span class=\"number\">.72</span><span class=\"number\">.223</span></div><div class=\"line\"></div><div class=\"line\">Exit code: <span class=\"number\">0</span></div><div class=\"line\">$ nslookup</div><div class=\"line\">Server:\t\t<span class=\"number\">61.177</span><span class=\"number\">.7</span><span class=\"number\">.1</span></div><div class=\"line\">Address:\t<span class=\"number\">61.177</span><span class=\"number\">.7</span><span class=\"number\">.1</span><span class=\"comment\">#53</span></div><div class=\"line\"></div><div class=\"line\">Non-authoritative answer:</div><div class=\"line\">python.org\tmail exchanger = <span class=\"number\">50</span> mail.python.org.</div><div class=\"line\"></div><div class=\"line\">Authoritative answers can be found <span class=\"keyword\">from</span>:</div><div class=\"line\">python.org\tnameserver = ns3.p11.dynect.net.</div><div class=\"line\">python.org\tnameserver = ns2.p11.dynect.net.</div><div class=\"line\">python.org\tnameserver = ns1.p11.dynect.net.</div><div class=\"line\">python.org\tnameserver = ns4.p11.dynect.net.</div><div class=\"line\">mail.python.org\tinternet address = <span class=\"number\">188.166</span><span class=\"number\">.95</span><span class=\"number\">.178</span></div><div class=\"line\">mail.python.org\thas AAAA address <span class=\"number\">2</span>a03:b0c0:<span class=\"number\">2</span>:d0::<span class=\"number\">71</span>:<span class=\"number\">1</span></div><div class=\"line\">ns1.p11.dynect.net\tinternet address = <span class=\"number\">208.78</span><span class=\"number\">.70</span><span class=\"number\">.11</span></div><div class=\"line\">ns2.p11.dynect.net\tinternet address = <span class=\"number\">204.13</span><span class=\"number\">.250</span><span class=\"number\">.11</span></div><div class=\"line\">ns3.p11.dynect.net\tinternet address = <span class=\"number\">208.78</span><span class=\"number\">.71</span><span class=\"number\">.11</span></div><div class=\"line\">ns4.p11.dynect.net\tinternet address = <span class=\"number\">204.13</span><span class=\"number\">.251</span><span class=\"number\">.11</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Exit code: <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>进程间的通讯，在模块<code>multiprocessing</code>模块提供了<code>Queue</code>,<code>Pipes</code>等方式交换数据。这个交换可以是读，也可以是写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process,Queue</div><div class=\"line\"><span class=\"keyword\">import</span> os,time,random</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># process that write data</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write</span><span class=\"params\">(q)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Process to write: %s'</span> %os.getpid())</div><div class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>]:</div><div class=\"line\">        print(<span class=\"string\">'Put %s to queue...'</span> %value)</div><div class=\"line\">        q.put(value)</div><div class=\"line\">        time.sleep(random.random()) <span class=\"comment\">#写进程稍微沉睡几秒</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># process that read data</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read</span><span class=\"params\">(q)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Process to read: %s'</span> %os.getpid())</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        value =q.get(<span class=\"keyword\">True</span>)</div><div class=\"line\">        print(<span class=\"string\">'Get %s from queue.'</span> %value)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#father process create Queue, and pass it to subprocess:</span></div><div class=\"line\">    q=Queue()</div><div class=\"line\"></div><div class=\"line\">    pw=Process(target=write,args=(q,))</div><div class=\"line\">    pr=Process(target=read,args=(q,))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># start subprocess pw, write data:</span></div><div class=\"line\">    pw.start()</div><div class=\"line\">    <span class=\"comment\"># start subprocess pr, read data:</span></div><div class=\"line\">    pr.start()</div><div class=\"line\">    <span class=\"comment\"># waite subprocess pw finish</span></div><div class=\"line\">    pw.join()</div><div class=\"line\">    <span class=\"comment\"># pr进程是死循环，见while true。</span></div><div class=\"line\">    pr.terminate()</div><div class=\"line\"></div><div class=\"line\">结果是：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python processing.py</span></div><div class=\"line\">Process to write: <span class=\"number\">5229</span></div><div class=\"line\">Put A to queue...</div><div class=\"line\">Process to read: <span class=\"number\">5230</span></div><div class=\"line\">Get A <span class=\"keyword\">from</span> queue.</div><div class=\"line\">Put B to queue...</div><div class=\"line\">Get B <span class=\"keyword\">from</span> queue.</div><div class=\"line\">Put C to queue...</div><div class=\"line\">Get C <span class=\"keyword\">from</span> queue.</div></pre></td></tr></table></figure>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>线程是操作系统直接支持的执行单元，Python的标准库提供两个模块：<code>_thread</code>和 <code>threading</code>,前者是低级模块，后者是高级模块，是对前者的封装。<br>启动一个线程就是把一个函数传入并创建<code>Thread</code>实例（一个方法，创建出来），然后调用<code>start()</code>开始执行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time, threading</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loop</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\">#函数current_thread()永远返回当前线程的实例</span></div><div class=\"line\">    print(<span class=\"string\">'thread %s is running...'</span> %threading.current_thread().name)</div><div class=\"line\">    n=<span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n&lt;<span class=\"number\">5</span>:</div><div class=\"line\">        n=n+<span class=\"number\">1</span></div><div class=\"line\">        print(<span class=\"string\">'thread %s ---&gt; %s'</span> %(threading.current_thread().name,n))</div><div class=\"line\">        time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\">    print(<span class=\"string\">'thread %s ended.'</span>%threading.current_thread().name)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'thread %s is running...'</span> %threading.current_thread().name)</div><div class=\"line\">t=threading.Thread(target=loop,name=<span class=\"string\">'Loopthread'</span>)</div><div class=\"line\"><span class=\"comment\"># 把一个函数传入，并创建线程实例，然后调用start开始执行</span></div><div class=\"line\">t.start()</div><div class=\"line\">t.join()</div><div class=\"line\">print(<span class=\"string\">'thread %s ended.'</span>%threading.current_thread().name)</div></pre></td></tr></table></figure>\n<h2 id=\"加锁（Lock）\"><a href=\"#加锁（Lock）\" class=\"headerlink\" title=\"加锁（Lock）\"></a>加锁（Lock）</h2><p>可能存在读脏数据的问题，两个线程同时更新一个变量，导致出现意想不到的结果，所以多线程的时候，必须加锁（写的时候）。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> time, threading</div><div class=\"line\"></div><div class=\"line\">balance =<span class=\"number\">0</span></div><div class=\"line\">lock=threading.Lock() <span class=\"comment\">#申请一把锁</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">change</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">global</span> balance</div><div class=\"line\">    balance =balance+n</div><div class=\"line\">    balance =balance-n</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_thread</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">100000</span>):</div><div class=\"line\"></div><div class=\"line\">        lock.acquire() <span class=\"comment\">#加锁，进行互斥访问</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            change(n)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            lock.release() <span class=\"comment\">#用完必须释放锁</span></div><div class=\"line\"></div><div class=\"line\">t1=threading.Thread(target=run_thread,args=(<span class=\"number\">5</span>,))</div><div class=\"line\">t2=threading.Thread(target=run_thread,args=(<span class=\"number\">8</span>,))</div><div class=\"line\"></div><div class=\"line\">t1.start()</div><div class=\"line\">t2.start()</div><div class=\"line\"></div><div class=\"line\">t1.join()</div><div class=\"line\">t2.join()</div><div class=\"line\">print(balance)</div></pre></td></tr></table></figure>\n<p>Python解释器设计时带有 <strong>GIL（Global Interpreter Lock）</strong>，任何线程执行前，必须获得该锁，每100条字节码后，自动释放该锁，因而多线程无法利用多核。</p>\n<h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><p>解决多线程局部变量传递，调用的问题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 方式一，使用dic，避免参数的每层传递</span></div><div class=\"line\">global_dict=&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">std_thread</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    global_dict[threading.current_thread()] =std</div><div class=\"line\">    do_task_1()</div><div class=\"line\">    do_task_2()</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_task_1</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    std = global_dict[threading.current_thread()]</div><div class=\"line\">    do something here</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_task_2</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    std = global_dict[threading.current_thread()]</div><div class=\"line\">    do something here</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 方式二，使用ThreadLocal</span></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\">local_school =threading.local() <span class=\"comment\">#创建全局变量ThreadLocal</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_student</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\">#获取当前线程关联的student</span></div><div class=\"line\">    std =local_school.student</div><div class=\"line\">    print(<span class=\"string\">'Hello,%s (in %s)'</span> %(std,threading.current_thread().name))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_thread</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    <span class=\"comment\">#绑定ThreLocal的student变量</span></div><div class=\"line\">    local_school.student=name</div><div class=\"line\">    process_student()</div><div class=\"line\"></div><div class=\"line\">t1= threading.Thread(target=process_thread,args=(<span class=\"string\">'li'</span>,),name=<span class=\"string\">'Thread-1'</span>)</div><div class=\"line\">t2=threading.Thread(target=process_thread,args=(<span class=\"string\">'cheng'</span>,),name=<span class=\"string\">'Thread-2'</span>)</div><div class=\"line\">t1.start()</div><div class=\"line\">t2.start()</div><div class=\"line\">t1.join()</div><div class=\"line\">t2.join()</div><div class=\"line\"></div><div class=\"line\">可以这样理解，local_school是一个ThreaLocal对象（类似于一个dict），是一个全局变量，但local_school的每个属性local_school.student都是线程的局部变量，可以任意读写，线程之间互不干扰，不用管理锁的问题。</div></pre></td></tr></table></figure>\n<h2 id=\"进程-vs-线程\"><a href=\"#进程-vs-线程\" class=\"headerlink\" title=\"进程 vs. 线程\"></a>进程 vs. 线程</h2><p>多任务情况下，通常是 <strong>Master-Worker</strong> 模式， Master负责分配任务，Worker负责执行任务，通常只有一个Master，多个Worker。</p>\n<ul>\n<li>主进程是Master，其他进程是Worker（<strong>多进程</strong> 实现该模式），稳定性高，代价大</li>\n<li>主线程是Master，其他线程是Worker（<strong>多线程</strong> 实现该模式），效率高，不稳定</li>\n</ul>\n<h3 id=\"计算密集型-vs-IO密集型\"><a href=\"#计算密集型-vs-IO密集型\" class=\"headerlink\" title=\"计算密集型 vs. IO密集型\"></a>计算密集型 vs. IO密集型</h3><p>任务的类型分为这两类：</p>\n<ul>\n<li>计算密集型：需要进行大量的计算，任务同时进行的数量应当等于CPU的核心数，需要高效率的代码，一般使用C</li>\n<li>IO密集型：CPU消耗少，涉及网络、磁盘IO的任务，最合适的语言是脚本语言，如Python</li>\n</ul>\n<h3 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h3><p>充分利用OS的异步IO支持，可以实现单进程单线程模型执行多任务，被称为事件驱动模型，Python中，单线程的异步编程模型称为 <strong>协程</strong>。</p>\n<h2 id=\"分布式进程（Distributed-Process）\"><a href=\"#分布式进程（Distributed-Process）\" class=\"headerlink\" title=\"分布式进程（Distributed Process）\"></a>分布式进程（Distributed Process）</h2><p>Process可以分布到多台机器中，而Thread只能分布在同一台机器的多个CPU中<br>在Python中的<code>multiprocessing</code>模块的子模块<code>managers</code>支持把多进程分布到多台机器上。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># task_master.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> random, time, queue</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.managers <span class=\"keyword\">import</span> BaseManager</div><div class=\"line\"></div><div class=\"line\">task_queue=queue.Queue() <span class=\"comment\">#发送任务的队列</span></div><div class=\"line\">result_queue=queue.Queue() <span class=\"comment\">#接收结果的队列</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueManager</span><span class=\"params\">(BaseManager)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#将两个队列注册到网络上，callable关联Queue的对象</span></div><div class=\"line\">QueueManager.register(<span class=\"string\">'get_task_queue'</span>,callable=<span class=\"keyword\">lambda</span>:task_queue)</div><div class=\"line\">QueueManager.register(<span class=\"string\">'get_result_queue'</span>,callable=<span class=\"keyword\">lambda</span>:result_queue)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#绑定端口5000，设置验证码‘key’</span></div><div class=\"line\">manager=QueueManager(address=(<span class=\"string\">''</span>,<span class=\"number\">5000</span>),authkey=<span class=\"string\">b'key'</span>)</div><div class=\"line\"><span class=\"comment\">#启动Queue</span></div><div class=\"line\">manager.start()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#通过网络访问Queue对象，获得两个对象，这两个Queue对象是在网络中共享的</span></div><div class=\"line\">task=manager.get_task_queue()</div><div class=\"line\">result=manager.get_result_queue()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 分配任务到task</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">\tn=random.randint(<span class=\"number\">0</span>,<span class=\"number\">10000</span>)</div><div class=\"line\">\tprint(<span class=\"string\">'Put task %d...'</span> %n)</div><div class=\"line\">\ttask.put(n) <span class=\"comment\">#将任务写入task的Queue</span></div><div class=\"line\">print(<span class=\"string\">'Try get result...'</span>)</div><div class=\"line\"><span class=\"comment\"># 从result队列中获取结果</span></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">\tr = result.get(timeout=<span class=\"number\">100</span>) <span class=\"comment\">#从result中获取到相应结果</span></div><div class=\"line\">\tprint(<span class=\"string\">'Result: %s'</span> %r)</div><div class=\"line\"><span class=\"comment\"># 关闭任务</span></div><div class=\"line\">manager.shutdown()</div><div class=\"line\">print(<span class=\"string\">'master exit.'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#task_worker.py</span></div><div class=\"line\"><span class=\"keyword\">import</span> time, sys, queue</div><div class=\"line\"><span class=\"keyword\">from</span> multiprocessing.managers <span class=\"keyword\">import</span> BaseManager</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueManager</span><span class=\"params\">(BaseManager)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># QueueManager从网络上获取Queue，也就是master在网络上注册的队列</span></div><div class=\"line\">QueueManager.register(<span class=\"string\">'get_task_queue'</span>)</div><div class=\"line\">QueueManager.register(<span class=\"string\">'get_result_queue'</span>)</div><div class=\"line\"><span class=\"comment\">#连接服务器，是运行Master机器的IP地址</span></div><div class=\"line\">server_adr = <span class=\"string\">'172.16.120.70'</span></div><div class=\"line\">print(<span class=\"string\">'Connect to server %s...'</span> %server_adr)</div><div class=\"line\"><span class=\"comment\">#端口和验证码和master一致</span></div><div class=\"line\">m=QueueManager(address=(server_adr,<span class=\"number\">5000</span>),authkey=<span class=\"string\">b'key'</span>)</div><div class=\"line\">m.connect() <span class=\"comment\">#连接该Queue</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#获取到网络中共享的Queue对象</span></div><div class=\"line\">task =m.get_task_queue()</div><div class=\"line\">result=m.get_result_queue()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</div><div class=\"line\">\t<span class=\"keyword\">try</span>:</div><div class=\"line\">\t\tn=task.get(timeout=<span class=\"number\">100</span>) <span class=\"comment\">#从Queue中获取数据，也就是获取任务</span></div><div class=\"line\">\t\tprint(<span class=\"string\">'run task %d*%d...'</span>%(n,n))</div><div class=\"line\">\t\tr=<span class=\"string\">'%d*%d=%d'</span> %(n,n,n*n) <span class=\"comment\">#进行处理</span></div><div class=\"line\">\t\tresult.put(r) <span class=\"comment\">#将结果写入result的Queue</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">except</span> Queue.Empty:</div><div class=\"line\">\t\tprint(<span class=\"string\">'task queue is empty.'</span>)</div><div class=\"line\"></div><div class=\"line\">print(<span class=\"string\">'worker exit'</span>)</div><div class=\"line\"></div><div class=\"line\">结果如下（依次运行master和worker）：</div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python task_master.py</span></div><div class=\"line\">Put task <span class=\"number\">2510.</span>..</div><div class=\"line\">Put task <span class=\"number\">4137.</span>..</div><div class=\"line\">Put task <span class=\"number\">4813.</span>..</div><div class=\"line\">Put task <span class=\"number\">8463.</span>..</div><div class=\"line\">Put task <span class=\"number\">8600.</span>..</div><div class=\"line\">Put task <span class=\"number\">2369.</span>..</div><div class=\"line\">Put task <span class=\"number\">3680.</span>..</div><div class=\"line\">Put task <span class=\"number\">1531.</span>..</div><div class=\"line\">Put task <span class=\"number\">4798.</span>..</div><div class=\"line\">Put task <span class=\"number\">1694.</span>..</div><div class=\"line\">Try get result...</div><div class=\"line\">Result: <span class=\"number\">2510</span>*<span class=\"number\">2510</span>=<span class=\"number\">6300100</span></div><div class=\"line\">Result: <span class=\"number\">4137</span>*<span class=\"number\">4137</span>=<span class=\"number\">17114769</span></div><div class=\"line\">Result: <span class=\"number\">4813</span>*<span class=\"number\">4813</span>=<span class=\"number\">23164969</span></div><div class=\"line\">Result: <span class=\"number\">8463</span>*<span class=\"number\">8463</span>=<span class=\"number\">71622369</span></div><div class=\"line\">Result: <span class=\"number\">8600</span>*<span class=\"number\">8600</span>=<span class=\"number\">73960000</span></div><div class=\"line\">Result: <span class=\"number\">2369</span>*<span class=\"number\">2369</span>=<span class=\"number\">5612161</span></div><div class=\"line\">Result: <span class=\"number\">3680</span>*<span class=\"number\">3680</span>=<span class=\"number\">13542400</span></div><div class=\"line\">Result: <span class=\"number\">1531</span>*<span class=\"number\">1531</span>=<span class=\"number\">2343961</span></div><div class=\"line\">Result: <span class=\"number\">4798</span>*<span class=\"number\">4798</span>=<span class=\"number\">23020804</span></div><div class=\"line\">Result: <span class=\"number\">1694</span>*<span class=\"number\">1694</span>=<span class=\"number\">2869636</span></div><div class=\"line\">master exit.</div><div class=\"line\"></div><div class=\"line\">[root@localhost Python]<span class=\"comment\"># python task_worker.py</span></div><div class=\"line\">Connect to server <span class=\"number\">172.16</span><span class=\"number\">.120</span><span class=\"number\">.70</span>...</div><div class=\"line\">run task <span class=\"number\">2510</span>*<span class=\"number\">2510.</span>..</div><div class=\"line\">run task <span class=\"number\">4137</span>*<span class=\"number\">4137.</span>..</div><div class=\"line\">run task <span class=\"number\">4813</span>*<span class=\"number\">4813.</span>..</div><div class=\"line\">run task <span class=\"number\">8463</span>*<span class=\"number\">8463.</span>..</div><div class=\"line\">run task <span class=\"number\">8600</span>*<span class=\"number\">8600.</span>..</div><div class=\"line\">run task <span class=\"number\">2369</span>*<span class=\"number\">2369.</span>..</div><div class=\"line\">run task <span class=\"number\">3680</span>*<span class=\"number\">3680.</span>..</div><div class=\"line\">run task <span class=\"number\">1531</span>*<span class=\"number\">1531.</span>..</div><div class=\"line\">run task <span class=\"number\">4798</span>*<span class=\"number\">4798.</span>..</div><div class=\"line\">run task <span class=\"number\">1694</span>*<span class=\"number\">1694.</span>..</div><div class=\"line\">worker exit</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319272686365ec7ceaeca33428c914edf8f70cca383000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>"},{"title":"Python基础学习之[错误、调试和测试]","copyright":true,"date":"2017-07-11T13:51:21.000Z","_content":"\n# 错误、调试和测试\n学会Python的错误处理及程序的调试方式\n<!--more-->\n\n## 错误处理\nPython内置了一套`try...except...finally`的错误处理机制：\n```python\ntry:\n    print('try...')\n    r=100/int('a')\n    print('could be divide,result:',r)\nexcept ValueError as e:\n    print('ValueError:'e)\nexcept ZeroDivisionError as e:\n    print('ZeroDivisionError:',e)\nelse:\n    print('no errors!')\nfinally:\n    print('finally...')\nprint('END')\n```\n和java中一样，try后面的是我们认为可能会出错的代码块，如果代码块某一行执行出错，则从该行代码后的都不会继续执行，直接跳到错误处理的代码块，即except语句块（可以有多个），执行完此语句块后，如果有finally语句块，则执行finally语句块。也就是finally语句块一定会执行。\n\nPython的错误是class，具有继承关系，except不但捕获该类型的错误，也将其 **子类的错误** 也一网打尽。\n\n如果程序没有被捕获，它就会一直往上抛（调用堆栈），最后被Python解释器捕获，打印错误信息（在错误堆栈中），然后 **程序退出。**\n\n## 记录错误\n我们可以捕获错误（使用`try...except`），打印出错误信息，同时最重要的是让程序继续执行下去。\nPython使用`logging`模块，记录错误信息.\n```python\nimport logging\n\ndef foo(s):\n    return 10/int(s)\n\ndef bar(s):\n    return foo(s)*2\n\ndef main():\n    try:\n        bar('0')\n    except Exception as e:\n        logging.exception(e)  #将错误记录在日志文件中\nmain()\nprint('END') #这一句可以继续执行\n\n输出：\n\nERROR:root:division by zero\nTraceback (most recent call last):\n  File \"TestPython.py\", line 198, in main\n    bar('0')\n  File \"TestPython.py\", line 194, in bar\n    return foo(s)*2\n  File \"TestPython.py\", line 191, in foo\n    return 10/int(s)\nZeroDivisionError: division by zero\nEND\n```\n\n## 抛出错误\n ** 使用`raise`语句抛出一个错误实例。 **   首先要定义一个错误的class，选择好继承关系，然后使用`raise`语句抛出一个错误的实例：\n```python\n方式一：（知道如何处理错误）\nclass FooError(ValueError): #定义一个错误的class，继承来自ValueError\n    pass\n\ndef foo(s):\n    n=int(s)\n    if n==0:\n        raise FooError('invalid value:%s' %s) #使用raise抛出错误信息，实际上是创建一个该class的实例。\n    return 100/n\n\nfoo('0')\n输出：\n    Traceback (most recent call last):\n      File \"TestPython.py\", line 213, in <module>\n        foo('0')\n      File \"TestPython.py\", line 210, in foo\n        raise FooError('invalid value:%s' %s) #使用raise抛出错误信息，实际上是创建一个该class的实例。\n    __main__.FooError: invalid value:0\n\n方式二：不知道如何处理错误，原样抛出错误。\ndef foo(s):\n    n=int(s)\n    if n==0:\n        raise ValueError('invalid value:%s' %s)\n    return 100/n\n\ndef bar():\n    try: #首先使用try...except捕获错误\n        foo('0')\n    except ValueError as e:\n        print('ValueError!') #打印出错误，无法处理，使用raise原样抛出\n        raise #raise不带参数，就原样抛出\nbar()\n输出：\nValueError!\nTraceback (most recent call last):\n  File \"TestPython.py\", line 228, in <module>\n    bar()\n  File \"TestPython.py\", line 223, in bar\n    foo('0')\n  File \"TestPython.py\", line 218, in foo\n    raise ValueError('invalid value:%s' %s)\nValueError: invalid value:0\n\n```\n\n## 调试程序\n- 第一种方法，使用`print()`将可能出现问题的点或者可能有问题的变量打印出来\n- 第二种方法，使用断言`assert`替代`print()`\n```python\ndef foo(s):\n    n=int(s)\n    assert n!=0, 'n is zero!' #断言表示的意思是，n！=0应该是true，否则后面会执行出错误，如果断言失败，该语句抛出AssertionError错误\n    return 100/n\n```\n- 第三种方法，使用`logging`替换`print()`:\n\n```python\n\nimport logging\nlogging.basicConfig(level=logging.INFO)\n    # 记录的信息具有优先级别，debug，info，warning，error，优先级依次增大\n    # 当指定level为WARNING时，logging.info就不起作用了\n\ns='0'\nn= int(s)\nlogging.info('n=%d' %n)\nprint(100/n)\n\n输出：\nINFO:root:n=0\nTraceback (most recent call last):\n  File \"TestPython.py\", line 236, in <module>\n    print(100/n)\nZeroDivisionError: division by zero\n\n如果将level改为WARNING,则日志不起作用：\nTraceback (most recent call last):\n  File \"TestPython.py\", line 238, in <module>\n    print(100/n)\nZeroDivisionError: division by zero #这个是解释器捕获的异常，直接退出了程序\n```\n\n- 使用Python的调试器pdb，程序以单步方式运行。\n使用命令`python -m pdb TestPython.py`启动，输入字母 **l** 查看代码，字母 **n** 单步执行，输入`p 变量名`来查看变量的值，命令 **q** 退出pdb调试。\n可以使用`pdb.set_trace()`设置断点。\n\n```python\n\nimport pdb\ns='0'\nn= int(s)\npdb.set_trace() #程序运行到这，自动暂停，进入pdb调试环境\nprint(100/n)\n\n```\n\n- **使用IDE**，如 **pycharm**,比较方便设置断点、单步执行，比较方便进行调试。\n\n\n## 单元测试\n单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作，类似于“测试驱动开发”（TDD：Test-Driven Development）的方法。\n以测试为驱动的开发模式，最大的好处是确保一个程序模块的行为符合我们设计的测试用例，将来修改的时候，可以极大程度的保证该模块的行为仍然是正确的。\n例如我们新建一个MyDict类，这个类的行为和dic一致：\n\n```python\nclass MyDict(dict):\n    def __init__(self, **kw):\n        super().__init__(**kw)\n\n    def __getattr__(self,key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Dict' object has no attribute '%s'\" %key)\n\n    def __setattr__(self,key,value):\n            self[key] = value    \n\n```\n\n编写单元测试，引入unittest模块，编写测试脚本（可以一次批量允许多个单元测试）：\n\n```python\nimport unittest\nfrom TestPython import MyDict\nclass TestDict(unittest.TestCase):\n\n    def setUp(self): #setUp和tearDown函数会在每调用一个测试方法的前后分别被执行\n        print('setUp...')\n\n    def tearDown(self): #基于这样的特性，比如可以在setUp中连接数据库，tearDown中关闭数据库\n        print('tearDown...')\n\n\n    def test_init(self):\n        d=MyDict(a=1,b='test')\n        self.assertEqual(d.a,1)\n        self.assertEqual(d.b,'test')\n        self.assertTrue(isinstance(d,dict))\n\n    def test_key(self):\n        d=MyDict()\n        d['key']='value'\n        self.assertEqual(d.key,'value')\n\n    def test_attr(self):\n        d=MyDict()\n        d.key='value'\n        self.assertTrue('key' in d)\n        self.assertEqual(d['key'],'value') # 通过断言函数得到的两者应该相等\n\n    def test_keyerror(self):\n        d=MyDict()\n        with self.assertRaises(KeyError): #通过断言抛出指定错误\n            value=d['empty']\n\n    def test_attrerror(self):\n        d=MyDict()\n        with self.assertRaises(AttributeError):\n            value=d.empty\n\nif __name__ == '__main__':\n    unittest.main()\n测试结果：\nD:\\coder\\Python\\6.27>python test.py\nsetUp...\ntearDown...\n.setUp...\ntearDown...\n.setUp...\ntearDown...\n.setUp...\ntearDown...\n.setUp...\ntearDown...\n.\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nOK\n\n\n```\n\n\n# 文档测试（doctest）\n\nPython内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。\n\n```python\nclass MyDict(dict):\n    '''\n    doctest(文档测试)\n    simple dict but also support access as x.y style.\n\n    >>> d1=MyDict()\n    >>> d1['x']=100\n    >>> d1.x\n    100\n    >>> d2=MyDict(a=1,b=2,c='3')\n    >>> d2.c\n    '3'\n    >>> d2['empty']\n    Traceback (most recent call last):\n        ...\n    KeyError: 'empty'\n    >>> d2.empty\n    Traceback (most recent call last):\n        ...\n    AttributeError: 'MyDict' object has no attribute 'empty'\n    '''\n    def __init__(self, **kw):\n        super().__init__(**kw)\n\n    def __getattr__(self,key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Dict' object has no attribute '%s'\" %key)\n\n    def __setattr__(self,key,value):\n            self[key] = value    \n\nif __name__ == '__main__': #必须加上这个，才能运行脚本\n    import doctest #导入该doctest模块\n    doctest.testmod()\n\n如果将__getattr__函数注释掉，再运行该脚本，则会报错：\n\nD:\\coder\\Python\\6.27>python TestPython.py\n**********************************************************************\nFile \"TestPython.py\", line 248, in __main__.MyDict\nFailed example:\n    d1.x\nException raised:\n    Traceback (most recent call last):\n      File \"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\", line 1321, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest __main__.MyDict[2]>\", line 1, in <module>\n        d1.x\n    AttributeError: 'MyDict' object has no attribute 'x'\n**********************************************************************\nFile \"TestPython.py\", line 251, in __main__.MyDict\nFailed example:\n    d2.c\nException raised:\n    Traceback (most recent call last):\n      File \"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\", line 1321, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest __main__.MyDict[4]>\", line 1, in <module>\n        d2.c\n    AttributeError: 'MyDict' object has no attribute 'c'\n**********************************************************************\nFile \"TestPython.py\", line 257, in __main__.MyDict\nFailed example:\n    d2.empty\nExpected:\n    Traceback (most recent call last):\n        ...\n    AttributeError: 'Dict' object has no attribute 'empty'\nGot:\n    Traceback (most recent call last):\n      File \"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\", line 1321, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest __main__.MyDict[6]>\", line 1, in <module>\n        d2.empty\n    AttributeError: 'MyDict' object has no attribute 'empty'\n**********************************************************************\n1 items had failures:\n   3 of   7 in __main__.MyDict\n***Test Failed*** 3 failures.\n```\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431913726557e5e43e1ee8d54ee486bddc3f607afb75000)\n","source":"_posts/Python基础学习之-错误、调试和测试.md","raw":"---\ntitle: 'Python基础学习之[错误、调试和测试]'\ncopyright: true\ndate: 2017-07-11 21:51:21\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n\n# 错误、调试和测试\n学会Python的错误处理及程序的调试方式\n<!--more-->\n\n## 错误处理\nPython内置了一套`try...except...finally`的错误处理机制：\n```python\ntry:\n    print('try...')\n    r=100/int('a')\n    print('could be divide,result:',r)\nexcept ValueError as e:\n    print('ValueError:'e)\nexcept ZeroDivisionError as e:\n    print('ZeroDivisionError:',e)\nelse:\n    print('no errors!')\nfinally:\n    print('finally...')\nprint('END')\n```\n和java中一样，try后面的是我们认为可能会出错的代码块，如果代码块某一行执行出错，则从该行代码后的都不会继续执行，直接跳到错误处理的代码块，即except语句块（可以有多个），执行完此语句块后，如果有finally语句块，则执行finally语句块。也就是finally语句块一定会执行。\n\nPython的错误是class，具有继承关系，except不但捕获该类型的错误，也将其 **子类的错误** 也一网打尽。\n\n如果程序没有被捕获，它就会一直往上抛（调用堆栈），最后被Python解释器捕获，打印错误信息（在错误堆栈中），然后 **程序退出。**\n\n## 记录错误\n我们可以捕获错误（使用`try...except`），打印出错误信息，同时最重要的是让程序继续执行下去。\nPython使用`logging`模块，记录错误信息.\n```python\nimport logging\n\ndef foo(s):\n    return 10/int(s)\n\ndef bar(s):\n    return foo(s)*2\n\ndef main():\n    try:\n        bar('0')\n    except Exception as e:\n        logging.exception(e)  #将错误记录在日志文件中\nmain()\nprint('END') #这一句可以继续执行\n\n输出：\n\nERROR:root:division by zero\nTraceback (most recent call last):\n  File \"TestPython.py\", line 198, in main\n    bar('0')\n  File \"TestPython.py\", line 194, in bar\n    return foo(s)*2\n  File \"TestPython.py\", line 191, in foo\n    return 10/int(s)\nZeroDivisionError: division by zero\nEND\n```\n\n## 抛出错误\n ** 使用`raise`语句抛出一个错误实例。 **   首先要定义一个错误的class，选择好继承关系，然后使用`raise`语句抛出一个错误的实例：\n```python\n方式一：（知道如何处理错误）\nclass FooError(ValueError): #定义一个错误的class，继承来自ValueError\n    pass\n\ndef foo(s):\n    n=int(s)\n    if n==0:\n        raise FooError('invalid value:%s' %s) #使用raise抛出错误信息，实际上是创建一个该class的实例。\n    return 100/n\n\nfoo('0')\n输出：\n    Traceback (most recent call last):\n      File \"TestPython.py\", line 213, in <module>\n        foo('0')\n      File \"TestPython.py\", line 210, in foo\n        raise FooError('invalid value:%s' %s) #使用raise抛出错误信息，实际上是创建一个该class的实例。\n    __main__.FooError: invalid value:0\n\n方式二：不知道如何处理错误，原样抛出错误。\ndef foo(s):\n    n=int(s)\n    if n==0:\n        raise ValueError('invalid value:%s' %s)\n    return 100/n\n\ndef bar():\n    try: #首先使用try...except捕获错误\n        foo('0')\n    except ValueError as e:\n        print('ValueError!') #打印出错误，无法处理，使用raise原样抛出\n        raise #raise不带参数，就原样抛出\nbar()\n输出：\nValueError!\nTraceback (most recent call last):\n  File \"TestPython.py\", line 228, in <module>\n    bar()\n  File \"TestPython.py\", line 223, in bar\n    foo('0')\n  File \"TestPython.py\", line 218, in foo\n    raise ValueError('invalid value:%s' %s)\nValueError: invalid value:0\n\n```\n\n## 调试程序\n- 第一种方法，使用`print()`将可能出现问题的点或者可能有问题的变量打印出来\n- 第二种方法，使用断言`assert`替代`print()`\n```python\ndef foo(s):\n    n=int(s)\n    assert n!=0, 'n is zero!' #断言表示的意思是，n！=0应该是true，否则后面会执行出错误，如果断言失败，该语句抛出AssertionError错误\n    return 100/n\n```\n- 第三种方法，使用`logging`替换`print()`:\n\n```python\n\nimport logging\nlogging.basicConfig(level=logging.INFO)\n    # 记录的信息具有优先级别，debug，info，warning，error，优先级依次增大\n    # 当指定level为WARNING时，logging.info就不起作用了\n\ns='0'\nn= int(s)\nlogging.info('n=%d' %n)\nprint(100/n)\n\n输出：\nINFO:root:n=0\nTraceback (most recent call last):\n  File \"TestPython.py\", line 236, in <module>\n    print(100/n)\nZeroDivisionError: division by zero\n\n如果将level改为WARNING,则日志不起作用：\nTraceback (most recent call last):\n  File \"TestPython.py\", line 238, in <module>\n    print(100/n)\nZeroDivisionError: division by zero #这个是解释器捕获的异常，直接退出了程序\n```\n\n- 使用Python的调试器pdb，程序以单步方式运行。\n使用命令`python -m pdb TestPython.py`启动，输入字母 **l** 查看代码，字母 **n** 单步执行，输入`p 变量名`来查看变量的值，命令 **q** 退出pdb调试。\n可以使用`pdb.set_trace()`设置断点。\n\n```python\n\nimport pdb\ns='0'\nn= int(s)\npdb.set_trace() #程序运行到这，自动暂停，进入pdb调试环境\nprint(100/n)\n\n```\n\n- **使用IDE**，如 **pycharm**,比较方便设置断点、单步执行，比较方便进行调试。\n\n\n## 单元测试\n单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作，类似于“测试驱动开发”（TDD：Test-Driven Development）的方法。\n以测试为驱动的开发模式，最大的好处是确保一个程序模块的行为符合我们设计的测试用例，将来修改的时候，可以极大程度的保证该模块的行为仍然是正确的。\n例如我们新建一个MyDict类，这个类的行为和dic一致：\n\n```python\nclass MyDict(dict):\n    def __init__(self, **kw):\n        super().__init__(**kw)\n\n    def __getattr__(self,key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Dict' object has no attribute '%s'\" %key)\n\n    def __setattr__(self,key,value):\n            self[key] = value    \n\n```\n\n编写单元测试，引入unittest模块，编写测试脚本（可以一次批量允许多个单元测试）：\n\n```python\nimport unittest\nfrom TestPython import MyDict\nclass TestDict(unittest.TestCase):\n\n    def setUp(self): #setUp和tearDown函数会在每调用一个测试方法的前后分别被执行\n        print('setUp...')\n\n    def tearDown(self): #基于这样的特性，比如可以在setUp中连接数据库，tearDown中关闭数据库\n        print('tearDown...')\n\n\n    def test_init(self):\n        d=MyDict(a=1,b='test')\n        self.assertEqual(d.a,1)\n        self.assertEqual(d.b,'test')\n        self.assertTrue(isinstance(d,dict))\n\n    def test_key(self):\n        d=MyDict()\n        d['key']='value'\n        self.assertEqual(d.key,'value')\n\n    def test_attr(self):\n        d=MyDict()\n        d.key='value'\n        self.assertTrue('key' in d)\n        self.assertEqual(d['key'],'value') # 通过断言函数得到的两者应该相等\n\n    def test_keyerror(self):\n        d=MyDict()\n        with self.assertRaises(KeyError): #通过断言抛出指定错误\n            value=d['empty']\n\n    def test_attrerror(self):\n        d=MyDict()\n        with self.assertRaises(AttributeError):\n            value=d.empty\n\nif __name__ == '__main__':\n    unittest.main()\n测试结果：\nD:\\coder\\Python\\6.27>python test.py\nsetUp...\ntearDown...\n.setUp...\ntearDown...\n.setUp...\ntearDown...\n.setUp...\ntearDown...\n.setUp...\ntearDown...\n.\n----------------------------------------------------------------------\nRan 5 tests in 0.008s\n\nOK\n\n\n```\n\n\n# 文档测试（doctest）\n\nPython内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。\n\n```python\nclass MyDict(dict):\n    '''\n    doctest(文档测试)\n    simple dict but also support access as x.y style.\n\n    >>> d1=MyDict()\n    >>> d1['x']=100\n    >>> d1.x\n    100\n    >>> d2=MyDict(a=1,b=2,c='3')\n    >>> d2.c\n    '3'\n    >>> d2['empty']\n    Traceback (most recent call last):\n        ...\n    KeyError: 'empty'\n    >>> d2.empty\n    Traceback (most recent call last):\n        ...\n    AttributeError: 'MyDict' object has no attribute 'empty'\n    '''\n    def __init__(self, **kw):\n        super().__init__(**kw)\n\n    def __getattr__(self,key):\n        try:\n            return self[key]\n        except KeyError:\n            raise AttributeError(r\"'Dict' object has no attribute '%s'\" %key)\n\n    def __setattr__(self,key,value):\n            self[key] = value    \n\nif __name__ == '__main__': #必须加上这个，才能运行脚本\n    import doctest #导入该doctest模块\n    doctest.testmod()\n\n如果将__getattr__函数注释掉，再运行该脚本，则会报错：\n\nD:\\coder\\Python\\6.27>python TestPython.py\n**********************************************************************\nFile \"TestPython.py\", line 248, in __main__.MyDict\nFailed example:\n    d1.x\nException raised:\n    Traceback (most recent call last):\n      File \"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\", line 1321, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest __main__.MyDict[2]>\", line 1, in <module>\n        d1.x\n    AttributeError: 'MyDict' object has no attribute 'x'\n**********************************************************************\nFile \"TestPython.py\", line 251, in __main__.MyDict\nFailed example:\n    d2.c\nException raised:\n    Traceback (most recent call last):\n      File \"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\", line 1321, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest __main__.MyDict[4]>\", line 1, in <module>\n        d2.c\n    AttributeError: 'MyDict' object has no attribute 'c'\n**********************************************************************\nFile \"TestPython.py\", line 257, in __main__.MyDict\nFailed example:\n    d2.empty\nExpected:\n    Traceback (most recent call last):\n        ...\n    AttributeError: 'Dict' object has no attribute 'empty'\nGot:\n    Traceback (most recent call last):\n      File \"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\", line 1321, in __run\n        compileflags, 1), test.globs)\n      File \"<doctest __main__.MyDict[6]>\", line 1, in <module>\n        d2.empty\n    AttributeError: 'MyDict' object has no attribute 'empty'\n**********************************************************************\n1 items had failures:\n   3 of   7 in __main__.MyDict\n***Test Failed*** 3 failures.\n```\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431913726557e5e43e1ee8d54ee486bddc3f607afb75000)\n","slug":"Python基础学习之-错误、调试和测试","published":1,"updated":"2017-07-11T14:00:36.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c7900114ov1aj99kkcn","content":"<h1 id=\"错误、调试和测试\"><a href=\"#错误、调试和测试\" class=\"headerlink\" title=\"错误、调试和测试\"></a>错误、调试和测试</h1><p>学会Python的错误处理及程序的调试方式<br><a id=\"more\"></a></p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>Python内置了一套<code>try...except...finally</code>的错误处理机制：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    print(<span class=\"string\">'try...'</span>)</div><div class=\"line\">    r=<span class=\"number\">100</span>/int(<span class=\"string\">'a'</span>)</div><div class=\"line\">    print(<span class=\"string\">'could be divide,result:'</span>,r)</div><div class=\"line\"><span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</div><div class=\"line\">    print(<span class=\"string\">'ValueError:'</span>e)</div><div class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> e:</div><div class=\"line\">    print(<span class=\"string\">'ZeroDivisionError:'</span>,e)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'no errors!'</span>)</div><div class=\"line\"><span class=\"keyword\">finally</span>:</div><div class=\"line\">    print(<span class=\"string\">'finally...'</span>)</div><div class=\"line\">print(<span class=\"string\">'END'</span>)</div></pre></td></tr></table></figure></p>\n<p>和java中一样，try后面的是我们认为可能会出错的代码块，如果代码块某一行执行出错，则从该行代码后的都不会继续执行，直接跳到错误处理的代码块，即except语句块（可以有多个），执行完此语句块后，如果有finally语句块，则执行finally语句块。也就是finally语句块一定会执行。</p>\n<p>Python的错误是class，具有继承关系，except不但捕获该类型的错误，也将其 <strong>子类的错误</strong> 也一网打尽。</p>\n<p>如果程序没有被捕获，它就会一直往上抛（调用堆栈），最后被Python解释器捕获，打印错误信息（在错误堆栈中），然后 <strong>程序退出。</strong></p>\n<h2 id=\"记录错误\"><a href=\"#记录错误\" class=\"headerlink\" title=\"记录错误\"></a>记录错误</h2><p>我们可以捕获错误（使用<code>try...except</code>），打印出错误信息，同时最重要的是让程序继续执行下去。<br>Python使用<code>logging</code>模块，记录错误信息.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>/int(s)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> foo(s)*<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        bar(<span class=\"string\">'0'</span>)</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        logging.exception(e)  <span class=\"comment\">#将错误记录在日志文件中</span></div><div class=\"line\">main()</div><div class=\"line\">print(<span class=\"string\">'END'</span>) <span class=\"comment\">#这一句可以继续执行</span></div><div class=\"line\"></div><div class=\"line\">输出：</div><div class=\"line\"></div><div class=\"line\">ERROR:root:division by zero</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">198</span>, <span class=\"keyword\">in</span> main</div><div class=\"line\">    bar(<span class=\"string\">'0'</span>)</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">194</span>, <span class=\"keyword\">in</span> bar</div><div class=\"line\">    <span class=\"keyword\">return</span> foo(s)*<span class=\"number\">2</span></div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">191</span>, <span class=\"keyword\">in</span> foo</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>/int(s)</div><div class=\"line\">ZeroDivisionError: division by zero</div><div class=\"line\">END</div></pre></td></tr></table></figure></p>\n<h2 id=\"抛出错误\"><a href=\"#抛出错误\" class=\"headerlink\" title=\"抛出错误\"></a>抛出错误</h2><p> <strong> 使用<code>raise</code>语句抛出一个错误实例。 </strong>   首先要定义一个错误的class，选择好继承关系，然后使用<code>raise</code>语句抛出一个错误的实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">方式一：（知道如何处理错误）</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooError</span><span class=\"params\">(ValueError)</span>:</span> <span class=\"comment\">#定义一个错误的class，继承来自ValueError</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    n=int(s)</div><div class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> FooError(<span class=\"string\">'invalid value:%s'</span> %s) <span class=\"comment\">#使用raise抛出错误信息，实际上是创建一个该class的实例。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span>/n</div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"string\">'0'</span>)</div><div class=\"line\">输出：</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">213</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        foo(<span class=\"string\">'0'</span>)</div><div class=\"line\">      File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">210</span>, <span class=\"keyword\">in</span> foo</div><div class=\"line\">        <span class=\"keyword\">raise</span> FooError(<span class=\"string\">'invalid value:%s'</span> %s) <span class=\"comment\">#使用raise抛出错误信息，实际上是创建一个该class的实例。</span></div><div class=\"line\">    __main__.FooError: invalid value:<span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">方式二：不知道如何处理错误，原样抛出错误。</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    n=int(s)</div><div class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'invalid value:%s'</span> %s)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span>/n</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>: <span class=\"comment\">#首先使用try...except捕获错误</span></div><div class=\"line\">        foo(<span class=\"string\">'0'</span>)</div><div class=\"line\">    <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</div><div class=\"line\">        print(<span class=\"string\">'ValueError!'</span>) <span class=\"comment\">#打印出错误，无法处理，使用raise原样抛出</span></div><div class=\"line\">        <span class=\"keyword\">raise</span> <span class=\"comment\">#raise不带参数，就原样抛出</span></div><div class=\"line\">bar()</div><div class=\"line\">输出：</div><div class=\"line\">ValueError!</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">228</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    bar()</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">223</span>, <span class=\"keyword\">in</span> bar</div><div class=\"line\">    foo(<span class=\"string\">'0'</span>)</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">218</span>, <span class=\"keyword\">in</span> foo</div><div class=\"line\">    <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'invalid value:%s'</span> %s)</div><div class=\"line\">ValueError: invalid value:<span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"调试程序\"><a href=\"#调试程序\" class=\"headerlink\" title=\"调试程序\"></a>调试程序</h2><ul>\n<li>第一种方法，使用<code>print()</code>将可能出现问题的点或者可能有问题的变量打印出来</li>\n<li><p>第二种方法，使用断言<code>assert</code>替代<code>print()</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    n=int(s)</div><div class=\"line\">    <span class=\"keyword\">assert</span> n!=<span class=\"number\">0</span>, <span class=\"string\">'n is zero!'</span> <span class=\"comment\">#断言表示的意思是，n！=0应该是true，否则后面会执行出错误，如果断言失败，该语句抛出AssertionError错误</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span>/n</div></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方法，使用<code>logging</code>替换<code>print()</code>:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">logging.basicConfig(level=logging.INFO)</div><div class=\"line\">    <span class=\"comment\"># 记录的信息具有优先级别，debug，info，warning，error，优先级依次增大</span></div><div class=\"line\">    <span class=\"comment\"># 当指定level为WARNING时，logging.info就不起作用了</span></div><div class=\"line\"></div><div class=\"line\">s=<span class=\"string\">'0'</span></div><div class=\"line\">n= int(s)</div><div class=\"line\">logging.info(<span class=\"string\">'n=%d'</span> %n)</div><div class=\"line\">print(<span class=\"number\">100</span>/n)</div><div class=\"line\"></div><div class=\"line\">输出：</div><div class=\"line\">INFO:root:n=<span class=\"number\">0</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">236</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    print(<span class=\"number\">100</span>/n)</div><div class=\"line\">ZeroDivisionError: division by zero</div><div class=\"line\"></div><div class=\"line\">如果将level改为WARNING,则日志不起作用：</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">238</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    print(<span class=\"number\">100</span>/n)</div><div class=\"line\">ZeroDivisionError: division by zero <span class=\"comment\">#这个是解释器捕获的异常，直接退出了程序</span></div></pre></td></tr></table></figure>\n<ul>\n<li>使用Python的调试器pdb，程序以单步方式运行。<br>使用命令<code>python -m pdb TestPython.py</code>启动，输入字母 <strong>l</strong> 查看代码，字母 <strong>n</strong> 单步执行，输入<code>p 变量名</code>来查看变量的值，命令 <strong>q</strong> 退出pdb调试。<br>可以使用<code>pdb.set_trace()</code>设置断点。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\">s=<span class=\"string\">'0'</span></div><div class=\"line\">n= int(s)</div><div class=\"line\">pdb.set_trace() <span class=\"comment\">#程序运行到这，自动暂停，进入pdb调试环境</span></div><div class=\"line\">print(<span class=\"number\">100</span>/n)</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用IDE</strong>，如 <strong>pycharm</strong>,比较方便设置断点、单步执行，比较方便进行调试。</li>\n</ul>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作，类似于“测试驱动开发”（TDD：Test-Driven Development）的方法。<br>以测试为驱动的开发模式，最大的好处是确保一个程序模块的行为符合我们设计的测试用例，将来修改的时候，可以极大程度的保证该模块的行为仍然是正确的。<br>例如我们新建一个MyDict类，这个类的行为和dic一致：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDict</span><span class=\"params\">(dict)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, **kw)</span>:</span></div><div class=\"line\">        super().__init__(**kw)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self,key)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self[key]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">r\"'Dict' object has no attribute '%s'\"</span> %key)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self,key,value)</span>:</span></div><div class=\"line\">            self[key] = value</div></pre></td></tr></table></figure>\n<p>编写单元测试，引入unittest模块，编写测试脚本（可以一次批量允许多个单元测试）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"><span class=\"keyword\">from</span> TestPython <span class=\"keyword\">import</span> MyDict</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDict</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#setUp和tearDown函数会在每调用一个测试方法的前后分别被执行</span></div><div class=\"line\">        print(<span class=\"string\">'setUp...'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#基于这样的特性，比如可以在setUp中连接数据库，tearDown中关闭数据库</span></div><div class=\"line\">        print(<span class=\"string\">'tearDown...'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_init</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict(a=<span class=\"number\">1</span>,b=<span class=\"string\">'test'</span>)</div><div class=\"line\">        self.assertEqual(d.a,<span class=\"number\">1</span>)</div><div class=\"line\">        self.assertEqual(d.b,<span class=\"string\">'test'</span>)</div><div class=\"line\">        self.assertTrue(isinstance(d,dict))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_key</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict()</div><div class=\"line\">        d[<span class=\"string\">'key'</span>]=<span class=\"string\">'value'</span></div><div class=\"line\">        self.assertEqual(d.key,<span class=\"string\">'value'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_attr</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict()</div><div class=\"line\">        d.key=<span class=\"string\">'value'</span></div><div class=\"line\">        self.assertTrue(<span class=\"string\">'key'</span> <span class=\"keyword\">in</span> d)</div><div class=\"line\">        self.assertEqual(d[<span class=\"string\">'key'</span>],<span class=\"string\">'value'</span>) <span class=\"comment\"># 通过断言函数得到的两者应该相等</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_keyerror</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict()</div><div class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(KeyError): <span class=\"comment\">#通过断言抛出指定错误</span></div><div class=\"line\">            value=d[<span class=\"string\">'empty'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_attrerror</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict()</div><div class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(AttributeError):</div><div class=\"line\">            value=d.empty</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    unittest.main()</div><div class=\"line\">测试结果：</div><div class=\"line\">D:\\coder\\Python\\<span class=\"number\">6.27</span>&gt;python test.py</div><div class=\"line\">setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.</div><div class=\"line\">----------------------------------------------------------------------</div><div class=\"line\">Ran <span class=\"number\">5</span> tests <span class=\"keyword\">in</span> <span class=\"number\">0.008</span>s</div><div class=\"line\"></div><div class=\"line\">OK</div></pre></td></tr></table></figure>\n<h1 id=\"文档测试（doctest）\"><a href=\"#文档测试（doctest）\" class=\"headerlink\" title=\"文档测试（doctest）\"></a>文档测试（doctest）</h1><p>Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDict</span><span class=\"params\">(dict)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    doctest(文档测试)</div><div class=\"line\">    simple dict but also support access as x.y style.</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; d1=MyDict()</div><div class=\"line\">    &gt;&gt;&gt; d1['x']=100</div><div class=\"line\">    &gt;&gt;&gt; d1.x</div><div class=\"line\">    100</div><div class=\"line\">    &gt;&gt;&gt; d2=MyDict(a=1,b=2,c='3')</div><div class=\"line\">    &gt;&gt;&gt; d2.c</div><div class=\"line\">    '3'</div><div class=\"line\">    &gt;&gt;&gt; d2['empty']</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">        ...</div><div class=\"line\">    KeyError: 'empty'</div><div class=\"line\">    &gt;&gt;&gt; d2.empty</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">        ...</div><div class=\"line\">    AttributeError: 'MyDict' object has no attribute 'empty'</div><div class=\"line\">    '''</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, **kw)</span>:</span></div><div class=\"line\">        super().__init__(**kw)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self,key)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self[key]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">r\"'Dict' object has no attribute '%s'\"</span> %key)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self,key,value)</span>:</span></div><div class=\"line\">            self[key] = value    </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>: <span class=\"comment\">#必须加上这个，才能运行脚本</span></div><div class=\"line\">    <span class=\"keyword\">import</span> doctest <span class=\"comment\">#导入该doctest模块</span></div><div class=\"line\">    doctest.testmod()</div><div class=\"line\"></div><div class=\"line\">如果将__getattr__函数注释掉，再运行该脚本，则会报错：</div><div class=\"line\"></div><div class=\"line\">D:\\coder\\Python\\<span class=\"number\">6.27</span>&gt;python TestPython.py</div><div class=\"line\">**********************************************************************</div><div class=\"line\">File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">248</span>, <span class=\"keyword\">in</span> __main__.MyDict</div><div class=\"line\">Failed example:</div><div class=\"line\">    d1.x</div><div class=\"line\">Exception raised:</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\"</span>, line <span class=\"number\">1321</span>, <span class=\"keyword\">in</span> __run</div><div class=\"line\">        compileflags, <span class=\"number\">1</span>), test.globs)</div><div class=\"line\">      File <span class=\"string\">\"&lt;doctest __main__.MyDict[2]&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        d1.x</div><div class=\"line\">    AttributeError: <span class=\"string\">'MyDict'</span> object has no attribute <span class=\"string\">'x'</span></div><div class=\"line\">**********************************************************************</div><div class=\"line\">File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">251</span>, <span class=\"keyword\">in</span> __main__.MyDict</div><div class=\"line\">Failed example:</div><div class=\"line\">    d2.c</div><div class=\"line\">Exception raised:</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\"</span>, line <span class=\"number\">1321</span>, <span class=\"keyword\">in</span> __run</div><div class=\"line\">        compileflags, <span class=\"number\">1</span>), test.globs)</div><div class=\"line\">      File <span class=\"string\">\"&lt;doctest __main__.MyDict[4]&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        d2.c</div><div class=\"line\">    AttributeError: <span class=\"string\">'MyDict'</span> object has no attribute <span class=\"string\">'c'</span></div><div class=\"line\">**********************************************************************</div><div class=\"line\">File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">257</span>, <span class=\"keyword\">in</span> __main__.MyDict</div><div class=\"line\">Failed example:</div><div class=\"line\">    d2.empty</div><div class=\"line\">Expected:</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">        ...</div><div class=\"line\">    AttributeError: <span class=\"string\">'Dict'</span> object has no attribute <span class=\"string\">'empty'</span></div><div class=\"line\">Got:</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\"</span>, line <span class=\"number\">1321</span>, <span class=\"keyword\">in</span> __run</div><div class=\"line\">        compileflags, <span class=\"number\">1</span>), test.globs)</div><div class=\"line\">      File <span class=\"string\">\"&lt;doctest __main__.MyDict[6]&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        d2.empty</div><div class=\"line\">    AttributeError: <span class=\"string\">'MyDict'</span> object has no attribute <span class=\"string\">'empty'</span></div><div class=\"line\">**********************************************************************</div><div class=\"line\"><span class=\"number\">1</span> items had failures:</div><div class=\"line\">   <span class=\"number\">3</span> of   <span class=\"number\">7</span> <span class=\"keyword\">in</span> __main__.MyDict</div><div class=\"line\">***Test Failed*** <span class=\"number\">3</span> failures.</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431913726557e5e43e1ee8d54ee486bddc3f607afb75000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"错误、调试和测试\"><a href=\"#错误、调试和测试\" class=\"headerlink\" title=\"错误、调试和测试\"></a>错误、调试和测试</h1><p>学会Python的错误处理及程序的调试方式<br>","more":"</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>Python内置了一套<code>try...except...finally</code>的错误处理机制：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span>:</div><div class=\"line\">    print(<span class=\"string\">'try...'</span>)</div><div class=\"line\">    r=<span class=\"number\">100</span>/int(<span class=\"string\">'a'</span>)</div><div class=\"line\">    print(<span class=\"string\">'could be divide,result:'</span>,r)</div><div class=\"line\"><span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</div><div class=\"line\">    print(<span class=\"string\">'ValueError:'</span>e)</div><div class=\"line\"><span class=\"keyword\">except</span> ZeroDivisionError <span class=\"keyword\">as</span> e:</div><div class=\"line\">    print(<span class=\"string\">'ZeroDivisionError:'</span>,e)</div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    print(<span class=\"string\">'no errors!'</span>)</div><div class=\"line\"><span class=\"keyword\">finally</span>:</div><div class=\"line\">    print(<span class=\"string\">'finally...'</span>)</div><div class=\"line\">print(<span class=\"string\">'END'</span>)</div></pre></td></tr></table></figure></p>\n<p>和java中一样，try后面的是我们认为可能会出错的代码块，如果代码块某一行执行出错，则从该行代码后的都不会继续执行，直接跳到错误处理的代码块，即except语句块（可以有多个），执行完此语句块后，如果有finally语句块，则执行finally语句块。也就是finally语句块一定会执行。</p>\n<p>Python的错误是class，具有继承关系，except不但捕获该类型的错误，也将其 <strong>子类的错误</strong> 也一网打尽。</p>\n<p>如果程序没有被捕获，它就会一直往上抛（调用堆栈），最后被Python解释器捕获，打印错误信息（在错误堆栈中），然后 <strong>程序退出。</strong></p>\n<h2 id=\"记录错误\"><a href=\"#记录错误\" class=\"headerlink\" title=\"记录错误\"></a>记录错误</h2><p>我们可以捕获错误（使用<code>try...except</code>），打印出错误信息，同时最重要的是让程序继续执行下去。<br>Python使用<code>logging</code>模块，记录错误信息.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>/int(s)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> foo(s)*<span class=\"number\">2</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        bar(<span class=\"string\">'0'</span>)</div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">        logging.exception(e)  <span class=\"comment\">#将错误记录在日志文件中</span></div><div class=\"line\">main()</div><div class=\"line\">print(<span class=\"string\">'END'</span>) <span class=\"comment\">#这一句可以继续执行</span></div><div class=\"line\"></div><div class=\"line\">输出：</div><div class=\"line\"></div><div class=\"line\">ERROR:root:division by zero</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">198</span>, <span class=\"keyword\">in</span> main</div><div class=\"line\">    bar(<span class=\"string\">'0'</span>)</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">194</span>, <span class=\"keyword\">in</span> bar</div><div class=\"line\">    <span class=\"keyword\">return</span> foo(s)*<span class=\"number\">2</span></div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">191</span>, <span class=\"keyword\">in</span> foo</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">10</span>/int(s)</div><div class=\"line\">ZeroDivisionError: division by zero</div><div class=\"line\">END</div></pre></td></tr></table></figure></p>\n<h2 id=\"抛出错误\"><a href=\"#抛出错误\" class=\"headerlink\" title=\"抛出错误\"></a>抛出错误</h2><p> <strong> 使用<code>raise</code>语句抛出一个错误实例。 </strong>   首先要定义一个错误的class，选择好继承关系，然后使用<code>raise</code>语句抛出一个错误的实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">方式一：（知道如何处理错误）</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooError</span><span class=\"params\">(ValueError)</span>:</span> <span class=\"comment\">#定义一个错误的class，继承来自ValueError</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    n=int(s)</div><div class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> FooError(<span class=\"string\">'invalid value:%s'</span> %s) <span class=\"comment\">#使用raise抛出错误信息，实际上是创建一个该class的实例。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span>/n</div><div class=\"line\"></div><div class=\"line\">foo(<span class=\"string\">'0'</span>)</div><div class=\"line\">输出：</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">213</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        foo(<span class=\"string\">'0'</span>)</div><div class=\"line\">      File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">210</span>, <span class=\"keyword\">in</span> foo</div><div class=\"line\">        <span class=\"keyword\">raise</span> FooError(<span class=\"string\">'invalid value:%s'</span> %s) <span class=\"comment\">#使用raise抛出错误信息，实际上是创建一个该class的实例。</span></div><div class=\"line\">    __main__.FooError: invalid value:<span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">方式二：不知道如何处理错误，原样抛出错误。</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    n=int(s)</div><div class=\"line\">    <span class=\"keyword\">if</span> n==<span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'invalid value:%s'</span> %s)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span>/n</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bar</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">try</span>: <span class=\"comment\">#首先使用try...except捕获错误</span></div><div class=\"line\">        foo(<span class=\"string\">'0'</span>)</div><div class=\"line\">    <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> e:</div><div class=\"line\">        print(<span class=\"string\">'ValueError!'</span>) <span class=\"comment\">#打印出错误，无法处理，使用raise原样抛出</span></div><div class=\"line\">        <span class=\"keyword\">raise</span> <span class=\"comment\">#raise不带参数，就原样抛出</span></div><div class=\"line\">bar()</div><div class=\"line\">输出：</div><div class=\"line\">ValueError!</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">228</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    bar()</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">223</span>, <span class=\"keyword\">in</span> bar</div><div class=\"line\">    foo(<span class=\"string\">'0'</span>)</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">218</span>, <span class=\"keyword\">in</span> foo</div><div class=\"line\">    <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'invalid value:%s'</span> %s)</div><div class=\"line\">ValueError: invalid value:<span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"调试程序\"><a href=\"#调试程序\" class=\"headerlink\" title=\"调试程序\"></a>调试程序</h2><ul>\n<li>第一种方法，使用<code>print()</code>将可能出现问题的点或者可能有问题的变量打印出来</li>\n<li><p>第二种方法，使用断言<code>assert</code>替代<code>print()</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    n=int(s)</div><div class=\"line\">    <span class=\"keyword\">assert</span> n!=<span class=\"number\">0</span>, <span class=\"string\">'n is zero!'</span> <span class=\"comment\">#断言表示的意思是，n！=0应该是true，否则后面会执行出错误，如果断言失败，该语句抛出AssertionError错误</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">100</span>/n</div></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方法，使用<code>logging</code>替换<code>print()</code>:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\">logging.basicConfig(level=logging.INFO)</div><div class=\"line\">    <span class=\"comment\"># 记录的信息具有优先级别，debug，info，warning，error，优先级依次增大</span></div><div class=\"line\">    <span class=\"comment\"># 当指定level为WARNING时，logging.info就不起作用了</span></div><div class=\"line\"></div><div class=\"line\">s=<span class=\"string\">'0'</span></div><div class=\"line\">n= int(s)</div><div class=\"line\">logging.info(<span class=\"string\">'n=%d'</span> %n)</div><div class=\"line\">print(<span class=\"number\">100</span>/n)</div><div class=\"line\"></div><div class=\"line\">输出：</div><div class=\"line\">INFO:root:n=<span class=\"number\">0</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">236</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    print(<span class=\"number\">100</span>/n)</div><div class=\"line\">ZeroDivisionError: division by zero</div><div class=\"line\"></div><div class=\"line\">如果将level改为WARNING,则日志不起作用：</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">238</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">    print(<span class=\"number\">100</span>/n)</div><div class=\"line\">ZeroDivisionError: division by zero <span class=\"comment\">#这个是解释器捕获的异常，直接退出了程序</span></div></pre></td></tr></table></figure>\n<ul>\n<li>使用Python的调试器pdb，程序以单步方式运行。<br>使用命令<code>python -m pdb TestPython.py</code>启动，输入字母 <strong>l</strong> 查看代码，字母 <strong>n</strong> 单步执行，输入<code>p 变量名</code>来查看变量的值，命令 <strong>q</strong> 退出pdb调试。<br>可以使用<code>pdb.set_trace()</code>设置断点。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> pdb</div><div class=\"line\">s=<span class=\"string\">'0'</span></div><div class=\"line\">n= int(s)</div><div class=\"line\">pdb.set_trace() <span class=\"comment\">#程序运行到这，自动暂停，进入pdb调试环境</span></div><div class=\"line\">print(<span class=\"number\">100</span>/n)</div></pre></td></tr></table></figure>\n<ul>\n<li><strong>使用IDE</strong>，如 <strong>pycharm</strong>,比较方便设置断点、单步执行，比较方便进行调试。</li>\n</ul>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作，类似于“测试驱动开发”（TDD：Test-Driven Development）的方法。<br>以测试为驱动的开发模式，最大的好处是确保一个程序模块的行为符合我们设计的测试用例，将来修改的时候，可以极大程度的保证该模块的行为仍然是正确的。<br>例如我们新建一个MyDict类，这个类的行为和dic一致：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDict</span><span class=\"params\">(dict)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, **kw)</span>:</span></div><div class=\"line\">        super().__init__(**kw)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self,key)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self[key]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">r\"'Dict' object has no attribute '%s'\"</span> %key)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self,key,value)</span>:</span></div><div class=\"line\">            self[key] = value</div></pre></td></tr></table></figure>\n<p>编写单元测试，引入unittest模块，编写测试脚本（可以一次批量允许多个单元测试）：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"><span class=\"keyword\">from</span> TestPython <span class=\"keyword\">import</span> MyDict</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDict</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#setUp和tearDown函数会在每调用一个测试方法的前后分别被执行</span></div><div class=\"line\">        print(<span class=\"string\">'setUp...'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#基于这样的特性，比如可以在setUp中连接数据库，tearDown中关闭数据库</span></div><div class=\"line\">        print(<span class=\"string\">'tearDown...'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_init</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict(a=<span class=\"number\">1</span>,b=<span class=\"string\">'test'</span>)</div><div class=\"line\">        self.assertEqual(d.a,<span class=\"number\">1</span>)</div><div class=\"line\">        self.assertEqual(d.b,<span class=\"string\">'test'</span>)</div><div class=\"line\">        self.assertTrue(isinstance(d,dict))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_key</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict()</div><div class=\"line\">        d[<span class=\"string\">'key'</span>]=<span class=\"string\">'value'</span></div><div class=\"line\">        self.assertEqual(d.key,<span class=\"string\">'value'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_attr</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict()</div><div class=\"line\">        d.key=<span class=\"string\">'value'</span></div><div class=\"line\">        self.assertTrue(<span class=\"string\">'key'</span> <span class=\"keyword\">in</span> d)</div><div class=\"line\">        self.assertEqual(d[<span class=\"string\">'key'</span>],<span class=\"string\">'value'</span>) <span class=\"comment\"># 通过断言函数得到的两者应该相等</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_keyerror</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict()</div><div class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(KeyError): <span class=\"comment\">#通过断言抛出指定错误</span></div><div class=\"line\">            value=d[<span class=\"string\">'empty'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_attrerror</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        d=MyDict()</div><div class=\"line\">        <span class=\"keyword\">with</span> self.assertRaises(AttributeError):</div><div class=\"line\">            value=d.empty</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    unittest.main()</div><div class=\"line\">测试结果：</div><div class=\"line\">D:\\coder\\Python\\<span class=\"number\">6.27</span>&gt;python test.py</div><div class=\"line\">setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.setUp...</div><div class=\"line\">tearDown...</div><div class=\"line\">.</div><div class=\"line\">----------------------------------------------------------------------</div><div class=\"line\">Ran <span class=\"number\">5</span> tests <span class=\"keyword\">in</span> <span class=\"number\">0.008</span>s</div><div class=\"line\"></div><div class=\"line\">OK</div></pre></td></tr></table></figure>\n<h1 id=\"文档测试（doctest）\"><a href=\"#文档测试（doctest）\" class=\"headerlink\" title=\"文档测试（doctest）\"></a>文档测试（doctest）</h1><p>Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDict</span><span class=\"params\">(dict)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''</span></div><div class=\"line\">    doctest(文档测试)</div><div class=\"line\">    simple dict but also support access as x.y style.</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; d1=MyDict()</div><div class=\"line\">    &gt;&gt;&gt; d1['x']=100</div><div class=\"line\">    &gt;&gt;&gt; d1.x</div><div class=\"line\">    100</div><div class=\"line\">    &gt;&gt;&gt; d2=MyDict(a=1,b=2,c='3')</div><div class=\"line\">    &gt;&gt;&gt; d2.c</div><div class=\"line\">    '3'</div><div class=\"line\">    &gt;&gt;&gt; d2['empty']</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">        ...</div><div class=\"line\">    KeyError: 'empty'</div><div class=\"line\">    &gt;&gt;&gt; d2.empty</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">        ...</div><div class=\"line\">    AttributeError: 'MyDict' object has no attribute 'empty'</div><div class=\"line\">    '''</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, **kw)</span>:</span></div><div class=\"line\">        super().__init__(**kw)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self,key)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self[key]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(<span class=\"string\">r\"'Dict' object has no attribute '%s'\"</span> %key)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self,key,value)</span>:</span></div><div class=\"line\">            self[key] = value    </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>: <span class=\"comment\">#必须加上这个，才能运行脚本</span></div><div class=\"line\">    <span class=\"keyword\">import</span> doctest <span class=\"comment\">#导入该doctest模块</span></div><div class=\"line\">    doctest.testmod()</div><div class=\"line\"></div><div class=\"line\">如果将__getattr__函数注释掉，再运行该脚本，则会报错：</div><div class=\"line\"></div><div class=\"line\">D:\\coder\\Python\\<span class=\"number\">6.27</span>&gt;python TestPython.py</div><div class=\"line\">**********************************************************************</div><div class=\"line\">File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">248</span>, <span class=\"keyword\">in</span> __main__.MyDict</div><div class=\"line\">Failed example:</div><div class=\"line\">    d1.x</div><div class=\"line\">Exception raised:</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\"</span>, line <span class=\"number\">1321</span>, <span class=\"keyword\">in</span> __run</div><div class=\"line\">        compileflags, <span class=\"number\">1</span>), test.globs)</div><div class=\"line\">      File <span class=\"string\">\"&lt;doctest __main__.MyDict[2]&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        d1.x</div><div class=\"line\">    AttributeError: <span class=\"string\">'MyDict'</span> object has no attribute <span class=\"string\">'x'</span></div><div class=\"line\">**********************************************************************</div><div class=\"line\">File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">251</span>, <span class=\"keyword\">in</span> __main__.MyDict</div><div class=\"line\">Failed example:</div><div class=\"line\">    d2.c</div><div class=\"line\">Exception raised:</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\"</span>, line <span class=\"number\">1321</span>, <span class=\"keyword\">in</span> __run</div><div class=\"line\">        compileflags, <span class=\"number\">1</span>), test.globs)</div><div class=\"line\">      File <span class=\"string\">\"&lt;doctest __main__.MyDict[4]&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        d2.c</div><div class=\"line\">    AttributeError: <span class=\"string\">'MyDict'</span> object has no attribute <span class=\"string\">'c'</span></div><div class=\"line\">**********************************************************************</div><div class=\"line\">File <span class=\"string\">\"TestPython.py\"</span>, line <span class=\"number\">257</span>, <span class=\"keyword\">in</span> __main__.MyDict</div><div class=\"line\">Failed example:</div><div class=\"line\">    d2.empty</div><div class=\"line\">Expected:</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">        ...</div><div class=\"line\">    AttributeError: <span class=\"string\">'Dict'</span> object has no attribute <span class=\"string\">'empty'</span></div><div class=\"line\">Got:</div><div class=\"line\">    Traceback (most recent call last):</div><div class=\"line\">      File <span class=\"string\">\"C:\\Users\\40239\\AppData\\Local\\Programs\\Python\\Python35\\lib\\doctest.py\"</span>, line <span class=\"number\">1321</span>, <span class=\"keyword\">in</span> __run</div><div class=\"line\">        compileflags, <span class=\"number\">1</span>), test.globs)</div><div class=\"line\">      File <span class=\"string\">\"&lt;doctest __main__.MyDict[6]&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        d2.empty</div><div class=\"line\">    AttributeError: <span class=\"string\">'MyDict'</span> object has no attribute <span class=\"string\">'empty'</span></div><div class=\"line\">**********************************************************************</div><div class=\"line\"><span class=\"number\">1</span> items had failures:</div><div class=\"line\">   <span class=\"number\">3</span> of   <span class=\"number\">7</span> <span class=\"keyword\">in</span> __main__.MyDict</div><div class=\"line\">***Test Failed*** <span class=\"number\">3</span> failures.</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431913726557e5e43e1ee8d54ee486bddc3f607afb75000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>"},{"title":"Python基础学习之[面向对象高级编程]","copyright":true,"date":"2017-07-10T12:21:53.000Z","_content":"\n# 面向对象编程(OOP)\n\n面向过程的程序设计把计算机程序视为一系列命令的集合，典型的面向过程的思想是把函数切分成子函数，把大块的函数通过切割成小块函数来降低系统的复杂性；\n\n而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，处理这些消息，程序的执行就是一系列消息在各个对象之间的传递；面向对象设计思想是抽象出class，根据class创建出Instance。\n\n<!--more-->\n\n```python\nstd1={'name':'Michael','score':90} #使用面向过程的方式，将学生用一个dic表示\nstd2={'name':'Li','score':100}\n\ndef Print_score(std):\n    print('%s: %s' %(std['name'],std['score']))\nPrint_score(std1)\nPrint_score(std2)\n\nclass Student(object): #面向对象的方式，将学生定义为一个class，里面有各种处理对象的函数\n    def __init__(self,name,score): #第一个参数永远是self，表示创建的实例本身，因此，在__init__内部，可以把各种属性绑定到self，self指向创建的实例本身，还需注意的是，有了这个方法，在创建实例的时候，就不能传入空的参数了\n        self.name=name\n        self.score=score\n    def Print_score(self):\n        print('%s: %s' %(self.name,self.score))\n\nMichael=Student('Michael',90)\nLi = Student('Li',100)\nMichael.Print_score()\nLi.Print_score()\n\n```\n\n## 类和实例（Class & Instance）\nClass 是抽象的模板，是创建实例的模板\nInstance 是根据类创建出来的一个个具体的对象，各个实例拥有的数据相互独立，互不影响\nMethod 是于实例绑定的函数，在类中定义，和普通函数不同，方法可以直接方问实例的数据\n\n```python\n\nclass Student(object): #class 后面是类名，类名通常是大写开头的单词，object表示的是从哪个类继承下来，没有合适的继承类，那就使用公共父类object\n    pass\n\nbar=Student()\nbar.name='LI' #可以给一个实例绑定属性\nbar.score=90\n\n```\n\n## 访问限制（Access Restriction）\n\n- 若要让内部属性不被外部访问，可以把属性的名称前加上两个下划线`__`,变量名如果以`__`开头，说明这个变量是一个私有变量（Private），只有内部可访问，外部不能访问；\n- 如果看到一个下划线`_`开头的实例变量，这个变量是可以直接访问的，但是约定俗成是“虽然可以被访问，但请把我视为私有变量，不要随意访问”\n\n```python\nclass Student(object):\n\n    def __init__(self,name,score):\n        self.__name=name\n        self.__score=score\n\n        >>> bar=Student('Li',100)\n        >>> bar.__name\n        Traceback (most recent call last):\n          File \"<stdin>\", line 1, in <module>\n        AttributeError: 'Student' object has no attribute '__name'#外部无法直接访问实例变量\n\n    def get_name(self): #通过创建get和set函数来允许外部获得和修改属性\n        return self.__name #私有变量都是连个下划线的\n\n    def get_score(self):\n        return self.__score#该变量被Python解释器自动处理为:_Student__score\n\n    def set_name(self,name):\n        if isinstance(name,str):#在set方法中可以对参数进行检查，避免传入无效的参数\n            self.__name=name\n        else:\n            raise ValueError('bad name')\n\n    def set_score(self,score):\n        if 0<=score<=100:\n            self.__score=score\n        else:\n            raise ValueError('bad score')\n\n\n```\n\n## 继承和多态（ Inheritance and Polymorphic）\n\n```python\nclass Animal(object):\n    def run(self):\n        print('Animal is running...')\n\nclass Dog(Animal): #继承了Animal父类的属性，拥有了run方法\n    def run(self):\n        print('Dog is running...')\n    def eat(self):\n        print('Eating meat...')\n\nclass Cat(Animal):\n    def run(self): #重写（overwrite）了父类的run方法，会覆盖父类的同名方法，调用时自动调用自身的run方法，实现了多态（polymorphic）\n        print('Cat is running...')\n\n\ndef run_twice(Animal):\n    Animal.run()\n    Animal.run()\n\n    >>> run_twice(Animal())\n    Animal is running...\n    Animal is running...\n\n    >>> run_twice(Dog())\n    Dog is running...\n    Dog is running...\n\n    >>> run_twice(Cat())\n    Cat is running...\n    Cat is running...\n\nclass Timer(object): #验证动态语言在多态上的差别\n    def run(self):\n        print('Start...')\n\n    >>> run_twice(Timer())\n    Start...\n    Start...\n\n```\n多态：调用方只管调用，不用管细节，**开闭原则：**\n- 对扩展开放：允许新增`Animal`子类；\n- 对修改封闭：不需要修改依赖`Animal`类型的`run_twice`函数\n\n**静态语言Vs动态语言** 在多态上的表现差别：\n- 静态语言（如C++）来说，如果传入的是`Animal`类型，传入的对象必须是`Animal`类型或者是它的子类型，否则无法调用`run()`方法；\n- 动态语言（如Python）来说，不一定需要传入`Animal`类型或者子类型，只需要保证传入的对象有`run()`方法。\n- 比如类`Timeir`可以调用`run_twice`,这个就是动态语言的鸭子类型，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就被视作鸭子\n- Python中的“file-like object”就是一种鸭子类型。\n\n## 获取对象信息（使用常见函数）\n\n- type(): **基本类型（int，str）、一个变量指向的函数或类（上例子中的Animal）** 可以使用type()函数判断，返回的是对应的`Class`类型\n```python\n>>> type(a)\n<class '__main__.Animal'>\n```\n\n- isinstance(): 判断`class`的类型，也可以判断一个变量是否是某些类型中的一种\n```python\n>>> isinstance([1,2,3],list)\nTrue\n>>> isinstance((1,2,3),tuple)\nTrue\n>>> isinstance((1,2,3),(tuple,list))\n```\n\n- dir(): 可以获取一个对象的所有属性和方法，返回一个包含字符串的list;\n```python\n>>> dir(li)\n['_Student__name', '_Student__score', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'get_name', 'get_score', 'set_name', 'set_score']\n```\n- 其他方法\n可以配合使用`getattr()、setattr()、hasattr()`来操作一个对象的状态\n\n```python\n>>> hasattr(li,'__name')\nFalse\n>>> hasattr(li,'_Student__name')\nTrue\n>>> hasattr(li,'set_score')\nTrue\n>>> getattr(li,'_Student__name')\n'li'\n>>> setattr(li,'_Student__name','Cheng')\n>>> getattr(li,'_Student__name')\n'Cheng'\n>>>\n```\n## 类属性和实例属性\n- 给实例绑定属性的方法：通过实例变量或者`self`变量\n- 给类本身绑定属性：直接在class中定义属性，这种属性是类属性，归该类所有，但类的所有实例都可以访问\n\n```python\n >>> class Animal(object):\n...     name='Animal' #类属性\n...\n>>> dog=Animal()\n>>> print(dog.name)\nAnimal\n>>> print(Animal.name)\nAnimal\n>>> dog.name='Dog' #使用实例绑定name属性\n>>> print(dog.name)#实例同名属性比类属性优先级高，因此会屏蔽掉类属性\nDog\n>>> print(Animal.name)\nAnimal\n>>> del dog.name #删除实例的name属性\n>>> print(dog.name)\nAnimal\n>>>\n\nNote：编写程序的时候尽量避免实例属性和类属性使用相同的名字，否则实例属性将会屏蔽类属性，得到意想不到的结果。\n```\n\n# 面向对象高级编程\n\n- 动态语言的灵活性：定义一个class，并创建一个class实例后，可以对该实例绑定任何属性和方法(只作用在该实例)；也可以给class绑定一个方法或者属性，对该class的所有实例起作用\n\n```python\nclass Student(object):\n    pass\n\ns=Student()\ns.name='Michael' #动态给实例绑定属性\n>>> print(s.name)\nMichael\n\ndef set_age(self,age):\n    self.age=age\n\nfrom types import MethodType\ns.set_age=MethodType(set_age,s) #给实例动态绑定一个方法\ns.set_age(18)\n>>> s.age\n18\n\ns2=Student() #创建新的实例，测试是否s的属性是否存在于s2\n>>> print(s2.name)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Student' object has no attribute 'name'\n\n>>> s2.set_age(19)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Student' object has no attribute 'set_age'\n\nStudent.set_age=set_age #给class绑定方法，该方法对student的所有实例起作用\n>>> s2.set_age(19)\n>>> s2.age\n19\n```\n- 使用`__slots__`限制实例的属性: 例如只允许对`Student`实例添加`name`和`age`属性，可以在定义`Student`class的时候，使用__slots__，要注意的是，使用该方法定义的属性只对 **当前类的实例** 起作用，对继承的子类不起作用\n\n```python\nclass Student(object):\n    __slots__=('name','age')\n\n>>> s=Student()\n>>> s.name='li'\n>>> s.age=25\n>>> s.score=100 #报错，无法绑定属性score\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: 'Student' object has no attribute 'score'\n\nclass PostGraduateStudent(Student):\n    pass\n\n>>> g=PostGraduateStudent()\n>>> g.score=100\n>>> g.score\n100\n\n```\n## 装饰器@property\n实现既能检查参数，又可以用类似属性的方式来访问类的变量,如下例，可以直接使用`s.score=90`的方式来设置属性，并且可以有限制。\n\n```python\nclass Student(object):\n    @property  #相当于get_score方法\n    def score(self):\n        return self._score\n\n    @score.setter #相当于set_score方法\n    def score(self, value):\n        if not isinstance(value,int):\n            raise ValueError('score must be an integer!')\n        if value<0 or value>100:\n            raise ValueError('score must between 0~100!')\n        self._score=value\n\n>>> s=Student()\n>>> s.score=100 #实际上转化为s.set_score(100)\n>>> s.score #实际转化为s.get_score()\n100\n>>> s.score='haha'#起到了限制属性的作用\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"<stdin>\", line 9, in score\nValueError: score must be an integer!\n\n    #使用@property还可以定义只读属性，也就是只定义getter方法，不定义setter方法。\n    @property #birth含有可读写属性\n    def birth(self):\n        return self._birth\n\n    @birth.setter\n    def birth(self,value):\n        self._birth=value\n\n    @property #age就只有一个只读属性，只有getter方法\n    def age(self):\n        return 2017-self._birth\n\n```\n## 多重继承（MixIn）\n主线用正常的方式继承，副线用MixIn继承（只是起个名字而已,加在后面），如：\n```python\nclass Dog(Mammal,RunnableMixIn,CarnivorousMixIn):\n    pass\n\n```\n\n## 定制类\n\nPython中，**[__xxx__]** 类似于这样的变量或者函数名，在Python中有特殊用途，可以用来定制类，定制类中各种返回的特殊值。\n\n```python\nclass Student(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self): #这个有点类似于java中的toString方法\n        return 'Student object (name: %s)' %self.name\n    __repr__=__str__ #两者的区别是，__str__返回用户看到的数据，__repr__返回开发者看到的数据，是为调试服务的。\n\n    def __call__(self):#实现对实例本身的调用，返回相应的属性。即可以将实例看做是一个函数进行调用。\n    print('My name is %s.' %self.name)\n\n    >>> print(Student('Li'))\n    Student object (name: Li)\n    >>> s=Student('Li')\n    >>> s\n    Student object (name: Li)\n    >>> s()\n    My name is Li.\n\nclass Fib(object):\n    def __init__(self):\n        self.a,self.b=0,1\n    def __iter__(self): #定义迭代器的方法，可以使用for...in循环\n        return self\n    def __next__(self):\n        self.a, self.b= self.b, self.a+self.b #计算下一个值，本身进行迭代\n        if self.a>10000:\n            raise StopIteration()\n        return self.a\n    def __getitem__(self,n): #定义getitem方法，实现像list一样按照下标取出元素\n        a,b=1,1\n        for x in range(n):\n            a,b=b,a+b\n        return a\n\n            >>> for n in Fib():\n            ...     print(n)\n            ...\n            1\n            1\n            2\n            3\n            5\n            8\n            13\n            21\n            34\n            55\n            89\n            144\n            233\n            377\n            610\n            987\n            1597\n            2584\n            4181\n            6765\n            >>> f=Fib()\n            >>> f[10]\n            89\n            >>> f[100]\n            573147844013817084101\n\n            def __getitem__(self,n): #定义带有切片的getitem方法，可以使用f[1:5]切片取元素，返回一个list\n                if isinstance(n,int):\n                    a,b=1,1\n                    for x in range(n):\n                        a,b=b,a+b\n                    return a\n                if isinstance(n,slice):\n                    if n.start is None:\n                        n.start=0\n                    a ,b=1,1\n                    L=[]\n                    for x in range(n.stop):\n                        if x>n.start:\n                            L.append(a)\n                        a,b=b,a+b\n                    return L\n\n            >>> f=Fib()\n            >>> f[0:5]\n            [1, 2, 3, 5]               \n```\n## 使用枚举类（Enum）\n\n```python\nfrom enum import Enum\nMonth=Enum('Month',('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'))\n\n>>> for name,member in Month.__members__.items():\n...     print(name,'=>',member,',',member.value)\n...\nJan => Month.Jan , 1 #value值默认从1开始计数，也可以通过value值来获取枚举常亮，如果改变，则按照顺序增长。\nFeb => Month.Feb , 2\nMar => Month.Mar , 3\nApr => Month.Apr , 4\nMay => Month.May , 5\nJun => Month.Jun , 6\nJul => Month.Jul , 7\nAug => Month.Aug , 8\nSep => Month.Sep , 9\nOct => Month.Oct , 10\nNov => Month.Nov , 11\nDec => Month.Dec , 12\n```\n## 使用元类（metaclass）\n- type()函数：可以使用该函数返回一个对象类型，也可以创建出新的类型。\n要创建一个class对象，`type()`依次传入三个参数：\n1. class的名称\n2. 继承的父类集合，如果只有一个父类，需要在该父类后加逗号（tuple的单元素写发）\n3. class的方法名称和函数的绑定。下例中是函数fn绑定在方法名hello上。\n```python\ndef fn(self,name='world'):\n    print('Hello,%s.'%name)\n\nHello=type('Hello',(object,),dict(hello=fn))\n```\n- metaclass:\n称为元类，先定义metaclass，然后创建类。可以把类看成是metaclass创建出来的“实例”。按照习惯，metaclass的类名总是以Metaclass结尾，表示这个是一个metaclass。**先定义metaclass，就可以创建类，然后创建实例**\n讲的比较详细的看[链接](https://funhacks.net/2016/11/12/metaclass/)\n\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143186738532805c392f2cc09446caf3236c34e3f980f000)\n","source":"_posts/Python基础学习之-面向对象高级编程.md","raw":"---\ntitle: 'Python基础学习之[面向对象高级编程]'\ncopyright: true\ndate: 2017-07-10 20:21:53\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n\n# 面向对象编程(OOP)\n\n面向过程的程序设计把计算机程序视为一系列命令的集合，典型的面向过程的思想是把函数切分成子函数，把大块的函数通过切割成小块函数来降低系统的复杂性；\n\n而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，处理这些消息，程序的执行就是一系列消息在各个对象之间的传递；面向对象设计思想是抽象出class，根据class创建出Instance。\n\n<!--more-->\n\n```python\nstd1={'name':'Michael','score':90} #使用面向过程的方式，将学生用一个dic表示\nstd2={'name':'Li','score':100}\n\ndef Print_score(std):\n    print('%s: %s' %(std['name'],std['score']))\nPrint_score(std1)\nPrint_score(std2)\n\nclass Student(object): #面向对象的方式，将学生定义为一个class，里面有各种处理对象的函数\n    def __init__(self,name,score): #第一个参数永远是self，表示创建的实例本身，因此，在__init__内部，可以把各种属性绑定到self，self指向创建的实例本身，还需注意的是，有了这个方法，在创建实例的时候，就不能传入空的参数了\n        self.name=name\n        self.score=score\n    def Print_score(self):\n        print('%s: %s' %(self.name,self.score))\n\nMichael=Student('Michael',90)\nLi = Student('Li',100)\nMichael.Print_score()\nLi.Print_score()\n\n```\n\n## 类和实例（Class & Instance）\nClass 是抽象的模板，是创建实例的模板\nInstance 是根据类创建出来的一个个具体的对象，各个实例拥有的数据相互独立，互不影响\nMethod 是于实例绑定的函数，在类中定义，和普通函数不同，方法可以直接方问实例的数据\n\n```python\n\nclass Student(object): #class 后面是类名，类名通常是大写开头的单词，object表示的是从哪个类继承下来，没有合适的继承类，那就使用公共父类object\n    pass\n\nbar=Student()\nbar.name='LI' #可以给一个实例绑定属性\nbar.score=90\n\n```\n\n## 访问限制（Access Restriction）\n\n- 若要让内部属性不被外部访问，可以把属性的名称前加上两个下划线`__`,变量名如果以`__`开头，说明这个变量是一个私有变量（Private），只有内部可访问，外部不能访问；\n- 如果看到一个下划线`_`开头的实例变量，这个变量是可以直接访问的，但是约定俗成是“虽然可以被访问，但请把我视为私有变量，不要随意访问”\n\n```python\nclass Student(object):\n\n    def __init__(self,name,score):\n        self.__name=name\n        self.__score=score\n\n        >>> bar=Student('Li',100)\n        >>> bar.__name\n        Traceback (most recent call last):\n          File \"<stdin>\", line 1, in <module>\n        AttributeError: 'Student' object has no attribute '__name'#外部无法直接访问实例变量\n\n    def get_name(self): #通过创建get和set函数来允许外部获得和修改属性\n        return self.__name #私有变量都是连个下划线的\n\n    def get_score(self):\n        return self.__score#该变量被Python解释器自动处理为:_Student__score\n\n    def set_name(self,name):\n        if isinstance(name,str):#在set方法中可以对参数进行检查，避免传入无效的参数\n            self.__name=name\n        else:\n            raise ValueError('bad name')\n\n    def set_score(self,score):\n        if 0<=score<=100:\n            self.__score=score\n        else:\n            raise ValueError('bad score')\n\n\n```\n\n## 继承和多态（ Inheritance and Polymorphic）\n\n```python\nclass Animal(object):\n    def run(self):\n        print('Animal is running...')\n\nclass Dog(Animal): #继承了Animal父类的属性，拥有了run方法\n    def run(self):\n        print('Dog is running...')\n    def eat(self):\n        print('Eating meat...')\n\nclass Cat(Animal):\n    def run(self): #重写（overwrite）了父类的run方法，会覆盖父类的同名方法，调用时自动调用自身的run方法，实现了多态（polymorphic）\n        print('Cat is running...')\n\n\ndef run_twice(Animal):\n    Animal.run()\n    Animal.run()\n\n    >>> run_twice(Animal())\n    Animal is running...\n    Animal is running...\n\n    >>> run_twice(Dog())\n    Dog is running...\n    Dog is running...\n\n    >>> run_twice(Cat())\n    Cat is running...\n    Cat is running...\n\nclass Timer(object): #验证动态语言在多态上的差别\n    def run(self):\n        print('Start...')\n\n    >>> run_twice(Timer())\n    Start...\n    Start...\n\n```\n多态：调用方只管调用，不用管细节，**开闭原则：**\n- 对扩展开放：允许新增`Animal`子类；\n- 对修改封闭：不需要修改依赖`Animal`类型的`run_twice`函数\n\n**静态语言Vs动态语言** 在多态上的表现差别：\n- 静态语言（如C++）来说，如果传入的是`Animal`类型，传入的对象必须是`Animal`类型或者是它的子类型，否则无法调用`run()`方法；\n- 动态语言（如Python）来说，不一定需要传入`Animal`类型或者子类型，只需要保证传入的对象有`run()`方法。\n- 比如类`Timeir`可以调用`run_twice`,这个就是动态语言的鸭子类型，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就被视作鸭子\n- Python中的“file-like object”就是一种鸭子类型。\n\n## 获取对象信息（使用常见函数）\n\n- type(): **基本类型（int，str）、一个变量指向的函数或类（上例子中的Animal）** 可以使用type()函数判断，返回的是对应的`Class`类型\n```python\n>>> type(a)\n<class '__main__.Animal'>\n```\n\n- isinstance(): 判断`class`的类型，也可以判断一个变量是否是某些类型中的一种\n```python\n>>> isinstance([1,2,3],list)\nTrue\n>>> isinstance((1,2,3),tuple)\nTrue\n>>> isinstance((1,2,3),(tuple,list))\n```\n\n- dir(): 可以获取一个对象的所有属性和方法，返回一个包含字符串的list;\n```python\n>>> dir(li)\n['_Student__name', '_Student__score', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'get_name', 'get_score', 'set_name', 'set_score']\n```\n- 其他方法\n可以配合使用`getattr()、setattr()、hasattr()`来操作一个对象的状态\n\n```python\n>>> hasattr(li,'__name')\nFalse\n>>> hasattr(li,'_Student__name')\nTrue\n>>> hasattr(li,'set_score')\nTrue\n>>> getattr(li,'_Student__name')\n'li'\n>>> setattr(li,'_Student__name','Cheng')\n>>> getattr(li,'_Student__name')\n'Cheng'\n>>>\n```\n## 类属性和实例属性\n- 给实例绑定属性的方法：通过实例变量或者`self`变量\n- 给类本身绑定属性：直接在class中定义属性，这种属性是类属性，归该类所有，但类的所有实例都可以访问\n\n```python\n >>> class Animal(object):\n...     name='Animal' #类属性\n...\n>>> dog=Animal()\n>>> print(dog.name)\nAnimal\n>>> print(Animal.name)\nAnimal\n>>> dog.name='Dog' #使用实例绑定name属性\n>>> print(dog.name)#实例同名属性比类属性优先级高，因此会屏蔽掉类属性\nDog\n>>> print(Animal.name)\nAnimal\n>>> del dog.name #删除实例的name属性\n>>> print(dog.name)\nAnimal\n>>>\n\nNote：编写程序的时候尽量避免实例属性和类属性使用相同的名字，否则实例属性将会屏蔽类属性，得到意想不到的结果。\n```\n\n# 面向对象高级编程\n\n- 动态语言的灵活性：定义一个class，并创建一个class实例后，可以对该实例绑定任何属性和方法(只作用在该实例)；也可以给class绑定一个方法或者属性，对该class的所有实例起作用\n\n```python\nclass Student(object):\n    pass\n\ns=Student()\ns.name='Michael' #动态给实例绑定属性\n>>> print(s.name)\nMichael\n\ndef set_age(self,age):\n    self.age=age\n\nfrom types import MethodType\ns.set_age=MethodType(set_age,s) #给实例动态绑定一个方法\ns.set_age(18)\n>>> s.age\n18\n\ns2=Student() #创建新的实例，测试是否s的属性是否存在于s2\n>>> print(s2.name)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Student' object has no attribute 'name'\n\n>>> s2.set_age(19)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'Student' object has no attribute 'set_age'\n\nStudent.set_age=set_age #给class绑定方法，该方法对student的所有实例起作用\n>>> s2.set_age(19)\n>>> s2.age\n19\n```\n- 使用`__slots__`限制实例的属性: 例如只允许对`Student`实例添加`name`和`age`属性，可以在定义`Student`class的时候，使用__slots__，要注意的是，使用该方法定义的属性只对 **当前类的实例** 起作用，对继承的子类不起作用\n\n```python\nclass Student(object):\n    __slots__=('name','age')\n\n>>> s=Student()\n>>> s.name='li'\n>>> s.age=25\n>>> s.score=100 #报错，无法绑定属性score\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: 'Student' object has no attribute 'score'\n\nclass PostGraduateStudent(Student):\n    pass\n\n>>> g=PostGraduateStudent()\n>>> g.score=100\n>>> g.score\n100\n\n```\n## 装饰器@property\n实现既能检查参数，又可以用类似属性的方式来访问类的变量,如下例，可以直接使用`s.score=90`的方式来设置属性，并且可以有限制。\n\n```python\nclass Student(object):\n    @property  #相当于get_score方法\n    def score(self):\n        return self._score\n\n    @score.setter #相当于set_score方法\n    def score(self, value):\n        if not isinstance(value,int):\n            raise ValueError('score must be an integer!')\n        if value<0 or value>100:\n            raise ValueError('score must between 0~100!')\n        self._score=value\n\n>>> s=Student()\n>>> s.score=100 #实际上转化为s.set_score(100)\n>>> s.score #实际转化为s.get_score()\n100\n>>> s.score='haha'#起到了限制属性的作用\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"<stdin>\", line 9, in score\nValueError: score must be an integer!\n\n    #使用@property还可以定义只读属性，也就是只定义getter方法，不定义setter方法。\n    @property #birth含有可读写属性\n    def birth(self):\n        return self._birth\n\n    @birth.setter\n    def birth(self,value):\n        self._birth=value\n\n    @property #age就只有一个只读属性，只有getter方法\n    def age(self):\n        return 2017-self._birth\n\n```\n## 多重继承（MixIn）\n主线用正常的方式继承，副线用MixIn继承（只是起个名字而已,加在后面），如：\n```python\nclass Dog(Mammal,RunnableMixIn,CarnivorousMixIn):\n    pass\n\n```\n\n## 定制类\n\nPython中，**[__xxx__]** 类似于这样的变量或者函数名，在Python中有特殊用途，可以用来定制类，定制类中各种返回的特殊值。\n\n```python\nclass Student(object):\n    def __init__(self, name):\n        self.name = name\n\n    def __str__(self): #这个有点类似于java中的toString方法\n        return 'Student object (name: %s)' %self.name\n    __repr__=__str__ #两者的区别是，__str__返回用户看到的数据，__repr__返回开发者看到的数据，是为调试服务的。\n\n    def __call__(self):#实现对实例本身的调用，返回相应的属性。即可以将实例看做是一个函数进行调用。\n    print('My name is %s.' %self.name)\n\n    >>> print(Student('Li'))\n    Student object (name: Li)\n    >>> s=Student('Li')\n    >>> s\n    Student object (name: Li)\n    >>> s()\n    My name is Li.\n\nclass Fib(object):\n    def __init__(self):\n        self.a,self.b=0,1\n    def __iter__(self): #定义迭代器的方法，可以使用for...in循环\n        return self\n    def __next__(self):\n        self.a, self.b= self.b, self.a+self.b #计算下一个值，本身进行迭代\n        if self.a>10000:\n            raise StopIteration()\n        return self.a\n    def __getitem__(self,n): #定义getitem方法，实现像list一样按照下标取出元素\n        a,b=1,1\n        for x in range(n):\n            a,b=b,a+b\n        return a\n\n            >>> for n in Fib():\n            ...     print(n)\n            ...\n            1\n            1\n            2\n            3\n            5\n            8\n            13\n            21\n            34\n            55\n            89\n            144\n            233\n            377\n            610\n            987\n            1597\n            2584\n            4181\n            6765\n            >>> f=Fib()\n            >>> f[10]\n            89\n            >>> f[100]\n            573147844013817084101\n\n            def __getitem__(self,n): #定义带有切片的getitem方法，可以使用f[1:5]切片取元素，返回一个list\n                if isinstance(n,int):\n                    a,b=1,1\n                    for x in range(n):\n                        a,b=b,a+b\n                    return a\n                if isinstance(n,slice):\n                    if n.start is None:\n                        n.start=0\n                    a ,b=1,1\n                    L=[]\n                    for x in range(n.stop):\n                        if x>n.start:\n                            L.append(a)\n                        a,b=b,a+b\n                    return L\n\n            >>> f=Fib()\n            >>> f[0:5]\n            [1, 2, 3, 5]               \n```\n## 使用枚举类（Enum）\n\n```python\nfrom enum import Enum\nMonth=Enum('Month',('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'))\n\n>>> for name,member in Month.__members__.items():\n...     print(name,'=>',member,',',member.value)\n...\nJan => Month.Jan , 1 #value值默认从1开始计数，也可以通过value值来获取枚举常亮，如果改变，则按照顺序增长。\nFeb => Month.Feb , 2\nMar => Month.Mar , 3\nApr => Month.Apr , 4\nMay => Month.May , 5\nJun => Month.Jun , 6\nJul => Month.Jul , 7\nAug => Month.Aug , 8\nSep => Month.Sep , 9\nOct => Month.Oct , 10\nNov => Month.Nov , 11\nDec => Month.Dec , 12\n```\n## 使用元类（metaclass）\n- type()函数：可以使用该函数返回一个对象类型，也可以创建出新的类型。\n要创建一个class对象，`type()`依次传入三个参数：\n1. class的名称\n2. 继承的父类集合，如果只有一个父类，需要在该父类后加逗号（tuple的单元素写发）\n3. class的方法名称和函数的绑定。下例中是函数fn绑定在方法名hello上。\n```python\ndef fn(self,name='world'):\n    print('Hello,%s.'%name)\n\nHello=type('Hello',(object,),dict(hello=fn))\n```\n- metaclass:\n称为元类，先定义metaclass，然后创建类。可以把类看成是metaclass创建出来的“实例”。按照习惯，metaclass的类名总是以Metaclass结尾，表示这个是一个metaclass。**先定义metaclass，就可以创建类，然后创建实例**\n讲的比较详细的看[链接](https://funhacks.net/2016/11/12/metaclass/)\n\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143186738532805c392f2cc09446caf3236c34e3f980f000)\n","slug":"Python基础学习之-面向对象高级编程","published":1,"updated":"2017-07-10T12:31:42.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c7e00134ov1butzxhm1","content":"<h1 id=\"面向对象编程-OOP\"><a href=\"#面向对象编程-OOP\" class=\"headerlink\" title=\"面向对象编程(OOP)\"></a>面向对象编程(OOP)</h1><p>面向过程的程序设计把计算机程序视为一系列命令的集合，典型的面向过程的思想是把函数切分成子函数，把大块的函数通过切割成小块函数来降低系统的复杂性；</p>\n<p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，处理这些消息，程序的执行就是一系列消息在各个对象之间的传递；面向对象设计思想是抽象出class，根据class创建出Instance。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">std1=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Michael'</span>,<span class=\"string\">'score'</span>:<span class=\"number\">90</span>&#125; <span class=\"comment\">#使用面向过程的方式，将学生用一个dic表示</span></div><div class=\"line\">std2=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Li'</span>,<span class=\"string\">'score'</span>:<span class=\"number\">100</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Print_score</span><span class=\"params\">(std)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'%s: %s'</span> %(std[<span class=\"string\">'name'</span>],std[<span class=\"string\">'score'</span>]))</div><div class=\"line\">Print_score(std1)</div><div class=\"line\">Print_score(std2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span> <span class=\"comment\">#面向对象的方式，将学生定义为一个class，里面有各种处理对象的函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,score)</span>:</span> <span class=\"comment\">#第一个参数永远是self，表示创建的实例本身，因此，在__init__内部，可以把各种属性绑定到self，self指向创建的实例本身，还需注意的是，有了这个方法，在创建实例的时候，就不能传入空的参数了</span></div><div class=\"line\">        self.name=name</div><div class=\"line\">        self.score=score</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Print_score</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'%s: %s'</span> %(self.name,self.score))</div><div class=\"line\"></div><div class=\"line\">Michael=Student(<span class=\"string\">'Michael'</span>,<span class=\"number\">90</span>)</div><div class=\"line\">Li = Student(<span class=\"string\">'Li'</span>,<span class=\"number\">100</span>)</div><div class=\"line\">Michael.Print_score()</div><div class=\"line\">Li.Print_score()</div></pre></td></tr></table></figure>\n<h2 id=\"类和实例（Class-amp-Instance）\"><a href=\"#类和实例（Class-amp-Instance）\" class=\"headerlink\" title=\"类和实例（Class &amp; Instance）\"></a>类和实例（Class &amp; Instance）</h2><p>Class 是抽象的模板，是创建实例的模板<br>Instance 是根据类创建出来的一个个具体的对象，各个实例拥有的数据相互独立，互不影响<br>Method 是于实例绑定的函数，在类中定义，和普通函数不同，方法可以直接方问实例的数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span> <span class=\"comment\">#class 后面是类名，类名通常是大写开头的单词，object表示的是从哪个类继承下来，没有合适的继承类，那就使用公共父类object</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">bar=Student()</div><div class=\"line\">bar.name=<span class=\"string\">'LI'</span> <span class=\"comment\">#可以给一个实例绑定属性</span></div><div class=\"line\">bar.score=<span class=\"number\">90</span></div></pre></td></tr></table></figure>\n<h2 id=\"访问限制（Access-Restriction）\"><a href=\"#访问限制（Access-Restriction）\" class=\"headerlink\" title=\"访问限制（Access Restriction）\"></a>访问限制（Access Restriction）</h2><ul>\n<li>若要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>,变量名如果以<code>__</code>开头，说明这个变量是一个私有变量（Private），只有内部可访问，外部不能访问；</li>\n<li>如果看到一个下划线<code>_</code>开头的实例变量，这个变量是可以直接访问的，但是约定俗成是“虽然可以被访问，但请把我视为私有变量，不要随意访问”</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,score)</span>:</span></div><div class=\"line\">        self.__name=name</div><div class=\"line\">        self.__score=score</div><div class=\"line\"></div><div class=\"line\">        &gt;&gt;&gt; bar=Student(<span class=\"string\">'Li'</span>,<span class=\"number\">100</span>)</div><div class=\"line\">        &gt;&gt;&gt; bar.__name</div><div class=\"line\">        Traceback (most recent call last):</div><div class=\"line\">          File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        AttributeError: <span class=\"string\">'Student'</span> object has no attribute <span class=\"string\">'__name'</span><span class=\"comment\">#外部无法直接访问实例变量</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_name</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#通过创建get和set函数来允许外部获得和修改属性</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__name <span class=\"comment\">#私有变量都是连个下划线的</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_score</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__score<span class=\"comment\">#该变量被Python解释器自动处理为:_Student__score</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_name</span><span class=\"params\">(self,name)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(name,str):<span class=\"comment\">#在set方法中可以对参数进行检查，避免传入无效的参数</span></div><div class=\"line\">            self.__name=name</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'bad name'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_score</span><span class=\"params\">(self,score)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span>&lt;=score&lt;=<span class=\"number\">100</span>:</div><div class=\"line\">            self.__score=score</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'bad score'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"继承和多态（-Inheritance-and-Polymorphic）\"><a href=\"#继承和多态（-Inheritance-and-Polymorphic）\" class=\"headerlink\" title=\"继承和多态（ Inheritance and Polymorphic）\"></a>继承和多态（ Inheritance and Polymorphic）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Animal is running...'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Animal)</span>:</span> <span class=\"comment\">#继承了Animal父类的属性，拥有了run方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Dog is running...'</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Eating meat...'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span><span class=\"params\">(Animal)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#重写（overwrite）了父类的run方法，会覆盖父类的同名方法，调用时自动调用自身的run方法，实现了多态（polymorphic）</span></div><div class=\"line\">        print(<span class=\"string\">'Cat is running...'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_twice</span><span class=\"params\">(Animal)</span>:</span></div><div class=\"line\">    Animal.run()</div><div class=\"line\">    Animal.run()</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; run_twice(Animal())</div><div class=\"line\">    Animal <span class=\"keyword\">is</span> running...</div><div class=\"line\">    Animal <span class=\"keyword\">is</span> running...</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; run_twice(Dog())</div><div class=\"line\">    Dog <span class=\"keyword\">is</span> running...</div><div class=\"line\">    Dog <span class=\"keyword\">is</span> running...</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; run_twice(Cat())</div><div class=\"line\">    Cat <span class=\"keyword\">is</span> running...</div><div class=\"line\">    Cat <span class=\"keyword\">is</span> running...</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span><span class=\"params\">(object)</span>:</span> <span class=\"comment\">#验证动态语言在多态上的差别</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Start...'</span>)</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; run_twice(Timer())</div><div class=\"line\">    Start...</div><div class=\"line\">    Start...</div></pre></td></tr></table></figure>\n<p>多态：调用方只管调用，不用管细节，<strong>开闭原则：</strong></p>\n<ul>\n<li>对扩展开放：允许新增<code>Animal</code>子类；</li>\n<li>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice</code>函数</li>\n</ul>\n<p><strong>静态语言Vs动态语言</strong> 在多态上的表现差别：</p>\n<ul>\n<li>静态语言（如C++）来说，如果传入的是<code>Animal</code>类型，传入的对象必须是<code>Animal</code>类型或者是它的子类型，否则无法调用<code>run()</code>方法；</li>\n<li>动态语言（如Python）来说，不一定需要传入<code>Animal</code>类型或者子类型，只需要保证传入的对象有<code>run()</code>方法。</li>\n<li>比如类<code>Timeir</code>可以调用<code>run_twice</code>,这个就是动态语言的鸭子类型，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就被视作鸭子</li>\n<li>Python中的“file-like object”就是一种鸭子类型。</li>\n</ul>\n<h2 id=\"获取对象信息（使用常见函数）\"><a href=\"#获取对象信息（使用常见函数）\" class=\"headerlink\" title=\"获取对象信息（使用常见函数）\"></a>获取对象信息（使用常见函数）</h2><ul>\n<li><p>type(): <strong>基本类型（int，str）、一个变量指向的函数或类（上例子中的Animal）</strong> 可以使用type()函数判断，返回的是对应的<code>Class</code>类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</div><div class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">__main__</span>.<span class=\"title\">Animal</span>'&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>isinstance(): 判断<code>class</code>的类型，也可以判断一个变量是否是某些类型中的一种</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],list)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),tuple)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),(tuple,list))</div></pre></td></tr></table></figure>\n</li>\n<li><p>dir(): 可以获取一个对象的所有属性和方法，返回一个包含字符串的list;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dir(li)</div><div class=\"line\">[<span class=\"string\">'_Student__name'</span>, <span class=\"string\">'_Student__score'</span>, <span class=\"string\">'__class__'</span>, <span class=\"string\">'__delattr__'</span>, <span class=\"string\">'__dict__'</span>, <span class=\"string\">'__dir__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__eq__'</span>, <span class=\"string\">'__format__'</span>, <span class=\"string\">'__ge__'</span>, <span class=\"string\">'__getattribute__'</span>, <span class=\"string\">'__gt__'</span>, <span class=\"string\">'__hash__'</span>, <span class=\"string\">'__init__'</span>, <span class=\"string\">'__le__'</span>, <span class=\"string\">'__lt__'</span>, <span class=\"string\">'__module__'</span>, <span class=\"string\">'__ne__'</span>, <span class=\"string\">'__new__'</span>, <span class=\"string\">'__reduce__'</span>, <span class=\"string\">'__reduce_ex__'</span>, <span class=\"string\">'__repr__'</span>, <span class=\"string\">'__setattr__'</span>, <span class=\"string\">'__sizeof__'</span>, <span class=\"string\">'__str__'</span>, <span class=\"string\">'__subclasshook__'</span>, <span class=\"string\">'__weakref__'</span>, <span class=\"string\">'get_name'</span>, <span class=\"string\">'get_score'</span>, <span class=\"string\">'set_name'</span>, <span class=\"string\">'set_score'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>其他方法<br>可以配合使用<code>getattr()、setattr()、hasattr()</code>来操作一个对象的状态</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(li,<span class=\"string\">'__name'</span>)</div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(li,<span class=\"string\">'_Student__name'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(li,<span class=\"string\">'set_score'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(li,<span class=\"string\">'_Student__name'</span>)</div><div class=\"line\"><span class=\"string\">'li'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>setattr(li,<span class=\"string\">'_Student__name'</span>,<span class=\"string\">'Cheng'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(li,<span class=\"string\">'_Student__name'</span>)</div><div class=\"line\"><span class=\"string\">'Cheng'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"类属性和实例属性\"><a href=\"#类属性和实例属性\" class=\"headerlink\" title=\"类属性和实例属性\"></a>类属性和实例属性</h2><ul>\n<li>给实例绑定属性的方法：通过实例变量或者<code>self</code>变量</li>\n<li>给类本身绑定属性：直接在class中定义属性，这种属性是类属性，归该类所有，但类的所有实例都可以访问</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &gt;&gt;&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    name=<span class=\"string\">'Animal'</span> <span class=\"comment\">#类属性</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dog=Animal()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(dog.name)</div><div class=\"line\">Animal</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Animal.name)</div><div class=\"line\">Animal</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dog.name=<span class=\"string\">'Dog'</span> <span class=\"comment\">#使用实例绑定name属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(dog.name)<span class=\"comment\">#实例同名属性比类属性优先级高，因此会屏蔽掉类属性</span></div><div class=\"line\">Dog</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Animal.name)</div><div class=\"line\">Animal</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> dog.name <span class=\"comment\">#删除实例的name属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(dog.name)</div><div class=\"line\">Animal</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\"></div><div class=\"line\">Note：编写程序的时候尽量避免实例属性和类属性使用相同的名字，否则实例属性将会屏蔽类属性，得到意想不到的结果。</div></pre></td></tr></table></figure>\n<h1 id=\"面向对象高级编程\"><a href=\"#面向对象高级编程\" class=\"headerlink\" title=\"面向对象高级编程\"></a>面向对象高级编程</h1><ul>\n<li>动态语言的灵活性：定义一个class，并创建一个class实例后，可以对该实例绑定任何属性和方法(只作用在该实例)；也可以给class绑定一个方法或者属性，对该class的所有实例起作用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">s=Student()</div><div class=\"line\">s.name=<span class=\"string\">'Michael'</span> <span class=\"comment\">#动态给实例绑定属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s.name)</div><div class=\"line\">Michael</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_age</span><span class=\"params\">(self,age)</span>:</span></div><div class=\"line\">    self.age=age</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> MethodType</div><div class=\"line\">s.set_age=MethodType(set_age,s) <span class=\"comment\">#给实例动态绑定一个方法</span></div><div class=\"line\">s.set_age(<span class=\"number\">18</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.age</div><div class=\"line\"><span class=\"number\">18</span></div><div class=\"line\"></div><div class=\"line\">s2=Student() <span class=\"comment\">#创建新的实例，测试是否s的属性是否存在于s2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s2.name)</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">AttributeError: <span class=\"string\">'Student'</span> object has no attribute <span class=\"string\">'name'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2.set_age(<span class=\"number\">19</span>)</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">AttributeError: <span class=\"string\">'Student'</span> object has no attribute <span class=\"string\">'set_age'</span></div><div class=\"line\"></div><div class=\"line\">Student.set_age=set_age <span class=\"comment\">#给class绑定方法，该方法对student的所有实例起作用</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2.set_age(<span class=\"number\">19</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2.age</div><div class=\"line\"><span class=\"number\">19</span></div></pre></td></tr></table></figure>\n<ul>\n<li>使用<code>__slots__</code>限制实例的属性: 例如只允许对<code>Student</code>实例添加<code>name</code>和<code>age</code>属性，可以在定义<code>Student</code>class的时候，使用<strong>slots</strong>，要注意的是，使用该方法定义的属性只对 <strong>当前类的实例</strong> 起作用，对继承的子类不起作用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    __slots__=(<span class=\"string\">'name'</span>,<span class=\"string\">'age'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s=Student()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.name=<span class=\"string\">'li'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.age=<span class=\"number\">25</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.score=<span class=\"number\">100</span> <span class=\"comment\">#报错，无法绑定属性score</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">AttributeError: <span class=\"string\">'Student'</span> object has no attribute <span class=\"string\">'score'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostGraduateStudent</span><span class=\"params\">(Student)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g=PostGraduateStudent()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g.score=<span class=\"number\">100</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g.score</div><div class=\"line\"><span class=\"number\">100</span></div></pre></td></tr></table></figure>\n<h2 id=\"装饰器-property\"><a href=\"#装饰器-property\" class=\"headerlink\" title=\"装饰器@property\"></a>装饰器@property</h2><p>实现既能检查参数，又可以用类似属性的方式来访问类的变量,如下例，可以直接使用<code>s.score=90</code>的方式来设置属性，并且可以有限制。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">    @property  #相当于get_score方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._score</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @score.setter #相当于set_score方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value,int):</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must be an integer!'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> value&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> value&gt;<span class=\"number\">100</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must between 0~100!'</span>)</div><div class=\"line\">        self._score=value</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s=Student()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.score=<span class=\"number\">100</span> <span class=\"comment\">#实际上转化为s.set_score(100)</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.score <span class=\"comment\">#实际转化为s.get_score()</span></div><div class=\"line\"><span class=\"number\">100</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.score=<span class=\"string\">'haha'</span><span class=\"comment\">#起到了限制属性的作用</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">9</span>, <span class=\"keyword\">in</span> score</div><div class=\"line\">ValueError: score must be an integer!</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#使用@property还可以定义只读属性，也就是只定义getter方法，不定义setter方法。</span></div><div class=\"line\"><span class=\"meta\">    @property #birth含有可读写属性</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">birth</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._birth</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @birth.setter</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">birth</span><span class=\"params\">(self,value)</span>:</span></div><div class=\"line\">        self._birth=value</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @property #age就只有一个只读属性，只有getter方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2017</span>-self._birth</div></pre></td></tr></table></figure>\n<h2 id=\"多重继承（MixIn）\"><a href=\"#多重继承（MixIn）\" class=\"headerlink\" title=\"多重继承（MixIn）\"></a>多重继承（MixIn）</h2><p>主线用正常的方式继承，副线用MixIn继承（只是起个名字而已,加在后面），如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Mammal,RunnableMixIn,CarnivorousMixIn)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"定制类\"><a href=\"#定制类\" class=\"headerlink\" title=\"定制类\"></a>定制类</h2><p>Python中，<strong>[<strong>xxx</strong>]</strong> 类似于这样的变量或者函数名，在Python中有特殊用途，可以用来定制类，定制类中各种返回的特殊值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#这个有点类似于java中的toString方法</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Student object (name: %s)'</span> %self.name</div><div class=\"line\">    __repr__=__str__ <span class=\"comment\">#两者的区别是，__str__返回用户看到的数据，__repr__返回开发者看到的数据，是为调试服务的。</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#实现对实例本身的调用，返回相应的属性。即可以将实例看做是一个函数进行调用。</span></div><div class=\"line\">    print(<span class=\"string\">'My name is %s.'</span> %self.name)</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; print(Student(<span class=\"string\">'Li'</span>))</div><div class=\"line\">    Student object (name: Li)</div><div class=\"line\">    &gt;&gt;&gt; s=Student(<span class=\"string\">'Li'</span>)</div><div class=\"line\">    &gt;&gt;&gt; s</div><div class=\"line\">    Student object (name: Li)</div><div class=\"line\">    &gt;&gt;&gt; s()</div><div class=\"line\">    My name <span class=\"keyword\">is</span> Li.</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fib</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.a,self.b=<span class=\"number\">0</span>,<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#定义迭代器的方法，可以使用for...in循环</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.a, self.b= self.b, self.a+self.b <span class=\"comment\">#计算下一个值，本身进行迭代</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.a&gt;<span class=\"number\">10000</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</div><div class=\"line\">        <span class=\"keyword\">return</span> self.a</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self,n)</span>:</span> <span class=\"comment\">#定义getitem方法，实现像list一样按照下标取出元素</span></div><div class=\"line\">        a,b=<span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">            a,b=b,a+b</div><div class=\"line\">        <span class=\"keyword\">return</span> a</div><div class=\"line\"></div><div class=\"line\">            &gt;&gt;&gt; <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fib():</div><div class=\"line\">            ...     print(n)</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"number\">2</span></div><div class=\"line\">            <span class=\"number\">3</span></div><div class=\"line\">            <span class=\"number\">5</span></div><div class=\"line\">            <span class=\"number\">8</span></div><div class=\"line\">            <span class=\"number\">13</span></div><div class=\"line\">            <span class=\"number\">21</span></div><div class=\"line\">            <span class=\"number\">34</span></div><div class=\"line\">            <span class=\"number\">55</span></div><div class=\"line\">            <span class=\"number\">89</span></div><div class=\"line\">            <span class=\"number\">144</span></div><div class=\"line\">            <span class=\"number\">233</span></div><div class=\"line\">            <span class=\"number\">377</span></div><div class=\"line\">            <span class=\"number\">610</span></div><div class=\"line\">            <span class=\"number\">987</span></div><div class=\"line\">            <span class=\"number\">1597</span></div><div class=\"line\">            <span class=\"number\">2584</span></div><div class=\"line\">            <span class=\"number\">4181</span></div><div class=\"line\">            <span class=\"number\">6765</span></div><div class=\"line\">            &gt;&gt;&gt; f=Fib()</div><div class=\"line\">            &gt;&gt;&gt; f[<span class=\"number\">10</span>]</div><div class=\"line\">            <span class=\"number\">89</span></div><div class=\"line\">            &gt;&gt;&gt; f[<span class=\"number\">100</span>]</div><div class=\"line\">            <span class=\"number\">573147844013817084101</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self,n)</span>:</span> <span class=\"comment\">#定义带有切片的getitem方法，可以使用f[1:5]切片取元素，返回一个list</span></div><div class=\"line\">                <span class=\"keyword\">if</span> isinstance(n,int):</div><div class=\"line\">                    a,b=<span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">                    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">                        a,b=b,a+b</div><div class=\"line\">                    <span class=\"keyword\">return</span> a</div><div class=\"line\">                <span class=\"keyword\">if</span> isinstance(n,slice):</div><div class=\"line\">                    <span class=\"keyword\">if</span> n.start <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                        n.start=<span class=\"number\">0</span></div><div class=\"line\">                    a ,b=<span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">                    L=[]</div><div class=\"line\">                    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n.stop):</div><div class=\"line\">                        <span class=\"keyword\">if</span> x&gt;n.start:</div><div class=\"line\">                            L.append(a)</div><div class=\"line\">                        a,b=b,a+b</div><div class=\"line\">                    <span class=\"keyword\">return</span> L</div><div class=\"line\"></div><div class=\"line\">            &gt;&gt;&gt; f=Fib()</div><div class=\"line\">            &gt;&gt;&gt; f[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</div><div class=\"line\">            [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"使用枚举类（Enum）\"><a href=\"#使用枚举类（Enum）\" class=\"headerlink\" title=\"使用枚举类（Enum）\"></a>使用枚举类（Enum）</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">from enum import Enum</div><div class=\"line\">Month=Enum('Month',('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'))</div><div class=\"line\"></div><div class=\"line\">&gt;&gt;&gt; for name,member in Month.__members__.items():</div><div class=\"line\">...     print(name,'=&gt;',member,',',member.value)</div><div class=\"line\">...</div><div class=\"line\">Jan =&gt; Month.Jan , 1 #value值默认从1开始计数，也可以通过value值来获取枚举常亮，如果改变，则按照顺序增长。</div><div class=\"line\">Feb =&gt; Month.Feb , 2</div><div class=\"line\">Mar =&gt; Month.Mar , 3</div><div class=\"line\">Apr =&gt; Month.Apr , 4</div><div class=\"line\">May =&gt; Month.May , 5</div><div class=\"line\">Jun =&gt; Month.Jun , 6</div><div class=\"line\">Jul =&gt; Month.Jul , 7</div><div class=\"line\">Aug =&gt; Month.Aug , 8</div><div class=\"line\">Sep =&gt; Month.Sep , 9</div><div class=\"line\">Oct =&gt; Month.Oct , 10</div><div class=\"line\">Nov =&gt; Month.Nov , 11</div><div class=\"line\">Dec =&gt; Month.Dec , 12</div></pre></td></tr></table></figure>\n<h2 id=\"使用元类（metaclass）\"><a href=\"#使用元类（metaclass）\" class=\"headerlink\" title=\"使用元类（metaclass）\"></a>使用元类（metaclass）</h2><ul>\n<li>type()函数：可以使用该函数返回一个对象类型，也可以创建出新的类型。<br>要创建一个class对象，<code>type()</code>依次传入三个参数：</li>\n</ul>\n<ol>\n<li>class的名称</li>\n<li>继承的父类集合，如果只有一个父类，需要在该父类后加逗号（tuple的单元素写发）</li>\n<li>class的方法名称和函数的绑定。下例中是函数fn绑定在方法名hello上。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn</span><span class=\"params\">(self,name=<span class=\"string\">'world'</span>)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Hello,%s.'</span>%name)</div><div class=\"line\"></div><div class=\"line\">Hello=type(<span class=\"string\">'Hello'</span>,(object,),dict(hello=fn))</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>metaclass:<br>称为元类，先定义metaclass，然后创建类。可以把类看成是metaclass创建出来的“实例”。按照习惯，metaclass的类名总是以Metaclass结尾，表示这个是一个metaclass。<strong>先定义metaclass，就可以创建类，然后创建实例</strong><br>讲的比较详细的看<a href=\"https://funhacks.net/2016/11/12/metaclass/\" target=\"_blank\" rel=\"external\">链接</a></li>\n</ul>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143186738532805c392f2cc09446caf3236c34e3f980f000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"面向对象编程-OOP\"><a href=\"#面向对象编程-OOP\" class=\"headerlink\" title=\"面向对象编程(OOP)\"></a>面向对象编程(OOP)</h1><p>面向过程的程序设计把计算机程序视为一系列命令的集合，典型的面向过程的思想是把函数切分成子函数，把大块的函数通过切割成小块函数来降低系统的复杂性；</p>\n<p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，处理这些消息，程序的执行就是一系列消息在各个对象之间的传递；面向对象设计思想是抽象出class，根据class创建出Instance。</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">std1=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Michael'</span>,<span class=\"string\">'score'</span>:<span class=\"number\">90</span>&#125; <span class=\"comment\">#使用面向过程的方式，将学生用一个dic表示</span></div><div class=\"line\">std2=&#123;<span class=\"string\">'name'</span>:<span class=\"string\">'Li'</span>,<span class=\"string\">'score'</span>:<span class=\"number\">100</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Print_score</span><span class=\"params\">(std)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'%s: %s'</span> %(std[<span class=\"string\">'name'</span>],std[<span class=\"string\">'score'</span>]))</div><div class=\"line\">Print_score(std1)</div><div class=\"line\">Print_score(std2)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span> <span class=\"comment\">#面向对象的方式，将学生定义为一个class，里面有各种处理对象的函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,score)</span>:</span> <span class=\"comment\">#第一个参数永远是self，表示创建的实例本身，因此，在__init__内部，可以把各种属性绑定到self，self指向创建的实例本身，还需注意的是，有了这个方法，在创建实例的时候，就不能传入空的参数了</span></div><div class=\"line\">        self.name=name</div><div class=\"line\">        self.score=score</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Print_score</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'%s: %s'</span> %(self.name,self.score))</div><div class=\"line\"></div><div class=\"line\">Michael=Student(<span class=\"string\">'Michael'</span>,<span class=\"number\">90</span>)</div><div class=\"line\">Li = Student(<span class=\"string\">'Li'</span>,<span class=\"number\">100</span>)</div><div class=\"line\">Michael.Print_score()</div><div class=\"line\">Li.Print_score()</div></pre></td></tr></table></figure>\n<h2 id=\"类和实例（Class-amp-Instance）\"><a href=\"#类和实例（Class-amp-Instance）\" class=\"headerlink\" title=\"类和实例（Class &amp; Instance）\"></a>类和实例（Class &amp; Instance）</h2><p>Class 是抽象的模板，是创建实例的模板<br>Instance 是根据类创建出来的一个个具体的对象，各个实例拥有的数据相互独立，互不影响<br>Method 是于实例绑定的函数，在类中定义，和普通函数不同，方法可以直接方问实例的数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span> <span class=\"comment\">#class 后面是类名，类名通常是大写开头的单词，object表示的是从哪个类继承下来，没有合适的继承类，那就使用公共父类object</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">bar=Student()</div><div class=\"line\">bar.name=<span class=\"string\">'LI'</span> <span class=\"comment\">#可以给一个实例绑定属性</span></div><div class=\"line\">bar.score=<span class=\"number\">90</span></div></pre></td></tr></table></figure>\n<h2 id=\"访问限制（Access-Restriction）\"><a href=\"#访问限制（Access-Restriction）\" class=\"headerlink\" title=\"访问限制（Access Restriction）\"></a>访问限制（Access Restriction）</h2><ul>\n<li>若要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>,变量名如果以<code>__</code>开头，说明这个变量是一个私有变量（Private），只有内部可访问，外部不能访问；</li>\n<li>如果看到一个下划线<code>_</code>开头的实例变量，这个变量是可以直接访问的，但是约定俗成是“虽然可以被访问，但请把我视为私有变量，不要随意访问”</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,score)</span>:</span></div><div class=\"line\">        self.__name=name</div><div class=\"line\">        self.__score=score</div><div class=\"line\"></div><div class=\"line\">        &gt;&gt;&gt; bar=Student(<span class=\"string\">'Li'</span>,<span class=\"number\">100</span>)</div><div class=\"line\">        &gt;&gt;&gt; bar.__name</div><div class=\"line\">        Traceback (most recent call last):</div><div class=\"line\">          File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">        AttributeError: <span class=\"string\">'Student'</span> object has no attribute <span class=\"string\">'__name'</span><span class=\"comment\">#外部无法直接访问实例变量</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_name</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#通过创建get和set函数来允许外部获得和修改属性</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__name <span class=\"comment\">#私有变量都是连个下划线的</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_score</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__score<span class=\"comment\">#该变量被Python解释器自动处理为:_Student__score</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_name</span><span class=\"params\">(self,name)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> isinstance(name,str):<span class=\"comment\">#在set方法中可以对参数进行检查，避免传入无效的参数</span></div><div class=\"line\">            self.__name=name</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'bad name'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_score</span><span class=\"params\">(self,score)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span>&lt;=score&lt;=<span class=\"number\">100</span>:</div><div class=\"line\">            self.__score=score</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'bad score'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"继承和多态（-Inheritance-and-Polymorphic）\"><a href=\"#继承和多态（-Inheritance-and-Polymorphic）\" class=\"headerlink\" title=\"继承和多态（ Inheritance and Polymorphic）\"></a>继承和多态（ Inheritance and Polymorphic）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Animal is running...'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Animal)</span>:</span> <span class=\"comment\">#继承了Animal父类的属性，拥有了run方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Dog is running...'</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">eat</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Eating meat...'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span><span class=\"params\">(Animal)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#重写（overwrite）了父类的run方法，会覆盖父类的同名方法，调用时自动调用自身的run方法，实现了多态（polymorphic）</span></div><div class=\"line\">        print(<span class=\"string\">'Cat is running...'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_twice</span><span class=\"params\">(Animal)</span>:</span></div><div class=\"line\">    Animal.run()</div><div class=\"line\">    Animal.run()</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; run_twice(Animal())</div><div class=\"line\">    Animal <span class=\"keyword\">is</span> running...</div><div class=\"line\">    Animal <span class=\"keyword\">is</span> running...</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; run_twice(Dog())</div><div class=\"line\">    Dog <span class=\"keyword\">is</span> running...</div><div class=\"line\">    Dog <span class=\"keyword\">is</span> running...</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; run_twice(Cat())</div><div class=\"line\">    Cat <span class=\"keyword\">is</span> running...</div><div class=\"line\">    Cat <span class=\"keyword\">is</span> running...</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span><span class=\"params\">(object)</span>:</span> <span class=\"comment\">#验证动态语言在多态上的差别</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'Start...'</span>)</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; run_twice(Timer())</div><div class=\"line\">    Start...</div><div class=\"line\">    Start...</div></pre></td></tr></table></figure>\n<p>多态：调用方只管调用，不用管细节，<strong>开闭原则：</strong></p>\n<ul>\n<li>对扩展开放：允许新增<code>Animal</code>子类；</li>\n<li>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice</code>函数</li>\n</ul>\n<p><strong>静态语言Vs动态语言</strong> 在多态上的表现差别：</p>\n<ul>\n<li>静态语言（如C++）来说，如果传入的是<code>Animal</code>类型，传入的对象必须是<code>Animal</code>类型或者是它的子类型，否则无法调用<code>run()</code>方法；</li>\n<li>动态语言（如Python）来说，不一定需要传入<code>Animal</code>类型或者子类型，只需要保证传入的对象有<code>run()</code>方法。</li>\n<li>比如类<code>Timeir</code>可以调用<code>run_twice</code>,这个就是动态语言的鸭子类型，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就被视作鸭子</li>\n<li>Python中的“file-like object”就是一种鸭子类型。</li>\n</ul>\n<h2 id=\"获取对象信息（使用常见函数）\"><a href=\"#获取对象信息（使用常见函数）\" class=\"headerlink\" title=\"获取对象信息（使用常见函数）\"></a>获取对象信息（使用常见函数）</h2><ul>\n<li><p>type(): <strong>基本类型（int，str）、一个变量指向的函数或类（上例子中的Animal）</strong> 可以使用type()函数判断，返回的是对应的<code>Class</code>类型</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</div><div class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> '<span class=\"title\">__main__</span>.<span class=\"title\">Animal</span>'&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>isinstance(): 判断<code>class</code>的类型，也可以判断一个变量是否是某些类型中的一种</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],list)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),tuple)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>isinstance((<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),(tuple,list))</div></pre></td></tr></table></figure>\n</li>\n<li><p>dir(): 可以获取一个对象的所有属性和方法，返回一个包含字符串的list;</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dir(li)</div><div class=\"line\">[<span class=\"string\">'_Student__name'</span>, <span class=\"string\">'_Student__score'</span>, <span class=\"string\">'__class__'</span>, <span class=\"string\">'__delattr__'</span>, <span class=\"string\">'__dict__'</span>, <span class=\"string\">'__dir__'</span>, <span class=\"string\">'__doc__'</span>, <span class=\"string\">'__eq__'</span>, <span class=\"string\">'__format__'</span>, <span class=\"string\">'__ge__'</span>, <span class=\"string\">'__getattribute__'</span>, <span class=\"string\">'__gt__'</span>, <span class=\"string\">'__hash__'</span>, <span class=\"string\">'__init__'</span>, <span class=\"string\">'__le__'</span>, <span class=\"string\">'__lt__'</span>, <span class=\"string\">'__module__'</span>, <span class=\"string\">'__ne__'</span>, <span class=\"string\">'__new__'</span>, <span class=\"string\">'__reduce__'</span>, <span class=\"string\">'__reduce_ex__'</span>, <span class=\"string\">'__repr__'</span>, <span class=\"string\">'__setattr__'</span>, <span class=\"string\">'__sizeof__'</span>, <span class=\"string\">'__str__'</span>, <span class=\"string\">'__subclasshook__'</span>, <span class=\"string\">'__weakref__'</span>, <span class=\"string\">'get_name'</span>, <span class=\"string\">'get_score'</span>, <span class=\"string\">'set_name'</span>, <span class=\"string\">'set_score'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>其他方法<br>可以配合使用<code>getattr()、setattr()、hasattr()</code>来操作一个对象的状态</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(li,<span class=\"string\">'__name'</span>)</div><div class=\"line\"><span class=\"keyword\">False</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(li,<span class=\"string\">'_Student__name'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hasattr(li,<span class=\"string\">'set_score'</span>)</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(li,<span class=\"string\">'_Student__name'</span>)</div><div class=\"line\"><span class=\"string\">'li'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>setattr(li,<span class=\"string\">'_Student__name'</span>,<span class=\"string\">'Cheng'</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>getattr(li,<span class=\"string\">'_Student__name'</span>)</div><div class=\"line\"><span class=\"string\">'Cheng'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"类属性和实例属性\"><a href=\"#类属性和实例属性\" class=\"headerlink\" title=\"类属性和实例属性\"></a>类属性和实例属性</h2><ul>\n<li>给实例绑定属性的方法：通过实例变量或者<code>self</code>变量</li>\n<li>给类本身绑定属性：直接在class中定义属性，这种属性是类属性，归该类所有，但类的所有实例都可以访问</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &gt;&gt;&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">... </span>    name=<span class=\"string\">'Animal'</span> <span class=\"comment\">#类属性</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dog=Animal()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(dog.name)</div><div class=\"line\">Animal</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Animal.name)</div><div class=\"line\">Animal</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dog.name=<span class=\"string\">'Dog'</span> <span class=\"comment\">#使用实例绑定name属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(dog.name)<span class=\"comment\">#实例同名属性比类属性优先级高，因此会屏蔽掉类属性</span></div><div class=\"line\">Dog</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(Animal.name)</div><div class=\"line\">Animal</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">del</span> dog.name <span class=\"comment\">#删除实例的name属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(dog.name)</div><div class=\"line\">Animal</div><div class=\"line\">&gt;&gt;&gt;</div><div class=\"line\"></div><div class=\"line\">Note：编写程序的时候尽量避免实例属性和类属性使用相同的名字，否则实例属性将会屏蔽类属性，得到意想不到的结果。</div></pre></td></tr></table></figure>\n<h1 id=\"面向对象高级编程\"><a href=\"#面向对象高级编程\" class=\"headerlink\" title=\"面向对象高级编程\"></a>面向对象高级编程</h1><ul>\n<li>动态语言的灵活性：定义一个class，并创建一个class实例后，可以对该实例绑定任何属性和方法(只作用在该实例)；也可以给class绑定一个方法或者属性，对该class的所有实例起作用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">s=Student()</div><div class=\"line\">s.name=<span class=\"string\">'Michael'</span> <span class=\"comment\">#动态给实例绑定属性</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s.name)</div><div class=\"line\">Michael</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_age</span><span class=\"params\">(self,age)</span>:</span></div><div class=\"line\">    self.age=age</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> MethodType</div><div class=\"line\">s.set_age=MethodType(set_age,s) <span class=\"comment\">#给实例动态绑定一个方法</span></div><div class=\"line\">s.set_age(<span class=\"number\">18</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.age</div><div class=\"line\"><span class=\"number\">18</span></div><div class=\"line\"></div><div class=\"line\">s2=Student() <span class=\"comment\">#创建新的实例，测试是否s的属性是否存在于s2</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(s2.name)</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">AttributeError: <span class=\"string\">'Student'</span> object has no attribute <span class=\"string\">'name'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2.set_age(<span class=\"number\">19</span>)</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">AttributeError: <span class=\"string\">'Student'</span> object has no attribute <span class=\"string\">'set_age'</span></div><div class=\"line\"></div><div class=\"line\">Student.set_age=set_age <span class=\"comment\">#给class绑定方法，该方法对student的所有实例起作用</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2.set_age(<span class=\"number\">19</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s2.age</div><div class=\"line\"><span class=\"number\">19</span></div></pre></td></tr></table></figure>\n<ul>\n<li>使用<code>__slots__</code>限制实例的属性: 例如只允许对<code>Student</code>实例添加<code>name</code>和<code>age</code>属性，可以在定义<code>Student</code>class的时候，使用<strong>slots</strong>，要注意的是，使用该方法定义的属性只对 <strong>当前类的实例</strong> 起作用，对继承的子类不起作用</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    __slots__=(<span class=\"string\">'name'</span>,<span class=\"string\">'age'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s=Student()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.name=<span class=\"string\">'li'</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.age=<span class=\"number\">25</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.score=<span class=\"number\">100</span> <span class=\"comment\">#报错，无法绑定属性score</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">AttributeError: <span class=\"string\">'Student'</span> object has no attribute <span class=\"string\">'score'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostGraduateStudent</span><span class=\"params\">(Student)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g=PostGraduateStudent()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g.score=<span class=\"number\">100</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g.score</div><div class=\"line\"><span class=\"number\">100</span></div></pre></td></tr></table></figure>\n<h2 id=\"装饰器-property\"><a href=\"#装饰器-property\" class=\"headerlink\" title=\"装饰器@property\"></a>装饰器@property</h2><p>实现既能检查参数，又可以用类似属性的方式来访问类的变量,如下例，可以直接使用<code>s.score=90</code>的方式来设置属性，并且可以有限制。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"><span class=\"meta\">    @property  #相当于get_score方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._score</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @score.setter #相当于set_score方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value,int):</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must be an integer!'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> value&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> value&gt;<span class=\"number\">100</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'score must between 0~100!'</span>)</div><div class=\"line\">        self._score=value</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s=Student()</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.score=<span class=\"number\">100</span> <span class=\"comment\">#实际上转化为s.set_score(100)</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.score <span class=\"comment\">#实际转化为s.get_score()</span></div><div class=\"line\"><span class=\"number\">100</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s.score=<span class=\"string\">'haha'</span><span class=\"comment\">#起到了限制属性的作用</span></div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">9</span>, <span class=\"keyword\">in</span> score</div><div class=\"line\">ValueError: score must be an integer!</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#使用@property还可以定义只读属性，也就是只定义getter方法，不定义setter方法。</span></div><div class=\"line\"><span class=\"meta\">    @property #birth含有可读写属性</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">birth</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._birth</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @birth.setter</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">birth</span><span class=\"params\">(self,value)</span>:</span></div><div class=\"line\">        self._birth=value</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @property #age就只有一个只读属性，只有getter方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">age</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2017</span>-self._birth</div></pre></td></tr></table></figure>\n<h2 id=\"多重继承（MixIn）\"><a href=\"#多重继承（MixIn）\" class=\"headerlink\" title=\"多重继承（MixIn）\"></a>多重继承（MixIn）</h2><p>主线用正常的方式继承，副线用MixIn继承（只是起个名字而已,加在后面），如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Mammal,RunnableMixIn,CarnivorousMixIn)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"定制类\"><a href=\"#定制类\" class=\"headerlink\" title=\"定制类\"></a>定制类</h2><p>Python中，<strong>[<strong>xxx</strong>]</strong> 类似于这样的变量或者函数名，在Python中有特殊用途，可以用来定制类，定制类中各种返回的特殊值。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#这个有点类似于java中的toString方法</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'Student object (name: %s)'</span> %self.name</div><div class=\"line\">    __repr__=__str__ <span class=\"comment\">#两者的区别是，__str__返回用户看到的数据，__repr__返回开发者看到的数据，是为调试服务的。</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span><span class=\"comment\">#实现对实例本身的调用，返回相应的属性。即可以将实例看做是一个函数进行调用。</span></div><div class=\"line\">    print(<span class=\"string\">'My name is %s.'</span> %self.name)</div><div class=\"line\"></div><div class=\"line\">    &gt;&gt;&gt; print(Student(<span class=\"string\">'Li'</span>))</div><div class=\"line\">    Student object (name: Li)</div><div class=\"line\">    &gt;&gt;&gt; s=Student(<span class=\"string\">'Li'</span>)</div><div class=\"line\">    &gt;&gt;&gt; s</div><div class=\"line\">    Student object (name: Li)</div><div class=\"line\">    &gt;&gt;&gt; s()</div><div class=\"line\">    My name <span class=\"keyword\">is</span> Li.</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fib</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.a,self.b=<span class=\"number\">0</span>,<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span> <span class=\"comment\">#定义迭代器的方法，可以使用for...in循环</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.a, self.b= self.b, self.a+self.b <span class=\"comment\">#计算下一个值，本身进行迭代</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.a&gt;<span class=\"number\">10000</span>:</div><div class=\"line\">            <span class=\"keyword\">raise</span> StopIteration()</div><div class=\"line\">        <span class=\"keyword\">return</span> self.a</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self,n)</span>:</span> <span class=\"comment\">#定义getitem方法，实现像list一样按照下标取出元素</span></div><div class=\"line\">        a,b=<span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">            a,b=b,a+b</div><div class=\"line\">        <span class=\"keyword\">return</span> a</div><div class=\"line\"></div><div class=\"line\">            &gt;&gt;&gt; <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> Fib():</div><div class=\"line\">            ...     print(n)</div><div class=\"line\">            ...</div><div class=\"line\">            <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"number\">2</span></div><div class=\"line\">            <span class=\"number\">3</span></div><div class=\"line\">            <span class=\"number\">5</span></div><div class=\"line\">            <span class=\"number\">8</span></div><div class=\"line\">            <span class=\"number\">13</span></div><div class=\"line\">            <span class=\"number\">21</span></div><div class=\"line\">            <span class=\"number\">34</span></div><div class=\"line\">            <span class=\"number\">55</span></div><div class=\"line\">            <span class=\"number\">89</span></div><div class=\"line\">            <span class=\"number\">144</span></div><div class=\"line\">            <span class=\"number\">233</span></div><div class=\"line\">            <span class=\"number\">377</span></div><div class=\"line\">            <span class=\"number\">610</span></div><div class=\"line\">            <span class=\"number\">987</span></div><div class=\"line\">            <span class=\"number\">1597</span></div><div class=\"line\">            <span class=\"number\">2584</span></div><div class=\"line\">            <span class=\"number\">4181</span></div><div class=\"line\">            <span class=\"number\">6765</span></div><div class=\"line\">            &gt;&gt;&gt; f=Fib()</div><div class=\"line\">            &gt;&gt;&gt; f[<span class=\"number\">10</span>]</div><div class=\"line\">            <span class=\"number\">89</span></div><div class=\"line\">            &gt;&gt;&gt; f[<span class=\"number\">100</span>]</div><div class=\"line\">            <span class=\"number\">573147844013817084101</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self,n)</span>:</span> <span class=\"comment\">#定义带有切片的getitem方法，可以使用f[1:5]切片取元素，返回一个list</span></div><div class=\"line\">                <span class=\"keyword\">if</span> isinstance(n,int):</div><div class=\"line\">                    a,b=<span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">                    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n):</div><div class=\"line\">                        a,b=b,a+b</div><div class=\"line\">                    <span class=\"keyword\">return</span> a</div><div class=\"line\">                <span class=\"keyword\">if</span> isinstance(n,slice):</div><div class=\"line\">                    <span class=\"keyword\">if</span> n.start <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                        n.start=<span class=\"number\">0</span></div><div class=\"line\">                    a ,b=<span class=\"number\">1</span>,<span class=\"number\">1</span></div><div class=\"line\">                    L=[]</div><div class=\"line\">                    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(n.stop):</div><div class=\"line\">                        <span class=\"keyword\">if</span> x&gt;n.start:</div><div class=\"line\">                            L.append(a)</div><div class=\"line\">                        a,b=b,a+b</div><div class=\"line\">                    <span class=\"keyword\">return</span> L</div><div class=\"line\"></div><div class=\"line\">            &gt;&gt;&gt; f=Fib()</div><div class=\"line\">            &gt;&gt;&gt; f[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</div><div class=\"line\">            [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"使用枚举类（Enum）\"><a href=\"#使用枚举类（Enum）\" class=\"headerlink\" title=\"使用枚举类（Enum）\"></a>使用枚举类（Enum）</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">from enum import Enum</div><div class=\"line\">Month=Enum('Month',('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'))</div><div class=\"line\"></div><div class=\"line\">&gt;&gt;&gt; for name,member in Month.__members__.items():</div><div class=\"line\">...     print(name,'=&gt;',member,',',member.value)</div><div class=\"line\">...</div><div class=\"line\">Jan =&gt; Month.Jan , 1 #value值默认从1开始计数，也可以通过value值来获取枚举常亮，如果改变，则按照顺序增长。</div><div class=\"line\">Feb =&gt; Month.Feb , 2</div><div class=\"line\">Mar =&gt; Month.Mar , 3</div><div class=\"line\">Apr =&gt; Month.Apr , 4</div><div class=\"line\">May =&gt; Month.May , 5</div><div class=\"line\">Jun =&gt; Month.Jun , 6</div><div class=\"line\">Jul =&gt; Month.Jul , 7</div><div class=\"line\">Aug =&gt; Month.Aug , 8</div><div class=\"line\">Sep =&gt; Month.Sep , 9</div><div class=\"line\">Oct =&gt; Month.Oct , 10</div><div class=\"line\">Nov =&gt; Month.Nov , 11</div><div class=\"line\">Dec =&gt; Month.Dec , 12</div></pre></td></tr></table></figure>\n<h2 id=\"使用元类（metaclass）\"><a href=\"#使用元类（metaclass）\" class=\"headerlink\" title=\"使用元类（metaclass）\"></a>使用元类（metaclass）</h2><ul>\n<li>type()函数：可以使用该函数返回一个对象类型，也可以创建出新的类型。<br>要创建一个class对象，<code>type()</code>依次传入三个参数：</li>\n</ul>\n<ol>\n<li>class的名称</li>\n<li>继承的父类集合，如果只有一个父类，需要在该父类后加逗号（tuple的单元素写发）</li>\n<li>class的方法名称和函数的绑定。下例中是函数fn绑定在方法名hello上。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn</span><span class=\"params\">(self,name=<span class=\"string\">'world'</span>)</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'Hello,%s.'</span>%name)</div><div class=\"line\"></div><div class=\"line\">Hello=type(<span class=\"string\">'Hello'</span>,(object,),dict(hello=fn))</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>metaclass:<br>称为元类，先定义metaclass，然后创建类。可以把类看成是metaclass创建出来的“实例”。按照习惯，metaclass的类名总是以Metaclass结尾，表示这个是一个metaclass。<strong>先定义metaclass，就可以创建类，然后创建实例</strong><br>讲的比较详细的看<a href=\"https://funhacks.net/2016/11/12/metaclass/\" target=\"_blank\" rel=\"external\">链接</a></li>\n</ul>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143186738532805c392f2cc09446caf3236c34e3f980f000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>"},{"title":"Python基础学习之[高级特性]","copyright":true,"date":"2017-07-08T12:12:10.000Z","_content":"# 高级特性\n在Python中，代码越少越好，越简单越好，对于高级语言来说，代码行数越少，开发效率执行效率越高。\n\n## 切片（slice）\n对于list，可以使用 L[0:3] 表示 从索引0开始，直到索引3，不包含3，即L[0],L[1],L[3],如果第一个索引为0，可以忽略，即可以写成L[:3]. **倒数第一个的序号为-1**.\n类似与matlab中的语法，可以直接使用范围的下标。\nL[0:10:2] //这个和matlab有区别，这个步长是2，范围是0到10（不包含10），中间的是尾部\ntuple也是类似的情况，tuple可以是字符串，是不可变的，然后可以使用切片，截取字符串。\n<!--more-->\n\n## 迭代（iteration）\n对于dic中的数据，可以使用下列方式进行迭代：\n\n```python\nd={'a':1, 'b':2, 'c':3}\n>>for key in d: #只迭代key出来\n    print(key)\n\nfor value in d.values(): #迭代values出来\n    print(value)\n\nfor k,v in d.items(): #迭代key和values出来\n    print(k,v)\n\n for i,value in enumerate(['A','B','C']): #对list实现下标循环\n    print(i,value)\n```\n\n## 列表生成式（List Comprehensions）\n\n```python\n[1x1, 2x2, 3x3, ..., 10x10]\n>>>L=[]  #方法一\n>>>for x in range(1,11):\n    L.append(x*x)\n\n>>>[x*x for x in range(1,11)] #方法二，直接使用列表生成器\n\n>>>[x*x for x in range(1,11) if x%2==0] #也可以在for后面添加各种判断条件\n\n```\n\n## 生成器（generator）\npython中一边循环一边计算的机制，称为生成器：generator。\n在循环过程中不断推出后续的元素，可以不必创建完整的list，节省大量的空间。生成器中的元素应该使用for循环打印出来。\nlist中，可以将列表生成式中的 [] 改成（），相应的就创建了generator。\n\n```python\n>>> g = (x * x for x in range(10))\n>>> g\n<generator object <genexpr> at 0x1022ef630>\n\n如果有递推关系的函数，也可以使用生成器的概念\n\ndef fib(maxd):\n    n,a,b=0,0,1\n    while n<maxd:\n        yield b #作用是替代 print b。\n        a,b=b,a+b\n        n=n+1\n    return 'done'\n\n>>> f =fib(6)\n>>> f\n<generator object fib at 0x000000181D458AF0>\n\nfor n in f: #使用for循环打印出来\n...     print(n)\n\n想要获得return 'done'的返回值，必须捕获StopIneration错误，返回值在StopIteration的value中\n\ng= fib(6)\nwhile True:\n    try:\n        x=next(g)\n        print(x)\n    except StopIteration as e:\n        print(e.value)\n        break\n\n```\ngenerator来说，遇到return语句或者执行到函数体最后一行语句，就是结束generator的指令，for循环随之结束。\n\n## 迭代器（iterator)\n\n可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。\n\n可以使用isinstance()判断一个对象是否是Iterator对象。\n\n## 小结\n\n- 凡是可作用于for循环的对象都是Iterable类型；\n\n- 凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；\n\n集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。\n\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317568446245b3e1c8837414168bcd2d485e553779e000)\n","source":"_posts/Python基础学习之-高级特性.md","raw":"---\ntitle: 'Python基础学习之[高级特性]'\ncopyright: true\ndate: 2017-07-08 20:12:10\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n# 高级特性\n在Python中，代码越少越好，越简单越好，对于高级语言来说，代码行数越少，开发效率执行效率越高。\n\n## 切片（slice）\n对于list，可以使用 L[0:3] 表示 从索引0开始，直到索引3，不包含3，即L[0],L[1],L[3],如果第一个索引为0，可以忽略，即可以写成L[:3]. **倒数第一个的序号为-1**.\n类似与matlab中的语法，可以直接使用范围的下标。\nL[0:10:2] //这个和matlab有区别，这个步长是2，范围是0到10（不包含10），中间的是尾部\ntuple也是类似的情况，tuple可以是字符串，是不可变的，然后可以使用切片，截取字符串。\n<!--more-->\n\n## 迭代（iteration）\n对于dic中的数据，可以使用下列方式进行迭代：\n\n```python\nd={'a':1, 'b':2, 'c':3}\n>>for key in d: #只迭代key出来\n    print(key)\n\nfor value in d.values(): #迭代values出来\n    print(value)\n\nfor k,v in d.items(): #迭代key和values出来\n    print(k,v)\n\n for i,value in enumerate(['A','B','C']): #对list实现下标循环\n    print(i,value)\n```\n\n## 列表生成式（List Comprehensions）\n\n```python\n[1x1, 2x2, 3x3, ..., 10x10]\n>>>L=[]  #方法一\n>>>for x in range(1,11):\n    L.append(x*x)\n\n>>>[x*x for x in range(1,11)] #方法二，直接使用列表生成器\n\n>>>[x*x for x in range(1,11) if x%2==0] #也可以在for后面添加各种判断条件\n\n```\n\n## 生成器（generator）\npython中一边循环一边计算的机制，称为生成器：generator。\n在循环过程中不断推出后续的元素，可以不必创建完整的list，节省大量的空间。生成器中的元素应该使用for循环打印出来。\nlist中，可以将列表生成式中的 [] 改成（），相应的就创建了generator。\n\n```python\n>>> g = (x * x for x in range(10))\n>>> g\n<generator object <genexpr> at 0x1022ef630>\n\n如果有递推关系的函数，也可以使用生成器的概念\n\ndef fib(maxd):\n    n,a,b=0,0,1\n    while n<maxd:\n        yield b #作用是替代 print b。\n        a,b=b,a+b\n        n=n+1\n    return 'done'\n\n>>> f =fib(6)\n>>> f\n<generator object fib at 0x000000181D458AF0>\n\nfor n in f: #使用for循环打印出来\n...     print(n)\n\n想要获得return 'done'的返回值，必须捕获StopIneration错误，返回值在StopIteration的value中\n\ng= fib(6)\nwhile True:\n    try:\n        x=next(g)\n        print(x)\n    except StopIteration as e:\n        print(e.value)\n        break\n\n```\ngenerator来说，遇到return语句或者执行到函数体最后一行语句，就是结束generator的指令，for循环随之结束。\n\n## 迭代器（iterator)\n\n可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。\n\n可以使用isinstance()判断一个对象是否是Iterator对象。\n\n## 小结\n\n- 凡是可作用于for循环的对象都是Iterable类型；\n\n- 凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；\n\n集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。\n\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317568446245b3e1c8837414168bcd2d485e553779e000)\n","slug":"Python基础学习之-高级特性","published":1,"updated":"2017-07-09T12:32:45.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c7k00164ov1q63w0gpf","content":"<h1 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h1><p>在Python中，代码越少越好，越简单越好，对于高级语言来说，代码行数越少，开发效率执行效率越高。</p>\n<h2 id=\"切片（slice）\"><a href=\"#切片（slice）\" class=\"headerlink\" title=\"切片（slice）\"></a>切片（slice）</h2><p>对于list，可以使用 L[0:3] 表示 从索引0开始，直到索引3，不包含3，即L[0],L[1],L[3],如果第一个索引为0，可以忽略，即可以写成L[:3]. <strong>倒数第一个的序号为-1</strong>.<br>类似与matlab中的语法，可以直接使用范围的下标。<br>L[0:10:2] //这个和matlab有区别，这个步长是2，范围是0到10（不包含10），中间的是尾部<br>tuple也是类似的情况，tuple可以是字符串，是不可变的，然后可以使用切片，截取字符串。<br><a id=\"more\"></a></p>\n<h2 id=\"迭代（iteration）\"><a href=\"#迭代（iteration）\" class=\"headerlink\" title=\"迭代（iteration）\"></a>迭代（iteration）</h2><p>对于dic中的数据，可以使用下列方式进行迭代：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">d=&#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</div><div class=\"line\">&gt;&gt;<span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> d: <span class=\"comment\">#只迭代key出来</span></div><div class=\"line\">    print(key)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> d.values(): <span class=\"comment\">#迭代values出来</span></div><div class=\"line\">    print(value)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> d.items(): <span class=\"comment\">#迭代key和values出来</span></div><div class=\"line\">    print(k,v)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">for</span> i,value <span class=\"keyword\">in</span> enumerate([<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>]): <span class=\"comment\">#对list实现下标循环</span></div><div class=\"line\">    print(i,value)</div></pre></td></tr></table></figure>\n<h2 id=\"列表生成式（List-Comprehensions）\"><a href=\"#列表生成式（List-Comprehensions）\" class=\"headerlink\" title=\"列表生成式（List Comprehensions）\"></a>列表生成式（List Comprehensions）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>x1, <span class=\"number\">2</span>x2, <span class=\"number\">3</span>x3, ..., <span class=\"number\">10</span>x10]</div><div class=\"line\">&gt;&gt;&gt;L=[]  <span class=\"comment\">#方法一</span></div><div class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">11</span>):</div><div class=\"line\">    L.append(x*x)</div><div class=\"line\"></div><div class=\"line\">&gt;&gt;&gt;[x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">11</span>)] <span class=\"comment\">#方法二，直接使用列表生成器</span></div><div class=\"line\"></div><div class=\"line\">&gt;&gt;&gt;[x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>] <span class=\"comment\">#也可以在for后面添加各种判断条件</span></div></pre></td></tr></table></figure>\n<h2 id=\"生成器（generator）\"><a href=\"#生成器（generator）\" class=\"headerlink\" title=\"生成器（generator）\"></a>生成器（generator）</h2><p>python中一边循环一边计算的机制，称为生成器：generator。<br>在循环过程中不断推出后续的元素，可以不必创建完整的list，节省大量的空间。生成器中的元素应该使用for循环打印出来。<br>list中，可以将列表生成式中的 [] 改成（），相应的就创建了generator。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g = (x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g</div><div class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x1022ef630</span>&gt;</div><div class=\"line\"></div><div class=\"line\">如果有递推关系的函数，也可以使用生成器的概念</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(maxd)</span>:</span></div><div class=\"line\">    n,a,b=<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n&lt;maxd:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b <span class=\"comment\">#作用是替代 print b。</span></div><div class=\"line\">        a,b=b,a+b</div><div class=\"line\">        n=n+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'done'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f =fib(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f</div><div class=\"line\">&lt;generator object fib at <span class=\"number\">0x000000181D458AF0</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> f: <span class=\"comment\">#使用for循环打印出来</span></div><div class=\"line\"><span class=\"meta\">... </span>    print(n)</div><div class=\"line\"></div><div class=\"line\">想要获得<span class=\"keyword\">return</span> <span class=\"string\">'done'</span>的返回值，必须捕获StopIneration错误，返回值在StopIteration的value中</div><div class=\"line\"></div><div class=\"line\">g= fib(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        x=next(g)</div><div class=\"line\">        print(x)</div><div class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</div><div class=\"line\">        print(e.value)</div><div class=\"line\">        <span class=\"keyword\">break</span></div></pre></td></tr></table></figure>\n<p>generator来说，遇到return语句或者执行到函数体最后一行语句，就是结束generator的指令，for循环随之结束。</p>\n<h2 id=\"迭代器（iterator\"><a href=\"#迭代器（iterator\" class=\"headerlink\" title=\"迭代器（iterator)\"></a>迭代器（iterator)</h2><p>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。</p>\n<p>可以使用isinstance()判断一个对象是否是Iterator对象。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>凡是可作用于for循环的对象都是Iterable类型；</p>\n</li>\n<li><p>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；</p>\n</li>\n</ul>\n<p>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317568446245b3e1c8837414168bcd2d485e553779e000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h1><p>在Python中，代码越少越好，越简单越好，对于高级语言来说，代码行数越少，开发效率执行效率越高。</p>\n<h2 id=\"切片（slice）\"><a href=\"#切片（slice）\" class=\"headerlink\" title=\"切片（slice）\"></a>切片（slice）</h2><p>对于list，可以使用 L[0:3] 表示 从索引0开始，直到索引3，不包含3，即L[0],L[1],L[3],如果第一个索引为0，可以忽略，即可以写成L[:3]. <strong>倒数第一个的序号为-1</strong>.<br>类似与matlab中的语法，可以直接使用范围的下标。<br>L[0:10:2] //这个和matlab有区别，这个步长是2，范围是0到10（不包含10），中间的是尾部<br>tuple也是类似的情况，tuple可以是字符串，是不可变的，然后可以使用切片，截取字符串。<br>","more":"</p>\n<h2 id=\"迭代（iteration）\"><a href=\"#迭代（iteration）\" class=\"headerlink\" title=\"迭代（iteration）\"></a>迭代（iteration）</h2><p>对于dic中的数据，可以使用下列方式进行迭代：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">d=&#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>, <span class=\"string\">'b'</span>:<span class=\"number\">2</span>, <span class=\"string\">'c'</span>:<span class=\"number\">3</span>&#125;</div><div class=\"line\">&gt;&gt;<span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> d: <span class=\"comment\">#只迭代key出来</span></div><div class=\"line\">    print(key)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> d.values(): <span class=\"comment\">#迭代values出来</span></div><div class=\"line\">    print(value)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> d.items(): <span class=\"comment\">#迭代key和values出来</span></div><div class=\"line\">    print(k,v)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">for</span> i,value <span class=\"keyword\">in</span> enumerate([<span class=\"string\">'A'</span>,<span class=\"string\">'B'</span>,<span class=\"string\">'C'</span>]): <span class=\"comment\">#对list实现下标循环</span></div><div class=\"line\">    print(i,value)</div></pre></td></tr></table></figure>\n<h2 id=\"列表生成式（List-Comprehensions）\"><a href=\"#列表生成式（List-Comprehensions）\" class=\"headerlink\" title=\"列表生成式（List Comprehensions）\"></a>列表生成式（List Comprehensions）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"number\">1</span>x1, <span class=\"number\">2</span>x2, <span class=\"number\">3</span>x3, ..., <span class=\"number\">10</span>x10]</div><div class=\"line\">&gt;&gt;&gt;L=[]  <span class=\"comment\">#方法一</span></div><div class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">11</span>):</div><div class=\"line\">    L.append(x*x)</div><div class=\"line\"></div><div class=\"line\">&gt;&gt;&gt;[x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">11</span>)] <span class=\"comment\">#方法二，直接使用列表生成器</span></div><div class=\"line\"></div><div class=\"line\">&gt;&gt;&gt;[x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">11</span>) <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>] <span class=\"comment\">#也可以在for后面添加各种判断条件</span></div></pre></td></tr></table></figure>\n<h2 id=\"生成器（generator）\"><a href=\"#生成器（generator）\" class=\"headerlink\" title=\"生成器（generator）\"></a>生成器（generator）</h2><p>python中一边循环一边计算的机制，称为生成器：generator。<br>在循环过程中不断推出后续的元素，可以不必创建完整的list，节省大量的空间。生成器中的元素应该使用for循环打印出来。<br>list中，可以将列表生成式中的 [] 改成（），相应的就创建了generator。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g = (x * x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>g</div><div class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x1022ef630</span>&gt;</div><div class=\"line\"></div><div class=\"line\">如果有递推关系的函数，也可以使用生成器的概念</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib</span><span class=\"params\">(maxd)</span>:</span></div><div class=\"line\">    n,a,b=<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">while</span> n&lt;maxd:</div><div class=\"line\">        <span class=\"keyword\">yield</span> b <span class=\"comment\">#作用是替代 print b。</span></div><div class=\"line\">        a,b=b,a+b</div><div class=\"line\">        n=n+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'done'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f =fib(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f</div><div class=\"line\">&lt;generator object fib at <span class=\"number\">0x000000181D458AF0</span>&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> f: <span class=\"comment\">#使用for循环打印出来</span></div><div class=\"line\"><span class=\"meta\">... </span>    print(n)</div><div class=\"line\"></div><div class=\"line\">想要获得<span class=\"keyword\">return</span> <span class=\"string\">'done'</span>的返回值，必须捕获StopIneration错误，返回值在StopIteration的value中</div><div class=\"line\"></div><div class=\"line\">g= fib(<span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        x=next(g)</div><div class=\"line\">        print(x)</div><div class=\"line\">    <span class=\"keyword\">except</span> StopIteration <span class=\"keyword\">as</span> e:</div><div class=\"line\">        print(e.value)</div><div class=\"line\">        <span class=\"keyword\">break</span></div></pre></td></tr></table></figure>\n<p>generator来说，遇到return语句或者执行到函数体最后一行语句，就是结束generator的指令，for循环随之结束。</p>\n<h2 id=\"迭代器（iterator\"><a href=\"#迭代器（iterator\" class=\"headerlink\" title=\"迭代器（iterator)\"></a>迭代器（iterator)</h2><p>可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。</p>\n<p>可以使用isinstance()判断一个对象是否是Iterator对象。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>凡是可作用于for循环的对象都是Iterable类型；</p>\n</li>\n<li><p>凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列；</p>\n</li>\n</ul>\n<p>集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317568446245b3e1c8837414168bcd2d485e553779e000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>"},{"title":"Python基础学习之[高阶函数]","copyright":true,"date":"2017-07-09T12:26:54.000Z","_content":"# 函数式编程（Function Programming）\n它是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用，而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能就得到不同的输出，因此，这种函数是有副作用的。 Python不是纯函数式编程语言，允许使用变量。\n函数式编程的一个最大的特点是允许函数本身作为参数传入另一个函数中，还允许返回一个函数。\n<!--more-->\n\n## 高阶函数\n\n函数名也是变量，函数名其实就是指向函数的变量。\n把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。\n\n```python\ndef add(x,y,f):\n    return f(x)+f(y)\n\n>>>add(-5,-6,abs) #将函数名作为参数传入定义的函数中\n>>>11\n```\n\n## map/reduce\n\n**map**\n```python\ndef f(x):\n    return x*x\n\n>>> r=map(f,[1,2,3,4,5]) #表示的是将传入的函数依次作用到序列的每一个元素，这个就是map的作用。此时r是一个Iterator，Iterator是惰性序列，可以通过list()函数让它把整个序列都计算出来返回到一个list\n>>> list(r)\n[1, 4, 9, 16, 25]\n\n```\n\n**reduce**\nreduce 把一个函数作用在一个序列 [x1,x2,x3,x4]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，效果如下：\n\n`reduce(f,[x1,x2,x3,x4])=f(f(f(x1,x2),x3),x4)`\n\n```python\nfrom functools import reduce\ndef str2int(s):\n\n    def fn(x,y):\n        return x*10+y\n\n    def char2num(s):\n        return {'0':0,'1':1,'2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}[s]\n\n    return reduce(fn,map(char2num,s)) #可以使用reduce和map一起，写一个str2int函数\n\n       # 可以用lambda函数优化，reduce（lambda x，y：x*10+y，map（char2num,s））\n\nlambda x,y:x*10+y 表示的是以x，y为输入，x*10+y为输出返回，它的主体是一个表达式，，不是代码块，起到函数速写的作用。\n\n```\n\n**map和reduce的综合应用**\n```python\ndef str2float(s):\n    def char2num(s):\n        return {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}[s]\n    if '.' in s:\n        L=s.split('.')\n        left_part=reduce(lambda x,y:x*10+y,map(char2num,L[0]))\n        # 123.456\n        right_part=reduce(lambda x,y:x/10+y,map(char2num,L[1][::-1]))/10\n        return left_part + right_part\n    else:\n        return reduce(lambda x,y:x*10+y,map(char2num,s))\n\n\n```\n\n## filter()\n用于过滤序列，和map()类似，把传入的函数依次作用于每个元素，然后根据返回值是True 或者是false决定保留还是丢弃该元素，也就是说传入的函数返回值是true或者false，该传入的函数是筛选函数。filter()函数返回的是一个Iterator，是一个惰性序列，需要list（）返回所有结果。\n\n```python\ndef _odd_iter(): #求素数\n    n=1;\n    while True:\n        n=n+1\n        yield n\n\ndef _not_divisible(n):\n    return lambda x:x%n>0\n\ndef primes():\n    sequence=_odd_iter()\n    while True:\n        n=next(sequence)\n        yield n\n        sequence=filter(_not_divisible(n),sequence) #使用过滤函数，将2,3,5.。。的倍数去掉\n\nfor n in primes():\n    if n<1000:\n        print(n)\n    else:\n        break\n```\n\n## sorted()\n排序函数，是一个高阶函数，可以接收一个key函数来实现自定义排序\n\n```Python\n>>> sorted([-32,5,-6,-12,9,-20],key=abs)\n[5, -6, 9, -12, -20, -32] #key代表排序函数，不能替换成其他字符。\n\n>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower) #忽略大小写\n['about', 'bob', 'Credit', 'Zoo']\n\n>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)\n['Zoo', 'Credit', 'bob', 'about']  #反向排序\n```\n\n# 返回函数\n高阶函数既可以接受函数作为参数，也可以把函数作为结果值返回。\n\n```python\n\ndef layz_sum(*args):\n    def sum():\n        ax=0\n        for n in args:\n            ax=ax=n\n        return ax\n    return sum\n\nf=layz_sum(1,2,3,4)\nf()        \n```\n# 匿名函数\n\n关键字lambda表示匿名函数，`lambda x:x*x`表示的是：\n\n```python\n\ndef f(x):\n    return x*x\n```\n\n匿名函数的好处是，函数没有名字，不用担心函数名冲突，不用写return，冒号后面的就是返回值，匿名函数也是一个函数对象，可以赋值给一个变量，利用变量来调用函数。每个函数对象\n\n# 装饰器(Decorator)\n\n代码运行期间动态增加功能的方式为装饰器, 本质上，decorator是一个返回函数的高阶函数，语法是：\n\n```python\nimport functools\n\ndef log(func): #这个就是装饰器，可以用来打印日志\n    @functools.wraps(func) #保持原来的func函数的__name__属性\n    def wrapper(*args,**kw):\n        print('call %s():'%func.__name__)\n        return func(*args,**kw) #调用被装饰的函数\n    return wrapper\n\n@log #将装饰器放在函数定义处，相当于now =log(now)，有点像截留的意思\ndef now():\n    print('2017-7-6')\n\n\nimport functools\ndef log(text=None): #将有参数和无参数的装饰函数结合\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args,**kw):\n            if not isinstance(text,str):\n                print('before call %s()' %func.__name__)\n            else:\n                print('before %s %s()' %(text,func.__name__))\n\n            result = func(*args,**kw) #使用变量保存被装饰函数调用的结果\n\n            if not isinstance(text,str)\n                print('after call %s()' %func.__name__)\n            else:\n                print('after %s %s()' %(text,func.__name__))\n\n        return wrapper\n    return decorator\n\n@log('execute') #从这里加参数，或者可以不加参数\ndef now():\n    print('2017-06-20')\n\n@log()\ndef now():\n    print('2017-06-20')\n```\n\n# 偏函数(Partial function)\n\n在模块functools中，functools.partial 是创建一个偏函数，例如：\n\n```python\nimport functools\nint2 = functools.partial(int,base=2) #等同于：\n\ndef int2(x,base=2) #将base=2传入下面的int中的base\n    return int(x,base)\n```\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317848428125ae6aa24068b4c50a7e71501ab275d52000)\n","source":"_posts/Python基础学习之-高阶函数.md","raw":"---\ntitle: 'Python基础学习之[高阶函数]'\ncopyright: true\ndate: 2017-07-09 20:26:54\ncategories: Python\ntags:\n- Python\n- Programming language\n---\n# 函数式编程（Function Programming）\n它是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用，而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能就得到不同的输出，因此，这种函数是有副作用的。 Python不是纯函数式编程语言，允许使用变量。\n函数式编程的一个最大的特点是允许函数本身作为参数传入另一个函数中，还允许返回一个函数。\n<!--more-->\n\n## 高阶函数\n\n函数名也是变量，函数名其实就是指向函数的变量。\n把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。\n\n```python\ndef add(x,y,f):\n    return f(x)+f(y)\n\n>>>add(-5,-6,abs) #将函数名作为参数传入定义的函数中\n>>>11\n```\n\n## map/reduce\n\n**map**\n```python\ndef f(x):\n    return x*x\n\n>>> r=map(f,[1,2,3,4,5]) #表示的是将传入的函数依次作用到序列的每一个元素，这个就是map的作用。此时r是一个Iterator，Iterator是惰性序列，可以通过list()函数让它把整个序列都计算出来返回到一个list\n>>> list(r)\n[1, 4, 9, 16, 25]\n\n```\n\n**reduce**\nreduce 把一个函数作用在一个序列 [x1,x2,x3,x4]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，效果如下：\n\n`reduce(f,[x1,x2,x3,x4])=f(f(f(x1,x2),x3),x4)`\n\n```python\nfrom functools import reduce\ndef str2int(s):\n\n    def fn(x,y):\n        return x*10+y\n\n    def char2num(s):\n        return {'0':0,'1':1,'2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}[s]\n\n    return reduce(fn,map(char2num,s)) #可以使用reduce和map一起，写一个str2int函数\n\n       # 可以用lambda函数优化，reduce（lambda x，y：x*10+y，map（char2num,s））\n\nlambda x,y:x*10+y 表示的是以x，y为输入，x*10+y为输出返回，它的主体是一个表达式，，不是代码块，起到函数速写的作用。\n\n```\n\n**map和reduce的综合应用**\n```python\ndef str2float(s):\n    def char2num(s):\n        return {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}[s]\n    if '.' in s:\n        L=s.split('.')\n        left_part=reduce(lambda x,y:x*10+y,map(char2num,L[0]))\n        # 123.456\n        right_part=reduce(lambda x,y:x/10+y,map(char2num,L[1][::-1]))/10\n        return left_part + right_part\n    else:\n        return reduce(lambda x,y:x*10+y,map(char2num,s))\n\n\n```\n\n## filter()\n用于过滤序列，和map()类似，把传入的函数依次作用于每个元素，然后根据返回值是True 或者是false决定保留还是丢弃该元素，也就是说传入的函数返回值是true或者false，该传入的函数是筛选函数。filter()函数返回的是一个Iterator，是一个惰性序列，需要list（）返回所有结果。\n\n```python\ndef _odd_iter(): #求素数\n    n=1;\n    while True:\n        n=n+1\n        yield n\n\ndef _not_divisible(n):\n    return lambda x:x%n>0\n\ndef primes():\n    sequence=_odd_iter()\n    while True:\n        n=next(sequence)\n        yield n\n        sequence=filter(_not_divisible(n),sequence) #使用过滤函数，将2,3,5.。。的倍数去掉\n\nfor n in primes():\n    if n<1000:\n        print(n)\n    else:\n        break\n```\n\n## sorted()\n排序函数，是一个高阶函数，可以接收一个key函数来实现自定义排序\n\n```Python\n>>> sorted([-32,5,-6,-12,9,-20],key=abs)\n[5, -6, 9, -12, -20, -32] #key代表排序函数，不能替换成其他字符。\n\n>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower) #忽略大小写\n['about', 'bob', 'Credit', 'Zoo']\n\n>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)\n['Zoo', 'Credit', 'bob', 'about']  #反向排序\n```\n\n# 返回函数\n高阶函数既可以接受函数作为参数，也可以把函数作为结果值返回。\n\n```python\n\ndef layz_sum(*args):\n    def sum():\n        ax=0\n        for n in args:\n            ax=ax=n\n        return ax\n    return sum\n\nf=layz_sum(1,2,3,4)\nf()        \n```\n# 匿名函数\n\n关键字lambda表示匿名函数，`lambda x:x*x`表示的是：\n\n```python\n\ndef f(x):\n    return x*x\n```\n\n匿名函数的好处是，函数没有名字，不用担心函数名冲突，不用写return，冒号后面的就是返回值，匿名函数也是一个函数对象，可以赋值给一个变量，利用变量来调用函数。每个函数对象\n\n# 装饰器(Decorator)\n\n代码运行期间动态增加功能的方式为装饰器, 本质上，decorator是一个返回函数的高阶函数，语法是：\n\n```python\nimport functools\n\ndef log(func): #这个就是装饰器，可以用来打印日志\n    @functools.wraps(func) #保持原来的func函数的__name__属性\n    def wrapper(*args,**kw):\n        print('call %s():'%func.__name__)\n        return func(*args,**kw) #调用被装饰的函数\n    return wrapper\n\n@log #将装饰器放在函数定义处，相当于now =log(now)，有点像截留的意思\ndef now():\n    print('2017-7-6')\n\n\nimport functools\ndef log(text=None): #将有参数和无参数的装饰函数结合\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args,**kw):\n            if not isinstance(text,str):\n                print('before call %s()' %func.__name__)\n            else:\n                print('before %s %s()' %(text,func.__name__))\n\n            result = func(*args,**kw) #使用变量保存被装饰函数调用的结果\n\n            if not isinstance(text,str)\n                print('after call %s()' %func.__name__)\n            else:\n                print('after %s %s()' %(text,func.__name__))\n\n        return wrapper\n    return decorator\n\n@log('execute') #从这里加参数，或者可以不加参数\ndef now():\n    print('2017-06-20')\n\n@log()\ndef now():\n    print('2017-06-20')\n```\n\n# 偏函数(Partial function)\n\n在模块functools中，functools.partial 是创建一个偏函数，例如：\n\n```python\nimport functools\nint2 = functools.partial(int,base=2) #等同于：\n\ndef int2(x,base=2) #将base=2传入下面的int中的base\n    return int(x,base)\n```\n# Reference\n[liaoxuefeng的博客](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317848428125ae6aa24068b4c50a7e71501ab275d52000)\n","slug":"Python基础学习之-高阶函数","published":1,"updated":"2017-07-09T12:38:39.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c7q00194ov13s3hmz2c","content":"<h1 id=\"函数式编程（Function-Programming）\"><a href=\"#函数式编程（Function-Programming）\" class=\"headerlink\" title=\"函数式编程（Function Programming）\"></a>函数式编程（Function Programming）</h1><p>它是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用，而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能就得到不同的输出，因此，这种函数是有副作用的。 Python不是纯函数式编程语言，允许使用变量。<br>函数式编程的一个最大的特点是允许函数本身作为参数传入另一个函数中，还允许返回一个函数。<br><a id=\"more\"></a></p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>函数名也是变量，函数名其实就是指向函数的变量。<br>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x,y,f)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> f(x)+f(y)</div><div class=\"line\"></div><div class=\"line\">&gt;&gt;&gt;add(<span class=\"number\">-5</span>,<span class=\"number\">-6</span>,abs) <span class=\"comment\">#将函数名作为参数传入定义的函数中</span></div><div class=\"line\">&gt;&gt;&gt;<span class=\"number\">11</span></div></pre></td></tr></table></figure>\n<h2 id=\"map-reduce\"><a href=\"#map-reduce\" class=\"headerlink\" title=\"map/reduce\"></a>map/reduce</h2><p><strong>map</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x*x</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r=map(f,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) <span class=\"comment\">#表示的是将传入的函数依次作用到序列的每一个元素，这个就是map的作用。此时r是一个Iterator，Iterator是惰性序列，可以通过list()函数让它把整个序列都计算出来返回到一个list</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(r)</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>]</div></pre></td></tr></table></figure></p>\n<p><strong>reduce</strong><br>reduce 把一个函数作用在一个序列 [x1,x2,x3,x4]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，效果如下：</p>\n<p><code>reduce(f,[x1,x2,x3,x4])=f(f(f(x1,x2),x3),x4)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">str2int</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn</span><span class=\"params\">(x,y)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> x*<span class=\"number\">10</span>+y</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">char2num</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">'0'</span>:<span class=\"number\">0</span>,<span class=\"string\">'1'</span>:<span class=\"number\">1</span>,<span class=\"string\">'2'</span>:<span class=\"number\">2</span>, <span class=\"string\">'3'</span>:<span class=\"number\">3</span>, <span class=\"string\">'4'</span>:<span class=\"number\">4</span>, <span class=\"string\">'5'</span>:<span class=\"number\">5</span>, <span class=\"string\">'6'</span>:<span class=\"number\">6</span>, <span class=\"string\">'7'</span>:<span class=\"number\">7</span>, <span class=\"string\">'8'</span>:<span class=\"number\">8</span>, <span class=\"string\">'9'</span>:<span class=\"number\">9</span>&#125;[s]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> reduce(fn,map(char2num,s)) <span class=\"comment\">#可以使用reduce和map一起，写一个str2int函数</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\"># 可以用lambda函数优化，reduce（lambda x，y：x*10+y，map（char2num,s））</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">lambda</span> x,y:x*<span class=\"number\">10</span>+y 表示的是以x，y为输入，x*<span class=\"number\">10</span>+y为输出返回，它的主体是一个表达式，，不是代码块，起到函数速写的作用。</div></pre></td></tr></table></figure>\n<p><strong>map和reduce的综合应用</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">str2float</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">char2num</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">'0'</span>:<span class=\"number\">0</span>,<span class=\"string\">'1'</span>:<span class=\"number\">1</span>,<span class=\"string\">'2'</span>:<span class=\"number\">2</span>,<span class=\"string\">'3'</span>:<span class=\"number\">3</span>,<span class=\"string\">'4'</span>:<span class=\"number\">4</span>,<span class=\"string\">'5'</span>:<span class=\"number\">5</span>,<span class=\"string\">'6'</span>:<span class=\"number\">6</span>,<span class=\"string\">'7'</span>:<span class=\"number\">7</span>,<span class=\"string\">'8'</span>:<span class=\"number\">8</span>,<span class=\"string\">'9'</span>:<span class=\"number\">9</span>&#125;[s]</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'.'</span> <span class=\"keyword\">in</span> s:</div><div class=\"line\">        L=s.split(<span class=\"string\">'.'</span>)</div><div class=\"line\">        left_part=reduce(<span class=\"keyword\">lambda</span> x,y:x*<span class=\"number\">10</span>+y,map(char2num,L[<span class=\"number\">0</span>]))</div><div class=\"line\">        <span class=\"comment\"># 123.456</span></div><div class=\"line\">        right_part=reduce(<span class=\"keyword\">lambda</span> x,y:x/<span class=\"number\">10</span>+y,map(char2num,L[<span class=\"number\">1</span>][::<span class=\"number\">-1</span>]))/<span class=\"number\">10</span></div><div class=\"line\">        <span class=\"keyword\">return</span> left_part + right_part</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> reduce(<span class=\"keyword\">lambda</span> x,y:x*<span class=\"number\">10</span>+y,map(char2num,s))</div></pre></td></tr></table></figure></p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>用于过滤序列，和map()类似，把传入的函数依次作用于每个元素，然后根据返回值是True 或者是false决定保留还是丢弃该元素，也就是说传入的函数返回值是true或者false，该传入的函数是筛选函数。filter()函数返回的是一个Iterator，是一个惰性序列，需要list（）返回所有结果。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_odd_iter</span><span class=\"params\">()</span>:</span> <span class=\"comment\">#求素数</span></div><div class=\"line\">    n=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        n=n+<span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">yield</span> n</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_not_divisible</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x:x%n&gt;<span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">primes</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    sequence=_odd_iter()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        n=next(sequence)</div><div class=\"line\">        <span class=\"keyword\">yield</span> n</div><div class=\"line\">        sequence=filter(_not_divisible(n),sequence) <span class=\"comment\">#使用过滤函数，将2,3,5.。。的倍数去掉</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> primes():</div><div class=\"line\">    <span class=\"keyword\">if</span> n&lt;<span class=\"number\">1000</span>:</div><div class=\"line\">        print(n)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span></div></pre></td></tr></table></figure>\n<h2 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"></a>sorted()</h2><p>排序函数，是一个高阶函数，可以接收一个key函数来实现自定义排序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted([<span class=\"number\">-32</span>,<span class=\"number\">5</span>,<span class=\"number\">-6</span>,<span class=\"number\">-12</span>,<span class=\"number\">9</span>,<span class=\"number\">-20</span>],key=abs)</div><div class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">-6</span>, <span class=\"number\">9</span>, <span class=\"number\">-12</span>, <span class=\"number\">-20</span>, <span class=\"number\">-32</span>] <span class=\"comment\">#key代表排序函数，不能替换成其他字符。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted([<span class=\"string\">'bob'</span>, <span class=\"string\">'about'</span>, <span class=\"string\">'Zoo'</span>, <span class=\"string\">'Credit'</span>], key=str.lower) <span class=\"comment\">#忽略大小写</span></div><div class=\"line\">[<span class=\"string\">'about'</span>, <span class=\"string\">'bob'</span>, <span class=\"string\">'Credit'</span>, <span class=\"string\">'Zoo'</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted([<span class=\"string\">'bob'</span>, <span class=\"string\">'about'</span>, <span class=\"string\">'Zoo'</span>, <span class=\"string\">'Credit'</span>], key=str.lower, reverse=<span class=\"keyword\">True</span>)</div><div class=\"line\">[<span class=\"string\">'Zoo'</span>, <span class=\"string\">'Credit'</span>, <span class=\"string\">'bob'</span>, <span class=\"string\">'about'</span>]  <span class=\"comment\">#反向排序</span></div></pre></td></tr></table></figure>\n<h1 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h1><p>高阶函数既可以接受函数作为参数，也可以把函数作为结果值返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">layz_sum</span><span class=\"params\">(*args)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        ax=<span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</div><div class=\"line\">            ax=ax=n</div><div class=\"line\">        <span class=\"keyword\">return</span> ax</div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\"></div><div class=\"line\">f=layz_sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\">f()</div></pre></td></tr></table></figure>\n<h1 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h1><p>关键字lambda表示匿名函数，<code>lambda x:x*x</code>表示的是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x*x</div></pre></td></tr></table></figure>\n<p>匿名函数的好处是，函数没有名字，不用担心函数名冲突，不用写return，冒号后面的就是返回值，匿名函数也是一个函数对象，可以赋值给一个变量，利用变量来调用函数。每个函数对象</p>\n<h1 id=\"装饰器-Decorator\"><a href=\"#装饰器-Decorator\" class=\"headerlink\" title=\"装饰器(Decorator)\"></a>装饰器(Decorator)</h1><p>代码运行期间动态增加功能的方式为装饰器, 本质上，decorator是一个返回函数的高阶函数，语法是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> functools</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span> <span class=\"comment\">#这个就是装饰器，可以用来打印日志</span></div><div class=\"line\"><span class=\"meta\">    @functools.wraps(func) #保持原来的func函数的__name__属性</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args,**kw)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'call %s():'</span>%func.__name__)</div><div class=\"line\">        <span class=\"keyword\">return</span> func(*args,**kw) <span class=\"comment\">#调用被装饰的函数</span></div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@log #将装饰器放在函数定义处，相当于now =log(now)，有点像截留的意思</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2017-7-6'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> functools</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(text=None)</span>:</span> <span class=\"comment\">#将有参数和无参数的装饰函数结合</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\"><span class=\"meta\">        @functools.wraps(func)</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args,**kw)</span>:</span></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(text,str):</div><div class=\"line\">                print(<span class=\"string\">'before call %s()'</span> %func.__name__)</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                print(<span class=\"string\">'before %s %s()'</span> %(text,func.__name__))</div><div class=\"line\"></div><div class=\"line\">            result = func(*args,**kw) <span class=\"comment\">#使用变量保存被装饰函数调用的结果</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(text,str)</div><div class=\"line\">                print(<span class=\"string\">'after call %s()'</span> %func.__name__)</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                print(<span class=\"string\">'after %s %s()'</span> %(text,func.__name__))</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> wrapper</div><div class=\"line\">    <span class=\"keyword\">return</span> decorator</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@log('execute') #从这里加参数，或者可以不加参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2017-06-20'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@log()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2017-06-20'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"偏函数-Partial-function\"><a href=\"#偏函数-Partial-function\" class=\"headerlink\" title=\"偏函数(Partial function)\"></a>偏函数(Partial function)</h1><p>在模块functools中，functools.partial 是创建一个偏函数，例如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import functools</div><div class=\"line\">int2 = functools.partial(int,base=2) #等同于：</div><div class=\"line\"></div><div class=\"line\">def int2(x,base=2) #将base=2传入下面的int中的base</div><div class=\"line\">    return int(x,base)</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317848428125ae6aa24068b4c50a7e71501ab275d52000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"函数式编程（Function-Programming）\"><a href=\"#函数式编程（Function-Programming）\" class=\"headerlink\" title=\"函数式编程（Function Programming）\"></a>函数式编程（Function Programming）</h1><p>它是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用，而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能就得到不同的输出，因此，这种函数是有副作用的。 Python不是纯函数式编程语言，允许使用变量。<br>函数式编程的一个最大的特点是允许函数本身作为参数传入另一个函数中，还允许返回一个函数。<br>","more":"</p>\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p>函数名也是变量，函数名其实就是指向函数的变量。<br>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x,y,f)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> f(x)+f(y)</div><div class=\"line\"></div><div class=\"line\">&gt;&gt;&gt;add(<span class=\"number\">-5</span>,<span class=\"number\">-6</span>,abs) <span class=\"comment\">#将函数名作为参数传入定义的函数中</span></div><div class=\"line\">&gt;&gt;&gt;<span class=\"number\">11</span></div></pre></td></tr></table></figure>\n<h2 id=\"map-reduce\"><a href=\"#map-reduce\" class=\"headerlink\" title=\"map/reduce\"></a>map/reduce</h2><p><strong>map</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x*x</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r=map(f,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]) <span class=\"comment\">#表示的是将传入的函数依次作用到序列的每一个元素，这个就是map的作用。此时r是一个Iterator，Iterator是惰性序列，可以通过list()函数让它把整个序列都计算出来返回到一个list</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(r)</div><div class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>]</div></pre></td></tr></table></figure></p>\n<p><strong>reduce</strong><br>reduce 把一个函数作用在一个序列 [x1,x2,x3,x4]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算，效果如下：</p>\n<p><code>reduce(f,[x1,x2,x3,x4])=f(f(f(x1,x2),x3),x4)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">str2int</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fn</span><span class=\"params\">(x,y)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> x*<span class=\"number\">10</span>+y</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">char2num</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">'0'</span>:<span class=\"number\">0</span>,<span class=\"string\">'1'</span>:<span class=\"number\">1</span>,<span class=\"string\">'2'</span>:<span class=\"number\">2</span>, <span class=\"string\">'3'</span>:<span class=\"number\">3</span>, <span class=\"string\">'4'</span>:<span class=\"number\">4</span>, <span class=\"string\">'5'</span>:<span class=\"number\">5</span>, <span class=\"string\">'6'</span>:<span class=\"number\">6</span>, <span class=\"string\">'7'</span>:<span class=\"number\">7</span>, <span class=\"string\">'8'</span>:<span class=\"number\">8</span>, <span class=\"string\">'9'</span>:<span class=\"number\">9</span>&#125;[s]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> reduce(fn,map(char2num,s)) <span class=\"comment\">#可以使用reduce和map一起，写一个str2int函数</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\"># 可以用lambda函数优化，reduce（lambda x，y：x*10+y，map（char2num,s））</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">lambda</span> x,y:x*<span class=\"number\">10</span>+y 表示的是以x，y为输入，x*<span class=\"number\">10</span>+y为输出返回，它的主体是一个表达式，，不是代码块，起到函数速写的作用。</div></pre></td></tr></table></figure>\n<p><strong>map和reduce的综合应用</strong><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">str2float</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">char2num</span><span class=\"params\">(s)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">'0'</span>:<span class=\"number\">0</span>,<span class=\"string\">'1'</span>:<span class=\"number\">1</span>,<span class=\"string\">'2'</span>:<span class=\"number\">2</span>,<span class=\"string\">'3'</span>:<span class=\"number\">3</span>,<span class=\"string\">'4'</span>:<span class=\"number\">4</span>,<span class=\"string\">'5'</span>:<span class=\"number\">5</span>,<span class=\"string\">'6'</span>:<span class=\"number\">6</span>,<span class=\"string\">'7'</span>:<span class=\"number\">7</span>,<span class=\"string\">'8'</span>:<span class=\"number\">8</span>,<span class=\"string\">'9'</span>:<span class=\"number\">9</span>&#125;[s]</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'.'</span> <span class=\"keyword\">in</span> s:</div><div class=\"line\">        L=s.split(<span class=\"string\">'.'</span>)</div><div class=\"line\">        left_part=reduce(<span class=\"keyword\">lambda</span> x,y:x*<span class=\"number\">10</span>+y,map(char2num,L[<span class=\"number\">0</span>]))</div><div class=\"line\">        <span class=\"comment\"># 123.456</span></div><div class=\"line\">        right_part=reduce(<span class=\"keyword\">lambda</span> x,y:x/<span class=\"number\">10</span>+y,map(char2num,L[<span class=\"number\">1</span>][::<span class=\"number\">-1</span>]))/<span class=\"number\">10</span></div><div class=\"line\">        <span class=\"keyword\">return</span> left_part + right_part</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> reduce(<span class=\"keyword\">lambda</span> x,y:x*<span class=\"number\">10</span>+y,map(char2num,s))</div></pre></td></tr></table></figure></p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h2><p>用于过滤序列，和map()类似，把传入的函数依次作用于每个元素，然后根据返回值是True 或者是false决定保留还是丢弃该元素，也就是说传入的函数返回值是true或者false，该传入的函数是筛选函数。filter()函数返回的是一个Iterator，是一个惰性序列，需要list（）返回所有结果。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_odd_iter</span><span class=\"params\">()</span>:</span> <span class=\"comment\">#求素数</span></div><div class=\"line\">    n=<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        n=n+<span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">yield</span> n</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_not_divisible</span><span class=\"params\">(n)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">lambda</span> x:x%n&gt;<span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">primes</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    sequence=_odd_iter()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">        n=next(sequence)</div><div class=\"line\">        <span class=\"keyword\">yield</span> n</div><div class=\"line\">        sequence=filter(_not_divisible(n),sequence) <span class=\"comment\">#使用过滤函数，将2,3,5.。。的倍数去掉</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> primes():</div><div class=\"line\">    <span class=\"keyword\">if</span> n&lt;<span class=\"number\">1000</span>:</div><div class=\"line\">        print(n)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span></div></pre></td></tr></table></figure>\n<h2 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"></a>sorted()</h2><p>排序函数，是一个高阶函数，可以接收一个key函数来实现自定义排序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted([<span class=\"number\">-32</span>,<span class=\"number\">5</span>,<span class=\"number\">-6</span>,<span class=\"number\">-12</span>,<span class=\"number\">9</span>,<span class=\"number\">-20</span>],key=abs)</div><div class=\"line\">[<span class=\"number\">5</span>, <span class=\"number\">-6</span>, <span class=\"number\">9</span>, <span class=\"number\">-12</span>, <span class=\"number\">-20</span>, <span class=\"number\">-32</span>] <span class=\"comment\">#key代表排序函数，不能替换成其他字符。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted([<span class=\"string\">'bob'</span>, <span class=\"string\">'about'</span>, <span class=\"string\">'Zoo'</span>, <span class=\"string\">'Credit'</span>], key=str.lower) <span class=\"comment\">#忽略大小写</span></div><div class=\"line\">[<span class=\"string\">'about'</span>, <span class=\"string\">'bob'</span>, <span class=\"string\">'Credit'</span>, <span class=\"string\">'Zoo'</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>sorted([<span class=\"string\">'bob'</span>, <span class=\"string\">'about'</span>, <span class=\"string\">'Zoo'</span>, <span class=\"string\">'Credit'</span>], key=str.lower, reverse=<span class=\"keyword\">True</span>)</div><div class=\"line\">[<span class=\"string\">'Zoo'</span>, <span class=\"string\">'Credit'</span>, <span class=\"string\">'bob'</span>, <span class=\"string\">'about'</span>]  <span class=\"comment\">#反向排序</span></div></pre></td></tr></table></figure>\n<h1 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h1><p>高阶函数既可以接受函数作为参数，也可以把函数作为结果值返回。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">layz_sum</span><span class=\"params\">(*args)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">()</span>:</span></div><div class=\"line\">        ax=<span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</div><div class=\"line\">            ax=ax=n</div><div class=\"line\">        <span class=\"keyword\">return</span> ax</div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\"></div><div class=\"line\">f=layz_sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)</div><div class=\"line\">f()</div></pre></td></tr></table></figure>\n<h1 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h1><p>关键字lambda表示匿名函数，<code>lambda x:x*x</code>表示的是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x*x</div></pre></td></tr></table></figure>\n<p>匿名函数的好处是，函数没有名字，不用担心函数名冲突，不用写return，冒号后面的就是返回值，匿名函数也是一个函数对象，可以赋值给一个变量，利用变量来调用函数。每个函数对象</p>\n<h1 id=\"装饰器-Decorator\"><a href=\"#装饰器-Decorator\" class=\"headerlink\" title=\"装饰器(Decorator)\"></a>装饰器(Decorator)</h1><p>代码运行期间动态增加功能的方式为装饰器, 本质上，decorator是一个返回函数的高阶函数，语法是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> functools</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span> <span class=\"comment\">#这个就是装饰器，可以用来打印日志</span></div><div class=\"line\"><span class=\"meta\">    @functools.wraps(func) #保持原来的func函数的__name__属性</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args,**kw)</span>:</span></div><div class=\"line\">        print(<span class=\"string\">'call %s():'</span>%func.__name__)</div><div class=\"line\">        <span class=\"keyword\">return</span> func(*args,**kw) <span class=\"comment\">#调用被装饰的函数</span></div><div class=\"line\">    <span class=\"keyword\">return</span> wrapper</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@log #将装饰器放在函数定义处，相当于now =log(now)，有点像截留的意思</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2017-7-6'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> functools</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(text=None)</span>:</span> <span class=\"comment\">#将有参数和无参数的装饰函数结合</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></div><div class=\"line\"><span class=\"meta\">        @functools.wraps(func)</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args,**kw)</span>:</span></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(text,str):</div><div class=\"line\">                print(<span class=\"string\">'before call %s()'</span> %func.__name__)</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                print(<span class=\"string\">'before %s %s()'</span> %(text,func.__name__))</div><div class=\"line\"></div><div class=\"line\">            result = func(*args,**kw) <span class=\"comment\">#使用变量保存被装饰函数调用的结果</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(text,str)</div><div class=\"line\">                print(<span class=\"string\">'after call %s()'</span> %func.__name__)</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                print(<span class=\"string\">'after %s %s()'</span> %(text,func.__name__))</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> wrapper</div><div class=\"line\">    <span class=\"keyword\">return</span> decorator</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@log('execute') #从这里加参数，或者可以不加参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2017-06-20'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@log()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">'2017-06-20'</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"偏函数-Partial-function\"><a href=\"#偏函数-Partial-function\" class=\"headerlink\" title=\"偏函数(Partial function)\"></a>偏函数(Partial function)</h1><p>在模块functools中，functools.partial 是创建一个偏函数，例如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import functools</div><div class=\"line\">int2 = functools.partial(int,base=2) #等同于：</div><div class=\"line\"></div><div class=\"line\">def int2(x,base=2) #将base=2传入下面的int中的base</div><div class=\"line\">    return int(x,base)</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317848428125ae6aa24068b4c50a7e71501ab275d52000\" target=\"_blank\" rel=\"external\">liaoxuefeng的博客</a></p>"},{"title":"What Life Should Mean to You","copyright":true,"date":"2018-08-26T17:06:42.000Z","_content":"\n《自卑与超越：What Life Should Mean to you》是个体心理学的代表作，作者是阿尔弗雷德.阿德勒，个体心理学创始人，与弗洛伊德、荣格齐名的心理学三巨头之一；\n\n阿德勒从“自卑感”这一核心概念出发，从家庭关系、学校教育、职业选择等多个领域中选取案例，介绍了个体心理学的基本观点，阐述了自己对于人生意义和个人价值的理解，并给出了诸多实用的建议。\n\n<!-- more -->\n\n# 关于人类的进步的来源\n\n自卑感和优越感，不要因为自卑感而过度焦虑，而导致 __“自卑情结”__；\n自卑感每个人都有，人人都想弥补这种自卑感，追求优越感，所以这两种感情是一体两面的；\n优越感是前面的牵引的火车头，牵引着每个人往前走，自卑感是推动人进步的动力，是发动机。\n人人都有自卑感，只是表现形式不一样而已；\n\n\n# 如何改变自己的行为模式，实现自我超越\n弗洛伊德认为，童年经历中寻找原因，过去的经历决定自己现在性格和行为。\n阿德勒（个体心理学）认为，人可以对自己的经历进行创造性解读，环境因素不能决定自己的命运。\n来自己改变自己的思想，通过个人努力进而改变自己的行为；\n弗洛伊德认为（决定论），强调个人的\n\n改变自己的是未来的目标，认清自己的目标，然后去改变，决定我们得不是过去的经历，而是未来的目标；\n先要改变目标，然后才能达到自己的目的；每一个行为都有他的对应的目标\n决定论和目标论\n\n# 如何在实现人生的意义\n\n什么是人生的意义，人生中所有可能面对的困难都来自这三个问题；\n- 职业问题：社会的合作分工\n- 人际交往关系问题：\n- 婚姻问题：夫妻双方的合作方\n\n什么是人生的意义，是你如何面对这三个问题；本质上都是合作问题。\n\n婚姻的合作问题，任何一方都不是支配的一方，如何建立合作方，主动给与对方的足够的关心，超越对自己的关心，这才是真正的关心\n\n如何与其他人建立合作关系，需要有能力关心他人，学会去关心别人，。\n\n归根结底是三个问题的解答\n人生只有社会意义，如何与他人进行合作，人生的意义，是为人类社会做贡献，推动人类社会的进步；\n\n人人都有自卑感，备受煎熬，人生是否有意义，关键在于是否对人类产生正向的影响力及贡献；\n\n\n自卑感和优越感是像两驾马车，一推一拉，提供自我超越的动力；\n\n\n# 读书体会\n阿德勒个体心理学给了我们一个判断方法，认为，孤立的看，一个人的自我意义就是没意义，所以把自己放到更大的价值体系中去审视，\n把自己放到人类体系中的一员，找到行为准则，才能看清自己的行为对人类的社会是否有推动意义。\n","source":"_posts/What-Life-Should-Mean-to-You.md","raw":"---\ntitle: What Life Should Mean to You\ncopyright: true\ndate: 2018-08-27 01:06:42\ncategories: 读书笔记\ntags: thinking\n---\n\n《自卑与超越：What Life Should Mean to you》是个体心理学的代表作，作者是阿尔弗雷德.阿德勒，个体心理学创始人，与弗洛伊德、荣格齐名的心理学三巨头之一；\n\n阿德勒从“自卑感”这一核心概念出发，从家庭关系、学校教育、职业选择等多个领域中选取案例，介绍了个体心理学的基本观点，阐述了自己对于人生意义和个人价值的理解，并给出了诸多实用的建议。\n\n<!-- more -->\n\n# 关于人类的进步的来源\n\n自卑感和优越感，不要因为自卑感而过度焦虑，而导致 __“自卑情结”__；\n自卑感每个人都有，人人都想弥补这种自卑感，追求优越感，所以这两种感情是一体两面的；\n优越感是前面的牵引的火车头，牵引着每个人往前走，自卑感是推动人进步的动力，是发动机。\n人人都有自卑感，只是表现形式不一样而已；\n\n\n# 如何改变自己的行为模式，实现自我超越\n弗洛伊德认为，童年经历中寻找原因，过去的经历决定自己现在性格和行为。\n阿德勒（个体心理学）认为，人可以对自己的经历进行创造性解读，环境因素不能决定自己的命运。\n来自己改变自己的思想，通过个人努力进而改变自己的行为；\n弗洛伊德认为（决定论），强调个人的\n\n改变自己的是未来的目标，认清自己的目标，然后去改变，决定我们得不是过去的经历，而是未来的目标；\n先要改变目标，然后才能达到自己的目的；每一个行为都有他的对应的目标\n决定论和目标论\n\n# 如何在实现人生的意义\n\n什么是人生的意义，人生中所有可能面对的困难都来自这三个问题；\n- 职业问题：社会的合作分工\n- 人际交往关系问题：\n- 婚姻问题：夫妻双方的合作方\n\n什么是人生的意义，是你如何面对这三个问题；本质上都是合作问题。\n\n婚姻的合作问题，任何一方都不是支配的一方，如何建立合作方，主动给与对方的足够的关心，超越对自己的关心，这才是真正的关心\n\n如何与其他人建立合作关系，需要有能力关心他人，学会去关心别人，。\n\n归根结底是三个问题的解答\n人生只有社会意义，如何与他人进行合作，人生的意义，是为人类社会做贡献，推动人类社会的进步；\n\n人人都有自卑感，备受煎熬，人生是否有意义，关键在于是否对人类产生正向的影响力及贡献；\n\n\n自卑感和优越感是像两驾马车，一推一拉，提供自我超越的动力；\n\n\n# 读书体会\n阿德勒个体心理学给了我们一个判断方法，认为，孤立的看，一个人的自我意义就是没意义，所以把自己放到更大的价值体系中去审视，\n把自己放到人类体系中的一员，找到行为准则，才能看清自己的行为对人类的社会是否有推动意义。\n","slug":"What-Life-Should-Mean-to-You","published":1,"updated":"2018-08-26T17:20:17.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c7w001c4ov1l85pd22k","content":"<p>《自卑与超越：What Life Should Mean to you》是个体心理学的代表作，作者是阿尔弗雷德.阿德勒，个体心理学创始人，与弗洛伊德、荣格齐名的心理学三巨头之一；</p>\n<p>阿德勒从“自卑感”这一核心概念出发，从家庭关系、学校教育、职业选择等多个领域中选取案例，介绍了个体心理学的基本观点，阐述了自己对于人生意义和个人价值的理解，并给出了诸多实用的建议。</p>\n<a id=\"more\"></a>\n<h1 id=\"关于人类的进步的来源\"><a href=\"#关于人类的进步的来源\" class=\"headerlink\" title=\"关于人类的进步的来源\"></a>关于人类的进步的来源</h1><p>自卑感和优越感，不要因为自卑感而过度焦虑，而导致 <strong>“自卑情结”</strong>；<br>自卑感每个人都有，人人都想弥补这种自卑感，追求优越感，所以这两种感情是一体两面的；<br>优越感是前面的牵引的火车头，牵引着每个人往前走，自卑感是推动人进步的动力，是发动机。<br>人人都有自卑感，只是表现形式不一样而已；</p>\n<h1 id=\"如何改变自己的行为模式，实现自我超越\"><a href=\"#如何改变自己的行为模式，实现自我超越\" class=\"headerlink\" title=\"如何改变自己的行为模式，实现自我超越\"></a>如何改变自己的行为模式，实现自我超越</h1><p>弗洛伊德认为，童年经历中寻找原因，过去的经历决定自己现在性格和行为。<br>阿德勒（个体心理学）认为，人可以对自己的经历进行创造性解读，环境因素不能决定自己的命运。<br>来自己改变自己的思想，通过个人努力进而改变自己的行为；<br>弗洛伊德认为（决定论），强调个人的</p>\n<p>改变自己的是未来的目标，认清自己的目标，然后去改变，决定我们得不是过去的经历，而是未来的目标；<br>先要改变目标，然后才能达到自己的目的；每一个行为都有他的对应的目标<br>决定论和目标论</p>\n<h1 id=\"如何在实现人生的意义\"><a href=\"#如何在实现人生的意义\" class=\"headerlink\" title=\"如何在实现人生的意义\"></a>如何在实现人生的意义</h1><p>什么是人生的意义，人生中所有可能面对的困难都来自这三个问题；</p>\n<ul>\n<li>职业问题：社会的合作分工</li>\n<li>人际交往关系问题：</li>\n<li>婚姻问题：夫妻双方的合作方</li>\n</ul>\n<p>什么是人生的意义，是你如何面对这三个问题；本质上都是合作问题。</p>\n<p>婚姻的合作问题，任何一方都不是支配的一方，如何建立合作方，主动给与对方的足够的关心，超越对自己的关心，这才是真正的关心</p>\n<p>如何与其他人建立合作关系，需要有能力关心他人，学会去关心别人，。</p>\n<p>归根结底是三个问题的解答<br>人生只有社会意义，如何与他人进行合作，人生的意义，是为人类社会做贡献，推动人类社会的进步；</p>\n<p>人人都有自卑感，备受煎熬，人生是否有意义，关键在于是否对人类产生正向的影响力及贡献；</p>\n<p>自卑感和优越感是像两驾马车，一推一拉，提供自我超越的动力；</p>\n<h1 id=\"读书体会\"><a href=\"#读书体会\" class=\"headerlink\" title=\"读书体会\"></a>读书体会</h1><p>阿德勒个体心理学给了我们一个判断方法，认为，孤立的看，一个人的自我意义就是没意义，所以把自己放到更大的价值体系中去审视，<br>把自己放到人类体系中的一员，找到行为准则，才能看清自己的行为对人类的社会是否有推动意义。</p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>《自卑与超越：What Life Should Mean to you》是个体心理学的代表作，作者是阿尔弗雷德.阿德勒，个体心理学创始人，与弗洛伊德、荣格齐名的心理学三巨头之一；</p>\n<p>阿德勒从“自卑感”这一核心概念出发，从家庭关系、学校教育、职业选择等多个领域中选取案例，介绍了个体心理学的基本观点，阐述了自己对于人生意义和个人价值的理解，并给出了诸多实用的建议。</p>","more":"<h1 id=\"关于人类的进步的来源\"><a href=\"#关于人类的进步的来源\" class=\"headerlink\" title=\"关于人类的进步的来源\"></a>关于人类的进步的来源</h1><p>自卑感和优越感，不要因为自卑感而过度焦虑，而导致 <strong>“自卑情结”</strong>；<br>自卑感每个人都有，人人都想弥补这种自卑感，追求优越感，所以这两种感情是一体两面的；<br>优越感是前面的牵引的火车头，牵引着每个人往前走，自卑感是推动人进步的动力，是发动机。<br>人人都有自卑感，只是表现形式不一样而已；</p>\n<h1 id=\"如何改变自己的行为模式，实现自我超越\"><a href=\"#如何改变自己的行为模式，实现自我超越\" class=\"headerlink\" title=\"如何改变自己的行为模式，实现自我超越\"></a>如何改变自己的行为模式，实现自我超越</h1><p>弗洛伊德认为，童年经历中寻找原因，过去的经历决定自己现在性格和行为。<br>阿德勒（个体心理学）认为，人可以对自己的经历进行创造性解读，环境因素不能决定自己的命运。<br>来自己改变自己的思想，通过个人努力进而改变自己的行为；<br>弗洛伊德认为（决定论），强调个人的</p>\n<p>改变自己的是未来的目标，认清自己的目标，然后去改变，决定我们得不是过去的经历，而是未来的目标；<br>先要改变目标，然后才能达到自己的目的；每一个行为都有他的对应的目标<br>决定论和目标论</p>\n<h1 id=\"如何在实现人生的意义\"><a href=\"#如何在实现人生的意义\" class=\"headerlink\" title=\"如何在实现人生的意义\"></a>如何在实现人生的意义</h1><p>什么是人生的意义，人生中所有可能面对的困难都来自这三个问题；</p>\n<ul>\n<li>职业问题：社会的合作分工</li>\n<li>人际交往关系问题：</li>\n<li>婚姻问题：夫妻双方的合作方</li>\n</ul>\n<p>什么是人生的意义，是你如何面对这三个问题；本质上都是合作问题。</p>\n<p>婚姻的合作问题，任何一方都不是支配的一方，如何建立合作方，主动给与对方的足够的关心，超越对自己的关心，这才是真正的关心</p>\n<p>如何与其他人建立合作关系，需要有能力关心他人，学会去关心别人，。</p>\n<p>归根结底是三个问题的解答<br>人生只有社会意义，如何与他人进行合作，人生的意义，是为人类社会做贡献，推动人类社会的进步；</p>\n<p>人人都有自卑感，备受煎熬，人生是否有意义，关键在于是否对人类产生正向的影响力及贡献；</p>\n<p>自卑感和优越感是像两驾马车，一推一拉，提供自我超越的动力；</p>\n<h1 id=\"读书体会\"><a href=\"#读书体会\" class=\"headerlink\" title=\"读书体会\"></a>读书体会</h1><p>阿德勒个体心理学给了我们一个判断方法，认为，孤立的看，一个人的自我意义就是没意义，所以把自己放到更大的价值体系中去审视，<br>把自己放到人类体系中的一员，找到行为准则，才能看清自己的行为对人类的社会是否有推动意义。</p>"},{"title":"《The Pragmatic Programmer --程序员修炼之道》--读书整理","copyright":true,"date":"2018-08-28T15:11:30.000Z","_content":"\n# 注重实效的哲学\n\n> 编程是一种技艺，一种需要用心学习的技艺\n> 谢谢你们让我们梦想！\n\n注重实效的程序员的特征：\n- 早期的采纳者/快速的改编者：技术和技巧上的直觉\n- 好奇：喜欢提问\n- 批判的思考者：首先抓住事实而不是照搬别人的说法\n- 有现实感：设法理解你面临的每个问题的本质\n- 多才多艺：尽力熟悉广泛的技术和环境\n\n<!-- more -->\n\n> Care about your craft!\n> Think! about your work!\n> 在所有的弱点，最大的弱点就是害怕暴露弱点。 --- J.B.Bossuet\n\n软件系统的熵（entropy）表征了这个系统的混乱程度，指的是这个系统的“无序”的总量，也就是 **不确定性程度**。\n\n>**提示4：**\n>Dont Live with Broken Windows\n\n不要留着“破窗户”（低劣的设计、错误决策、或是糟糕的代码）不修，发现一个修理一个。\n如果你发现你所在团队和项目的代码十分漂亮 -- 编写整洁、设计良好，并且很优雅，你就很可能会格外注意不去把它弄脏。即使有火在咆哮（最后期限、发布日期、会展演示，等等），你也不会想成为第一个弄脏东西的人。\n\n>**提示6：**\n> Remember the big picture\n\n需要留心大图景。要持续不断的观察周围发生的事情，而不只是你自己在做的事情。---温水煮青蛙的故事。\n\n> 知识上的投资总能得到最好的回报。 ---本杰明.富兰克林\n\n随着你的知识的价值降低，对你的公司或客户来说，你的价值也在降低。我们想要阻止这样的事情，决不让它发生。\n\n知识资产（Knowledge Portfolios）的保值：\n- 定期投资：作为习惯\n- 多元化：你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特定技术的各种特性。\n- 管理风险：高风险，高回报，低风险，低回报；不应太保守，错过可能的机会。不要把所有的技术鸡蛋放在一个篮子里。\n- 低买高卖：新兴技术流行之前学习它可能就和我们找到被低估的股票一样。\n- 重新评估和平衡：IT行业是一个很动荡的行业，你需要重新评估和平衡你现在掌握的技术。\n\n>**提示8：**\n> Invest Regularly in Your Knowledge Portfolio 定期为你的知识资产投资\n\n- 每年至少学习一种新语言。拓展思维，避免墨守成规。\n- 每季度阅读一本技术书籍。掌握你现在使用的技术，扩宽范围，阅读一些与你项目无关的书籍。\n- 阅读相关非技术书籍。提高自己的人文素养。\n- 试验不同的生产环境。适应变化。\n- 参加本地用户的组织。融入当地。\n\n>**提示9：**\n> Critically Analyze What You Read and Hear 批判地分析你读到的和听到的\n\n不要低估商业主义的力量。web搜索引擎的页面前面的结果，并不意味着那就是最佳选择；内容供应商可以付钱排在前面。交流越有效，你就越有影响力。\n\n# 注重实效的途径\n\n> **提示11：**\n> DRY -Don't Repeat Yourself\n\n系统中的每一项知识都必须具有单一、无歧义、权威的表示。\n重复是如何发生的：\n- 强加的重复（imposed duplication）：开发者觉得无可选择--环境似乎要求重复\n- 无意的重复（inadvertent duplication）：开发者没有意识到他们在重复\n- 无耐性的重复（impatient duplication）：开发者偷懒，重复因为更容易\n- 开发者之间的重复（interdeveloper duplication）：同一团队不同人重复了同样的信息\n\n> **提示12：**\n> Make it Easy to Reuse 让复用变得容易\n\n满足正交性，在计算机技术中，该术语用于表示某种不相互依赖性或解耦性。\n比如：改动界面，而不影响数据库；而更换数据库，不用更改界面。\n当任何系统的各个组件相互高度依赖时，就不再有局部修正（local fix）这样的事情。\n面向对象程序设计中的 **“高内聚、低耦合”**\n使用若干技术维持正交性：\n- 让你的代码保持解耦 --> 面向对象中的迪米特法则\n- 避免使用全局数据 --> 引用全局数据使得把自己与共享该数据的其他组件绑定在了一起\n- 避免编写相似的函数 --> 开始和结束共享公共的代码，中间的算法缺不相同。重复的代码是结构问题的一种症状：使用设计模式中的策略模式。\n\n> **提示15：**\n> Use Tracer Bullets to Find the Target 使用曳光弹找到目标\n\n曳光弹类比，曳光弹与真实的子弹在相同的环境、相同的约束下工作。它们快速飞向目标，枪手因此可以得到及时的反馈信息，从而快速调整。 --> 使用曳光型代码构建解决方案。\n曳光代码的优点：\n- 用户能够及早看到工作的东西。\n- 开发者构建了一个他们能在其中工作的结构。\n- 你有了一个集成平台。\n- 你有了可用于演示的东西。\n- 你将更能够感觉到工作进度。\n\n曳光代码虽然简约，但却是完整的，并且构成了最终系统的骨架的一部分，并不是用过即扔的代码。可以把原型制作视为在第一发曳光弹之前进行的侦查和情报收集工作。\n\n# 基本工具\n一个程序员是一位 **工匠**，也需要有工匠这种的心态，每一位工匠都需要一套品质良好的基本工具，而这些工具需要经过认真挑选，可以完成很少与其他工具重合的特定工作。\n\n## 纯文本（Plain Text）-- 最强大的工具之一\n纯文本包含txt、xml、html等，一些是有结构的如xml，一些是没有结构的如txt\n\n> **提示20：**\n> Keep Knowledge in Plain Text 用纯文本保存知识\n\n纯文本的好处：\n- 保证不过时：人能够阅读的数据形式，以及自描述的数据，将比所有其他的数据形式和创建它们的应用都活的更长久，数据格式让人们能够理解（human understandable）。\n- 杠杆作用：如果文件是纯文本格式，可以使用版本控制管理系统进行管理，可以自动保存所有改动的历史。从另一方面说纯文本保留着通往二进制的接口。\n- 更易于测试：如果测试文件是纯文本格式，那么增加、更新、或是修改测试数据就是一件很简单的事情。\n\n## 使用脚本语言和编辑器\n\n> **提示21：**\n> Use the Power of Command Shells 利用命令shell的力量\n\n在Linux下可以使用shell命令操作，查找各种文件，比单纯用GUI界面会方便许多，也更加高效\n\n> **提示22：**\n> Use a Single Editor Well 用好一种编辑器\n\n选一种编辑器，彻底了解并熟练掌握它，并将其用于所有的编辑任务：代码、文档、备忘录、系统管理等。\n编辑器将成为 **双手的延伸~~**`键会滑过文本和思想时歌唱起来！`\n**我现在选择ATOM！编辑器就是信仰问题~**\n\n**好的编辑器需要有的特性（ATOM都包含）：**\n- 可配置：偏好配置，字体颜色，热键绑定等\n- 可扩展：集成各种插件，可以集成各种新的语言编译环境\n- 可编程：可对编辑器编程，让它执行复杂的、多步骤的任务。可以通过宏或内建的脚本编程语言进行编程控制该编辑器。\n- 语法高亮\n- 联想和自动缩进\n- 初始代码模板设置\n- 类IDE特性（编译、调试等等）\n\n复现问题一个行之有效的方法：**橡皮鸭的方式**\n也就是向别人解释你写的代码，她应该越过你的肩膀看着屏幕，不断点头（像澡盆里上下晃动的橡皮鸭一样），她们应该一个字也不需要说，你只是一步步解释代码要做些什么，常常就能让问题从屏幕上跳出来，宣布bug自己的存在。\n\n> **提示27：**\n>Don't Assume it -- Prove It，不要假定，要证明。\n\n遇到问题，要想想自己的代码有无问题，而不是怀疑环境、系统自身的问题。\n\n> **提示28：**\n> Learn a Text Mainpulation Language 学习一种文本操作语言\n\n比如常用的Python、Perl等语言，完全可以试试编写脚本优化自己的编程及提高处理效率。\n\n## 构建自己的代码生成器\n\n当工匠面临一再地重复制作同一样东西的任务时，他们会取巧，需要建造夹具或模板，一旦他们做好了夹具，他们就可以反复制作工件。夹具带走了复杂性，降低了出错的机会。\n\n程序员往往也处在这样的位置上，也需要构建 **代码生成器**，一旦构建好，在整个项目生命周期都可以使用它。\n\n代码生成器主要有两种主要类型：\n- 被动代码生成器：生成的结果与生成器分离，生成结果独立。\n    - 本质上是参数化模板，根据一组输入生成给定的输出\n    - 可以生成模板、源码控制提示、版权说明及标准注释块等\n- 主动代码生成器：每次需要结果时使用，结果用过就扔。\n    - 将伪代码生成对应的可以运行的代码就需要使用主动代码生成器\n    - 不同语言代码之间的转换也需要主动代码生成器\n\n# 注重实效的偏执(Pragmatic Paranoia)\n\n编码过程我们必须不断地与他人的代码进行接合，这个代码可能不符合我们的高标准的代码，因此我们常常 **“防卫性编码”**\n而注重实效的程序员会更进一步，他们往往自己也不信任，他们会针对 **自己的错误** 进行防卫性的编码。\n\n> 当每个人都确实要对你不利时，偏执就是一个好主意。 --- Woody Allen\n\n## 按合约设计(Design by Contract, DBC)\n\n软件系统中使用按合约设计的一种方式，它关注的是用文档记录（并约定）软件模块的权利与责任，以确保程序的正确性。程序的正确性体现在完成了它声明要做的事情的程序，而DBC的核心所在就是用文档记载这样的声明，并进行校验。\n\n合约包含三个方面：\n\n- 前条件(precondition)：为了调用例程，必须为真的条件\n- 后条件(postcondition)：例程保证会做的事情，例程完成时世界的状态\n- 类不变项(class invariant)：类确保从调用者的视角来看，该条件总是为真\n- 循环不变项：循环的最终目标的陈述，每次迭代都保持为真，可用来确定边界\n- 语义不变项：表达不可违反的需求，一种“哲学合约”\n\n使用DBC的最大好处也许是他迫使需求与保证的问题走到前台来。在设计时简单的列举输入域的范围是什么、边界条件是什么、例程允诺交付什么等等。\n\n## 断言式编程\n\n需要抛弃 **“这绝不会发生”** 这种概念或者固执，但如果你的程序预期不应该或者不可能走到某一分支，那就应该使用断言式编程。\n\n> **提示33：**\n> If It can't Happen，Use Assertions to Ensure That It Won't 如果它不可能发生，用断言确保它不会发生\n\n但传给断言的条件不应该有副作用，断言可能会在编译时被关闭，绝不要把必须执行的代码放在assert中。\n不要用断言代替真正的错误处理，断言检查的是绝不应该发生的事情。\n\n## 使用异常进行错误处理\n异常很少应作为程序的正常流程的一部分使用，异常应保留给意外事件。\n异常表示即时的，非局部的控制转移 ---这是一种级联的（cascading）goto\n\n> **提示34：**\n> Use Exceptions for Exceptional Problems 将异常用于异常问题\n\n## 如何配平资源\n只要在编程，我们都要管理资源：内存、事务、线程、文件、定时器 --- 所有数量有限的事物。\n大多数时候，资源使用遵循一种可预测的模式：**你分配资源、使用它，然后解除其分配。**\n\n> **提示35：**\n> Finish What You Start 要有始有终\n\n这意味着，分配某项资源的例程或者对象应该负责解除该资源的分配。\n比如，打开文件和关闭文件应在同一个函数或者例程中实现，一个函数打开该文件并在退出时关闭它。\n\n嵌套分配资源：\n\n- 以与资源分配的次序 **相反**的次序解除资源的分配。这样如有一个资源含有对另一个资源的引用，就不会造成资源的遗弃和泄漏\n- 在代码的不同地方分配同一组资源，总是以相同的次序分配它们，这将降低死锁的可能性。\n无法配平资源时（出现动态数据结构的程序中），有三种选择（三选一，一般由所选语言决定）：\n- 顶层结构还负责释放它的任何子结构。\n- 只是解除顶层结构的分配。它指向的（没有在别处引用的）任何结构都会被遗弃。\n- 如果顶层结构含有任何子结构，它就拒绝解除自身的分配。\n\n# 弯曲，或折断(Bend, or Break)\n\n生活不会停步不前，我们的代码也不会。为了让我们赶上今天近乎疯狂的变化步伐，我们须要尽一切努力编写尽可能宽松、灵活的代码（因此我们需要设计模式，选择合理的设计模式对于代码\n复用将带来较大的正向作用）。\n\n>**提示36：**\n> Minimize Coupling Between Modules 使得模块之间的耦合减至最少\n\n也就是说编写代码的时候尽量遵循设计模式，比如迪米特法则，一个软件实体应当尽可能少地与其他实体发生作用。\n\n**迪米特法则规定，任何方法的调用都应该只调用属于以下情况的方法：**\n\n- 它自身\n- 传入该方法的任何参数\n- 它创建的任何对象\n- 任何直接持有的组件对象\n\n遵循迪米特法则缩小了调用类中的响应集（response set）的规模，以这种方式设计类的错误也往往更少。\n响应集：类的各个方法直接调用的函数的数目。\n\n## 元程序设计\n\n> 再多的天才也无法胜过对细节的关注 -- Levy Eighth Law\n\n细节会弄乱我们的代码，如果它们经常发生变化的话。每当我们改动代码，我们都可能会引入新的bug，因此我们可以让代码编的高度可配置化，也就是，容易适应变化。一个可用的方法使将细节封装至元数据。\n\n>**提示37：**\n> Configure, Dont Intergrate 要配置而不要集成\n\n使用元数据（metadata）描述应用的配置选项，元数据是关于数据的数据，可以理解为元数据是任何对应用进行描述的数据 ---应用该怎么运行、它应该使用什么资源。通常元数据是在运行时访问和使用，而不是在编译时访问和使用。\n建议使用纯文本的方式配置元数据。\n通常许多的程序只在启动时读取配置，如果修改配置，需要重新启动应用。更为灵活的方法使编写能在运行时重新加载其配置的程序。\n\n- 协作式配置：让应用相互的配置，让其适应其环境的软件，这就是动态地配置。\n\n## 时间耦合\n\n时间耦合是软件架构中常常被忽略的概念，我们通常都是线性的思考，先做这个，然后再做那个。但软件中这种运行方式将带来时间耦合。\n\n时间的要素\n- 并发：事情在同一时间发生\n- 次序：事情在时间中的相对位置\n\n\n时间耦合解决的就是并发的难题，我们需要容许并发，并解除时间或次序上的依赖，任何时间上的依赖一般包含以下几个方面，在这几个方面改善并发性，减少时间耦合：\n\n- 工作流分析：UML活动图，分析工作流，改善并发\n- 架构分析：饥饿的消费者模型，用服务进行设计--定义良好的、一致接口之后的独立、并发的对象\n- 设计分析：对任何全局或静态变量加以保护，免于并发访问；使用更整洁的接口\n- 部署分析：把系统架构成多个独立的服务，让配置成为动态的\n\n\n# 当你编码时\n编码不是机械的工作。每一分钟都需要决策，如果要让所得的程序享有长久、无误和富有生产力的一生，就必须对这些决策进行仔细的思考和判断。\n\n编写代码时，要让代码易于测试。\n\n## 靠巧合编程\n作为开发者，每天都处在雷区，记住士兵的故事，不要做出错误的结论，应该避免靠巧合编程 --不依靠运气和偶然的成功，要深思熟虑地编程。\n","source":"_posts/《The-Pragmatic-Programmer-程序员修炼之道》-读书整理.md","raw":"---\ntitle: 《The Pragmatic Programmer --程序员修炼之道》--读书整理\ncopyright: true\ndate: 2018-08-28 23:11:30\ncategories: 读书笔记\ntags:\n    - 实用主义\n    - 原则\n---\n\n# 注重实效的哲学\n\n> 编程是一种技艺，一种需要用心学习的技艺\n> 谢谢你们让我们梦想！\n\n注重实效的程序员的特征：\n- 早期的采纳者/快速的改编者：技术和技巧上的直觉\n- 好奇：喜欢提问\n- 批判的思考者：首先抓住事实而不是照搬别人的说法\n- 有现实感：设法理解你面临的每个问题的本质\n- 多才多艺：尽力熟悉广泛的技术和环境\n\n<!-- more -->\n\n> Care about your craft!\n> Think! about your work!\n> 在所有的弱点，最大的弱点就是害怕暴露弱点。 --- J.B.Bossuet\n\n软件系统的熵（entropy）表征了这个系统的混乱程度，指的是这个系统的“无序”的总量，也就是 **不确定性程度**。\n\n>**提示4：**\n>Dont Live with Broken Windows\n\n不要留着“破窗户”（低劣的设计、错误决策、或是糟糕的代码）不修，发现一个修理一个。\n如果你发现你所在团队和项目的代码十分漂亮 -- 编写整洁、设计良好，并且很优雅，你就很可能会格外注意不去把它弄脏。即使有火在咆哮（最后期限、发布日期、会展演示，等等），你也不会想成为第一个弄脏东西的人。\n\n>**提示6：**\n> Remember the big picture\n\n需要留心大图景。要持续不断的观察周围发生的事情，而不只是你自己在做的事情。---温水煮青蛙的故事。\n\n> 知识上的投资总能得到最好的回报。 ---本杰明.富兰克林\n\n随着你的知识的价值降低，对你的公司或客户来说，你的价值也在降低。我们想要阻止这样的事情，决不让它发生。\n\n知识资产（Knowledge Portfolios）的保值：\n- 定期投资：作为习惯\n- 多元化：你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特定技术的各种特性。\n- 管理风险：高风险，高回报，低风险，低回报；不应太保守，错过可能的机会。不要把所有的技术鸡蛋放在一个篮子里。\n- 低买高卖：新兴技术流行之前学习它可能就和我们找到被低估的股票一样。\n- 重新评估和平衡：IT行业是一个很动荡的行业，你需要重新评估和平衡你现在掌握的技术。\n\n>**提示8：**\n> Invest Regularly in Your Knowledge Portfolio 定期为你的知识资产投资\n\n- 每年至少学习一种新语言。拓展思维，避免墨守成规。\n- 每季度阅读一本技术书籍。掌握你现在使用的技术，扩宽范围，阅读一些与你项目无关的书籍。\n- 阅读相关非技术书籍。提高自己的人文素养。\n- 试验不同的生产环境。适应变化。\n- 参加本地用户的组织。融入当地。\n\n>**提示9：**\n> Critically Analyze What You Read and Hear 批判地分析你读到的和听到的\n\n不要低估商业主义的力量。web搜索引擎的页面前面的结果，并不意味着那就是最佳选择；内容供应商可以付钱排在前面。交流越有效，你就越有影响力。\n\n# 注重实效的途径\n\n> **提示11：**\n> DRY -Don't Repeat Yourself\n\n系统中的每一项知识都必须具有单一、无歧义、权威的表示。\n重复是如何发生的：\n- 强加的重复（imposed duplication）：开发者觉得无可选择--环境似乎要求重复\n- 无意的重复（inadvertent duplication）：开发者没有意识到他们在重复\n- 无耐性的重复（impatient duplication）：开发者偷懒，重复因为更容易\n- 开发者之间的重复（interdeveloper duplication）：同一团队不同人重复了同样的信息\n\n> **提示12：**\n> Make it Easy to Reuse 让复用变得容易\n\n满足正交性，在计算机技术中，该术语用于表示某种不相互依赖性或解耦性。\n比如：改动界面，而不影响数据库；而更换数据库，不用更改界面。\n当任何系统的各个组件相互高度依赖时，就不再有局部修正（local fix）这样的事情。\n面向对象程序设计中的 **“高内聚、低耦合”**\n使用若干技术维持正交性：\n- 让你的代码保持解耦 --> 面向对象中的迪米特法则\n- 避免使用全局数据 --> 引用全局数据使得把自己与共享该数据的其他组件绑定在了一起\n- 避免编写相似的函数 --> 开始和结束共享公共的代码，中间的算法缺不相同。重复的代码是结构问题的一种症状：使用设计模式中的策略模式。\n\n> **提示15：**\n> Use Tracer Bullets to Find the Target 使用曳光弹找到目标\n\n曳光弹类比，曳光弹与真实的子弹在相同的环境、相同的约束下工作。它们快速飞向目标，枪手因此可以得到及时的反馈信息，从而快速调整。 --> 使用曳光型代码构建解决方案。\n曳光代码的优点：\n- 用户能够及早看到工作的东西。\n- 开发者构建了一个他们能在其中工作的结构。\n- 你有了一个集成平台。\n- 你有了可用于演示的东西。\n- 你将更能够感觉到工作进度。\n\n曳光代码虽然简约，但却是完整的，并且构成了最终系统的骨架的一部分，并不是用过即扔的代码。可以把原型制作视为在第一发曳光弹之前进行的侦查和情报收集工作。\n\n# 基本工具\n一个程序员是一位 **工匠**，也需要有工匠这种的心态，每一位工匠都需要一套品质良好的基本工具，而这些工具需要经过认真挑选，可以完成很少与其他工具重合的特定工作。\n\n## 纯文本（Plain Text）-- 最强大的工具之一\n纯文本包含txt、xml、html等，一些是有结构的如xml，一些是没有结构的如txt\n\n> **提示20：**\n> Keep Knowledge in Plain Text 用纯文本保存知识\n\n纯文本的好处：\n- 保证不过时：人能够阅读的数据形式，以及自描述的数据，将比所有其他的数据形式和创建它们的应用都活的更长久，数据格式让人们能够理解（human understandable）。\n- 杠杆作用：如果文件是纯文本格式，可以使用版本控制管理系统进行管理，可以自动保存所有改动的历史。从另一方面说纯文本保留着通往二进制的接口。\n- 更易于测试：如果测试文件是纯文本格式，那么增加、更新、或是修改测试数据就是一件很简单的事情。\n\n## 使用脚本语言和编辑器\n\n> **提示21：**\n> Use the Power of Command Shells 利用命令shell的力量\n\n在Linux下可以使用shell命令操作，查找各种文件，比单纯用GUI界面会方便许多，也更加高效\n\n> **提示22：**\n> Use a Single Editor Well 用好一种编辑器\n\n选一种编辑器，彻底了解并熟练掌握它，并将其用于所有的编辑任务：代码、文档、备忘录、系统管理等。\n编辑器将成为 **双手的延伸~~**`键会滑过文本和思想时歌唱起来！`\n**我现在选择ATOM！编辑器就是信仰问题~**\n\n**好的编辑器需要有的特性（ATOM都包含）：**\n- 可配置：偏好配置，字体颜色，热键绑定等\n- 可扩展：集成各种插件，可以集成各种新的语言编译环境\n- 可编程：可对编辑器编程，让它执行复杂的、多步骤的任务。可以通过宏或内建的脚本编程语言进行编程控制该编辑器。\n- 语法高亮\n- 联想和自动缩进\n- 初始代码模板设置\n- 类IDE特性（编译、调试等等）\n\n复现问题一个行之有效的方法：**橡皮鸭的方式**\n也就是向别人解释你写的代码，她应该越过你的肩膀看着屏幕，不断点头（像澡盆里上下晃动的橡皮鸭一样），她们应该一个字也不需要说，你只是一步步解释代码要做些什么，常常就能让问题从屏幕上跳出来，宣布bug自己的存在。\n\n> **提示27：**\n>Don't Assume it -- Prove It，不要假定，要证明。\n\n遇到问题，要想想自己的代码有无问题，而不是怀疑环境、系统自身的问题。\n\n> **提示28：**\n> Learn a Text Mainpulation Language 学习一种文本操作语言\n\n比如常用的Python、Perl等语言，完全可以试试编写脚本优化自己的编程及提高处理效率。\n\n## 构建自己的代码生成器\n\n当工匠面临一再地重复制作同一样东西的任务时，他们会取巧，需要建造夹具或模板，一旦他们做好了夹具，他们就可以反复制作工件。夹具带走了复杂性，降低了出错的机会。\n\n程序员往往也处在这样的位置上，也需要构建 **代码生成器**，一旦构建好，在整个项目生命周期都可以使用它。\n\n代码生成器主要有两种主要类型：\n- 被动代码生成器：生成的结果与生成器分离，生成结果独立。\n    - 本质上是参数化模板，根据一组输入生成给定的输出\n    - 可以生成模板、源码控制提示、版权说明及标准注释块等\n- 主动代码生成器：每次需要结果时使用，结果用过就扔。\n    - 将伪代码生成对应的可以运行的代码就需要使用主动代码生成器\n    - 不同语言代码之间的转换也需要主动代码生成器\n\n# 注重实效的偏执(Pragmatic Paranoia)\n\n编码过程我们必须不断地与他人的代码进行接合，这个代码可能不符合我们的高标准的代码，因此我们常常 **“防卫性编码”**\n而注重实效的程序员会更进一步，他们往往自己也不信任，他们会针对 **自己的错误** 进行防卫性的编码。\n\n> 当每个人都确实要对你不利时，偏执就是一个好主意。 --- Woody Allen\n\n## 按合约设计(Design by Contract, DBC)\n\n软件系统中使用按合约设计的一种方式，它关注的是用文档记录（并约定）软件模块的权利与责任，以确保程序的正确性。程序的正确性体现在完成了它声明要做的事情的程序，而DBC的核心所在就是用文档记载这样的声明，并进行校验。\n\n合约包含三个方面：\n\n- 前条件(precondition)：为了调用例程，必须为真的条件\n- 后条件(postcondition)：例程保证会做的事情，例程完成时世界的状态\n- 类不变项(class invariant)：类确保从调用者的视角来看，该条件总是为真\n- 循环不变项：循环的最终目标的陈述，每次迭代都保持为真，可用来确定边界\n- 语义不变项：表达不可违反的需求，一种“哲学合约”\n\n使用DBC的最大好处也许是他迫使需求与保证的问题走到前台来。在设计时简单的列举输入域的范围是什么、边界条件是什么、例程允诺交付什么等等。\n\n## 断言式编程\n\n需要抛弃 **“这绝不会发生”** 这种概念或者固执，但如果你的程序预期不应该或者不可能走到某一分支，那就应该使用断言式编程。\n\n> **提示33：**\n> If It can't Happen，Use Assertions to Ensure That It Won't 如果它不可能发生，用断言确保它不会发生\n\n但传给断言的条件不应该有副作用，断言可能会在编译时被关闭，绝不要把必须执行的代码放在assert中。\n不要用断言代替真正的错误处理，断言检查的是绝不应该发生的事情。\n\n## 使用异常进行错误处理\n异常很少应作为程序的正常流程的一部分使用，异常应保留给意外事件。\n异常表示即时的，非局部的控制转移 ---这是一种级联的（cascading）goto\n\n> **提示34：**\n> Use Exceptions for Exceptional Problems 将异常用于异常问题\n\n## 如何配平资源\n只要在编程，我们都要管理资源：内存、事务、线程、文件、定时器 --- 所有数量有限的事物。\n大多数时候，资源使用遵循一种可预测的模式：**你分配资源、使用它，然后解除其分配。**\n\n> **提示35：**\n> Finish What You Start 要有始有终\n\n这意味着，分配某项资源的例程或者对象应该负责解除该资源的分配。\n比如，打开文件和关闭文件应在同一个函数或者例程中实现，一个函数打开该文件并在退出时关闭它。\n\n嵌套分配资源：\n\n- 以与资源分配的次序 **相反**的次序解除资源的分配。这样如有一个资源含有对另一个资源的引用，就不会造成资源的遗弃和泄漏\n- 在代码的不同地方分配同一组资源，总是以相同的次序分配它们，这将降低死锁的可能性。\n无法配平资源时（出现动态数据结构的程序中），有三种选择（三选一，一般由所选语言决定）：\n- 顶层结构还负责释放它的任何子结构。\n- 只是解除顶层结构的分配。它指向的（没有在别处引用的）任何结构都会被遗弃。\n- 如果顶层结构含有任何子结构，它就拒绝解除自身的分配。\n\n# 弯曲，或折断(Bend, or Break)\n\n生活不会停步不前，我们的代码也不会。为了让我们赶上今天近乎疯狂的变化步伐，我们须要尽一切努力编写尽可能宽松、灵活的代码（因此我们需要设计模式，选择合理的设计模式对于代码\n复用将带来较大的正向作用）。\n\n>**提示36：**\n> Minimize Coupling Between Modules 使得模块之间的耦合减至最少\n\n也就是说编写代码的时候尽量遵循设计模式，比如迪米特法则，一个软件实体应当尽可能少地与其他实体发生作用。\n\n**迪米特法则规定，任何方法的调用都应该只调用属于以下情况的方法：**\n\n- 它自身\n- 传入该方法的任何参数\n- 它创建的任何对象\n- 任何直接持有的组件对象\n\n遵循迪米特法则缩小了调用类中的响应集（response set）的规模，以这种方式设计类的错误也往往更少。\n响应集：类的各个方法直接调用的函数的数目。\n\n## 元程序设计\n\n> 再多的天才也无法胜过对细节的关注 -- Levy Eighth Law\n\n细节会弄乱我们的代码，如果它们经常发生变化的话。每当我们改动代码，我们都可能会引入新的bug，因此我们可以让代码编的高度可配置化，也就是，容易适应变化。一个可用的方法使将细节封装至元数据。\n\n>**提示37：**\n> Configure, Dont Intergrate 要配置而不要集成\n\n使用元数据（metadata）描述应用的配置选项，元数据是关于数据的数据，可以理解为元数据是任何对应用进行描述的数据 ---应用该怎么运行、它应该使用什么资源。通常元数据是在运行时访问和使用，而不是在编译时访问和使用。\n建议使用纯文本的方式配置元数据。\n通常许多的程序只在启动时读取配置，如果修改配置，需要重新启动应用。更为灵活的方法使编写能在运行时重新加载其配置的程序。\n\n- 协作式配置：让应用相互的配置，让其适应其环境的软件，这就是动态地配置。\n\n## 时间耦合\n\n时间耦合是软件架构中常常被忽略的概念，我们通常都是线性的思考，先做这个，然后再做那个。但软件中这种运行方式将带来时间耦合。\n\n时间的要素\n- 并发：事情在同一时间发生\n- 次序：事情在时间中的相对位置\n\n\n时间耦合解决的就是并发的难题，我们需要容许并发，并解除时间或次序上的依赖，任何时间上的依赖一般包含以下几个方面，在这几个方面改善并发性，减少时间耦合：\n\n- 工作流分析：UML活动图，分析工作流，改善并发\n- 架构分析：饥饿的消费者模型，用服务进行设计--定义良好的、一致接口之后的独立、并发的对象\n- 设计分析：对任何全局或静态变量加以保护，免于并发访问；使用更整洁的接口\n- 部署分析：把系统架构成多个独立的服务，让配置成为动态的\n\n\n# 当你编码时\n编码不是机械的工作。每一分钟都需要决策，如果要让所得的程序享有长久、无误和富有生产力的一生，就必须对这些决策进行仔细的思考和判断。\n\n编写代码时，要让代码易于测试。\n\n## 靠巧合编程\n作为开发者，每天都处在雷区，记住士兵的故事，不要做出错误的结论，应该避免靠巧合编程 --不依靠运气和偶然的成功，要深思熟虑地编程。\n","slug":"《The-Pragmatic-Programmer-程序员修炼之道》-读书整理","published":1,"updated":"2018-10-02T03:17:19.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c81001g4ov1ayvy1pps","content":"<h1 id=\"注重实效的哲学\"><a href=\"#注重实效的哲学\" class=\"headerlink\" title=\"注重实效的哲学\"></a>注重实效的哲学</h1><blockquote>\n<p>编程是一种技艺，一种需要用心学习的技艺<br>谢谢你们让我们梦想！</p>\n</blockquote>\n<p>注重实效的程序员的特征：</p>\n<ul>\n<li>早期的采纳者/快速的改编者：技术和技巧上的直觉</li>\n<li>好奇：喜欢提问</li>\n<li>批判的思考者：首先抓住事实而不是照搬别人的说法</li>\n<li>有现实感：设法理解你面临的每个问题的本质</li>\n<li>多才多艺：尽力熟悉广泛的技术和环境</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>Care about your craft!<br>Think! about your work!<br>在所有的弱点，最大的弱点就是害怕暴露弱点。 — J.B.Bossuet</p>\n</blockquote>\n<p>软件系统的熵（entropy）表征了这个系统的混乱程度，指的是这个系统的“无序”的总量，也就是 <strong>不确定性程度</strong>。</p>\n<blockquote>\n<p><strong>提示4：</strong><br>Dont Live with Broken Windows</p>\n</blockquote>\n<p>不要留着“破窗户”（低劣的设计、错误决策、或是糟糕的代码）不修，发现一个修理一个。<br>如果你发现你所在团队和项目的代码十分漂亮 – 编写整洁、设计良好，并且很优雅，你就很可能会格外注意不去把它弄脏。即使有火在咆哮（最后期限、发布日期、会展演示，等等），你也不会想成为第一个弄脏东西的人。</p>\n<blockquote>\n<p><strong>提示6：</strong><br>Remember the big picture</p>\n</blockquote>\n<p>需要留心大图景。要持续不断的观察周围发生的事情，而不只是你自己在做的事情。—温水煮青蛙的故事。</p>\n<blockquote>\n<p>知识上的投资总能得到最好的回报。 —本杰明.富兰克林</p>\n</blockquote>\n<p>随着你的知识的价值降低，对你的公司或客户来说，你的价值也在降低。我们想要阻止这样的事情，决不让它发生。</p>\n<p>知识资产（Knowledge Portfolios）的保值：</p>\n<ul>\n<li>定期投资：作为习惯</li>\n<li>多元化：你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特定技术的各种特性。</li>\n<li>管理风险：高风险，高回报，低风险，低回报；不应太保守，错过可能的机会。不要把所有的技术鸡蛋放在一个篮子里。</li>\n<li>低买高卖：新兴技术流行之前学习它可能就和我们找到被低估的股票一样。</li>\n<li>重新评估和平衡：IT行业是一个很动荡的行业，你需要重新评估和平衡你现在掌握的技术。</li>\n</ul>\n<blockquote>\n<p><strong>提示8：</strong><br>Invest Regularly in Your Knowledge Portfolio 定期为你的知识资产投资</p>\n</blockquote>\n<ul>\n<li>每年至少学习一种新语言。拓展思维，避免墨守成规。</li>\n<li>每季度阅读一本技术书籍。掌握你现在使用的技术，扩宽范围，阅读一些与你项目无关的书籍。</li>\n<li>阅读相关非技术书籍。提高自己的人文素养。</li>\n<li>试验不同的生产环境。适应变化。</li>\n<li>参加本地用户的组织。融入当地。</li>\n</ul>\n<blockquote>\n<p><strong>提示9：</strong><br>Critically Analyze What You Read and Hear 批判地分析你读到的和听到的</p>\n</blockquote>\n<p>不要低估商业主义的力量。web搜索引擎的页面前面的结果，并不意味着那就是最佳选择；内容供应商可以付钱排在前面。交流越有效，你就越有影响力。</p>\n<h1 id=\"注重实效的途径\"><a href=\"#注重实效的途径\" class=\"headerlink\" title=\"注重实效的途径\"></a>注重实效的途径</h1><blockquote>\n<p><strong>提示11：</strong><br>DRY -Don’t Repeat Yourself</p>\n</blockquote>\n<p>系统中的每一项知识都必须具有单一、无歧义、权威的表示。<br>重复是如何发生的：</p>\n<ul>\n<li>强加的重复（imposed duplication）：开发者觉得无可选择–环境似乎要求重复</li>\n<li>无意的重复（inadvertent duplication）：开发者没有意识到他们在重复</li>\n<li>无耐性的重复（impatient duplication）：开发者偷懒，重复因为更容易</li>\n<li>开发者之间的重复（interdeveloper duplication）：同一团队不同人重复了同样的信息</li>\n</ul>\n<blockquote>\n<p><strong>提示12：</strong><br>Make it Easy to Reuse 让复用变得容易</p>\n</blockquote>\n<p>满足正交性，在计算机技术中，该术语用于表示某种不相互依赖性或解耦性。<br>比如：改动界面，而不影响数据库；而更换数据库，不用更改界面。<br>当任何系统的各个组件相互高度依赖时，就不再有局部修正（local fix）这样的事情。<br>面向对象程序设计中的 <strong>“高内聚、低耦合”</strong><br>使用若干技术维持正交性：</p>\n<ul>\n<li>让你的代码保持解耦 –&gt; 面向对象中的迪米特法则</li>\n<li>避免使用全局数据 –&gt; 引用全局数据使得把自己与共享该数据的其他组件绑定在了一起</li>\n<li>避免编写相似的函数 –&gt; 开始和结束共享公共的代码，中间的算法缺不相同。重复的代码是结构问题的一种症状：使用设计模式中的策略模式。</li>\n</ul>\n<blockquote>\n<p><strong>提示15：</strong><br>Use Tracer Bullets to Find the Target 使用曳光弹找到目标</p>\n</blockquote>\n<p>曳光弹类比，曳光弹与真实的子弹在相同的环境、相同的约束下工作。它们快速飞向目标，枪手因此可以得到及时的反馈信息，从而快速调整。 –&gt; 使用曳光型代码构建解决方案。<br>曳光代码的优点：</p>\n<ul>\n<li>用户能够及早看到工作的东西。</li>\n<li>开发者构建了一个他们能在其中工作的结构。</li>\n<li>你有了一个集成平台。</li>\n<li>你有了可用于演示的东西。</li>\n<li>你将更能够感觉到工作进度。</li>\n</ul>\n<p>曳光代码虽然简约，但却是完整的，并且构成了最终系统的骨架的一部分，并不是用过即扔的代码。可以把原型制作视为在第一发曳光弹之前进行的侦查和情报收集工作。</p>\n<h1 id=\"基本工具\"><a href=\"#基本工具\" class=\"headerlink\" title=\"基本工具\"></a>基本工具</h1><p>一个程序员是一位 <strong>工匠</strong>，也需要有工匠这种的心态，每一位工匠都需要一套品质良好的基本工具，而这些工具需要经过认真挑选，可以完成很少与其他工具重合的特定工作。</p>\n<h2 id=\"纯文本（Plain-Text）–-最强大的工具之一\"><a href=\"#纯文本（Plain-Text）–-最强大的工具之一\" class=\"headerlink\" title=\"纯文本（Plain Text）– 最强大的工具之一\"></a>纯文本（Plain Text）– 最强大的工具之一</h2><p>纯文本包含txt、xml、html等，一些是有结构的如xml，一些是没有结构的如txt</p>\n<blockquote>\n<p><strong>提示20：</strong><br>Keep Knowledge in Plain Text 用纯文本保存知识</p>\n</blockquote>\n<p>纯文本的好处：</p>\n<ul>\n<li>保证不过时：人能够阅读的数据形式，以及自描述的数据，将比所有其他的数据形式和创建它们的应用都活的更长久，数据格式让人们能够理解（human understandable）。</li>\n<li>杠杆作用：如果文件是纯文本格式，可以使用版本控制管理系统进行管理，可以自动保存所有改动的历史。从另一方面说纯文本保留着通往二进制的接口。</li>\n<li>更易于测试：如果测试文件是纯文本格式，那么增加、更新、或是修改测试数据就是一件很简单的事情。</li>\n</ul>\n<h2 id=\"使用脚本语言和编辑器\"><a href=\"#使用脚本语言和编辑器\" class=\"headerlink\" title=\"使用脚本语言和编辑器\"></a>使用脚本语言和编辑器</h2><blockquote>\n<p><strong>提示21：</strong><br>Use the Power of Command Shells 利用命令shell的力量</p>\n</blockquote>\n<p>在Linux下可以使用shell命令操作，查找各种文件，比单纯用GUI界面会方便许多，也更加高效</p>\n<blockquote>\n<p><strong>提示22：</strong><br>Use a Single Editor Well 用好一种编辑器</p>\n</blockquote>\n<p>选一种编辑器，彻底了解并熟练掌握它，并将其用于所有的编辑任务：代码、文档、备忘录、系统管理等。<br>编辑器将成为 <strong>双手的延伸~~</strong><code>键会滑过文本和思想时歌唱起来！</code><br><strong>我现在选择ATOM！编辑器就是信仰问题~</strong></p>\n<p><strong>好的编辑器需要有的特性（ATOM都包含）：</strong></p>\n<ul>\n<li>可配置：偏好配置，字体颜色，热键绑定等</li>\n<li>可扩展：集成各种插件，可以集成各种新的语言编译环境</li>\n<li>可编程：可对编辑器编程，让它执行复杂的、多步骤的任务。可以通过宏或内建的脚本编程语言进行编程控制该编辑器。</li>\n<li>语法高亮</li>\n<li>联想和自动缩进</li>\n<li>初始代码模板设置</li>\n<li>类IDE特性（编译、调试等等）</li>\n</ul>\n<p>复现问题一个行之有效的方法：<strong>橡皮鸭的方式</strong><br>也就是向别人解释你写的代码，她应该越过你的肩膀看着屏幕，不断点头（像澡盆里上下晃动的橡皮鸭一样），她们应该一个字也不需要说，你只是一步步解释代码要做些什么，常常就能让问题从屏幕上跳出来，宣布bug自己的存在。</p>\n<blockquote>\n<p><strong>提示27：</strong><br>Don’t Assume it – Prove It，不要假定，要证明。</p>\n</blockquote>\n<p>遇到问题，要想想自己的代码有无问题，而不是怀疑环境、系统自身的问题。</p>\n<blockquote>\n<p><strong>提示28：</strong><br>Learn a Text Mainpulation Language 学习一种文本操作语言</p>\n</blockquote>\n<p>比如常用的Python、Perl等语言，完全可以试试编写脚本优化自己的编程及提高处理效率。</p>\n<h2 id=\"构建自己的代码生成器\"><a href=\"#构建自己的代码生成器\" class=\"headerlink\" title=\"构建自己的代码生成器\"></a>构建自己的代码生成器</h2><p>当工匠面临一再地重复制作同一样东西的任务时，他们会取巧，需要建造夹具或模板，一旦他们做好了夹具，他们就可以反复制作工件。夹具带走了复杂性，降低了出错的机会。</p>\n<p>程序员往往也处在这样的位置上，也需要构建 <strong>代码生成器</strong>，一旦构建好，在整个项目生命周期都可以使用它。</p>\n<p>代码生成器主要有两种主要类型：</p>\n<ul>\n<li>被动代码生成器：生成的结果与生成器分离，生成结果独立。<ul>\n<li>本质上是参数化模板，根据一组输入生成给定的输出</li>\n<li>可以生成模板、源码控制提示、版权说明及标准注释块等</li>\n</ul>\n</li>\n<li>主动代码生成器：每次需要结果时使用，结果用过就扔。<ul>\n<li>将伪代码生成对应的可以运行的代码就需要使用主动代码生成器</li>\n<li>不同语言代码之间的转换也需要主动代码生成器</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"注重实效的偏执-Pragmatic-Paranoia\"><a href=\"#注重实效的偏执-Pragmatic-Paranoia\" class=\"headerlink\" title=\"注重实效的偏执(Pragmatic Paranoia)\"></a>注重实效的偏执(Pragmatic Paranoia)</h1><p>编码过程我们必须不断地与他人的代码进行接合，这个代码可能不符合我们的高标准的代码，因此我们常常 <strong>“防卫性编码”</strong><br>而注重实效的程序员会更进一步，他们往往自己也不信任，他们会针对 <strong>自己的错误</strong> 进行防卫性的编码。</p>\n<blockquote>\n<p>当每个人都确实要对你不利时，偏执就是一个好主意。 — Woody Allen</p>\n</blockquote>\n<h2 id=\"按合约设计-Design-by-Contract-DBC\"><a href=\"#按合约设计-Design-by-Contract-DBC\" class=\"headerlink\" title=\"按合约设计(Design by Contract, DBC)\"></a>按合约设计(Design by Contract, DBC)</h2><p>软件系统中使用按合约设计的一种方式，它关注的是用文档记录（并约定）软件模块的权利与责任，以确保程序的正确性。程序的正确性体现在完成了它声明要做的事情的程序，而DBC的核心所在就是用文档记载这样的声明，并进行校验。</p>\n<p>合约包含三个方面：</p>\n<ul>\n<li>前条件(precondition)：为了调用例程，必须为真的条件</li>\n<li>后条件(postcondition)：例程保证会做的事情，例程完成时世界的状态</li>\n<li>类不变项(class invariant)：类确保从调用者的视角来看，该条件总是为真</li>\n<li>循环不变项：循环的最终目标的陈述，每次迭代都保持为真，可用来确定边界</li>\n<li>语义不变项：表达不可违反的需求，一种“哲学合约”</li>\n</ul>\n<p>使用DBC的最大好处也许是他迫使需求与保证的问题走到前台来。在设计时简单的列举输入域的范围是什么、边界条件是什么、例程允诺交付什么等等。</p>\n<h2 id=\"断言式编程\"><a href=\"#断言式编程\" class=\"headerlink\" title=\"断言式编程\"></a>断言式编程</h2><p>需要抛弃 <strong>“这绝不会发生”</strong> 这种概念或者固执，但如果你的程序预期不应该或者不可能走到某一分支，那就应该使用断言式编程。</p>\n<blockquote>\n<p><strong>提示33：</strong><br>If It can’t Happen，Use Assertions to Ensure That It Won’t 如果它不可能发生，用断言确保它不会发生</p>\n</blockquote>\n<p>但传给断言的条件不应该有副作用，断言可能会在编译时被关闭，绝不要把必须执行的代码放在assert中。<br>不要用断言代替真正的错误处理，断言检查的是绝不应该发生的事情。</p>\n<h2 id=\"使用异常进行错误处理\"><a href=\"#使用异常进行错误处理\" class=\"headerlink\" title=\"使用异常进行错误处理\"></a>使用异常进行错误处理</h2><p>异常很少应作为程序的正常流程的一部分使用，异常应保留给意外事件。<br>异常表示即时的，非局部的控制转移 —这是一种级联的（cascading）goto</p>\n<blockquote>\n<p><strong>提示34：</strong><br>Use Exceptions for Exceptional Problems 将异常用于异常问题</p>\n</blockquote>\n<h2 id=\"如何配平资源\"><a href=\"#如何配平资源\" class=\"headerlink\" title=\"如何配平资源\"></a>如何配平资源</h2><p>只要在编程，我们都要管理资源：内存、事务、线程、文件、定时器 — 所有数量有限的事物。<br>大多数时候，资源使用遵循一种可预测的模式：<strong>你分配资源、使用它，然后解除其分配。</strong></p>\n<blockquote>\n<p><strong>提示35：</strong><br>Finish What You Start 要有始有终</p>\n</blockquote>\n<p>这意味着，分配某项资源的例程或者对象应该负责解除该资源的分配。<br>比如，打开文件和关闭文件应在同一个函数或者例程中实现，一个函数打开该文件并在退出时关闭它。</p>\n<p>嵌套分配资源：</p>\n<ul>\n<li>以与资源分配的次序 <strong>相反</strong>的次序解除资源的分配。这样如有一个资源含有对另一个资源的引用，就不会造成资源的遗弃和泄漏</li>\n<li>在代码的不同地方分配同一组资源，总是以相同的次序分配它们，这将降低死锁的可能性。<br>无法配平资源时（出现动态数据结构的程序中），有三种选择（三选一，一般由所选语言决定）：</li>\n<li>顶层结构还负责释放它的任何子结构。</li>\n<li>只是解除顶层结构的分配。它指向的（没有在别处引用的）任何结构都会被遗弃。</li>\n<li>如果顶层结构含有任何子结构，它就拒绝解除自身的分配。</li>\n</ul>\n<h1 id=\"弯曲，或折断-Bend-or-Break\"><a href=\"#弯曲，或折断-Bend-or-Break\" class=\"headerlink\" title=\"弯曲，或折断(Bend, or Break)\"></a>弯曲，或折断(Bend, or Break)</h1><p>生活不会停步不前，我们的代码也不会。为了让我们赶上今天近乎疯狂的变化步伐，我们须要尽一切努力编写尽可能宽松、灵活的代码（因此我们需要设计模式，选择合理的设计模式对于代码<br>复用将带来较大的正向作用）。</p>\n<blockquote>\n<p><strong>提示36：</strong><br>Minimize Coupling Between Modules 使得模块之间的耦合减至最少</p>\n</blockquote>\n<p>也就是说编写代码的时候尽量遵循设计模式，比如迪米特法则，一个软件实体应当尽可能少地与其他实体发生作用。</p>\n<p><strong>迪米特法则规定，任何方法的调用都应该只调用属于以下情况的方法：</strong></p>\n<ul>\n<li>它自身</li>\n<li>传入该方法的任何参数</li>\n<li>它创建的任何对象</li>\n<li>任何直接持有的组件对象</li>\n</ul>\n<p>遵循迪米特法则缩小了调用类中的响应集（response set）的规模，以这种方式设计类的错误也往往更少。<br>响应集：类的各个方法直接调用的函数的数目。</p>\n<h2 id=\"元程序设计\"><a href=\"#元程序设计\" class=\"headerlink\" title=\"元程序设计\"></a>元程序设计</h2><blockquote>\n<p>再多的天才也无法胜过对细节的关注 – Levy Eighth Law</p>\n</blockquote>\n<p>细节会弄乱我们的代码，如果它们经常发生变化的话。每当我们改动代码，我们都可能会引入新的bug，因此我们可以让代码编的高度可配置化，也就是，容易适应变化。一个可用的方法使将细节封装至元数据。</p>\n<blockquote>\n<p><strong>提示37：</strong><br>Configure, Dont Intergrate 要配置而不要集成</p>\n</blockquote>\n<p>使用元数据（metadata）描述应用的配置选项，元数据是关于数据的数据，可以理解为元数据是任何对应用进行描述的数据 —应用该怎么运行、它应该使用什么资源。通常元数据是在运行时访问和使用，而不是在编译时访问和使用。<br>建议使用纯文本的方式配置元数据。<br>通常许多的程序只在启动时读取配置，如果修改配置，需要重新启动应用。更为灵活的方法使编写能在运行时重新加载其配置的程序。</p>\n<ul>\n<li>协作式配置：让应用相互的配置，让其适应其环境的软件，这就是动态地配置。</li>\n</ul>\n<h2 id=\"时间耦合\"><a href=\"#时间耦合\" class=\"headerlink\" title=\"时间耦合\"></a>时间耦合</h2><p>时间耦合是软件架构中常常被忽略的概念，我们通常都是线性的思考，先做这个，然后再做那个。但软件中这种运行方式将带来时间耦合。</p>\n<p>时间的要素</p>\n<ul>\n<li>并发：事情在同一时间发生</li>\n<li>次序：事情在时间中的相对位置</li>\n</ul>\n<p>时间耦合解决的就是并发的难题，我们需要容许并发，并解除时间或次序上的依赖，任何时间上的依赖一般包含以下几个方面，在这几个方面改善并发性，减少时间耦合：</p>\n<ul>\n<li>工作流分析：UML活动图，分析工作流，改善并发</li>\n<li>架构分析：饥饿的消费者模型，用服务进行设计–定义良好的、一致接口之后的独立、并发的对象</li>\n<li>设计分析：对任何全局或静态变量加以保护，免于并发访问；使用更整洁的接口</li>\n<li>部署分析：把系统架构成多个独立的服务，让配置成为动态的</li>\n</ul>\n<h1 id=\"当你编码时\"><a href=\"#当你编码时\" class=\"headerlink\" title=\"当你编码时\"></a>当你编码时</h1><p>编码不是机械的工作。每一分钟都需要决策，如果要让所得的程序享有长久、无误和富有生产力的一生，就必须对这些决策进行仔细的思考和判断。</p>\n<p>编写代码时，要让代码易于测试。</p>\n<h2 id=\"靠巧合编程\"><a href=\"#靠巧合编程\" class=\"headerlink\" title=\"靠巧合编程\"></a>靠巧合编程</h2><p>作为开发者，每天都处在雷区，记住士兵的故事，不要做出错误的结论，应该避免靠巧合编程 –不依靠运气和偶然的成功，要深思熟虑地编程。</p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"注重实效的哲学\"><a href=\"#注重实效的哲学\" class=\"headerlink\" title=\"注重实效的哲学\"></a>注重实效的哲学</h1><blockquote>\n<p>编程是一种技艺，一种需要用心学习的技艺<br>谢谢你们让我们梦想！</p>\n</blockquote>\n<p>注重实效的程序员的特征：</p>\n<ul>\n<li>早期的采纳者/快速的改编者：技术和技巧上的直觉</li>\n<li>好奇：喜欢提问</li>\n<li>批判的思考者：首先抓住事实而不是照搬别人的说法</li>\n<li>有现实感：设法理解你面临的每个问题的本质</li>\n<li>多才多艺：尽力熟悉广泛的技术和环境</li>\n</ul>","more":"<blockquote>\n<p>Care about your craft!<br>Think! about your work!<br>在所有的弱点，最大的弱点就是害怕暴露弱点。 — J.B.Bossuet</p>\n</blockquote>\n<p>软件系统的熵（entropy）表征了这个系统的混乱程度，指的是这个系统的“无序”的总量，也就是 <strong>不确定性程度</strong>。</p>\n<blockquote>\n<p><strong>提示4：</strong><br>Dont Live with Broken Windows</p>\n</blockquote>\n<p>不要留着“破窗户”（低劣的设计、错误决策、或是糟糕的代码）不修，发现一个修理一个。<br>如果你发现你所在团队和项目的代码十分漂亮 – 编写整洁、设计良好，并且很优雅，你就很可能会格外注意不去把它弄脏。即使有火在咆哮（最后期限、发布日期、会展演示，等等），你也不会想成为第一个弄脏东西的人。</p>\n<blockquote>\n<p><strong>提示6：</strong><br>Remember the big picture</p>\n</blockquote>\n<p>需要留心大图景。要持续不断的观察周围发生的事情，而不只是你自己在做的事情。—温水煮青蛙的故事。</p>\n<blockquote>\n<p>知识上的投资总能得到最好的回报。 —本杰明.富兰克林</p>\n</blockquote>\n<p>随着你的知识的价值降低，对你的公司或客户来说，你的价值也在降低。我们想要阻止这样的事情，决不让它发生。</p>\n<p>知识资产（Knowledge Portfolios）的保值：</p>\n<ul>\n<li>定期投资：作为习惯</li>\n<li>多元化：你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特定技术的各种特性。</li>\n<li>管理风险：高风险，高回报，低风险，低回报；不应太保守，错过可能的机会。不要把所有的技术鸡蛋放在一个篮子里。</li>\n<li>低买高卖：新兴技术流行之前学习它可能就和我们找到被低估的股票一样。</li>\n<li>重新评估和平衡：IT行业是一个很动荡的行业，你需要重新评估和平衡你现在掌握的技术。</li>\n</ul>\n<blockquote>\n<p><strong>提示8：</strong><br>Invest Regularly in Your Knowledge Portfolio 定期为你的知识资产投资</p>\n</blockquote>\n<ul>\n<li>每年至少学习一种新语言。拓展思维，避免墨守成规。</li>\n<li>每季度阅读一本技术书籍。掌握你现在使用的技术，扩宽范围，阅读一些与你项目无关的书籍。</li>\n<li>阅读相关非技术书籍。提高自己的人文素养。</li>\n<li>试验不同的生产环境。适应变化。</li>\n<li>参加本地用户的组织。融入当地。</li>\n</ul>\n<blockquote>\n<p><strong>提示9：</strong><br>Critically Analyze What You Read and Hear 批判地分析你读到的和听到的</p>\n</blockquote>\n<p>不要低估商业主义的力量。web搜索引擎的页面前面的结果，并不意味着那就是最佳选择；内容供应商可以付钱排在前面。交流越有效，你就越有影响力。</p>\n<h1 id=\"注重实效的途径\"><a href=\"#注重实效的途径\" class=\"headerlink\" title=\"注重实效的途径\"></a>注重实效的途径</h1><blockquote>\n<p><strong>提示11：</strong><br>DRY -Don’t Repeat Yourself</p>\n</blockquote>\n<p>系统中的每一项知识都必须具有单一、无歧义、权威的表示。<br>重复是如何发生的：</p>\n<ul>\n<li>强加的重复（imposed duplication）：开发者觉得无可选择–环境似乎要求重复</li>\n<li>无意的重复（inadvertent duplication）：开发者没有意识到他们在重复</li>\n<li>无耐性的重复（impatient duplication）：开发者偷懒，重复因为更容易</li>\n<li>开发者之间的重复（interdeveloper duplication）：同一团队不同人重复了同样的信息</li>\n</ul>\n<blockquote>\n<p><strong>提示12：</strong><br>Make it Easy to Reuse 让复用变得容易</p>\n</blockquote>\n<p>满足正交性，在计算机技术中，该术语用于表示某种不相互依赖性或解耦性。<br>比如：改动界面，而不影响数据库；而更换数据库，不用更改界面。<br>当任何系统的各个组件相互高度依赖时，就不再有局部修正（local fix）这样的事情。<br>面向对象程序设计中的 <strong>“高内聚、低耦合”</strong><br>使用若干技术维持正交性：</p>\n<ul>\n<li>让你的代码保持解耦 –&gt; 面向对象中的迪米特法则</li>\n<li>避免使用全局数据 –&gt; 引用全局数据使得把自己与共享该数据的其他组件绑定在了一起</li>\n<li>避免编写相似的函数 –&gt; 开始和结束共享公共的代码，中间的算法缺不相同。重复的代码是结构问题的一种症状：使用设计模式中的策略模式。</li>\n</ul>\n<blockquote>\n<p><strong>提示15：</strong><br>Use Tracer Bullets to Find the Target 使用曳光弹找到目标</p>\n</blockquote>\n<p>曳光弹类比，曳光弹与真实的子弹在相同的环境、相同的约束下工作。它们快速飞向目标，枪手因此可以得到及时的反馈信息，从而快速调整。 –&gt; 使用曳光型代码构建解决方案。<br>曳光代码的优点：</p>\n<ul>\n<li>用户能够及早看到工作的东西。</li>\n<li>开发者构建了一个他们能在其中工作的结构。</li>\n<li>你有了一个集成平台。</li>\n<li>你有了可用于演示的东西。</li>\n<li>你将更能够感觉到工作进度。</li>\n</ul>\n<p>曳光代码虽然简约，但却是完整的，并且构成了最终系统的骨架的一部分，并不是用过即扔的代码。可以把原型制作视为在第一发曳光弹之前进行的侦查和情报收集工作。</p>\n<h1 id=\"基本工具\"><a href=\"#基本工具\" class=\"headerlink\" title=\"基本工具\"></a>基本工具</h1><p>一个程序员是一位 <strong>工匠</strong>，也需要有工匠这种的心态，每一位工匠都需要一套品质良好的基本工具，而这些工具需要经过认真挑选，可以完成很少与其他工具重合的特定工作。</p>\n<h2 id=\"纯文本（Plain-Text）–-最强大的工具之一\"><a href=\"#纯文本（Plain-Text）–-最强大的工具之一\" class=\"headerlink\" title=\"纯文本（Plain Text）– 最强大的工具之一\"></a>纯文本（Plain Text）– 最强大的工具之一</h2><p>纯文本包含txt、xml、html等，一些是有结构的如xml，一些是没有结构的如txt</p>\n<blockquote>\n<p><strong>提示20：</strong><br>Keep Knowledge in Plain Text 用纯文本保存知识</p>\n</blockquote>\n<p>纯文本的好处：</p>\n<ul>\n<li>保证不过时：人能够阅读的数据形式，以及自描述的数据，将比所有其他的数据形式和创建它们的应用都活的更长久，数据格式让人们能够理解（human understandable）。</li>\n<li>杠杆作用：如果文件是纯文本格式，可以使用版本控制管理系统进行管理，可以自动保存所有改动的历史。从另一方面说纯文本保留着通往二进制的接口。</li>\n<li>更易于测试：如果测试文件是纯文本格式，那么增加、更新、或是修改测试数据就是一件很简单的事情。</li>\n</ul>\n<h2 id=\"使用脚本语言和编辑器\"><a href=\"#使用脚本语言和编辑器\" class=\"headerlink\" title=\"使用脚本语言和编辑器\"></a>使用脚本语言和编辑器</h2><blockquote>\n<p><strong>提示21：</strong><br>Use the Power of Command Shells 利用命令shell的力量</p>\n</blockquote>\n<p>在Linux下可以使用shell命令操作，查找各种文件，比单纯用GUI界面会方便许多，也更加高效</p>\n<blockquote>\n<p><strong>提示22：</strong><br>Use a Single Editor Well 用好一种编辑器</p>\n</blockquote>\n<p>选一种编辑器，彻底了解并熟练掌握它，并将其用于所有的编辑任务：代码、文档、备忘录、系统管理等。<br>编辑器将成为 <strong>双手的延伸~~</strong><code>键会滑过文本和思想时歌唱起来！</code><br><strong>我现在选择ATOM！编辑器就是信仰问题~</strong></p>\n<p><strong>好的编辑器需要有的特性（ATOM都包含）：</strong></p>\n<ul>\n<li>可配置：偏好配置，字体颜色，热键绑定等</li>\n<li>可扩展：集成各种插件，可以集成各种新的语言编译环境</li>\n<li>可编程：可对编辑器编程，让它执行复杂的、多步骤的任务。可以通过宏或内建的脚本编程语言进行编程控制该编辑器。</li>\n<li>语法高亮</li>\n<li>联想和自动缩进</li>\n<li>初始代码模板设置</li>\n<li>类IDE特性（编译、调试等等）</li>\n</ul>\n<p>复现问题一个行之有效的方法：<strong>橡皮鸭的方式</strong><br>也就是向别人解释你写的代码，她应该越过你的肩膀看着屏幕，不断点头（像澡盆里上下晃动的橡皮鸭一样），她们应该一个字也不需要说，你只是一步步解释代码要做些什么，常常就能让问题从屏幕上跳出来，宣布bug自己的存在。</p>\n<blockquote>\n<p><strong>提示27：</strong><br>Don’t Assume it – Prove It，不要假定，要证明。</p>\n</blockquote>\n<p>遇到问题，要想想自己的代码有无问题，而不是怀疑环境、系统自身的问题。</p>\n<blockquote>\n<p><strong>提示28：</strong><br>Learn a Text Mainpulation Language 学习一种文本操作语言</p>\n</blockquote>\n<p>比如常用的Python、Perl等语言，完全可以试试编写脚本优化自己的编程及提高处理效率。</p>\n<h2 id=\"构建自己的代码生成器\"><a href=\"#构建自己的代码生成器\" class=\"headerlink\" title=\"构建自己的代码生成器\"></a>构建自己的代码生成器</h2><p>当工匠面临一再地重复制作同一样东西的任务时，他们会取巧，需要建造夹具或模板，一旦他们做好了夹具，他们就可以反复制作工件。夹具带走了复杂性，降低了出错的机会。</p>\n<p>程序员往往也处在这样的位置上，也需要构建 <strong>代码生成器</strong>，一旦构建好，在整个项目生命周期都可以使用它。</p>\n<p>代码生成器主要有两种主要类型：</p>\n<ul>\n<li>被动代码生成器：生成的结果与生成器分离，生成结果独立。<ul>\n<li>本质上是参数化模板，根据一组输入生成给定的输出</li>\n<li>可以生成模板、源码控制提示、版权说明及标准注释块等</li>\n</ul>\n</li>\n<li>主动代码生成器：每次需要结果时使用，结果用过就扔。<ul>\n<li>将伪代码生成对应的可以运行的代码就需要使用主动代码生成器</li>\n<li>不同语言代码之间的转换也需要主动代码生成器</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"注重实效的偏执-Pragmatic-Paranoia\"><a href=\"#注重实效的偏执-Pragmatic-Paranoia\" class=\"headerlink\" title=\"注重实效的偏执(Pragmatic Paranoia)\"></a>注重实效的偏执(Pragmatic Paranoia)</h1><p>编码过程我们必须不断地与他人的代码进行接合，这个代码可能不符合我们的高标准的代码，因此我们常常 <strong>“防卫性编码”</strong><br>而注重实效的程序员会更进一步，他们往往自己也不信任，他们会针对 <strong>自己的错误</strong> 进行防卫性的编码。</p>\n<blockquote>\n<p>当每个人都确实要对你不利时，偏执就是一个好主意。 — Woody Allen</p>\n</blockquote>\n<h2 id=\"按合约设计-Design-by-Contract-DBC\"><a href=\"#按合约设计-Design-by-Contract-DBC\" class=\"headerlink\" title=\"按合约设计(Design by Contract, DBC)\"></a>按合约设计(Design by Contract, DBC)</h2><p>软件系统中使用按合约设计的一种方式，它关注的是用文档记录（并约定）软件模块的权利与责任，以确保程序的正确性。程序的正确性体现在完成了它声明要做的事情的程序，而DBC的核心所在就是用文档记载这样的声明，并进行校验。</p>\n<p>合约包含三个方面：</p>\n<ul>\n<li>前条件(precondition)：为了调用例程，必须为真的条件</li>\n<li>后条件(postcondition)：例程保证会做的事情，例程完成时世界的状态</li>\n<li>类不变项(class invariant)：类确保从调用者的视角来看，该条件总是为真</li>\n<li>循环不变项：循环的最终目标的陈述，每次迭代都保持为真，可用来确定边界</li>\n<li>语义不变项：表达不可违反的需求，一种“哲学合约”</li>\n</ul>\n<p>使用DBC的最大好处也许是他迫使需求与保证的问题走到前台来。在设计时简单的列举输入域的范围是什么、边界条件是什么、例程允诺交付什么等等。</p>\n<h2 id=\"断言式编程\"><a href=\"#断言式编程\" class=\"headerlink\" title=\"断言式编程\"></a>断言式编程</h2><p>需要抛弃 <strong>“这绝不会发生”</strong> 这种概念或者固执，但如果你的程序预期不应该或者不可能走到某一分支，那就应该使用断言式编程。</p>\n<blockquote>\n<p><strong>提示33：</strong><br>If It can’t Happen，Use Assertions to Ensure That It Won’t 如果它不可能发生，用断言确保它不会发生</p>\n</blockquote>\n<p>但传给断言的条件不应该有副作用，断言可能会在编译时被关闭，绝不要把必须执行的代码放在assert中。<br>不要用断言代替真正的错误处理，断言检查的是绝不应该发生的事情。</p>\n<h2 id=\"使用异常进行错误处理\"><a href=\"#使用异常进行错误处理\" class=\"headerlink\" title=\"使用异常进行错误处理\"></a>使用异常进行错误处理</h2><p>异常很少应作为程序的正常流程的一部分使用，异常应保留给意外事件。<br>异常表示即时的，非局部的控制转移 —这是一种级联的（cascading）goto</p>\n<blockquote>\n<p><strong>提示34：</strong><br>Use Exceptions for Exceptional Problems 将异常用于异常问题</p>\n</blockquote>\n<h2 id=\"如何配平资源\"><a href=\"#如何配平资源\" class=\"headerlink\" title=\"如何配平资源\"></a>如何配平资源</h2><p>只要在编程，我们都要管理资源：内存、事务、线程、文件、定时器 — 所有数量有限的事物。<br>大多数时候，资源使用遵循一种可预测的模式：<strong>你分配资源、使用它，然后解除其分配。</strong></p>\n<blockquote>\n<p><strong>提示35：</strong><br>Finish What You Start 要有始有终</p>\n</blockquote>\n<p>这意味着，分配某项资源的例程或者对象应该负责解除该资源的分配。<br>比如，打开文件和关闭文件应在同一个函数或者例程中实现，一个函数打开该文件并在退出时关闭它。</p>\n<p>嵌套分配资源：</p>\n<ul>\n<li>以与资源分配的次序 <strong>相反</strong>的次序解除资源的分配。这样如有一个资源含有对另一个资源的引用，就不会造成资源的遗弃和泄漏</li>\n<li>在代码的不同地方分配同一组资源，总是以相同的次序分配它们，这将降低死锁的可能性。<br>无法配平资源时（出现动态数据结构的程序中），有三种选择（三选一，一般由所选语言决定）：</li>\n<li>顶层结构还负责释放它的任何子结构。</li>\n<li>只是解除顶层结构的分配。它指向的（没有在别处引用的）任何结构都会被遗弃。</li>\n<li>如果顶层结构含有任何子结构，它就拒绝解除自身的分配。</li>\n</ul>\n<h1 id=\"弯曲，或折断-Bend-or-Break\"><a href=\"#弯曲，或折断-Bend-or-Break\" class=\"headerlink\" title=\"弯曲，或折断(Bend, or Break)\"></a>弯曲，或折断(Bend, or Break)</h1><p>生活不会停步不前，我们的代码也不会。为了让我们赶上今天近乎疯狂的变化步伐，我们须要尽一切努力编写尽可能宽松、灵活的代码（因此我们需要设计模式，选择合理的设计模式对于代码<br>复用将带来较大的正向作用）。</p>\n<blockquote>\n<p><strong>提示36：</strong><br>Minimize Coupling Between Modules 使得模块之间的耦合减至最少</p>\n</blockquote>\n<p>也就是说编写代码的时候尽量遵循设计模式，比如迪米特法则，一个软件实体应当尽可能少地与其他实体发生作用。</p>\n<p><strong>迪米特法则规定，任何方法的调用都应该只调用属于以下情况的方法：</strong></p>\n<ul>\n<li>它自身</li>\n<li>传入该方法的任何参数</li>\n<li>它创建的任何对象</li>\n<li>任何直接持有的组件对象</li>\n</ul>\n<p>遵循迪米特法则缩小了调用类中的响应集（response set）的规模，以这种方式设计类的错误也往往更少。<br>响应集：类的各个方法直接调用的函数的数目。</p>\n<h2 id=\"元程序设计\"><a href=\"#元程序设计\" class=\"headerlink\" title=\"元程序设计\"></a>元程序设计</h2><blockquote>\n<p>再多的天才也无法胜过对细节的关注 – Levy Eighth Law</p>\n</blockquote>\n<p>细节会弄乱我们的代码，如果它们经常发生变化的话。每当我们改动代码，我们都可能会引入新的bug，因此我们可以让代码编的高度可配置化，也就是，容易适应变化。一个可用的方法使将细节封装至元数据。</p>\n<blockquote>\n<p><strong>提示37：</strong><br>Configure, Dont Intergrate 要配置而不要集成</p>\n</blockquote>\n<p>使用元数据（metadata）描述应用的配置选项，元数据是关于数据的数据，可以理解为元数据是任何对应用进行描述的数据 —应用该怎么运行、它应该使用什么资源。通常元数据是在运行时访问和使用，而不是在编译时访问和使用。<br>建议使用纯文本的方式配置元数据。<br>通常许多的程序只在启动时读取配置，如果修改配置，需要重新启动应用。更为灵活的方法使编写能在运行时重新加载其配置的程序。</p>\n<ul>\n<li>协作式配置：让应用相互的配置，让其适应其环境的软件，这就是动态地配置。</li>\n</ul>\n<h2 id=\"时间耦合\"><a href=\"#时间耦合\" class=\"headerlink\" title=\"时间耦合\"></a>时间耦合</h2><p>时间耦合是软件架构中常常被忽略的概念，我们通常都是线性的思考，先做这个，然后再做那个。但软件中这种运行方式将带来时间耦合。</p>\n<p>时间的要素</p>\n<ul>\n<li>并发：事情在同一时间发生</li>\n<li>次序：事情在时间中的相对位置</li>\n</ul>\n<p>时间耦合解决的就是并发的难题，我们需要容许并发，并解除时间或次序上的依赖，任何时间上的依赖一般包含以下几个方面，在这几个方面改善并发性，减少时间耦合：</p>\n<ul>\n<li>工作流分析：UML活动图，分析工作流，改善并发</li>\n<li>架构分析：饥饿的消费者模型，用服务进行设计–定义良好的、一致接口之后的独立、并发的对象</li>\n<li>设计分析：对任何全局或静态变量加以保护，免于并发访问；使用更整洁的接口</li>\n<li>部署分析：把系统架构成多个独立的服务，让配置成为动态的</li>\n</ul>\n<h1 id=\"当你编码时\"><a href=\"#当你编码时\" class=\"headerlink\" title=\"当你编码时\"></a>当你编码时</h1><p>编码不是机械的工作。每一分钟都需要决策，如果要让所得的程序享有长久、无误和富有生产力的一生，就必须对这些决策进行仔细的思考和判断。</p>\n<p>编写代码时，要让代码易于测试。</p>\n<h2 id=\"靠巧合编程\"><a href=\"#靠巧合编程\" class=\"headerlink\" title=\"靠巧合编程\"></a>靠巧合编程</h2><p>作为开发者，每天都处在雷区，记住士兵的故事，不要做出错误的结论，应该避免靠巧合编程 –不依靠运气和偶然的成功，要深思熟虑地编程。</p>"},{"title":"《大话设计模式》读书整理","copyright":true,"date":"2018-08-21T14:48:38.000Z","_content":"\n# 面向对象设计原则\n如何同时提高一个软件系统的**可维护性和可复用性**是面向对象设计需要解决的核心问题之一。\n面向对象设计原则为支持可维护性及复用而诞生，常见的7种面向对象设计原则如下表所示，所有的设计模式都遵循一个或多个面向对象的设计原则。\n\n| 设计原则名称 | 定义 |\n|--- |--- |\n| 单一职责原则（Single Responsibility Principle,SRP） |一个类只负责一个功能领域中的相应职责 |\n| 开闭原则（Open-Closed Principle,OCR）|软件实体应对扩展开放，而对修改关闭|\n| 里氏代换原则（Liskov Substitution Principle, LSP）| 所有引用基类对象的地方能够透明地使用其子类的对象 |\n| 依赖倒转原则（Dependence Inversion Principle，DIP）| 抽象不应该依赖于细节，细节应该依赖于抽象，也就是说，要针对接口编程，而不是针对实现编程 |\n| 接口隔离原则（Interface Segregation Principle, ISP）|使用多个专门的接口，而不使用单一的总接口 |\n| 合成复用原则（Composite Reuse Principle, CRP）|尽量使用对象的组合，而不是继承来达到复用的目的 |\n| 迪米特法则（Law of Demeter, LoD）|一个软件实体应当尽可能少地与其他实体发生作用 |\n\n<!--more-->\n\n# 1.简单工厂模式(Simple Factory)\n面向对象的分析设计的编程思想，通过封装、继承、多态将程序的耦合度降低，使用设计模式使得程序更加的灵活，容易修改，并且易于复用。\n> 使用单独的类来做这个创造实例的过程，这就是工厂，定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。\n> 因为在简单工厂模式中用于创建实例的方法使静态(Static)方法，因此简单工厂模式又被称为静态工厂方法模式。\n> 编程是一门技术，更加是一门艺术！\n\n简单工厂模式的要点在于：**当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。**\n**主要优点：**\n- 工厂类中包含必要的判断逻辑，可以决定在什么时候创建一个产品类的对象，客户端可以免除直接创建产品对象的职责，也就是说实现了对象创建和使用的分离。\n- 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可\n- 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性\n\n# 2.策略模式(Strategy)\n>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。\n\n策略模式是定义一系列算法的方法，从概念上来讲，所有这些算法完成的都是相同的工作，只是实现不同，它可以以 **相同的方式** 调用所有的算法，减少了各种算法类与使用算法类之间的耦合。\n\n**策略模式封装了变化**\n\n策略模式的Strategy类层次为Context定义了一系列可供重用的算法或行为，继承有助于析取出这些算法中的公共功能。\n策略模式的优点是简化了单元测试，将不同行为或者算法堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为，因此借助简单工厂模式，然后将这些行为封装在一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句。\n```csharp\nabstract class Strategy//抽象算法类，定义所有支持的算法的公共接口\n{\n    public abstract void AlgorithmInterface();\n}\n\nclass ConcreStrategyA: Strategy//具体算法类，封装了具体的算法或者行为，继承于Strategy\n{\n    public override void AlgorithmInterface()//算法A的具体实现方法\n    {\n        console.WriteLine(\"算法A的实现\");\n    }\n}\n\nclass ConcreStrategyB: Strategy\n{\n    public override void AlgorithmInterface()\n    {\n        console.WriteLine(\"算法B的实现\");\n    }\n}\nclass Context//用具体的ConcreStrategy来配置，维护一个对Strategy对象的引用\n{\n    Strategy strategy;\n    public Context(Strategy strategy)//初始化时，传入具体的策略对象\n    {\n        this.strategy = strategy;\n    }\n//上下文接口，根据具体的策略对象，调用其算法方法\n    public void ContextInterface()\n    {\n        strategy.AlgorithmInterface();\n    }\n}\n\nstatic void Main(string[] args)\n{\n    Context context;\n    context = new Context(new ConcreStrategyA());//实例化不同的算法策略\n    context.ContextInterface();\n    context = new Context(new ConcreStrategyB);\n    context.ContextInterface();\n    console.Read();\n}\n```\n# 3.单一职责原则\n**前言**\n如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他的职责的能力。而这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。\n**如何判断一个类是否有多个职责？**\n- 想到多于一个动机去改变一个类，那么这个类就多于一个职责，就应该发现这些职责然后将这些职责相互分离\n- 易维护、易扩展、易复用、灵活多样\n\n# 4.开放-封闭原则（OCP: Open-Closed Principle）\n- Open for extension, Closed for modification(扩展开放、更改封闭)：软件实体（类、模块、函数等等）应该是可以扩展的、但是不可修改\n- 多扩展，少修改\n- 原则是：面对新的需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码\n- 全力以赴是必须，两手准备也是灵活处事的表现\n\n# 5.依赖倒转原则\n面向对象的 **强内聚、松耦合** 的关系\n- 高层模块不应该依赖低层模块，两个都应该依赖抽象（接口或者抽象类）。\n- 抽象不应该依赖细节，细节应该依赖抽象。\n\n**里式代换原则：** 子类型必须能够替换掉他们的父类型，即在一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别，也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。\n\n# 6.装饰模式（Decorator）\n动态地给一个对象添加一些额外的职责，就增加功能来讲，装饰模式比生成子类更为灵活（人穿衣服的顺序，服饰之于人是装饰）\n\nComponent -->concreteComponent, Decorator(抽象装饰器) -->在抽象装饰器有SetComponent（装饰接口）接口包装 component，因此就串起来了。\n\n**装饰模式的优点：** 把类中的装饰功能从类中搬移去除，这样就可以简化原有的类，有效的把类的核心职责和装饰功能区分开，而且可以去除相关类中重复的装饰逻辑。\n\n# 7.代理模式（Proxy）\n为其他对象提供一种代理以控制对这个对象的访问\nSubject –->RealSubject, Proxy; 也就是说两者都继承自Subject,拥有相同的接口，但具体实现中的接口是Proxy中的接口封装RealSubject中的接口，以实现代理的方式。\n代理模式的应用：\n- 远程代理：为一个对象在不同的地址空间提供局部代理，隐藏一个对象存在于不同地址空间的事实\n- 虚拟代理：浏览器页面的预加载\n- 安全代理：用来控制真实对象访问时的权限\n- 智能指引：调用真实对象时，代理处理另外的一些事\n简而言之：代理模式就是在访问对象时引入一定程度的间接性，而这种间接性，可以附加多种用途。\n\n# 8.工厂方法模式（Factory Method）\n是简单工厂模式的扩充，增加了工厂接口（interface IFactory）__[工厂产生实例的地方]__。\n\n**简单工厂：**  工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。\n\n**工厂方法：** 定义一个用于创建对象的接口，让子类决定实例化哪一个类。\n\n工厂方法使一个类的实例化延迟至其子类，也就是将实例化的选择上浮至客户端处理。\n工厂方法克服了简单工厂违背开放-封闭原则的缺点，保持了封装对象创建过程的优点。\n\n# 9.原型模式（Prototype）\n用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\n从一个对象再创建另外一个可定制的对象，并且不需要知道任何创建的细节。\n好处是不用重新初始化对象，动态地获得对象运行时的状态。\n\n**深拷贝和浅拷贝：**\n如果字段是值类的，则对该字段执行逐位复制，如果字段是引用类型，则复制引用但不复制引用的对象，因此，原始对象及其复本引用同一对象。\n\n# 10.模板方法模式（TemplateMethod）\n当我们要完成在某一细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上实现可能不同时，我们通常考虑用模板方法模式进行处理。\n\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定结构。\n\n模板方法模式是通过把不变行为搬移到父类中，去除子类中的重复代码，来体现它的优势，模板方法模式提供了一个很好的代码复用平台。\n\n**注意：** 当不变的和可变的行为在方法的子类实现中混合在一起的时候，不变的行为就会在子类中重复出现，我们通过模板方法模式把这些行为搬移到单一的地方，这样就帮助子类摆脱重复不变的行为的纠缠。\n\n# 11.迪米特法则 – 最少知识原则\n**来源：**\n如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。\n在类的结构设计上，每一个类都应当尽量降低成员的访问权限，强调了类之间的松耦合，类之间的耦合越弱，越有利于复用，一个处于弱耦合的类被修改，不会对有关系的类造成波及。__---信息的隐藏促进了软件的复用。__\n\n# 12.外观模式（门面模式 Facade）\n是为了减少各个程序模块之间的 **耦合性**\n\n**定义：**\n为子系统的中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\n\n**白话解释:**\n也就是将几个子系统（类）放在一个统一的外观（Facade）中，包裹一层；然后供客户端或新系统统一调用。\n\n**使用外观模式的时机：**\n1. 在设计初期阶段，有意识的将不同的两层分离，经典的三层架构：数据访问层 –》 业务逻辑层 –》表示层；层与层之间使用Facade封装。\n2. 在开发阶段，增加外观Facade来提供一个简单的接口，减少他们之间的依赖。\n3. 维护遗留大型系统时，为设计粗糙的遗留代码设计一个简单清晰的Facade，让新系统与Facade交互，Facade与遗留代码交互所有复杂的工作。\n\n# 13.建造者模式（Builder，生成器模式）\n这是对建造流程的抽象。人基本特点抽象化（稳定的特点），体型的胖瘦具体化;\n将一个复杂对象的 **构建** 与它的 **表示** 分离，使得同样的构建过程可以创建不同的表示。\n包含指挥者（Director）是用户和建造过程的隔离，指挥者实现用户的需求，而不将构造过程展示给用户:\n用户 | Director | 建造过程\n建造者模式是在当创建复杂对象的算法应该 **独立于** 该对象的组成部分以及它们的装配方式时的模式。\n\n# 14.观察者模式\n\n又叫发布 – 订阅（Publish/Subscribe）模式，定义了一种 **一对多** 的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生改变时，会通知所有观察者对象，使它们能够自动更新自己。\n\n**使用的动机来源：** 不希望为了维护一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便，而观察者模式中的关键对象是主题 Subject 和 观察者 Observer ，一个 Subject 可以有任意数目的依赖它的 Observer，一旦 Subject 的状态发生了改变，所有的 Observer 都可以得到通知，Subject 发出通知时并不需要知道谁是它的观察者，也就是说，具体的观察者是谁，它根本不需要知道。而任何一个具体的观察者也不需要知道其他观察者的存在。\n观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使各自的变化都不会影响到另一边的变化。\n\n增加委托事件，观察者中的 Update 动作，进一步具体化，也就是将 Update 的函数具体为相应的动作，然后在具体的 Subject 中增加委托事件 EventHandler，而这个 EventHandler 是 Update 的引用方法（别名，或者有点像函数指针）。\n\n# 15.抽象工厂模式（Abstract Factory）\n> 菜鸟程序员碰到问题，只会用时间来摆平，编程是一门艺术，如果增加一个功能就需要大批量的改动，这就是非常丑陋的代码！\n>心急讨不了好媳妇 ~\n\n提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n\n**优点：**\n- 易于交换产品系列，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变的非常容易，它只需要改变具体工厂即可使用不同的产品配置；\n- 它让具体的创建实例过程与客户端分离，客户端是通过他们的抽象接口操纵实例，产品的具体类名也被具体的工厂的实现分离，不会出现在客户代码中。\n使用*反射技术*去除简单工厂中的 switch --- case的判断逻辑 | --》 反射+抽象工厂模式\n\n**总结：**\n所有在用简单工厂的地方，都可以考虑用反射技术去除switch 或者 if的判断逻辑，解除分支判断带来的耦合。\n\n# 16.状态模式（State）\n**Tips：**\n方法过长（Long Method）是*坏味道*，意味着这个方法承担的责任过大，这个在设计模式上是很糟糕的行为，类需要遵循单一职责原则，面向对象设计其实就是希望做到代码的责任分解。\n\n**概念：**\n当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。\n适用的场景：当控制一个对象状态转换的条件表达式过于复杂时的情况，也就是当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式了。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。\n\n**好处：**\n将与特定状态的行为局部化，并且将不同状态的行为分割开来。状态模式通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖\n\n# 17.适配器模式（Adapter）\n将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能在一起工作的那些类可以一起工作（加一层封装接口来适配现在的系统使用）。\n\n系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。Adapter 主要应用于希望复用一些现存的类，但是接口又与复用环境不一致的情况。\n\n* 类适配模式：需要支持类的多重继承（只有C++支持多重继承）\n* 对象适配模式\n在使用一个已经存在的类，但如果它的接口，也就是它的方法和你的要求不相同时，应该考虑 Adapter，客户代码只需要调用这个统一的接口（Adapter）。\n也就是在这种情况：*两个类所做的事情相同或相似，但是具有不同的接口时要使用它。*\n**注：** 只有碰到无法改变原有设计和代码的情况时，才考虑适配。在有小的接口不统一的问题发生时，及时重构。\n\n# 18.备忘录模式（Memento）\n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。三个角色：发起人（Originator） --》 备忘录（Memento）类 –》 管理者（Caretaker）类\n\n**适用场景：** Memento模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多属性中的一小部分时，Originator 可以根据保存的 Memento信息还原到前一状态。\n\n# 19.组合模式（Composite）\n将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n**适用的场景：** 需求中是体现部分与整体层次的结构时，并且希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，考虑使用组合模式。\n组合模式让客户可以一致地使用组合结构和单个对象。\n\n# 20.迭代器模式（Iterator）\n提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。\n需要对聚集（数组）有多种方式遍历时，可以考虑用迭代器模式：foreach .. in\n\n**注：** 迭代器肯定是和具体的聚集绑定在一起的，在声明具体的迭代器时必须初始化绑定具体聚集。\n迭代器（Iterator）模式就是分离了集合对象的遍历行为，抽象出一个迭代器来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明的访问集合内部的数据\n\n# 21.单例模式（Singleton）\n>复制黏贴是最容易的编程，也是最没有价值的编程!\n\n保证一个类仅有一个实例，并提供一个访问它的一个全局访问点。也就是让类自身负责保存它的唯一实例，并提供一个访问该实例的方法（ GetInstacne（））。\n\n单例模式试图解决的两个**基本问题**：\n- 全局访问\n- 实例化控制\n具体代码体现：\n\n```csharp\nclass Singleton //懒汉式单例类\n{\n    private static Singleton instance;\n    private Singleton() {}//构造方法为private，外界无法通过new来实例化\n    private static readonly object syncRoot = new object();//lock 确保当一个线程位于代码临界区时，另一个线程不能进入临界区\n    public static Singleton GetInstance()//获得本类实例的唯一全局访问点\n    {\n        if(instance == null)//先判断实例是否存在，不存在则加锁处理\n        {\n            lock(syncRoot)\n            {\n                if(instance == null) //双重锁定，保证线程安全（Double-Check Locking）\n                {\n                    instace = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n\npublic sealed class Singleton //饿汉式单例类\n{\n    private static readonly Singleton instance = new Singleton(); //静态初始化方式，类一加载就实例化对象，需要提前占用系统资源。\n    private Singleton() {}\n    public static Singleton GetInstance()\n    {\n        return instance;\n    }\n}\n```\n\n# 22. 桥接模式（Bridge）\n面向对象的原则：优先使用对象的 **合成/聚合** ，而不是类继承\n- 聚合：表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分\n- 合成：表示一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样\n优先使用对象的合成\\聚合将有助于保持每个类的封装，并被集中在单个任务上。这样的类和类继承层次会保持较小规模。\n> **概念：** 将抽象部分与它的实现分离，使它们可以独立的变化。实现指的是抽象类和它的派生类用来实现自己的对象。\n\n实现系统可能有多角度分类，每一种分类都有可能发生变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。\n\n# 23.命令模式（Command）\n降低 **行为请求者** 与 **行为实现者** 的紧耦合。\n\n> **概念：** 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作\n\n**命令模式的作用**\n- 能容易地设计一个命令队列\n- 在需要的情况下，可以较容易的将命令记入日志\n- 允许接收请求的一方决定是否需要否决请求\n- 可以容易地实现对请求的撤销或者重做\n- 加进新的具体命令类不影响其他的类，增加新的具体命令类较容易\n- 把请求一个操作的对象与知道如何执行该操作的对象分隔开\n\n# 24.职责链模式（Chain of Responsibility）\n> **概念：** 使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个责任对象处理它为止。\n\n**好处：** 接收者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。\n结果是职责链可简化对象的相互连接，它们仅仅需要保持一个指向其后继者的引用，而不需要保持所有候选接收者的引用。\n__需要事先设置后继者。__\n\n可以在客户端设置责任链的上游，这样可以很好的解决原来大量的分支判断造成难维护、灵活性差的问题\n\n# 25.中介者模式（调停者模式，Mediator）\n通过中介者，可以将系统的 **网状结构** 变成一个以中介者为中心的 **星状结构。**\n\n> **概念：** 用一个中介对象来封装一系列的对象的交互。中介者使各对象不需要显式的相互作用，从而使其耦合松散，而且可以独立的改变它们之间的交互。\n\n**中介者模式的优点：**\n- Mediator的出现减少了各个Colleague的耦合，使得可以独立的改变和复用各个Colleague类和Mediator类\n- 将对象如何协作进行抽象，把Mediator作为一个独立的概念并将其封装在一个对象中，关注的对象变为它们之间的交互中，站在更宏观的角度看待系统。\n\n**中介者模式缺点：**\n- 交互复杂性 --》 中介者复杂性\n中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合，以及想定制一个分布在多个类中的行为，而又不想生成太多子类的场合。\n\n# 26.享元模式（Flyweight）\n运用共享技术有效的支持大量细粒度（Flyweight轻量级）的对象。\n```csharp\nabstract class Flyweight //享元类抽象接口\n{\n    public abstract void Operation (int extrinsicstate);\n}\n\nclass ConcreteFlyweight : Flyweight //实现flyweight接口，增加存储空间\n{\n    public override void Operation (int extrinsicstate)\n    {\n        Console.WriteLine(\"具体Flyweight：\" +extrinsicstate);\n    }\n}\n\nclass UnsharedConcreteFlyweight : Flyweight //不需要共享的flyweight子类\n{\n    public override void Operation (int extrinsicstate)\n    {\n        Console.WriteLine(\"不共享的具体Flyweight：\" +extrinsicstate);\n    }\n}\n\nClass FlyweightFactory //享元工厂，用来创建并管理flyweight对象\n{\n    private Hashtable flyweights = new Hashtable();\n    public FlyweightFactory()\n    {\n        flyweights.Add(\"X\",new ConcreteFlyweight());\n        flyweights.Add(\"Y\",new ConcreteFlyweight());\n        flyweights.Add(\"Z\",new ConcreteFlyweight());\n    }\n    public Flyweight GetFlyweight(string key)\n    {\n        return ((Flyweight)flyweights[key]);\n    }\n}\n\n```\n享元模式可以避免大量非常 **相似类** 的开销。该模式运用共享技术有效地支持大量细粒度的对象。\n\n__应用场景：__\n1. 如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销；\n2. 对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组的对象，此时就可以考虑使用享元模式。\n比如string对象使用了享元模式。\n\n# 27.解释器模式(interpreter)\n> 给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\n\n**需要解决的问题：** 如果一个特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。\n\n当有一个语言需要解释执行的时候，并且你可将该语言中的句子表示为一个抽象的语法树，此时就可以使用解释器模式。\n\n典型的应用有：正则表达式、浏览器解析HTML文件\n```csharp\nabstract class AbstractExpression//抽象表达式，这个接口为抽象语法树中的所有节点所共享\n{\n    public abstract void Interpret(Context context);\n}\n\nclass TerminalExpression: AbstractExpression//终结符表达式，实现与文法中的终结符相关联的解释操作\n{\n    public override void Interpret(Context context)\n    {\n        Console.WriteLine(\"终端解释器\");\n    }\n}\n\nclass NonterminalExpression: AbstractExpression//非终结表达式，为文法中的非终结符实现解释操作，文法中的每一条规则R1、R2.。。。Rn都需要一个具体的非终结表达式类\n{\n    public override void Interpret(Context context)\n    {\n        Console.WriteLine(\"非终端解释器\");\n    }\n}\n\nclass Context//Context,包含解释器之外的一些全局信息\n{\n    private string input;\n    public string Input\n    {\n        get{return input;}\n        set{input = value;}\n    }\n    private string output;\n    public string Output\n    {\n        get{return output;}\n        set{output = value;}\n    }\n}\n\n```\n# 28.访问者模式(Visitor)\n> 访问者模式讲的是表示一个作用于某对象结构中各个元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n> 笑话一则：男人与女人最大的区别就是，比上不足，比下有余。\n\n充分使用了 **双分派** 的技术，实现处理和数据结构分离。\n- visitor指的是两者都根据某种共有的状态进行的不同的反应，而这个visitor正好是提供了表示这种反应的统一接口，封装了不同的反应。\n- ObjectStructure是封装的两种或多种对象，这也是对象的稳定的结构。\n\n访问者模式适用于数据结构相对稳定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。\n访问者模式的目的是要把 **处理从数据结构** 中分离出来。\n访问者模式的优点是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者。访问者模式讲有关行为集中到一个访问者对象中。\n访问者模式的缺点是增加新的数据结构更困难了，也相对比较复杂。\n大多数情况并不需要访问者模式，很难找到数据结构不变化的情况。\n\n# 29.各种模式的总结\n将24个设计模式可以大体分为三个类别：\n- 创建型模式（6个）\n- 简单工厂\n- 抽象工厂\n- 建造者模式\n- 工厂方法模式\n- 原型模式\n- 单例模式\n\n创建型模式抽象了实例化的过程。它们帮助一个系统独立于如何创建、组合和表示它的那些对象。\n创建者模式都会将关于该系统使用哪些具体的类的信息封装起来，允许客户用结构和功能差别很大的‘产品’对象配置一个系统。\n\n- 结构型模式（7个）\n- 适配器模式\n- 桥接模式\n- 组合模式\n- 装饰模式\n- 外观模式\n- 享元模式\n- 代理模式\n\n找出变化，并将变化封装。\n\n- 行为型模式（11个）\n- 观察者模式\n- 模板方法模式\n- 命令模式\n- 状态模式\n- 职责链模式\n- 解释器模式\n- 中介模式\n- 访问者模式\n- 策略模式\n- 备忘录模式\n- 迭代器模式\n\n面向对象设计模式体现的就是 **抽象** 的思想，*类是对象的抽象，抽象类是类的抽象，接口是对行为的抽象。*\n","source":"_posts/《大话设计模式》读书整理.md","raw":"---\ntitle: 《大话设计模式》读书整理\ncopyright: true\ndate: 2018-08-21 22:48:38\ncategories: 设计模式\ntags:\n- 大话设计模式\n---\n\n# 面向对象设计原则\n如何同时提高一个软件系统的**可维护性和可复用性**是面向对象设计需要解决的核心问题之一。\n面向对象设计原则为支持可维护性及复用而诞生，常见的7种面向对象设计原则如下表所示，所有的设计模式都遵循一个或多个面向对象的设计原则。\n\n| 设计原则名称 | 定义 |\n|--- |--- |\n| 单一职责原则（Single Responsibility Principle,SRP） |一个类只负责一个功能领域中的相应职责 |\n| 开闭原则（Open-Closed Principle,OCR）|软件实体应对扩展开放，而对修改关闭|\n| 里氏代换原则（Liskov Substitution Principle, LSP）| 所有引用基类对象的地方能够透明地使用其子类的对象 |\n| 依赖倒转原则（Dependence Inversion Principle，DIP）| 抽象不应该依赖于细节，细节应该依赖于抽象，也就是说，要针对接口编程，而不是针对实现编程 |\n| 接口隔离原则（Interface Segregation Principle, ISP）|使用多个专门的接口，而不使用单一的总接口 |\n| 合成复用原则（Composite Reuse Principle, CRP）|尽量使用对象的组合，而不是继承来达到复用的目的 |\n| 迪米特法则（Law of Demeter, LoD）|一个软件实体应当尽可能少地与其他实体发生作用 |\n\n<!--more-->\n\n# 1.简单工厂模式(Simple Factory)\n面向对象的分析设计的编程思想，通过封装、继承、多态将程序的耦合度降低，使用设计模式使得程序更加的灵活，容易修改，并且易于复用。\n> 使用单独的类来做这个创造实例的过程，这就是工厂，定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。\n> 因为在简单工厂模式中用于创建实例的方法使静态(Static)方法，因此简单工厂模式又被称为静态工厂方法模式。\n> 编程是一门技术，更加是一门艺术！\n\n简单工厂模式的要点在于：**当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。**\n**主要优点：**\n- 工厂类中包含必要的判断逻辑，可以决定在什么时候创建一个产品类的对象，客户端可以免除直接创建产品对象的职责，也就是说实现了对象创建和使用的分离。\n- 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可\n- 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性\n\n# 2.策略模式(Strategy)\n>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。\n\n策略模式是定义一系列算法的方法，从概念上来讲，所有这些算法完成的都是相同的工作，只是实现不同，它可以以 **相同的方式** 调用所有的算法，减少了各种算法类与使用算法类之间的耦合。\n\n**策略模式封装了变化**\n\n策略模式的Strategy类层次为Context定义了一系列可供重用的算法或行为，继承有助于析取出这些算法中的公共功能。\n策略模式的优点是简化了单元测试，将不同行为或者算法堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为，因此借助简单工厂模式，然后将这些行为封装在一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句。\n```csharp\nabstract class Strategy//抽象算法类，定义所有支持的算法的公共接口\n{\n    public abstract void AlgorithmInterface();\n}\n\nclass ConcreStrategyA: Strategy//具体算法类，封装了具体的算法或者行为，继承于Strategy\n{\n    public override void AlgorithmInterface()//算法A的具体实现方法\n    {\n        console.WriteLine(\"算法A的实现\");\n    }\n}\n\nclass ConcreStrategyB: Strategy\n{\n    public override void AlgorithmInterface()\n    {\n        console.WriteLine(\"算法B的实现\");\n    }\n}\nclass Context//用具体的ConcreStrategy来配置，维护一个对Strategy对象的引用\n{\n    Strategy strategy;\n    public Context(Strategy strategy)//初始化时，传入具体的策略对象\n    {\n        this.strategy = strategy;\n    }\n//上下文接口，根据具体的策略对象，调用其算法方法\n    public void ContextInterface()\n    {\n        strategy.AlgorithmInterface();\n    }\n}\n\nstatic void Main(string[] args)\n{\n    Context context;\n    context = new Context(new ConcreStrategyA());//实例化不同的算法策略\n    context.ContextInterface();\n    context = new Context(new ConcreStrategyB);\n    context.ContextInterface();\n    console.Read();\n}\n```\n# 3.单一职责原则\n**前言**\n如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他的职责的能力。而这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。\n**如何判断一个类是否有多个职责？**\n- 想到多于一个动机去改变一个类，那么这个类就多于一个职责，就应该发现这些职责然后将这些职责相互分离\n- 易维护、易扩展、易复用、灵活多样\n\n# 4.开放-封闭原则（OCP: Open-Closed Principle）\n- Open for extension, Closed for modification(扩展开放、更改封闭)：软件实体（类、模块、函数等等）应该是可以扩展的、但是不可修改\n- 多扩展，少修改\n- 原则是：面对新的需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码\n- 全力以赴是必须，两手准备也是灵活处事的表现\n\n# 5.依赖倒转原则\n面向对象的 **强内聚、松耦合** 的关系\n- 高层模块不应该依赖低层模块，两个都应该依赖抽象（接口或者抽象类）。\n- 抽象不应该依赖细节，细节应该依赖抽象。\n\n**里式代换原则：** 子类型必须能够替换掉他们的父类型，即在一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别，也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。\n\n# 6.装饰模式（Decorator）\n动态地给一个对象添加一些额外的职责，就增加功能来讲，装饰模式比生成子类更为灵活（人穿衣服的顺序，服饰之于人是装饰）\n\nComponent -->concreteComponent, Decorator(抽象装饰器) -->在抽象装饰器有SetComponent（装饰接口）接口包装 component，因此就串起来了。\n\n**装饰模式的优点：** 把类中的装饰功能从类中搬移去除，这样就可以简化原有的类，有效的把类的核心职责和装饰功能区分开，而且可以去除相关类中重复的装饰逻辑。\n\n# 7.代理模式（Proxy）\n为其他对象提供一种代理以控制对这个对象的访问\nSubject –->RealSubject, Proxy; 也就是说两者都继承自Subject,拥有相同的接口，但具体实现中的接口是Proxy中的接口封装RealSubject中的接口，以实现代理的方式。\n代理模式的应用：\n- 远程代理：为一个对象在不同的地址空间提供局部代理，隐藏一个对象存在于不同地址空间的事实\n- 虚拟代理：浏览器页面的预加载\n- 安全代理：用来控制真实对象访问时的权限\n- 智能指引：调用真实对象时，代理处理另外的一些事\n简而言之：代理模式就是在访问对象时引入一定程度的间接性，而这种间接性，可以附加多种用途。\n\n# 8.工厂方法模式（Factory Method）\n是简单工厂模式的扩充，增加了工厂接口（interface IFactory）__[工厂产生实例的地方]__。\n\n**简单工厂：**  工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。\n\n**工厂方法：** 定义一个用于创建对象的接口，让子类决定实例化哪一个类。\n\n工厂方法使一个类的实例化延迟至其子类，也就是将实例化的选择上浮至客户端处理。\n工厂方法克服了简单工厂违背开放-封闭原则的缺点，保持了封装对象创建过程的优点。\n\n# 9.原型模式（Prototype）\n用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。\n从一个对象再创建另外一个可定制的对象，并且不需要知道任何创建的细节。\n好处是不用重新初始化对象，动态地获得对象运行时的状态。\n\n**深拷贝和浅拷贝：**\n如果字段是值类的，则对该字段执行逐位复制，如果字段是引用类型，则复制引用但不复制引用的对象，因此，原始对象及其复本引用同一对象。\n\n# 10.模板方法模式（TemplateMethod）\n当我们要完成在某一细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上实现可能不同时，我们通常考虑用模板方法模式进行处理。\n\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定结构。\n\n模板方法模式是通过把不变行为搬移到父类中，去除子类中的重复代码，来体现它的优势，模板方法模式提供了一个很好的代码复用平台。\n\n**注意：** 当不变的和可变的行为在方法的子类实现中混合在一起的时候，不变的行为就会在子类中重复出现，我们通过模板方法模式把这些行为搬移到单一的地方，这样就帮助子类摆脱重复不变的行为的纠缠。\n\n# 11.迪米特法则 – 最少知识原则\n**来源：**\n如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。\n在类的结构设计上，每一个类都应当尽量降低成员的访问权限，强调了类之间的松耦合，类之间的耦合越弱，越有利于复用，一个处于弱耦合的类被修改，不会对有关系的类造成波及。__---信息的隐藏促进了软件的复用。__\n\n# 12.外观模式（门面模式 Facade）\n是为了减少各个程序模块之间的 **耦合性**\n\n**定义：**\n为子系统的中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。\n\n**白话解释:**\n也就是将几个子系统（类）放在一个统一的外观（Facade）中，包裹一层；然后供客户端或新系统统一调用。\n\n**使用外观模式的时机：**\n1. 在设计初期阶段，有意识的将不同的两层分离，经典的三层架构：数据访问层 –》 业务逻辑层 –》表示层；层与层之间使用Facade封装。\n2. 在开发阶段，增加外观Facade来提供一个简单的接口，减少他们之间的依赖。\n3. 维护遗留大型系统时，为设计粗糙的遗留代码设计一个简单清晰的Facade，让新系统与Facade交互，Facade与遗留代码交互所有复杂的工作。\n\n# 13.建造者模式（Builder，生成器模式）\n这是对建造流程的抽象。人基本特点抽象化（稳定的特点），体型的胖瘦具体化;\n将一个复杂对象的 **构建** 与它的 **表示** 分离，使得同样的构建过程可以创建不同的表示。\n包含指挥者（Director）是用户和建造过程的隔离，指挥者实现用户的需求，而不将构造过程展示给用户:\n用户 | Director | 建造过程\n建造者模式是在当创建复杂对象的算法应该 **独立于** 该对象的组成部分以及它们的装配方式时的模式。\n\n# 14.观察者模式\n\n又叫发布 – 订阅（Publish/Subscribe）模式，定义了一种 **一对多** 的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生改变时，会通知所有观察者对象，使它们能够自动更新自己。\n\n**使用的动机来源：** 不希望为了维护一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便，而观察者模式中的关键对象是主题 Subject 和 观察者 Observer ，一个 Subject 可以有任意数目的依赖它的 Observer，一旦 Subject 的状态发生了改变，所有的 Observer 都可以得到通知，Subject 发出通知时并不需要知道谁是它的观察者，也就是说，具体的观察者是谁，它根本不需要知道。而任何一个具体的观察者也不需要知道其他观察者的存在。\n观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使各自的变化都不会影响到另一边的变化。\n\n增加委托事件，观察者中的 Update 动作，进一步具体化，也就是将 Update 的函数具体为相应的动作，然后在具体的 Subject 中增加委托事件 EventHandler，而这个 EventHandler 是 Update 的引用方法（别名，或者有点像函数指针）。\n\n# 15.抽象工厂模式（Abstract Factory）\n> 菜鸟程序员碰到问题，只会用时间来摆平，编程是一门艺术，如果增加一个功能就需要大批量的改动，这就是非常丑陋的代码！\n>心急讨不了好媳妇 ~\n\n提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n\n**优点：**\n- 易于交换产品系列，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变的非常容易，它只需要改变具体工厂即可使用不同的产品配置；\n- 它让具体的创建实例过程与客户端分离，客户端是通过他们的抽象接口操纵实例，产品的具体类名也被具体的工厂的实现分离，不会出现在客户代码中。\n使用*反射技术*去除简单工厂中的 switch --- case的判断逻辑 | --》 反射+抽象工厂模式\n\n**总结：**\n所有在用简单工厂的地方，都可以考虑用反射技术去除switch 或者 if的判断逻辑，解除分支判断带来的耦合。\n\n# 16.状态模式（State）\n**Tips：**\n方法过长（Long Method）是*坏味道*，意味着这个方法承担的责任过大，这个在设计模式上是很糟糕的行为，类需要遵循单一职责原则，面向对象设计其实就是希望做到代码的责任分解。\n\n**概念：**\n当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。\n适用的场景：当控制一个对象状态转换的条件表达式过于复杂时的情况，也就是当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式了。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。\n\n**好处：**\n将与特定状态的行为局部化，并且将不同状态的行为分割开来。状态模式通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖\n\n# 17.适配器模式（Adapter）\n将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能在一起工作的那些类可以一起工作（加一层封装接口来适配现在的系统使用）。\n\n系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。Adapter 主要应用于希望复用一些现存的类，但是接口又与复用环境不一致的情况。\n\n* 类适配模式：需要支持类的多重继承（只有C++支持多重继承）\n* 对象适配模式\n在使用一个已经存在的类，但如果它的接口，也就是它的方法和你的要求不相同时，应该考虑 Adapter，客户代码只需要调用这个统一的接口（Adapter）。\n也就是在这种情况：*两个类所做的事情相同或相似，但是具有不同的接口时要使用它。*\n**注：** 只有碰到无法改变原有设计和代码的情况时，才考虑适配。在有小的接口不统一的问题发生时，及时重构。\n\n# 18.备忘录模式（Memento）\n在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。三个角色：发起人（Originator） --》 备忘录（Memento）类 –》 管理者（Caretaker）类\n\n**适用场景：** Memento模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多属性中的一小部分时，Originator 可以根据保存的 Memento信息还原到前一状态。\n\n# 19.组合模式（Composite）\n将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。\n\n**适用的场景：** 需求中是体现部分与整体层次的结构时，并且希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，考虑使用组合模式。\n组合模式让客户可以一致地使用组合结构和单个对象。\n\n# 20.迭代器模式（Iterator）\n提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。\n需要对聚集（数组）有多种方式遍历时，可以考虑用迭代器模式：foreach .. in\n\n**注：** 迭代器肯定是和具体的聚集绑定在一起的，在声明具体的迭代器时必须初始化绑定具体聚集。\n迭代器（Iterator）模式就是分离了集合对象的遍历行为，抽象出一个迭代器来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明的访问集合内部的数据\n\n# 21.单例模式（Singleton）\n>复制黏贴是最容易的编程，也是最没有价值的编程!\n\n保证一个类仅有一个实例，并提供一个访问它的一个全局访问点。也就是让类自身负责保存它的唯一实例，并提供一个访问该实例的方法（ GetInstacne（））。\n\n单例模式试图解决的两个**基本问题**：\n- 全局访问\n- 实例化控制\n具体代码体现：\n\n```csharp\nclass Singleton //懒汉式单例类\n{\n    private static Singleton instance;\n    private Singleton() {}//构造方法为private，外界无法通过new来实例化\n    private static readonly object syncRoot = new object();//lock 确保当一个线程位于代码临界区时，另一个线程不能进入临界区\n    public static Singleton GetInstance()//获得本类实例的唯一全局访问点\n    {\n        if(instance == null)//先判断实例是否存在，不存在则加锁处理\n        {\n            lock(syncRoot)\n            {\n                if(instance == null) //双重锁定，保证线程安全（Double-Check Locking）\n                {\n                    instace = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n\npublic sealed class Singleton //饿汉式单例类\n{\n    private static readonly Singleton instance = new Singleton(); //静态初始化方式，类一加载就实例化对象，需要提前占用系统资源。\n    private Singleton() {}\n    public static Singleton GetInstance()\n    {\n        return instance;\n    }\n}\n```\n\n# 22. 桥接模式（Bridge）\n面向对象的原则：优先使用对象的 **合成/聚合** ，而不是类继承\n- 聚合：表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分\n- 合成：表示一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样\n优先使用对象的合成\\聚合将有助于保持每个类的封装，并被集中在单个任务上。这样的类和类继承层次会保持较小规模。\n> **概念：** 将抽象部分与它的实现分离，使它们可以独立的变化。实现指的是抽象类和它的派生类用来实现自己的对象。\n\n实现系统可能有多角度分类，每一种分类都有可能发生变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。\n\n# 23.命令模式（Command）\n降低 **行为请求者** 与 **行为实现者** 的紧耦合。\n\n> **概念：** 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作\n\n**命令模式的作用**\n- 能容易地设计一个命令队列\n- 在需要的情况下，可以较容易的将命令记入日志\n- 允许接收请求的一方决定是否需要否决请求\n- 可以容易地实现对请求的撤销或者重做\n- 加进新的具体命令类不影响其他的类，增加新的具体命令类较容易\n- 把请求一个操作的对象与知道如何执行该操作的对象分隔开\n\n# 24.职责链模式（Chain of Responsibility）\n> **概念：** 使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个责任对象处理它为止。\n\n**好处：** 接收者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。\n结果是职责链可简化对象的相互连接，它们仅仅需要保持一个指向其后继者的引用，而不需要保持所有候选接收者的引用。\n__需要事先设置后继者。__\n\n可以在客户端设置责任链的上游，这样可以很好的解决原来大量的分支判断造成难维护、灵活性差的问题\n\n# 25.中介者模式（调停者模式，Mediator）\n通过中介者，可以将系统的 **网状结构** 变成一个以中介者为中心的 **星状结构。**\n\n> **概念：** 用一个中介对象来封装一系列的对象的交互。中介者使各对象不需要显式的相互作用，从而使其耦合松散，而且可以独立的改变它们之间的交互。\n\n**中介者模式的优点：**\n- Mediator的出现减少了各个Colleague的耦合，使得可以独立的改变和复用各个Colleague类和Mediator类\n- 将对象如何协作进行抽象，把Mediator作为一个独立的概念并将其封装在一个对象中，关注的对象变为它们之间的交互中，站在更宏观的角度看待系统。\n\n**中介者模式缺点：**\n- 交互复杂性 --》 中介者复杂性\n中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合，以及想定制一个分布在多个类中的行为，而又不想生成太多子类的场合。\n\n# 26.享元模式（Flyweight）\n运用共享技术有效的支持大量细粒度（Flyweight轻量级）的对象。\n```csharp\nabstract class Flyweight //享元类抽象接口\n{\n    public abstract void Operation (int extrinsicstate);\n}\n\nclass ConcreteFlyweight : Flyweight //实现flyweight接口，增加存储空间\n{\n    public override void Operation (int extrinsicstate)\n    {\n        Console.WriteLine(\"具体Flyweight：\" +extrinsicstate);\n    }\n}\n\nclass UnsharedConcreteFlyweight : Flyweight //不需要共享的flyweight子类\n{\n    public override void Operation (int extrinsicstate)\n    {\n        Console.WriteLine(\"不共享的具体Flyweight：\" +extrinsicstate);\n    }\n}\n\nClass FlyweightFactory //享元工厂，用来创建并管理flyweight对象\n{\n    private Hashtable flyweights = new Hashtable();\n    public FlyweightFactory()\n    {\n        flyweights.Add(\"X\",new ConcreteFlyweight());\n        flyweights.Add(\"Y\",new ConcreteFlyweight());\n        flyweights.Add(\"Z\",new ConcreteFlyweight());\n    }\n    public Flyweight GetFlyweight(string key)\n    {\n        return ((Flyweight)flyweights[key]);\n    }\n}\n\n```\n享元模式可以避免大量非常 **相似类** 的开销。该模式运用共享技术有效地支持大量细粒度的对象。\n\n__应用场景：__\n1. 如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销；\n2. 对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组的对象，此时就可以考虑使用享元模式。\n比如string对象使用了享元模式。\n\n# 27.解释器模式(interpreter)\n> 给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。\n\n**需要解决的问题：** 如果一个特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。\n\n当有一个语言需要解释执行的时候，并且你可将该语言中的句子表示为一个抽象的语法树，此时就可以使用解释器模式。\n\n典型的应用有：正则表达式、浏览器解析HTML文件\n```csharp\nabstract class AbstractExpression//抽象表达式，这个接口为抽象语法树中的所有节点所共享\n{\n    public abstract void Interpret(Context context);\n}\n\nclass TerminalExpression: AbstractExpression//终结符表达式，实现与文法中的终结符相关联的解释操作\n{\n    public override void Interpret(Context context)\n    {\n        Console.WriteLine(\"终端解释器\");\n    }\n}\n\nclass NonterminalExpression: AbstractExpression//非终结表达式，为文法中的非终结符实现解释操作，文法中的每一条规则R1、R2.。。。Rn都需要一个具体的非终结表达式类\n{\n    public override void Interpret(Context context)\n    {\n        Console.WriteLine(\"非终端解释器\");\n    }\n}\n\nclass Context//Context,包含解释器之外的一些全局信息\n{\n    private string input;\n    public string Input\n    {\n        get{return input;}\n        set{input = value;}\n    }\n    private string output;\n    public string Output\n    {\n        get{return output;}\n        set{output = value;}\n    }\n}\n\n```\n# 28.访问者模式(Visitor)\n> 访问者模式讲的是表示一个作用于某对象结构中各个元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。\n> 笑话一则：男人与女人最大的区别就是，比上不足，比下有余。\n\n充分使用了 **双分派** 的技术，实现处理和数据结构分离。\n- visitor指的是两者都根据某种共有的状态进行的不同的反应，而这个visitor正好是提供了表示这种反应的统一接口，封装了不同的反应。\n- ObjectStructure是封装的两种或多种对象，这也是对象的稳定的结构。\n\n访问者模式适用于数据结构相对稳定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。\n访问者模式的目的是要把 **处理从数据结构** 中分离出来。\n访问者模式的优点是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者。访问者模式讲有关行为集中到一个访问者对象中。\n访问者模式的缺点是增加新的数据结构更困难了，也相对比较复杂。\n大多数情况并不需要访问者模式，很难找到数据结构不变化的情况。\n\n# 29.各种模式的总结\n将24个设计模式可以大体分为三个类别：\n- 创建型模式（6个）\n- 简单工厂\n- 抽象工厂\n- 建造者模式\n- 工厂方法模式\n- 原型模式\n- 单例模式\n\n创建型模式抽象了实例化的过程。它们帮助一个系统独立于如何创建、组合和表示它的那些对象。\n创建者模式都会将关于该系统使用哪些具体的类的信息封装起来，允许客户用结构和功能差别很大的‘产品’对象配置一个系统。\n\n- 结构型模式（7个）\n- 适配器模式\n- 桥接模式\n- 组合模式\n- 装饰模式\n- 外观模式\n- 享元模式\n- 代理模式\n\n找出变化，并将变化封装。\n\n- 行为型模式（11个）\n- 观察者模式\n- 模板方法模式\n- 命令模式\n- 状态模式\n- 职责链模式\n- 解释器模式\n- 中介模式\n- 访问者模式\n- 策略模式\n- 备忘录模式\n- 迭代器模式\n\n面向对象设计模式体现的就是 **抽象** 的思想，*类是对象的抽象，抽象类是类的抽象，接口是对行为的抽象。*\n","slug":"《大话设计模式》读书整理","published":1,"updated":"2018-08-25T02:36:44.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c8c001i4ov11kfux7vm","content":"<h1 id=\"面向对象设计原则\"><a href=\"#面向对象设计原则\" class=\"headerlink\" title=\"面向对象设计原则\"></a>面向对象设计原则</h1><p>如何同时提高一个软件系统的<strong>可维护性和可复用性</strong>是面向对象设计需要解决的核心问题之一。<br>面向对象设计原则为支持可维护性及复用而诞生，常见的7种面向对象设计原则如下表所示，所有的设计模式都遵循一个或多个面向对象的设计原则。</p>\n<table>\n<thead>\n<tr>\n<th>设计原则名称</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单一职责原则（Single Responsibility Principle,SRP）</td>\n<td>一个类只负责一个功能领域中的相应职责</td>\n</tr>\n<tr>\n<td>开闭原则（Open-Closed Principle,OCR）</td>\n<td>软件实体应对扩展开放，而对修改关闭</td>\n</tr>\n<tr>\n<td>里氏代换原则（Liskov Substitution Principle, LSP）</td>\n<td>所有引用基类对象的地方能够透明地使用其子类的对象</td>\n</tr>\n<tr>\n<td>依赖倒转原则（Dependence Inversion Principle，DIP）</td>\n<td>抽象不应该依赖于细节，细节应该依赖于抽象，也就是说，要针对接口编程，而不是针对实现编程</td>\n</tr>\n<tr>\n<td>接口隔离原则（Interface Segregation Principle, ISP）</td>\n<td>使用多个专门的接口，而不使用单一的总接口</td>\n</tr>\n<tr>\n<td>合成复用原则（Composite Reuse Principle, CRP）</td>\n<td>尽量使用对象的组合，而不是继承来达到复用的目的</td>\n</tr>\n<tr>\n<td>迪米特法则（Law of Demeter, LoD）</td>\n<td>一个软件实体应当尽可能少地与其他实体发生作用</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h1 id=\"1-简单工厂模式-Simple-Factory\"><a href=\"#1-简单工厂模式-Simple-Factory\" class=\"headerlink\" title=\"1.简单工厂模式(Simple Factory)\"></a>1.简单工厂模式(Simple Factory)</h1><p>面向对象的分析设计的编程思想，通过封装、继承、多态将程序的耦合度降低，使用设计模式使得程序更加的灵活，容易修改，并且易于复用。</p>\n<blockquote>\n<p>使用单独的类来做这个创造实例的过程，这就是工厂，定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。<br>因为在简单工厂模式中用于创建实例的方法使静态(Static)方法，因此简单工厂模式又被称为静态工厂方法模式。<br>编程是一门技术，更加是一门艺术！</p>\n</blockquote>\n<p>简单工厂模式的要点在于：<strong>当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</strong><br><strong>主要优点：</strong></p>\n<ul>\n<li>工厂类中包含必要的判断逻辑，可以决定在什么时候创建一个产品类的对象，客户端可以免除直接创建产品对象的职责，也就是说实现了对象创建和使用的分离。</li>\n<li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可</li>\n<li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性</li>\n</ul>\n<h1 id=\"2-策略模式-Strategy\"><a href=\"#2-策略模式-Strategy\" class=\"headerlink\" title=\"2.策略模式(Strategy)\"></a>2.策略模式(Strategy)</h1><blockquote>\n<p>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p>\n</blockquote>\n<p>策略模式是定义一系列算法的方法，从概念上来讲，所有这些算法完成的都是相同的工作，只是实现不同，它可以以 <strong>相同的方式</strong> 调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</p>\n<p><strong>策略模式封装了变化</strong></p>\n<p>策略模式的Strategy类层次为Context定义了一系列可供重用的算法或行为，继承有助于析取出这些算法中的公共功能。<br>策略模式的优点是简化了单元测试，将不同行为或者算法堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为，因此借助简单工厂模式，然后将这些行为封装在一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Strategy</span><span class=\"comment\">//抽象算法类，定义所有支持的算法的公共接口</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">AlgorithmInterface</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreStrategyA</span>: <span class=\"title\">Strategy</span><span class=\"comment\">//具体算法类，封装了具体的算法或者行为，继承于Strategy</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">AlgorithmInterface</span>(<span class=\"params\"></span>)<span class=\"comment\">//算法A的具体实现方法</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        console.WriteLine(<span class=\"string\">\"算法A的实现\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreStrategyB</span>: <span class=\"title\">Strategy</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">AlgorithmInterface</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        console.WriteLine(<span class=\"string\">\"算法B的实现\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span><span class=\"comment\">//用具体的ConcreStrategy来配置，维护一个对Strategy对象的引用</span></div><div class=\"line\">&#123;</div><div class=\"line\">    Strategy strategy;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span>(<span class=\"params\">Strategy strategy</span>)<span class=\"comment\">//初始化时，传入具体的策略对象</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//上下文接口，根据具体的策略对象，调用其算法方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ContextInterface</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        strategy.AlgorithmInterface();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    Context context;</div><div class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> ConcreStrategyA());<span class=\"comment\">//实例化不同的算法策略</span></div><div class=\"line\">    context.ContextInterface();</div><div class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> ConcreStrategyB);</div><div class=\"line\">    context.ContextInterface();</div><div class=\"line\">    console.Read();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-单一职责原则\"><a href=\"#3-单一职责原则\" class=\"headerlink\" title=\"3.单一职责原则\"></a>3.单一职责原则</h1><p><strong>前言</strong><br>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他的职责的能力。而这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。<br><strong>如何判断一个类是否有多个职责？</strong></p>\n<ul>\n<li>想到多于一个动机去改变一个类，那么这个类就多于一个职责，就应该发现这些职责然后将这些职责相互分离</li>\n<li>易维护、易扩展、易复用、灵活多样</li>\n</ul>\n<h1 id=\"4-开放-封闭原则（OCP-Open-Closed-Principle）\"><a href=\"#4-开放-封闭原则（OCP-Open-Closed-Principle）\" class=\"headerlink\" title=\"4.开放-封闭原则（OCP: Open-Closed Principle）\"></a>4.开放-封闭原则（OCP: Open-Closed Principle）</h1><ul>\n<li>Open for extension, Closed for modification(扩展开放、更改封闭)：软件实体（类、模块、函数等等）应该是可以扩展的、但是不可修改</li>\n<li>多扩展，少修改</li>\n<li>原则是：面对新的需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码</li>\n<li>全力以赴是必须，两手准备也是灵活处事的表现</li>\n</ul>\n<h1 id=\"5-依赖倒转原则\"><a href=\"#5-依赖倒转原则\" class=\"headerlink\" title=\"5.依赖倒转原则\"></a>5.依赖倒转原则</h1><p>面向对象的 <strong>强内聚、松耦合</strong> 的关系</p>\n<ul>\n<li>高层模块不应该依赖低层模块，两个都应该依赖抽象（接口或者抽象类）。</li>\n<li>抽象不应该依赖细节，细节应该依赖抽象。</li>\n</ul>\n<p><strong>里式代换原则：</strong> 子类型必须能够替换掉他们的父类型，即在一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别，也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。</p>\n<h1 id=\"6-装饰模式（Decorator）\"><a href=\"#6-装饰模式（Decorator）\" class=\"headerlink\" title=\"6.装饰模式（Decorator）\"></a>6.装饰模式（Decorator）</h1><p>动态地给一个对象添加一些额外的职责，就增加功能来讲，装饰模式比生成子类更为灵活（人穿衣服的顺序，服饰之于人是装饰）</p>\n<p>Component –&gt;concreteComponent, Decorator(抽象装饰器) –&gt;在抽象装饰器有SetComponent（装饰接口）接口包装 component，因此就串起来了。</p>\n<p><strong>装饰模式的优点：</strong> 把类中的装饰功能从类中搬移去除，这样就可以简化原有的类，有效的把类的核心职责和装饰功能区分开，而且可以去除相关类中重复的装饰逻辑。</p>\n<h1 id=\"7-代理模式（Proxy）\"><a href=\"#7-代理模式（Proxy）\" class=\"headerlink\" title=\"7.代理模式（Proxy）\"></a>7.代理模式（Proxy）</h1><p>为其他对象提供一种代理以控制对这个对象的访问<br>Subject –-&gt;RealSubject, Proxy; 也就是说两者都继承自Subject,拥有相同的接口，但具体实现中的接口是Proxy中的接口封装RealSubject中的接口，以实现代理的方式。<br>代理模式的应用：</p>\n<ul>\n<li>远程代理：为一个对象在不同的地址空间提供局部代理，隐藏一个对象存在于不同地址空间的事实</li>\n<li>虚拟代理：浏览器页面的预加载</li>\n<li>安全代理：用来控制真实对象访问时的权限</li>\n<li>智能指引：调用真实对象时，代理处理另外的一些事<br>简而言之：代理模式就是在访问对象时引入一定程度的间接性，而这种间接性，可以附加多种用途。</li>\n</ul>\n<h1 id=\"8-工厂方法模式（Factory-Method）\"><a href=\"#8-工厂方法模式（Factory-Method）\" class=\"headerlink\" title=\"8.工厂方法模式（Factory Method）\"></a>8.工厂方法模式（Factory Method）</h1><p>是简单工厂模式的扩充，增加了工厂接口（interface IFactory）<strong>[工厂产生实例的地方]</strong>。</p>\n<p><strong>简单工厂：</strong>  工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</p>\n<p><strong>工厂方法：</strong> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。</p>\n<p>工厂方法使一个类的实例化延迟至其子类，也就是将实例化的选择上浮至客户端处理。<br>工厂方法克服了简单工厂违背开放-封闭原则的缺点，保持了封装对象创建过程的优点。</p>\n<h1 id=\"9-原型模式（Prototype）\"><a href=\"#9-原型模式（Prototype）\" class=\"headerlink\" title=\"9.原型模式（Prototype）\"></a>9.原型模式（Prototype）</h1><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br>从一个对象再创建另外一个可定制的对象，并且不需要知道任何创建的细节。<br>好处是不用重新初始化对象，动态地获得对象运行时的状态。</p>\n<p><strong>深拷贝和浅拷贝：</strong><br>如果字段是值类的，则对该字段执行逐位复制，如果字段是引用类型，则复制引用但不复制引用的对象，因此，原始对象及其复本引用同一对象。</p>\n<h1 id=\"10-模板方法模式（TemplateMethod）\"><a href=\"#10-模板方法模式（TemplateMethod）\" class=\"headerlink\" title=\"10.模板方法模式（TemplateMethod）\"></a>10.模板方法模式（TemplateMethod）</h1><p>当我们要完成在某一细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上实现可能不同时，我们通常考虑用模板方法模式进行处理。</p>\n<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定结构。</p>\n<p>模板方法模式是通过把不变行为搬移到父类中，去除子类中的重复代码，来体现它的优势，模板方法模式提供了一个很好的代码复用平台。</p>\n<p><strong>注意：</strong> 当不变的和可变的行为在方法的子类实现中混合在一起的时候，不变的行为就会在子类中重复出现，我们通过模板方法模式把这些行为搬移到单一的地方，这样就帮助子类摆脱重复不变的行为的纠缠。</p>\n<h1 id=\"11-迪米特法则-–-最少知识原则\"><a href=\"#11-迪米特法则-–-最少知识原则\" class=\"headerlink\" title=\"11.迪米特法则 – 最少知识原则\"></a>11.迪米特法则 – 最少知识原则</h1><p><strong>来源：</strong><br>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。<br>在类的结构设计上，每一个类都应当尽量降低成员的访问权限，强调了类之间的松耦合，类之间的耦合越弱，越有利于复用，一个处于弱耦合的类被修改，不会对有关系的类造成波及。<strong>—信息的隐藏促进了软件的复用。</strong></p>\n<h1 id=\"12-外观模式（门面模式-Facade）\"><a href=\"#12-外观模式（门面模式-Facade）\" class=\"headerlink\" title=\"12.外观模式（门面模式 Facade）\"></a>12.外观模式（门面模式 Facade）</h1><p>是为了减少各个程序模块之间的 <strong>耦合性</strong></p>\n<p><strong>定义：</strong><br>为子系统的中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>\n<p><strong>白话解释:</strong><br>也就是将几个子系统（类）放在一个统一的外观（Facade）中，包裹一层；然后供客户端或新系统统一调用。</p>\n<p><strong>使用外观模式的时机：</strong></p>\n<ol>\n<li>在设计初期阶段，有意识的将不同的两层分离，经典的三层架构：数据访问层 –》 业务逻辑层 –》表示层；层与层之间使用Facade封装。</li>\n<li>在开发阶段，增加外观Facade来提供一个简单的接口，减少他们之间的依赖。</li>\n<li>维护遗留大型系统时，为设计粗糙的遗留代码设计一个简单清晰的Facade，让新系统与Facade交互，Facade与遗留代码交互所有复杂的工作。</li>\n</ol>\n<h1 id=\"13-建造者模式（Builder，生成器模式）\"><a href=\"#13-建造者模式（Builder，生成器模式）\" class=\"headerlink\" title=\"13.建造者模式（Builder，生成器模式）\"></a>13.建造者模式（Builder，生成器模式）</h1><p>这是对建造流程的抽象。人基本特点抽象化（稳定的特点），体型的胖瘦具体化;<br>将一个复杂对象的 <strong>构建</strong> 与它的 <strong>表示</strong> 分离，使得同样的构建过程可以创建不同的表示。<br>包含指挥者（Director）是用户和建造过程的隔离，指挥者实现用户的需求，而不将构造过程展示给用户:<br>用户 | Director | 建造过程<br>建造者模式是在当创建复杂对象的算法应该 <strong>独立于</strong> 该对象的组成部分以及它们的装配方式时的模式。</p>\n<h1 id=\"14-观察者模式\"><a href=\"#14-观察者模式\" class=\"headerlink\" title=\"14.观察者模式\"></a>14.观察者模式</h1><p>又叫发布 – 订阅（Publish/Subscribe）模式，定义了一种 <strong>一对多</strong> 的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生改变时，会通知所有观察者对象，使它们能够自动更新自己。</p>\n<p><strong>使用的动机来源：</strong> 不希望为了维护一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便，而观察者模式中的关键对象是主题 Subject 和 观察者 Observer ，一个 Subject 可以有任意数目的依赖它的 Observer，一旦 Subject 的状态发生了改变，所有的 Observer 都可以得到通知，Subject 发出通知时并不需要知道谁是它的观察者，也就是说，具体的观察者是谁，它根本不需要知道。而任何一个具体的观察者也不需要知道其他观察者的存在。<br>观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使各自的变化都不会影响到另一边的变化。</p>\n<p>增加委托事件，观察者中的 Update 动作，进一步具体化，也就是将 Update 的函数具体为相应的动作，然后在具体的 Subject 中增加委托事件 EventHandler，而这个 EventHandler 是 Update 的引用方法（别名，或者有点像函数指针）。</p>\n<h1 id=\"15-抽象工厂模式（Abstract-Factory）\"><a href=\"#15-抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"15.抽象工厂模式（Abstract Factory）\"></a>15.抽象工厂模式（Abstract Factory）</h1><blockquote>\n<p>菜鸟程序员碰到问题，只会用时间来摆平，编程是一门艺术，如果增加一个功能就需要大批量的改动，这就是非常丑陋的代码！<br>心急讨不了好媳妇 ~</p>\n</blockquote>\n<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>易于交换产品系列，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变的非常容易，它只需要改变具体工厂即可使用不同的产品配置；</li>\n<li>它让具体的创建实例过程与客户端分离，客户端是通过他们的抽象接口操纵实例，产品的具体类名也被具体的工厂的实现分离，不会出现在客户代码中。<br>使用<em>反射技术</em>去除简单工厂中的 switch — case的判断逻辑 | –》 反射+抽象工厂模式</li>\n</ul>\n<p><strong>总结：</strong><br>所有在用简单工厂的地方，都可以考虑用反射技术去除switch 或者 if的判断逻辑，解除分支判断带来的耦合。</p>\n<h1 id=\"16-状态模式（State）\"><a href=\"#16-状态模式（State）\" class=\"headerlink\" title=\"16.状态模式（State）\"></a>16.状态模式（State）</h1><p><strong>Tips：</strong><br>方法过长（Long Method）是<em>坏味道</em>，意味着这个方法承担的责任过大，这个在设计模式上是很糟糕的行为，类需要遵循单一职责原则，面向对象设计其实就是希望做到代码的责任分解。</p>\n<p><strong>概念：</strong><br>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。<br>适用的场景：当控制一个对象状态转换的条件表达式过于复杂时的情况，也就是当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式了。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。</p>\n<p><strong>好处：</strong><br>将与特定状态的行为局部化，并且将不同状态的行为分割开来。状态模式通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖</p>\n<h1 id=\"17-适配器模式（Adapter）\"><a href=\"#17-适配器模式（Adapter）\" class=\"headerlink\" title=\"17.适配器模式（Adapter）\"></a>17.适配器模式（Adapter）</h1><p>将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能在一起工作的那些类可以一起工作（加一层封装接口来适配现在的系统使用）。</p>\n<p>系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。Adapter 主要应用于希望复用一些现存的类，但是接口又与复用环境不一致的情况。</p>\n<ul>\n<li>类适配模式：需要支持类的多重继承（只有C++支持多重继承）</li>\n<li>对象适配模式<br>在使用一个已经存在的类，但如果它的接口，也就是它的方法和你的要求不相同时，应该考虑 Adapter，客户代码只需要调用这个统一的接口（Adapter）。<br>也就是在这种情况：<em>两个类所做的事情相同或相似，但是具有不同的接口时要使用它。</em><br><strong>注：</strong> 只有碰到无法改变原有设计和代码的情况时，才考虑适配。在有小的接口不统一的问题发生时，及时重构。</li>\n</ul>\n<h1 id=\"18-备忘录模式（Memento）\"><a href=\"#18-备忘录模式（Memento）\" class=\"headerlink\" title=\"18.备忘录模式（Memento）\"></a>18.备忘录模式（Memento）</h1><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。三个角色：发起人（Originator） –》 备忘录（Memento）类 –》 管理者（Caretaker）类</p>\n<p><strong>适用场景：</strong> Memento模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多属性中的一小部分时，Originator 可以根据保存的 Memento信息还原到前一状态。</p>\n<h1 id=\"19-组合模式（Composite）\"><a href=\"#19-组合模式（Composite）\" class=\"headerlink\" title=\"19.组合模式（Composite）\"></a>19.组合模式（Composite）</h1><p>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p><strong>适用的场景：</strong> 需求中是体现部分与整体层次的结构时，并且希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，考虑使用组合模式。<br>组合模式让客户可以一致地使用组合结构和单个对象。</p>\n<h1 id=\"20-迭代器模式（Iterator）\"><a href=\"#20-迭代器模式（Iterator）\" class=\"headerlink\" title=\"20.迭代器模式（Iterator）\"></a>20.迭代器模式（Iterator）</h1><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。<br>需要对聚集（数组）有多种方式遍历时，可以考虑用迭代器模式：foreach .. in</p>\n<p><strong>注：</strong> 迭代器肯定是和具体的聚集绑定在一起的，在声明具体的迭代器时必须初始化绑定具体聚集。<br>迭代器（Iterator）模式就是分离了集合对象的遍历行为，抽象出一个迭代器来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明的访问集合内部的数据</p>\n<h1 id=\"21-单例模式（Singleton）\"><a href=\"#21-单例模式（Singleton）\" class=\"headerlink\" title=\"21.单例模式（Singleton）\"></a>21.单例模式（Singleton）</h1><blockquote>\n<p>复制黏贴是最容易的编程，也是最没有价值的编程!</p>\n</blockquote>\n<p>保证一个类仅有一个实例，并提供一个访问它的一个全局访问点。也就是让类自身负责保存它的唯一实例，并提供一个访问该实例的方法（ GetInstacne（））。</p>\n<p>单例模式试图解决的两个<strong>基本问题</strong>：</p>\n<ul>\n<li>全局访问</li>\n<li>实例化控制<br>具体代码体现：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> <span class=\"comment\">//懒汉式单例类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>) </span>&#123;&#125;<span class=\"comment\">//构造方法为private，外界无法通过new来实例化</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> syncRoot = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();<span class=\"comment\">//lock 确保当一个线程位于代码临界区时，另一个线程不能进入临界区</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)<span class=\"comment\">//获得本类实例的唯一全局访问点</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)<span class=\"comment\">//先判断实例是否存在，不存在则加锁处理</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">lock</span>(syncRoot)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>) <span class=\"comment\">//双重锁定，保证线程安全（Double-Check Locking）</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    instace = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> <span class=\"comment\">//饿汉式单例类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Singleton instance = <span class=\"keyword\">new</span> Singleton(); <span class=\"comment\">//静态初始化方式，类一加载就实例化对象，需要提前占用系统资源。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"22-桥接模式（Bridge）\"><a href=\"#22-桥接模式（Bridge）\" class=\"headerlink\" title=\"22. 桥接模式（Bridge）\"></a>22. 桥接模式（Bridge）</h1><p>面向对象的原则：优先使用对象的 <strong>合成/聚合</strong> ，而不是类继承</p>\n<ul>\n<li>聚合：表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分</li>\n<li>合成：表示一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样<br>优先使用对象的合成\\聚合将有助于保持每个类的封装，并被集中在单个任务上。这样的类和类继承层次会保持较小规模。<blockquote>\n<p><strong>概念：</strong> 将抽象部分与它的实现分离，使它们可以独立的变化。实现指的是抽象类和它的派生类用来实现自己的对象。</p>\n</blockquote>\n</li>\n</ul>\n<p>实现系统可能有多角度分类，每一种分类都有可能发生变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。</p>\n<h1 id=\"23-命令模式（Command）\"><a href=\"#23-命令模式（Command）\" class=\"headerlink\" title=\"23.命令模式（Command）\"></a>23.命令模式（Command）</h1><p>降低 <strong>行为请求者</strong> 与 <strong>行为实现者</strong> 的紧耦合。</p>\n<blockquote>\n<p><strong>概念：</strong> 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作</p>\n</blockquote>\n<p><strong>命令模式的作用</strong></p>\n<ul>\n<li>能容易地设计一个命令队列</li>\n<li>在需要的情况下，可以较容易的将命令记入日志</li>\n<li>允许接收请求的一方决定是否需要否决请求</li>\n<li>可以容易地实现对请求的撤销或者重做</li>\n<li>加进新的具体命令类不影响其他的类，增加新的具体命令类较容易</li>\n<li>把请求一个操作的对象与知道如何执行该操作的对象分隔开</li>\n</ul>\n<h1 id=\"24-职责链模式（Chain-of-Responsibility）\"><a href=\"#24-职责链模式（Chain-of-Responsibility）\" class=\"headerlink\" title=\"24.职责链模式（Chain of Responsibility）\"></a>24.职责链模式（Chain of Responsibility）</h1><blockquote>\n<p><strong>概念：</strong> 使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个责任对象处理它为止。</p>\n</blockquote>\n<p><strong>好处：</strong> 接收者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。<br>结果是职责链可简化对象的相互连接，它们仅仅需要保持一个指向其后继者的引用，而不需要保持所有候选接收者的引用。<br><strong>需要事先设置后继者。</strong></p>\n<p>可以在客户端设置责任链的上游，这样可以很好的解决原来大量的分支判断造成难维护、灵活性差的问题</p>\n<h1 id=\"25-中介者模式（调停者模式，Mediator）\"><a href=\"#25-中介者模式（调停者模式，Mediator）\" class=\"headerlink\" title=\"25.中介者模式（调停者模式，Mediator）\"></a>25.中介者模式（调停者模式，Mediator）</h1><p>通过中介者，可以将系统的 <strong>网状结构</strong> 变成一个以中介者为中心的 <strong>星状结构。</strong></p>\n<blockquote>\n<p><strong>概念：</strong> 用一个中介对象来封装一系列的对象的交互。中介者使各对象不需要显式的相互作用，从而使其耦合松散，而且可以独立的改变它们之间的交互。</p>\n</blockquote>\n<p><strong>中介者模式的优点：</strong></p>\n<ul>\n<li>Mediator的出现减少了各个Colleague的耦合，使得可以独立的改变和复用各个Colleague类和Mediator类</li>\n<li>将对象如何协作进行抽象，把Mediator作为一个独立的概念并将其封装在一个对象中，关注的对象变为它们之间的交互中，站在更宏观的角度看待系统。</li>\n</ul>\n<p><strong>中介者模式缺点：</strong></p>\n<ul>\n<li>交互复杂性 –》 中介者复杂性<br>中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合，以及想定制一个分布在多个类中的行为，而又不想生成太多子类的场合。</li>\n</ul>\n<h1 id=\"26-享元模式（Flyweight）\"><a href=\"#26-享元模式（Flyweight）\" class=\"headerlink\" title=\"26.享元模式（Flyweight）\"></a>26.享元模式（Flyweight）</h1><p>运用共享技术有效的支持大量细粒度（Flyweight轻量级）的对象。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span> <span class=\"comment\">//享元类抽象接口</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Operation</span> (<span class=\"params\"><span class=\"keyword\">int</span> extrinsicstate</span>)</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> : <span class=\"title\">Flyweight</span> <span class=\"comment\">//实现flyweight接口，增加存储空间</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Operation</span> (<span class=\"params\"><span class=\"keyword\">int</span> extrinsicstate</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"具体Flyweight：\"</span> +extrinsicstate);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">UnsharedConcreteFlyweight</span> : <span class=\"title\">Flyweight</span> <span class=\"comment\">//不需要共享的flyweight子类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Operation</span> (<span class=\"params\"><span class=\"keyword\">int</span> extrinsicstate</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"不共享的具体Flyweight：\"</span> +extrinsicstate);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Class FlyweightFactory <span class=\"comment\">//享元工厂，用来创建并管理flyweight对象</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Hashtable flyweights = <span class=\"keyword\">new</span> Hashtable();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlyweightFactory</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        flyweights.Add(<span class=\"string\">\"X\"</span>,<span class=\"keyword\">new</span> ConcreteFlyweight());</div><div class=\"line\">        flyweights.Add(<span class=\"string\">\"Y\"</span>,<span class=\"keyword\">new</span> ConcreteFlyweight());</div><div class=\"line\">        flyweights.Add(<span class=\"string\">\"Z\"</span>,<span class=\"keyword\">new</span> ConcreteFlyweight());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Flyweight <span class=\"title\">GetFlyweight</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((Flyweight)flyweights[key]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>享元模式可以避免大量非常 <strong>相似类</strong> 的开销。该模式运用共享技术有效地支持大量细粒度的对象。</p>\n<p><strong>应用场景：</strong></p>\n<ol>\n<li>如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销；</li>\n<li>对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组的对象，此时就可以考虑使用享元模式。<br>比如string对象使用了享元模式。</li>\n</ol>\n<h1 id=\"27-解释器模式-interpreter\"><a href=\"#27-解释器模式-interpreter\" class=\"headerlink\" title=\"27.解释器模式(interpreter)\"></a>27.解释器模式(interpreter)</h1><blockquote>\n<p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>\n</blockquote>\n<p><strong>需要解决的问题：</strong> 如果一个特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>\n<p>当有一个语言需要解释执行的时候，并且你可将该语言中的句子表示为一个抽象的语法树，此时就可以使用解释器模式。</p>\n<p>典型的应用有：正则表达式、浏览器解析HTML文件<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span><span class=\"comment\">//抽象表达式，这个接口为抽象语法树中的所有节点所共享</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Interpret</span>(<span class=\"params\">Context context</span>)</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span>: <span class=\"title\">AbstractExpression</span><span class=\"comment\">//终结符表达式，实现与文法中的终结符相关联的解释操作</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Interpret</span>(<span class=\"params\">Context context</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"终端解释器\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">NonterminalExpression</span>: <span class=\"title\">AbstractExpression</span><span class=\"comment\">//非终结表达式，为文法中的非终结符实现解释操作，文法中的每一条规则R1、R2.。。。Rn都需要一个具体的非终结表达式类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Interpret</span>(<span class=\"params\">Context context</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"非终端解释器\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span><span class=\"comment\">//Context,包含解释器之外的一些全局信息</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> input;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Input</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span>&#123;<span class=\"keyword\">return</span> input;&#125;</div><div class=\"line\">        <span class=\"keyword\">set</span>&#123;input = <span class=\"keyword\">value</span>;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> output;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Output</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span>&#123;<span class=\"keyword\">return</span> output;&#125;</div><div class=\"line\">        <span class=\"keyword\">set</span>&#123;output = <span class=\"keyword\">value</span>;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"28-访问者模式-Visitor\"><a href=\"#28-访问者模式-Visitor\" class=\"headerlink\" title=\"28.访问者模式(Visitor)\"></a>28.访问者模式(Visitor)</h1><blockquote>\n<p>访问者模式讲的是表示一个作用于某对象结构中各个元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。<br>笑话一则：男人与女人最大的区别就是，比上不足，比下有余。</p>\n</blockquote>\n<p>充分使用了 <strong>双分派</strong> 的技术，实现处理和数据结构分离。</p>\n<ul>\n<li>visitor指的是两者都根据某种共有的状态进行的不同的反应，而这个visitor正好是提供了表示这种反应的统一接口，封装了不同的反应。</li>\n<li>ObjectStructure是封装的两种或多种对象，这也是对象的稳定的结构。</li>\n</ul>\n<p>访问者模式适用于数据结构相对稳定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。<br>访问者模式的目的是要把 <strong>处理从数据结构</strong> 中分离出来。<br>访问者模式的优点是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者。访问者模式讲有关行为集中到一个访问者对象中。<br>访问者模式的缺点是增加新的数据结构更困难了，也相对比较复杂。<br>大多数情况并不需要访问者模式，很难找到数据结构不变化的情况。</p>\n<h1 id=\"29-各种模式的总结\"><a href=\"#29-各种模式的总结\" class=\"headerlink\" title=\"29.各种模式的总结\"></a>29.各种模式的总结</h1><p>将24个设计模式可以大体分为三个类别：</p>\n<ul>\n<li>创建型模式（6个）</li>\n<li>简单工厂</li>\n<li>抽象工厂</li>\n<li>建造者模式</li>\n<li>工厂方法模式</li>\n<li>原型模式</li>\n<li>单例模式</li>\n</ul>\n<p>创建型模式抽象了实例化的过程。它们帮助一个系统独立于如何创建、组合和表示它的那些对象。<br>创建者模式都会将关于该系统使用哪些具体的类的信息封装起来，允许客户用结构和功能差别很大的‘产品’对象配置一个系统。</p>\n<ul>\n<li>结构型模式（7个）</li>\n<li>适配器模式</li>\n<li>桥接模式</li>\n<li>组合模式</li>\n<li>装饰模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<p>找出变化，并将变化封装。</p>\n<ul>\n<li>行为型模式（11个）</li>\n<li>观察者模式</li>\n<li>模板方法模式</li>\n<li>命令模式</li>\n<li>状态模式</li>\n<li>职责链模式</li>\n<li>解释器模式</li>\n<li>中介模式</li>\n<li>访问者模式</li>\n<li>策略模式</li>\n<li>备忘录模式</li>\n<li>迭代器模式</li>\n</ul>\n<p>面向对象设计模式体现的就是 <strong>抽象</strong> 的思想，<em>类是对象的抽象，抽象类是类的抽象，接口是对行为的抽象。</em></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"面向对象设计原则\"><a href=\"#面向对象设计原则\" class=\"headerlink\" title=\"面向对象设计原则\"></a>面向对象设计原则</h1><p>如何同时提高一个软件系统的<strong>可维护性和可复用性</strong>是面向对象设计需要解决的核心问题之一。<br>面向对象设计原则为支持可维护性及复用而诞生，常见的7种面向对象设计原则如下表所示，所有的设计模式都遵循一个或多个面向对象的设计原则。</p>\n<table>\n<thead>\n<tr>\n<th>设计原则名称</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单一职责原则（Single Responsibility Principle,SRP）</td>\n<td>一个类只负责一个功能领域中的相应职责</td>\n</tr>\n<tr>\n<td>开闭原则（Open-Closed Principle,OCR）</td>\n<td>软件实体应对扩展开放，而对修改关闭</td>\n</tr>\n<tr>\n<td>里氏代换原则（Liskov Substitution Principle, LSP）</td>\n<td>所有引用基类对象的地方能够透明地使用其子类的对象</td>\n</tr>\n<tr>\n<td>依赖倒转原则（Dependence Inversion Principle，DIP）</td>\n<td>抽象不应该依赖于细节，细节应该依赖于抽象，也就是说，要针对接口编程，而不是针对实现编程</td>\n</tr>\n<tr>\n<td>接口隔离原则（Interface Segregation Principle, ISP）</td>\n<td>使用多个专门的接口，而不使用单一的总接口</td>\n</tr>\n<tr>\n<td>合成复用原则（Composite Reuse Principle, CRP）</td>\n<td>尽量使用对象的组合，而不是继承来达到复用的目的</td>\n</tr>\n<tr>\n<td>迪米特法则（Law of Demeter, LoD）</td>\n<td>一个软件实体应当尽可能少地与其他实体发生作用</td>\n</tr>\n</tbody>\n</table>","more":"<h1 id=\"1-简单工厂模式-Simple-Factory\"><a href=\"#1-简单工厂模式-Simple-Factory\" class=\"headerlink\" title=\"1.简单工厂模式(Simple Factory)\"></a>1.简单工厂模式(Simple Factory)</h1><p>面向对象的分析设计的编程思想，通过封装、继承、多态将程序的耦合度降低，使用设计模式使得程序更加的灵活，容易修改，并且易于复用。</p>\n<blockquote>\n<p>使用单独的类来做这个创造实例的过程，这就是工厂，定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。<br>因为在简单工厂模式中用于创建实例的方法使静态(Static)方法，因此简单工厂模式又被称为静态工厂方法模式。<br>编程是一门技术，更加是一门艺术！</p>\n</blockquote>\n<p>简单工厂模式的要点在于：<strong>当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。</strong><br><strong>主要优点：</strong></p>\n<ul>\n<li>工厂类中包含必要的判断逻辑，可以决定在什么时候创建一个产品类的对象，客户端可以免除直接创建产品对象的职责，也就是说实现了对象创建和使用的分离。</li>\n<li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可</li>\n<li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性</li>\n</ul>\n<h1 id=\"2-策略模式-Strategy\"><a href=\"#2-策略模式-Strategy\" class=\"headerlink\" title=\"2.策略模式(Strategy)\"></a>2.策略模式(Strategy)</h1><blockquote>\n<p>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p>\n</blockquote>\n<p>策略模式是定义一系列算法的方法，从概念上来讲，所有这些算法完成的都是相同的工作，只是实现不同，它可以以 <strong>相同的方式</strong> 调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</p>\n<p><strong>策略模式封装了变化</strong></p>\n<p>策略模式的Strategy类层次为Context定义了一系列可供重用的算法或行为，继承有助于析取出这些算法中的公共功能。<br>策略模式的优点是简化了单元测试，将不同行为或者算法堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为，因此借助简单工厂模式，然后将这些行为封装在一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Strategy</span><span class=\"comment\">//抽象算法类，定义所有支持的算法的公共接口</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">AlgorithmInterface</span>(<span class=\"params\"></span>)</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreStrategyA</span>: <span class=\"title\">Strategy</span><span class=\"comment\">//具体算法类，封装了具体的算法或者行为，继承于Strategy</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">AlgorithmInterface</span>(<span class=\"params\"></span>)<span class=\"comment\">//算法A的具体实现方法</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        console.WriteLine(<span class=\"string\">\"算法A的实现\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreStrategyB</span>: <span class=\"title\">Strategy</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">AlgorithmInterface</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        console.WriteLine(<span class=\"string\">\"算法B的实现\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span><span class=\"comment\">//用具体的ConcreStrategy来配置，维护一个对Strategy对象的引用</span></div><div class=\"line\">&#123;</div><div class=\"line\">    Strategy strategy;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Context</span>(<span class=\"params\">Strategy strategy</span>)<span class=\"comment\">//初始化时，传入具体的策略对象</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.strategy = strategy;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//上下文接口，根据具体的策略对象，调用其算法方法</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ContextInterface</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        strategy.AlgorithmInterface();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    Context context;</div><div class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> ConcreStrategyA());<span class=\"comment\">//实例化不同的算法策略</span></div><div class=\"line\">    context.ContextInterface();</div><div class=\"line\">    context = <span class=\"keyword\">new</span> Context(<span class=\"keyword\">new</span> ConcreStrategyB);</div><div class=\"line\">    context.ContextInterface();</div><div class=\"line\">    console.Read();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-单一职责原则\"><a href=\"#3-单一职责原则\" class=\"headerlink\" title=\"3.单一职责原则\"></a>3.单一职责原则</h1><p><strong>前言</strong><br>如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其他的职责的能力。而这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。<br><strong>如何判断一个类是否有多个职责？</strong></p>\n<ul>\n<li>想到多于一个动机去改变一个类，那么这个类就多于一个职责，就应该发现这些职责然后将这些职责相互分离</li>\n<li>易维护、易扩展、易复用、灵活多样</li>\n</ul>\n<h1 id=\"4-开放-封闭原则（OCP-Open-Closed-Principle）\"><a href=\"#4-开放-封闭原则（OCP-Open-Closed-Principle）\" class=\"headerlink\" title=\"4.开放-封闭原则（OCP: Open-Closed Principle）\"></a>4.开放-封闭原则（OCP: Open-Closed Principle）</h1><ul>\n<li>Open for extension, Closed for modification(扩展开放、更改封闭)：软件实体（类、模块、函数等等）应该是可以扩展的、但是不可修改</li>\n<li>多扩展，少修改</li>\n<li>原则是：面对新的需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码</li>\n<li>全力以赴是必须，两手准备也是灵活处事的表现</li>\n</ul>\n<h1 id=\"5-依赖倒转原则\"><a href=\"#5-依赖倒转原则\" class=\"headerlink\" title=\"5.依赖倒转原则\"></a>5.依赖倒转原则</h1><p>面向对象的 <strong>强内聚、松耦合</strong> 的关系</p>\n<ul>\n<li>高层模块不应该依赖低层模块，两个都应该依赖抽象（接口或者抽象类）。</li>\n<li>抽象不应该依赖细节，细节应该依赖抽象。</li>\n</ul>\n<p><strong>里式代换原则：</strong> 子类型必须能够替换掉他们的父类型，即在一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出父类对象和子类对象的区别，也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。</p>\n<h1 id=\"6-装饰模式（Decorator）\"><a href=\"#6-装饰模式（Decorator）\" class=\"headerlink\" title=\"6.装饰模式（Decorator）\"></a>6.装饰模式（Decorator）</h1><p>动态地给一个对象添加一些额外的职责，就增加功能来讲，装饰模式比生成子类更为灵活（人穿衣服的顺序，服饰之于人是装饰）</p>\n<p>Component –&gt;concreteComponent, Decorator(抽象装饰器) –&gt;在抽象装饰器有SetComponent（装饰接口）接口包装 component，因此就串起来了。</p>\n<p><strong>装饰模式的优点：</strong> 把类中的装饰功能从类中搬移去除，这样就可以简化原有的类，有效的把类的核心职责和装饰功能区分开，而且可以去除相关类中重复的装饰逻辑。</p>\n<h1 id=\"7-代理模式（Proxy）\"><a href=\"#7-代理模式（Proxy）\" class=\"headerlink\" title=\"7.代理模式（Proxy）\"></a>7.代理模式（Proxy）</h1><p>为其他对象提供一种代理以控制对这个对象的访问<br>Subject –-&gt;RealSubject, Proxy; 也就是说两者都继承自Subject,拥有相同的接口，但具体实现中的接口是Proxy中的接口封装RealSubject中的接口，以实现代理的方式。<br>代理模式的应用：</p>\n<ul>\n<li>远程代理：为一个对象在不同的地址空间提供局部代理，隐藏一个对象存在于不同地址空间的事实</li>\n<li>虚拟代理：浏览器页面的预加载</li>\n<li>安全代理：用来控制真实对象访问时的权限</li>\n<li>智能指引：调用真实对象时，代理处理另外的一些事<br>简而言之：代理模式就是在访问对象时引入一定程度的间接性，而这种间接性，可以附加多种用途。</li>\n</ul>\n<h1 id=\"8-工厂方法模式（Factory-Method）\"><a href=\"#8-工厂方法模式（Factory-Method）\" class=\"headerlink\" title=\"8.工厂方法模式（Factory Method）\"></a>8.工厂方法模式（Factory Method）</h1><p>是简单工厂模式的扩充，增加了工厂接口（interface IFactory）<strong>[工厂产生实例的地方]</strong>。</p>\n<p><strong>简单工厂：</strong>  工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，对于客户端来说，去除了与具体产品的依赖。</p>\n<p><strong>工厂方法：</strong> 定义一个用于创建对象的接口，让子类决定实例化哪一个类。</p>\n<p>工厂方法使一个类的实例化延迟至其子类，也就是将实例化的选择上浮至客户端处理。<br>工厂方法克服了简单工厂违背开放-封闭原则的缺点，保持了封装对象创建过程的优点。</p>\n<h1 id=\"9-原型模式（Prototype）\"><a href=\"#9-原型模式（Prototype）\" class=\"headerlink\" title=\"9.原型模式（Prototype）\"></a>9.原型模式（Prototype）</h1><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br>从一个对象再创建另外一个可定制的对象，并且不需要知道任何创建的细节。<br>好处是不用重新初始化对象，动态地获得对象运行时的状态。</p>\n<p><strong>深拷贝和浅拷贝：</strong><br>如果字段是值类的，则对该字段执行逐位复制，如果字段是引用类型，则复制引用但不复制引用的对象，因此，原始对象及其复本引用同一对象。</p>\n<h1 id=\"10-模板方法模式（TemplateMethod）\"><a href=\"#10-模板方法模式（TemplateMethod）\" class=\"headerlink\" title=\"10.模板方法模式（TemplateMethod）\"></a>10.模板方法模式（TemplateMethod）</h1><p>当我们要完成在某一细节层次一致的一个过程或一系列步骤，但其个别步骤在更详细的层次上实现可能不同时，我们通常考虑用模板方法模式进行处理。</p>\n<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定结构。</p>\n<p>模板方法模式是通过把不变行为搬移到父类中，去除子类中的重复代码，来体现它的优势，模板方法模式提供了一个很好的代码复用平台。</p>\n<p><strong>注意：</strong> 当不变的和可变的行为在方法的子类实现中混合在一起的时候，不变的行为就会在子类中重复出现，我们通过模板方法模式把这些行为搬移到单一的地方，这样就帮助子类摆脱重复不变的行为的纠缠。</p>\n<h1 id=\"11-迪米特法则-–-最少知识原则\"><a href=\"#11-迪米特法则-–-最少知识原则\" class=\"headerlink\" title=\"11.迪米特法则 – 最少知识原则\"></a>11.迪米特法则 – 最少知识原则</h1><p><strong>来源：</strong><br>如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。<br>在类的结构设计上，每一个类都应当尽量降低成员的访问权限，强调了类之间的松耦合，类之间的耦合越弱，越有利于复用，一个处于弱耦合的类被修改，不会对有关系的类造成波及。<strong>—信息的隐藏促进了软件的复用。</strong></p>\n<h1 id=\"12-外观模式（门面模式-Facade）\"><a href=\"#12-外观模式（门面模式-Facade）\" class=\"headerlink\" title=\"12.外观模式（门面模式 Facade）\"></a>12.外观模式（门面模式 Facade）</h1><p>是为了减少各个程序模块之间的 <strong>耦合性</strong></p>\n<p><strong>定义：</strong><br>为子系统的中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>\n<p><strong>白话解释:</strong><br>也就是将几个子系统（类）放在一个统一的外观（Facade）中，包裹一层；然后供客户端或新系统统一调用。</p>\n<p><strong>使用外观模式的时机：</strong></p>\n<ol>\n<li>在设计初期阶段，有意识的将不同的两层分离，经典的三层架构：数据访问层 –》 业务逻辑层 –》表示层；层与层之间使用Facade封装。</li>\n<li>在开发阶段，增加外观Facade来提供一个简单的接口，减少他们之间的依赖。</li>\n<li>维护遗留大型系统时，为设计粗糙的遗留代码设计一个简单清晰的Facade，让新系统与Facade交互，Facade与遗留代码交互所有复杂的工作。</li>\n</ol>\n<h1 id=\"13-建造者模式（Builder，生成器模式）\"><a href=\"#13-建造者模式（Builder，生成器模式）\" class=\"headerlink\" title=\"13.建造者模式（Builder，生成器模式）\"></a>13.建造者模式（Builder，生成器模式）</h1><p>这是对建造流程的抽象。人基本特点抽象化（稳定的特点），体型的胖瘦具体化;<br>将一个复杂对象的 <strong>构建</strong> 与它的 <strong>表示</strong> 分离，使得同样的构建过程可以创建不同的表示。<br>包含指挥者（Director）是用户和建造过程的隔离，指挥者实现用户的需求，而不将构造过程展示给用户:<br>用户 | Director | 建造过程<br>建造者模式是在当创建复杂对象的算法应该 <strong>独立于</strong> 该对象的组成部分以及它们的装配方式时的模式。</p>\n<h1 id=\"14-观察者模式\"><a href=\"#14-观察者模式\" class=\"headerlink\" title=\"14.观察者模式\"></a>14.观察者模式</h1><p>又叫发布 – 订阅（Publish/Subscribe）模式，定义了一种 <strong>一对多</strong> 的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生改变时，会通知所有观察者对象，使它们能够自动更新自己。</p>\n<p><strong>使用的动机来源：</strong> 不希望为了维护一致性而使各类紧密耦合，这样会给维护、扩展和重用都带来不便，而观察者模式中的关键对象是主题 Subject 和 观察者 Observer ，一个 Subject 可以有任意数目的依赖它的 Observer，一旦 Subject 的状态发生了改变，所有的 Observer 都可以得到通知，Subject 发出通知时并不需要知道谁是它的观察者，也就是说，具体的观察者是谁，它根本不需要知道。而任何一个具体的观察者也不需要知道其他观察者的存在。<br>观察者模式所做的工作其实就是解除耦合，让耦合的双方都依赖于抽象，而不是依赖于具体，从而使各自的变化都不会影响到另一边的变化。</p>\n<p>增加委托事件，观察者中的 Update 动作，进一步具体化，也就是将 Update 的函数具体为相应的动作，然后在具体的 Subject 中增加委托事件 EventHandler，而这个 EventHandler 是 Update 的引用方法（别名，或者有点像函数指针）。</p>\n<h1 id=\"15-抽象工厂模式（Abstract-Factory）\"><a href=\"#15-抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"15.抽象工厂模式（Abstract Factory）\"></a>15.抽象工厂模式（Abstract Factory）</h1><blockquote>\n<p>菜鸟程序员碰到问题，只会用时间来摆平，编程是一门艺术，如果增加一个功能就需要大批量的改动，这就是非常丑陋的代码！<br>心急讨不了好媳妇 ~</p>\n</blockquote>\n<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>易于交换产品系列，在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变的非常容易，它只需要改变具体工厂即可使用不同的产品配置；</li>\n<li>它让具体的创建实例过程与客户端分离，客户端是通过他们的抽象接口操纵实例，产品的具体类名也被具体的工厂的实现分离，不会出现在客户代码中。<br>使用<em>反射技术</em>去除简单工厂中的 switch — case的判断逻辑 | –》 反射+抽象工厂模式</li>\n</ul>\n<p><strong>总结：</strong><br>所有在用简单工厂的地方，都可以考虑用反射技术去除switch 或者 if的判断逻辑，解除分支判断带来的耦合。</p>\n<h1 id=\"16-状态模式（State）\"><a href=\"#16-状态模式（State）\" class=\"headerlink\" title=\"16.状态模式（State）\"></a>16.状态模式（State）</h1><p><strong>Tips：</strong><br>方法过长（Long Method）是<em>坏味道</em>，意味着这个方法承担的责任过大，这个在设计模式上是很糟糕的行为，类需要遵循单一职责原则，面向对象设计其实就是希望做到代码的责任分解。</p>\n<p><strong>概念：</strong><br>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。<br>适用的场景：当控制一个对象状态转换的条件表达式过于复杂时的情况，也就是当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用状态模式了。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简化。</p>\n<p><strong>好处：</strong><br>将与特定状态的行为局部化，并且将不同状态的行为分割开来。状态模式通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖</p>\n<h1 id=\"17-适配器模式（Adapter）\"><a href=\"#17-适配器模式（Adapter）\" class=\"headerlink\" title=\"17.适配器模式（Adapter）\"></a>17.适配器模式（Adapter）</h1><p>将一个类的接口转换成客户希望的另外一个接口。Adapter 模式使得原本由于接口不兼容而不能在一起工作的那些类可以一起工作（加一层封装接口来适配现在的系统使用）。</p>\n<p>系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。Adapter 主要应用于希望复用一些现存的类，但是接口又与复用环境不一致的情况。</p>\n<ul>\n<li>类适配模式：需要支持类的多重继承（只有C++支持多重继承）</li>\n<li>对象适配模式<br>在使用一个已经存在的类，但如果它的接口，也就是它的方法和你的要求不相同时，应该考虑 Adapter，客户代码只需要调用这个统一的接口（Adapter）。<br>也就是在这种情况：<em>两个类所做的事情相同或相似，但是具有不同的接口时要使用它。</em><br><strong>注：</strong> 只有碰到无法改变原有设计和代码的情况时，才考虑适配。在有小的接口不统一的问题发生时，及时重构。</li>\n</ul>\n<h1 id=\"18-备忘录模式（Memento）\"><a href=\"#18-备忘录模式（Memento）\" class=\"headerlink\" title=\"18.备忘录模式（Memento）\"></a>18.备忘录模式（Memento）</h1><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。三个角色：发起人（Originator） –》 备忘录（Memento）类 –》 管理者（Caretaker）类</p>\n<p><strong>适用场景：</strong> Memento模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多属性中的一小部分时，Originator 可以根据保存的 Memento信息还原到前一状态。</p>\n<h1 id=\"19-组合模式（Composite）\"><a href=\"#19-组合模式（Composite）\" class=\"headerlink\" title=\"19.组合模式（Composite）\"></a>19.组合模式（Composite）</h1><p>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>\n<p><strong>适用的场景：</strong> 需求中是体现部分与整体层次的结构时，并且希望用户可以忽略组合对象与单个对象的不同，统一地使用组合结构中的所有对象时，考虑使用组合模式。<br>组合模式让客户可以一致地使用组合结构和单个对象。</p>\n<h1 id=\"20-迭代器模式（Iterator）\"><a href=\"#20-迭代器模式（Iterator）\" class=\"headerlink\" title=\"20.迭代器模式（Iterator）\"></a>20.迭代器模式（Iterator）</h1><p>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。<br>需要对聚集（数组）有多种方式遍历时，可以考虑用迭代器模式：foreach .. in</p>\n<p><strong>注：</strong> 迭代器肯定是和具体的聚集绑定在一起的，在声明具体的迭代器时必须初始化绑定具体聚集。<br>迭代器（Iterator）模式就是分离了集合对象的遍历行为，抽象出一个迭代器来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明的访问集合内部的数据</p>\n<h1 id=\"21-单例模式（Singleton）\"><a href=\"#21-单例模式（Singleton）\" class=\"headerlink\" title=\"21.单例模式（Singleton）\"></a>21.单例模式（Singleton）</h1><blockquote>\n<p>复制黏贴是最容易的编程，也是最没有价值的编程!</p>\n</blockquote>\n<p>保证一个类仅有一个实例，并提供一个访问它的一个全局访问点。也就是让类自身负责保存它的唯一实例，并提供一个访问该实例的方法（ GetInstacne（））。</p>\n<p>单例模式试图解决的两个<strong>基本问题</strong>：</p>\n<ul>\n<li>全局访问</li>\n<li>实例化控制<br>具体代码体现：</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> <span class=\"comment\">//懒汉式单例类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>) </span>&#123;&#125;<span class=\"comment\">//构造方法为private，外界无法通过new来实例化</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> syncRoot = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();<span class=\"comment\">//lock 确保当一个线程位于代码临界区时，另一个线程不能进入临界区</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)<span class=\"comment\">//获得本类实例的唯一全局访问点</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)<span class=\"comment\">//先判断实例是否存在，不存在则加锁处理</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">lock</span>(syncRoot)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>) <span class=\"comment\">//双重锁定，保证线程安全（Double-Check Locking）</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    instace = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">sealed</span> <span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> <span class=\"comment\">//饿汉式单例类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Singleton instance = <span class=\"keyword\">new</span> Singleton(); <span class=\"comment\">//静态初始化方式，类一加载就实例化对象，需要提前占用系统资源。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">GetInstance</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"22-桥接模式（Bridge）\"><a href=\"#22-桥接模式（Bridge）\" class=\"headerlink\" title=\"22. 桥接模式（Bridge）\"></a>22. 桥接模式（Bridge）</h1><p>面向对象的原则：优先使用对象的 <strong>合成/聚合</strong> ，而不是类继承</p>\n<ul>\n<li>聚合：表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一部分</li>\n<li>合成：表示一种强的‘拥有’关系，体现了严格的部分和整体的关系，部分和整体的生命周期一样<br>优先使用对象的合成\\聚合将有助于保持每个类的封装，并被集中在单个任务上。这样的类和类继承层次会保持较小规模。<blockquote>\n<p><strong>概念：</strong> 将抽象部分与它的实现分离，使它们可以独立的变化。实现指的是抽象类和它的派生类用来实现自己的对象。</p>\n</blockquote>\n</li>\n</ul>\n<p>实现系统可能有多角度分类，每一种分类都有可能发生变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。</p>\n<h1 id=\"23-命令模式（Command）\"><a href=\"#23-命令模式（Command）\" class=\"headerlink\" title=\"23.命令模式（Command）\"></a>23.命令模式（Command）</h1><p>降低 <strong>行为请求者</strong> 与 <strong>行为实现者</strong> 的紧耦合。</p>\n<blockquote>\n<p><strong>概念：</strong> 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作</p>\n</blockquote>\n<p><strong>命令模式的作用</strong></p>\n<ul>\n<li>能容易地设计一个命令队列</li>\n<li>在需要的情况下，可以较容易的将命令记入日志</li>\n<li>允许接收请求的一方决定是否需要否决请求</li>\n<li>可以容易地实现对请求的撤销或者重做</li>\n<li>加进新的具体命令类不影响其他的类，增加新的具体命令类较容易</li>\n<li>把请求一个操作的对象与知道如何执行该操作的对象分隔开</li>\n</ul>\n<h1 id=\"24-职责链模式（Chain-of-Responsibility）\"><a href=\"#24-职责链模式（Chain-of-Responsibility）\" class=\"headerlink\" title=\"24.职责链模式（Chain of Responsibility）\"></a>24.职责链模式（Chain of Responsibility）</h1><blockquote>\n<p><strong>概念：</strong> 使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个责任对象处理它为止。</p>\n</blockquote>\n<p><strong>好处：</strong> 接收者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构。<br>结果是职责链可简化对象的相互连接，它们仅仅需要保持一个指向其后继者的引用，而不需要保持所有候选接收者的引用。<br><strong>需要事先设置后继者。</strong></p>\n<p>可以在客户端设置责任链的上游，这样可以很好的解决原来大量的分支判断造成难维护、灵活性差的问题</p>\n<h1 id=\"25-中介者模式（调停者模式，Mediator）\"><a href=\"#25-中介者模式（调停者模式，Mediator）\" class=\"headerlink\" title=\"25.中介者模式（调停者模式，Mediator）\"></a>25.中介者模式（调停者模式，Mediator）</h1><p>通过中介者，可以将系统的 <strong>网状结构</strong> 变成一个以中介者为中心的 <strong>星状结构。</strong></p>\n<blockquote>\n<p><strong>概念：</strong> 用一个中介对象来封装一系列的对象的交互。中介者使各对象不需要显式的相互作用，从而使其耦合松散，而且可以独立的改变它们之间的交互。</p>\n</blockquote>\n<p><strong>中介者模式的优点：</strong></p>\n<ul>\n<li>Mediator的出现减少了各个Colleague的耦合，使得可以独立的改变和复用各个Colleague类和Mediator类</li>\n<li>将对象如何协作进行抽象，把Mediator作为一个独立的概念并将其封装在一个对象中，关注的对象变为它们之间的交互中，站在更宏观的角度看待系统。</li>\n</ul>\n<p><strong>中介者模式缺点：</strong></p>\n<ul>\n<li>交互复杂性 –》 中介者复杂性<br>中介者模式一般应用于一组对象以定义良好但是复杂的方式进行通信的场合，以及想定制一个分布在多个类中的行为，而又不想生成太多子类的场合。</li>\n</ul>\n<h1 id=\"26-享元模式（Flyweight）\"><a href=\"#26-享元模式（Flyweight）\" class=\"headerlink\" title=\"26.享元模式（Flyweight）\"></a>26.享元模式（Flyweight）</h1><p>运用共享技术有效的支持大量细粒度（Flyweight轻量级）的对象。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Flyweight</span> <span class=\"comment\">//享元类抽象接口</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Operation</span> (<span class=\"params\"><span class=\"keyword\">int</span> extrinsicstate</span>)</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteFlyweight</span> : <span class=\"title\">Flyweight</span> <span class=\"comment\">//实现flyweight接口，增加存储空间</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Operation</span> (<span class=\"params\"><span class=\"keyword\">int</span> extrinsicstate</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"具体Flyweight：\"</span> +extrinsicstate);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">UnsharedConcreteFlyweight</span> : <span class=\"title\">Flyweight</span> <span class=\"comment\">//不需要共享的flyweight子类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Operation</span> (<span class=\"params\"><span class=\"keyword\">int</span> extrinsicstate</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"不共享的具体Flyweight：\"</span> +extrinsicstate);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Class FlyweightFactory <span class=\"comment\">//享元工厂，用来创建并管理flyweight对象</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Hashtable flyweights = <span class=\"keyword\">new</span> Hashtable();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlyweightFactory</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        flyweights.Add(<span class=\"string\">\"X\"</span>,<span class=\"keyword\">new</span> ConcreteFlyweight());</div><div class=\"line\">        flyweights.Add(<span class=\"string\">\"Y\"</span>,<span class=\"keyword\">new</span> ConcreteFlyweight());</div><div class=\"line\">        flyweights.Add(<span class=\"string\">\"Z\"</span>,<span class=\"keyword\">new</span> ConcreteFlyweight());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Flyweight <span class=\"title\">GetFlyweight</span>(<span class=\"params\"><span class=\"keyword\">string</span> key</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ((Flyweight)flyweights[key]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>享元模式可以避免大量非常 <strong>相似类</strong> 的开销。该模式运用共享技术有效地支持大量细粒度的对象。</p>\n<p><strong>应用场景：</strong></p>\n<ol>\n<li>如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销；</li>\n<li>对象的大多数状态可以外部状态，如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组的对象，此时就可以考虑使用享元模式。<br>比如string对象使用了享元模式。</li>\n</ol>\n<h1 id=\"27-解释器模式-interpreter\"><a href=\"#27-解释器模式-interpreter\" class=\"headerlink\" title=\"27.解释器模式(interpreter)\"></a>27.解释器模式(interpreter)</h1><blockquote>\n<p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p>\n</blockquote>\n<p><strong>需要解决的问题：</strong> 如果一个特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p>\n<p>当有一个语言需要解释执行的时候，并且你可将该语言中的句子表示为一个抽象的语法树，此时就可以使用解释器模式。</p>\n<p>典型的应用有：正则表达式、浏览器解析HTML文件<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">AbstractExpression</span><span class=\"comment\">//抽象表达式，这个接口为抽象语法树中的所有节点所共享</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">Interpret</span>(<span class=\"params\">Context context</span>)</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">TerminalExpression</span>: <span class=\"title\">AbstractExpression</span><span class=\"comment\">//终结符表达式，实现与文法中的终结符相关联的解释操作</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Interpret</span>(<span class=\"params\">Context context</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"终端解释器\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">NonterminalExpression</span>: <span class=\"title\">AbstractExpression</span><span class=\"comment\">//非终结表达式，为文法中的非终结符实现解释操作，文法中的每一条规则R1、R2.。。。Rn都需要一个具体的非终结表达式类</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Interpret</span>(<span class=\"params\">Context context</span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"非终端解释器\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Context</span><span class=\"comment\">//Context,包含解释器之外的一些全局信息</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> input;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Input</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span>&#123;<span class=\"keyword\">return</span> input;&#125;</div><div class=\"line\">        <span class=\"keyword\">set</span>&#123;input = <span class=\"keyword\">value</span>;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> output;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Output</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span>&#123;<span class=\"keyword\">return</span> output;&#125;</div><div class=\"line\">        <span class=\"keyword\">set</span>&#123;output = <span class=\"keyword\">value</span>;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"28-访问者模式-Visitor\"><a href=\"#28-访问者模式-Visitor\" class=\"headerlink\" title=\"28.访问者模式(Visitor)\"></a>28.访问者模式(Visitor)</h1><blockquote>\n<p>访问者模式讲的是表示一个作用于某对象结构中各个元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。<br>笑话一则：男人与女人最大的区别就是，比上不足，比下有余。</p>\n</blockquote>\n<p>充分使用了 <strong>双分派</strong> 的技术，实现处理和数据结构分离。</p>\n<ul>\n<li>visitor指的是两者都根据某种共有的状态进行的不同的反应，而这个visitor正好是提供了表示这种反应的统一接口，封装了不同的反应。</li>\n<li>ObjectStructure是封装的两种或多种对象，这也是对象的稳定的结构。</li>\n</ul>\n<p>访问者模式适用于数据结构相对稳定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由地演化。<br>访问者模式的目的是要把 <strong>处理从数据结构</strong> 中分离出来。<br>访问者模式的优点是增加新的操作很容易，因为增加新的操作就意味着增加一个新的访问者。访问者模式讲有关行为集中到一个访问者对象中。<br>访问者模式的缺点是增加新的数据结构更困难了，也相对比较复杂。<br>大多数情况并不需要访问者模式，很难找到数据结构不变化的情况。</p>\n<h1 id=\"29-各种模式的总结\"><a href=\"#29-各种模式的总结\" class=\"headerlink\" title=\"29.各种模式的总结\"></a>29.各种模式的总结</h1><p>将24个设计模式可以大体分为三个类别：</p>\n<ul>\n<li>创建型模式（6个）</li>\n<li>简单工厂</li>\n<li>抽象工厂</li>\n<li>建造者模式</li>\n<li>工厂方法模式</li>\n<li>原型模式</li>\n<li>单例模式</li>\n</ul>\n<p>创建型模式抽象了实例化的过程。它们帮助一个系统独立于如何创建、组合和表示它的那些对象。<br>创建者模式都会将关于该系统使用哪些具体的类的信息封装起来，允许客户用结构和功能差别很大的‘产品’对象配置一个系统。</p>\n<ul>\n<li>结构型模式（7个）</li>\n<li>适配器模式</li>\n<li>桥接模式</li>\n<li>组合模式</li>\n<li>装饰模式</li>\n<li>外观模式</li>\n<li>享元模式</li>\n<li>代理模式</li>\n</ul>\n<p>找出变化，并将变化封装。</p>\n<ul>\n<li>行为型模式（11个）</li>\n<li>观察者模式</li>\n<li>模板方法模式</li>\n<li>命令模式</li>\n<li>状态模式</li>\n<li>职责链模式</li>\n<li>解释器模式</li>\n<li>中介模式</li>\n<li>访问者模式</li>\n<li>策略模式</li>\n<li>备忘录模式</li>\n<li>迭代器模式</li>\n</ul>\n<p>面向对象设计模式体现的就是 <strong>抽象</strong> 的思想，<em>类是对象的抽象，抽象类是类的抽象，接口是对行为的抽象。</em></p>"},{"title":"东蒙研途之一周年小记","copyright":true,"date":"2017-09-03T13:52:52.000Z","_content":"来东蒙这一年，很充实，经历了很多，很开心；随着课程的结束，在课堂学习的日子、学生生涯或许就已经结束了。在这一年经历了很多，也很感激遇到的这一切，遇到的这些优秀的小伙伴；经历的这些或愉快或激动或悲伤的事情，这些都是生命中不可或缺的调料，很有滋味。明天开始去公司实习了，总是觉得需要去做个回顾，去做个总结；总是觉得有些话，必须要写下来，才能更好的前进。\n<!--more-->\n\n或许是因为工作后考研读研的缘故，对于这个难得的上学机会，特别珍惜，尽量不缺席一节课，也谢谢自己难得的端正的态度，但学习确实需要更好的方法，庆幸的是这一年自己的学习习惯有了比较好的改善。这一年也是我成长很快的一年，参加了研究生会，新生篮球赛，数学建模，创新创业大赛，元旦晚会微信墙的建设，马拉松志愿者，和迎新志愿者等等。\n\n# 东蒙记忆\n先来一波记忆最深刻的图；\n每天经过好几回的研究院大门，看着草长了又割。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%9C%E8%92%99%E5%A4%A7%E9%97%A8.jpg)\n\n某天健身路过十字路口，拍的研究院侧影。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E7%A0%94%E7%A9%B6%E9%99%A2%E4%BE%A7%E5%BD%B1.jpg)\n\n实验室的工位，一年的时间里，这个地方待过的时间最长吧。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E7%9A%84%E6%A1%8C%E5%AD%90.jpg)\n\n这盆绿萝养了一年，买了营养液喂它，养的还不错吧。来自于上届学长，而现在作为学长，也把它留给学弟了。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%BB%E4%BA%86%E4%B8%80%E5%B9%B4%E7%9A%84%E7%BB%BF%E8%90%9D.jpg)\n\n在教室搭的简易的午睡的床，中午基本上都是在教室睡的午觉，有一两次通宵赶作业也是在这边，睡的真还蛮舒服的！\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%8D%88%E7%9D%A1%E7%9A%84%E5%BA%8A.jpg)\n\n\n# 坚持的事情\n这一年，坚持去健身，这一年，体重从62kg增长到67kg，但体脂略微增加，但这个结果我还是很满意的。健身是一个星期1/3/5的例行活动，终于把健身当做了生活的一部分，这个爱好我想我会一直坚持下去。Build your body，Strong your mind，Rich your soul！\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%81%A5%E8%BA%AB%E4%B8%80%E5%91%A8%E5%B9%B4.jpg)\n\n# 那些小伙伴\n处的时间最多的，必然是爱搞事的室友Bruce了，在这一年，得感谢咘咘保持了宿舍的整洁，还有最重要的是忍受我早上或者晚上洗澡时的达到噪音级别的歌声。能忍受一年的Bruce，心理承受能力估计达到了指数级别的增长，这一点，是不是要感谢我。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E5%92%8Cbruce.jpg)\n\n今年6月份去了一趟迪士尼，很庆幸很感谢小婧婧帮我们弄到了优惠票；体验了刺激到爆棚的极速光轮，看到了精彩的烟花表演，还有花车游行；激情似火啊~ 那天的太阳确实够火，颈部晒伤，掉了一个月的皮，这个战利品不错。\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E8%BF%AA%E5%A3%AB%E5%B0%BC.jpg)\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E8%BF%AA%E5%A3%AB%E5%B0%BC%E5%90%88%E7%85%A7.jpg)\n\n去了还想再去的同里古镇，听国服吹牛逼的感觉不错。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%90%8C%E9%87%8C%E5%9B%9B%E4%BA%BA%E8%A1%8C.jpg)\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E6%88%90%E9%95%BF%E5%85%88%E9%94%8B.jpg)\n\n\n# 班级合影\n这一年，匆匆，虽然毕业遥遥无期，但转眼就各奔东西。大家都加油！\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E7%8F%AD%E7%BA%A7%E5%90%88%E7%85%A7.png)\n\n英语桥同学的最后聚餐，怀念去年的七八月。怀念文雪开的小灶，很有营养。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E8%8B%B1%E8%AF%AD%E6%A1%A5%E5%90%8C%E5%AD%A6%E8%81%9A%E4%BC%9A.jpg)\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E8%8B%B1%E8%AF%AD%E6%A1%A5%E7%BB%93%E6%9D%9F%E5%90%88%E5%BD%B1.jpg)\n\n# 最后\n最后不知道要写什么，也没图了，就这样吧。 ----南京的雨夜（2017/9/3）\n","source":"_posts/东蒙研途之一周年小记.md","raw":"---\ntitle: 东蒙研途之一周年小记\ncopyright: true\ndate: 2017-09-03 21:52:52\ncategories: 个人随感\ntags:\n- 东蒙\n- 总结\n---\n来东蒙这一年，很充实，经历了很多，很开心；随着课程的结束，在课堂学习的日子、学生生涯或许就已经结束了。在这一年经历了很多，也很感激遇到的这一切，遇到的这些优秀的小伙伴；经历的这些或愉快或激动或悲伤的事情，这些都是生命中不可或缺的调料，很有滋味。明天开始去公司实习了，总是觉得需要去做个回顾，去做个总结；总是觉得有些话，必须要写下来，才能更好的前进。\n<!--more-->\n\n或许是因为工作后考研读研的缘故，对于这个难得的上学机会，特别珍惜，尽量不缺席一节课，也谢谢自己难得的端正的态度，但学习确实需要更好的方法，庆幸的是这一年自己的学习习惯有了比较好的改善。这一年也是我成长很快的一年，参加了研究生会，新生篮球赛，数学建模，创新创业大赛，元旦晚会微信墙的建设，马拉松志愿者，和迎新志愿者等等。\n\n# 东蒙记忆\n先来一波记忆最深刻的图；\n每天经过好几回的研究院大门，看着草长了又割。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%9C%E8%92%99%E5%A4%A7%E9%97%A8.jpg)\n\n某天健身路过十字路口，拍的研究院侧影。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E7%A0%94%E7%A9%B6%E9%99%A2%E4%BE%A7%E5%BD%B1.jpg)\n\n实验室的工位，一年的时间里，这个地方待过的时间最长吧。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E7%9A%84%E6%A1%8C%E5%AD%90.jpg)\n\n这盆绿萝养了一年，买了营养液喂它，养的还不错吧。来自于上届学长，而现在作为学长，也把它留给学弟了。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%BB%E4%BA%86%E4%B8%80%E5%B9%B4%E7%9A%84%E7%BB%BF%E8%90%9D.jpg)\n\n在教室搭的简易的午睡的床，中午基本上都是在教室睡的午觉，有一两次通宵赶作业也是在这边，睡的真还蛮舒服的！\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%8D%88%E7%9D%A1%E7%9A%84%E5%BA%8A.jpg)\n\n\n# 坚持的事情\n这一年，坚持去健身，这一年，体重从62kg增长到67kg，但体脂略微增加，但这个结果我还是很满意的。健身是一个星期1/3/5的例行活动，终于把健身当做了生活的一部分，这个爱好我想我会一直坚持下去。Build your body，Strong your mind，Rich your soul！\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%81%A5%E8%BA%AB%E4%B8%80%E5%91%A8%E5%B9%B4.jpg)\n\n# 那些小伙伴\n处的时间最多的，必然是爱搞事的室友Bruce了，在这一年，得感谢咘咘保持了宿舍的整洁，还有最重要的是忍受我早上或者晚上洗澡时的达到噪音级别的歌声。能忍受一年的Bruce，心理承受能力估计达到了指数级别的增长，这一点，是不是要感谢我。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E5%92%8Cbruce.jpg)\n\n今年6月份去了一趟迪士尼，很庆幸很感谢小婧婧帮我们弄到了优惠票；体验了刺激到爆棚的极速光轮，看到了精彩的烟花表演，还有花车游行；激情似火啊~ 那天的太阳确实够火，颈部晒伤，掉了一个月的皮，这个战利品不错。\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E8%BF%AA%E5%A3%AB%E5%B0%BC.jpg)\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E8%BF%AA%E5%A3%AB%E5%B0%BC%E5%90%88%E7%85%A7.jpg)\n\n去了还想再去的同里古镇，听国服吹牛逼的感觉不错。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%90%8C%E9%87%8C%E5%9B%9B%E4%BA%BA%E8%A1%8C.jpg)\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E6%88%90%E9%95%BF%E5%85%88%E9%94%8B.jpg)\n\n\n# 班级合影\n这一年，匆匆，虽然毕业遥遥无期，但转眼就各奔东西。大家都加油！\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E7%8F%AD%E7%BA%A7%E5%90%88%E7%85%A7.png)\n\n英语桥同学的最后聚餐，怀念去年的七八月。怀念文雪开的小灶，很有营养。\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E8%8B%B1%E8%AF%AD%E6%A1%A5%E5%90%8C%E5%AD%A6%E8%81%9A%E4%BC%9A.jpg)\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E8%8B%B1%E8%AF%AD%E6%A1%A5%E7%BB%93%E6%9D%9F%E5%90%88%E5%BD%B1.jpg)\n\n# 最后\n最后不知道要写什么，也没图了，就这样吧。 ----南京的雨夜（2017/9/3）\n","slug":"东蒙研途之一周年小记","published":1,"updated":"2017-09-03T17:56:36.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c8j001m4ov17muse85b","content":"<p>来东蒙这一年，很充实，经历了很多，很开心；随着课程的结束，在课堂学习的日子、学生生涯或许就已经结束了。在这一年经历了很多，也很感激遇到的这一切，遇到的这些优秀的小伙伴；经历的这些或愉快或激动或悲伤的事情，这些都是生命中不可或缺的调料，很有滋味。明天开始去公司实习了，总是觉得需要去做个回顾，去做个总结；总是觉得有些话，必须要写下来，才能更好的前进。<br><a id=\"more\"></a></p>\n<p>或许是因为工作后考研读研的缘故，对于这个难得的上学机会，特别珍惜，尽量不缺席一节课，也谢谢自己难得的端正的态度，但学习确实需要更好的方法，庆幸的是这一年自己的学习习惯有了比较好的改善。这一年也是我成长很快的一年，参加了研究生会，新生篮球赛，数学建模，创新创业大赛，元旦晚会微信墙的建设，马拉松志愿者，和迎新志愿者等等。</p>\n<h1 id=\"东蒙记忆\"><a href=\"#东蒙记忆\" class=\"headerlink\" title=\"东蒙记忆\"></a>东蒙记忆</h1><p>先来一波记忆最深刻的图；<br>每天经过好几回的研究院大门，看着草长了又割。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%9C%E8%92%99%E5%A4%A7%E9%97%A8.jpg\" alt=\"\"></p>\n<p>某天健身路过十字路口，拍的研究院侧影。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E7%A0%94%E7%A9%B6%E9%99%A2%E4%BE%A7%E5%BD%B1.jpg\" alt=\"\"></p>\n<p>实验室的工位，一年的时间里，这个地方待过的时间最长吧。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E7%9A%84%E6%A1%8C%E5%AD%90.jpg\" alt=\"\"></p>\n<p>这盆绿萝养了一年，买了营养液喂它，养的还不错吧。来自于上届学长，而现在作为学长，也把它留给学弟了。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%BB%E4%BA%86%E4%B8%80%E5%B9%B4%E7%9A%84%E7%BB%BF%E8%90%9D.jpg\" alt=\"\"></p>\n<p>在教室搭的简易的午睡的床，中午基本上都是在教室睡的午觉，有一两次通宵赶作业也是在这边，睡的真还蛮舒服的！<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%8D%88%E7%9D%A1%E7%9A%84%E5%BA%8A.jpg\" alt=\"\"></p>\n<h1 id=\"坚持的事情\"><a href=\"#坚持的事情\" class=\"headerlink\" title=\"坚持的事情\"></a>坚持的事情</h1><p>这一年，坚持去健身，这一年，体重从62kg增长到67kg，但体脂略微增加，但这个结果我还是很满意的。健身是一个星期1/3/5的例行活动，终于把健身当做了生活的一部分，这个爱好我想我会一直坚持下去。Build your body，Strong your mind，Rich your soul！<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%81%A5%E8%BA%AB%E4%B8%80%E5%91%A8%E5%B9%B4.jpg\" alt=\"\"></p>\n<h1 id=\"那些小伙伴\"><a href=\"#那些小伙伴\" class=\"headerlink\" title=\"那些小伙伴\"></a>那些小伙伴</h1><p>处的时间最多的，必然是爱搞事的室友Bruce了，在这一年，得感谢咘咘保持了宿舍的整洁，还有最重要的是忍受我早上或者晚上洗澡时的达到噪音级别的歌声。能忍受一年的Bruce，心理承受能力估计达到了指数级别的增长，这一点，是不是要感谢我。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E5%92%8Cbruce.jpg\" alt=\"\"></p>\n<p>今年6月份去了一趟迪士尼，很庆幸很感谢小婧婧帮我们弄到了优惠票；体验了刺激到爆棚的极速光轮，看到了精彩的烟花表演，还有花车游行；激情似火啊~ 那天的太阳确实够火，颈部晒伤，掉了一个月的皮，这个战利品不错。</p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E8%BF%AA%E5%A3%AB%E5%B0%BC.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E8%BF%AA%E5%A3%AB%E5%B0%BC%E5%90%88%E7%85%A7.jpg\" alt=\"\"></p>\n<p>去了还想再去的同里古镇，听国服吹牛逼的感觉不错。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%90%8C%E9%87%8C%E5%9B%9B%E4%BA%BA%E8%A1%8C.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E6%88%90%E9%95%BF%E5%85%88%E9%94%8B.jpg\" alt=\"\"></p>\n<h1 id=\"班级合影\"><a href=\"#班级合影\" class=\"headerlink\" title=\"班级合影\"></a>班级合影</h1><p>这一年，匆匆，虽然毕业遥遥无期，但转眼就各奔东西。大家都加油！<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E7%8F%AD%E7%BA%A7%E5%90%88%E7%85%A7.png\" alt=\"\"></p>\n<p>英语桥同学的最后聚餐，怀念去年的七八月。怀念文雪开的小灶，很有营养。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E8%8B%B1%E8%AF%AD%E6%A1%A5%E5%90%8C%E5%AD%A6%E8%81%9A%E4%BC%9A.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E8%8B%B1%E8%AF%AD%E6%A1%A5%E7%BB%93%E6%9D%9F%E5%90%88%E5%BD%B1.jpg\" alt=\"\"></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>最后不知道要写什么，也没图了，就这样吧。 —-南京的雨夜（2017/9/3）</p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>来东蒙这一年，很充实，经历了很多，很开心；随着课程的结束，在课堂学习的日子、学生生涯或许就已经结束了。在这一年经历了很多，也很感激遇到的这一切，遇到的这些优秀的小伙伴；经历的这些或愉快或激动或悲伤的事情，这些都是生命中不可或缺的调料，很有滋味。明天开始去公司实习了，总是觉得需要去做个回顾，去做个总结；总是觉得有些话，必须要写下来，才能更好的前进。<br>","more":"</p>\n<p>或许是因为工作后考研读研的缘故，对于这个难得的上学机会，特别珍惜，尽量不缺席一节课，也谢谢自己难得的端正的态度，但学习确实需要更好的方法，庆幸的是这一年自己的学习习惯有了比较好的改善。这一年也是我成长很快的一年，参加了研究生会，新生篮球赛，数学建模，创新创业大赛，元旦晚会微信墙的建设，马拉松志愿者，和迎新志愿者等等。</p>\n<h1 id=\"东蒙记忆\"><a href=\"#东蒙记忆\" class=\"headerlink\" title=\"东蒙记忆\"></a>东蒙记忆</h1><p>先来一波记忆最深刻的图；<br>每天经过好几回的研究院大门，看着草长了又割。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%9C%E8%92%99%E5%A4%A7%E9%97%A8.jpg\" alt=\"\"></p>\n<p>某天健身路过十字路口，拍的研究院侧影。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E7%A0%94%E7%A9%B6%E9%99%A2%E4%BE%A7%E5%BD%B1.jpg\" alt=\"\"></p>\n<p>实验室的工位，一年的时间里，这个地方待过的时间最长吧。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E7%9A%84%E6%A1%8C%E5%AD%90.jpg\" alt=\"\"></p>\n<p>这盆绿萝养了一年，买了营养液喂它，养的还不错吧。来自于上届学长，而现在作为学长，也把它留给学弟了。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%BB%E4%BA%86%E4%B8%80%E5%B9%B4%E7%9A%84%E7%BB%BF%E8%90%9D.jpg\" alt=\"\"></p>\n<p>在教室搭的简易的午睡的床，中午基本上都是在教室睡的午觉，有一两次通宵赶作业也是在这边，睡的真还蛮舒服的！<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%8D%88%E7%9D%A1%E7%9A%84%E5%BA%8A.jpg\" alt=\"\"></p>\n<h1 id=\"坚持的事情\"><a href=\"#坚持的事情\" class=\"headerlink\" title=\"坚持的事情\"></a>坚持的事情</h1><p>这一年，坚持去健身，这一年，体重从62kg增长到67kg，但体脂略微增加，但这个结果我还是很满意的。健身是一个星期1/3/5的例行活动，终于把健身当做了生活的一部分，这个爱好我想我会一直坚持下去。Build your body，Strong your mind，Rich your soul！<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%81%A5%E8%BA%AB%E4%B8%80%E5%91%A8%E5%B9%B4.jpg\" alt=\"\"></p>\n<h1 id=\"那些小伙伴\"><a href=\"#那些小伙伴\" class=\"headerlink\" title=\"那些小伙伴\"></a>那些小伙伴</h1><p>处的时间最多的，必然是爱搞事的室友Bruce了，在这一年，得感谢咘咘保持了宿舍的整洁，还有最重要的是忍受我早上或者晚上洗澡时的达到噪音级别的歌声。能忍受一年的Bruce，心理承受能力估计达到了指数级别的增长，这一点，是不是要感谢我。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E5%92%8Cbruce.jpg\" alt=\"\"></p>\n<p>今年6月份去了一趟迪士尼，很庆幸很感谢小婧婧帮我们弄到了优惠票；体验了刺激到爆棚的极速光轮，看到了精彩的烟花表演，还有花车游行；激情似火啊~ 那天的太阳确实够火，颈部晒伤，掉了一个月的皮，这个战利品不错。</p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E8%BF%AA%E5%A3%AB%E5%B0%BC.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E4%B8%8A%E6%B5%B7%E8%BF%AA%E5%A3%AB%E5%B0%BC%E5%90%88%E7%85%A7.jpg\" alt=\"\"></p>\n<p>去了还想再去的同里古镇，听国服吹牛逼的感觉不错。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%90%8C%E9%87%8C%E5%9B%9B%E4%BA%BA%E8%A1%8C.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E6%88%90%E9%95%BF%E5%85%88%E9%94%8B.jpg\" alt=\"\"></p>\n<h1 id=\"班级合影\"><a href=\"#班级合影\" class=\"headerlink\" title=\"班级合影\"></a>班级合影</h1><p>这一年，匆匆，虽然毕业遥遥无期，但转眼就各奔东西。大家都加油！<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E7%8F%AD%E7%BA%A7%E5%90%88%E7%85%A7.png\" alt=\"\"></p>\n<p>英语桥同学的最后聚餐，怀念去年的七八月。怀念文雪开的小灶，很有营养。<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E8%8B%B1%E8%AF%AD%E6%A1%A5%E5%90%8C%E5%AD%A6%E8%81%9A%E4%BC%9A.jpg\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E8%8B%B1%E8%AF%AD%E6%A1%A5%E7%BB%93%E6%9D%9F%E5%90%88%E5%BD%B1.jpg\" alt=\"\"></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>最后不知道要写什么，也没图了，就这样吧。 —-南京的雨夜（2017/9/3）</p>"},{"title":"二叉树的序列化和反序列化","copyright":true,"date":"2018-11-02T07:57:01.000Z","_content":"# 明确概念\n首先明确一下什么是 **序列化，和反序列化。**\n> 1. 序列化(serialization)：是将对象的状态信息转换为可以存储或传输形式的过程；\n> 在序列化期间，对象将其状态写入临时或者永久性存储区域;比如说通过前序遍历得到的序列，存储在数组中，这就是序列化的过程。\n> 2. 反序列化(Unserialization): 是序列化的逆过程，也就是将字节序恢复为对象的过程，如通过二叉树的前中序，构造二叉树的过程就是反序列化。\n\n<!--more-->\n\n# 参考代码\n```cpp\n\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};\n\n//在序列化和反序列化中，可以同时使用一种遍历方法，比如都使用前序遍历，得到 outstream ===instream,然后通过instream，读取后采用前序遍历即可反序列化成功。\nclass Solution {\npublic:\n    //存在一颗树，将树序列化，并将序列化后的信息流输入到流stream中\n    //使用前序遍历的方式，将节点val序列化成字节序输入到outstream中\n    void Serialize(TreeNode *root, ostream& outstream) {\n        if (root == NULL) {\n            outstream <<\"#,\";\n            return;\n        }\n        outstream <<root->value<<',';\n        Serialize(root->left, outstream);\n        Serialize(root->right,outstream);\n    }\n\n    //不存在一棵树，但含有输入流stream，将流中的数据反序列化生成树，*root指向树的根节点\n    //由于我们清楚输入流stream中的字节序是前序遍历的结果，那反序列化时也必须使用前序方式，才能正确构造一颗树\n    void Deserialize(TreeNode **root, istream& instream) {\n        int num;\n        if (ReadStream(instream, &num)) {\n            //构造根节点\n            *root = new TreeNode(num);\n            (*root)->left = NULL;\n            (*root)->right = NULL;\n            //构造左右子节点\n            Deserialize(&((*root)->left),instream);\n            Deserialize(&((*root)->right),instream);\n        }\n    }\n\nprivate:\n    //每次从stream中读取一个数字或者“#”，是数字返回true，否则返回false\n    bool ReadStream(istream& instream, int* num){\n        if (instream.eof()) {\n            return false;\n        }\n        //初始化缓冲区\n        char buf[10];\n        buf[0]='\\0';\n\n        char temp;\n        instream>>temp;\n\n        //从流中读取分隔符前面的第一字符串；\n        int i=0;\n        while (!instream.eof() && temp !=\",\") {\n            buf[i++] = temp;\n            instream >> temp;\n        }\n\n        bool isNumeric = false;\n        //一个trick，当buf的第一位不是#的时候，后面的才有可能是数字\n        if (i>0 && buf[0]!='#') {\n            *num = atoi(buf);\n            isNumeric = true;\n        }\n\n        return isNumeric;\n    }\n};\n```\n\n# References\n- [牛客剑指offer专题](https://www.nowcoder.com/questionTerminal/cf7e25aa97c04cc1a68c8f040e71fb84)\n- [zhedahht](https://github.com/zhedahht/ChineseCodingInterviewAppendix/blob/master/SerializeBinaryTrees/SerializeBinaryTrees.cpp)\n","source":"_posts/二叉树的序列化和反序列化.md","raw":"---\ntitle: 二叉树的序列化和反序列化\ncopyright: true\ndate: 2018-11-02 15:57:01\ncategories: algorithm\ntags:\n    - Binary Tree\n    - Serialization\n---\n# 明确概念\n首先明确一下什么是 **序列化，和反序列化。**\n> 1. 序列化(serialization)：是将对象的状态信息转换为可以存储或传输形式的过程；\n> 在序列化期间，对象将其状态写入临时或者永久性存储区域;比如说通过前序遍历得到的序列，存储在数组中，这就是序列化的过程。\n> 2. 反序列化(Unserialization): 是序列化的逆过程，也就是将字节序恢复为对象的过程，如通过二叉树的前中序，构造二叉树的过程就是反序列化。\n\n<!--more-->\n\n# 参考代码\n```cpp\n\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};\n\n//在序列化和反序列化中，可以同时使用一种遍历方法，比如都使用前序遍历，得到 outstream ===instream,然后通过instream，读取后采用前序遍历即可反序列化成功。\nclass Solution {\npublic:\n    //存在一颗树，将树序列化，并将序列化后的信息流输入到流stream中\n    //使用前序遍历的方式，将节点val序列化成字节序输入到outstream中\n    void Serialize(TreeNode *root, ostream& outstream) {\n        if (root == NULL) {\n            outstream <<\"#,\";\n            return;\n        }\n        outstream <<root->value<<',';\n        Serialize(root->left, outstream);\n        Serialize(root->right,outstream);\n    }\n\n    //不存在一棵树，但含有输入流stream，将流中的数据反序列化生成树，*root指向树的根节点\n    //由于我们清楚输入流stream中的字节序是前序遍历的结果，那反序列化时也必须使用前序方式，才能正确构造一颗树\n    void Deserialize(TreeNode **root, istream& instream) {\n        int num;\n        if (ReadStream(instream, &num)) {\n            //构造根节点\n            *root = new TreeNode(num);\n            (*root)->left = NULL;\n            (*root)->right = NULL;\n            //构造左右子节点\n            Deserialize(&((*root)->left),instream);\n            Deserialize(&((*root)->right),instream);\n        }\n    }\n\nprivate:\n    //每次从stream中读取一个数字或者“#”，是数字返回true，否则返回false\n    bool ReadStream(istream& instream, int* num){\n        if (instream.eof()) {\n            return false;\n        }\n        //初始化缓冲区\n        char buf[10];\n        buf[0]='\\0';\n\n        char temp;\n        instream>>temp;\n\n        //从流中读取分隔符前面的第一字符串；\n        int i=0;\n        while (!instream.eof() && temp !=\",\") {\n            buf[i++] = temp;\n            instream >> temp;\n        }\n\n        bool isNumeric = false;\n        //一个trick，当buf的第一位不是#的时候，后面的才有可能是数字\n        if (i>0 && buf[0]!='#') {\n            *num = atoi(buf);\n            isNumeric = true;\n        }\n\n        return isNumeric;\n    }\n};\n```\n\n# References\n- [牛客剑指offer专题](https://www.nowcoder.com/questionTerminal/cf7e25aa97c04cc1a68c8f040e71fb84)\n- [zhedahht](https://github.com/zhedahht/ChineseCodingInterviewAppendix/blob/master/SerializeBinaryTrees/SerializeBinaryTrees.cpp)\n","slug":"二叉树的序列化和反序列化","published":1,"updated":"2018-11-02T10:55:18.302Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c8m001o4ov1zltifiq0","content":"<h1 id=\"明确概念\"><a href=\"#明确概念\" class=\"headerlink\" title=\"明确概念\"></a>明确概念</h1><p>首先明确一下什么是 <strong>序列化，和反序列化。</strong></p>\n<blockquote>\n<ol>\n<li>序列化(serialization)：是将对象的状态信息转换为可以存储或传输形式的过程；<br>在序列化期间，对象将其状态写入临时或者永久性存储区域;比如说通过前序遍历得到的序列，存储在数组中，这就是序列化的过程。</li>\n<li>反序列化(Unserialization): 是序列化的逆过程，也就是将字节序恢复为对象的过程，如通过二叉树的前中序，构造二叉树的过程就是反序列化。</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> TreeNode &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode *left;</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode *right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) :</div><div class=\"line\">            val(x), left(<span class=\"literal\">NULL</span>), right(<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在序列化和反序列化中，可以同时使用一种遍历方法，比如都使用前序遍历，得到 outstream ===instream,然后通过instream，读取后采用前序遍历即可反序列化成功。</span></div><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">//存在一颗树，将树序列化，并将序列化后的信息流输入到流stream中</span></div><div class=\"line\">    <span class=\"comment\">//使用前序遍历的方式，将节点val序列化成字节序输入到outstream中</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Serialize</span><span class=\"params\">(TreeNode *root, ostream&amp; outstream)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">            outstream &lt;&lt;<span class=\"string\">\"#,\"</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        outstream &lt;&lt;root-&gt;value&lt;&lt;<span class=\"string\">','</span>;</div><div class=\"line\">        Serialize(root-&gt;left, outstream);</div><div class=\"line\">        Serialize(root-&gt;right,outstream);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//不存在一棵树，但含有输入流stream，将流中的数据反序列化生成树，*root指向树的根节点</span></div><div class=\"line\">    <span class=\"comment\">//由于我们清楚输入流stream中的字节序是前序遍历的结果，那反序列化时也必须使用前序方式，才能正确构造一颗树</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Deserialize</span><span class=\"params\">(TreeNode **root, istream&amp; instream)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ReadStream(instream, &amp;num)) &#123;</div><div class=\"line\">            <span class=\"comment\">//构造根节点</span></div><div class=\"line\">            *root = <span class=\"keyword\">new</span> TreeNode(num);</div><div class=\"line\">            (*root)-&gt;left = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            (*root)-&gt;right = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            <span class=\"comment\">//构造左右子节点</span></div><div class=\"line\">            Deserialize(&amp;((*root)-&gt;left),instream);</div><div class=\"line\">            Deserialize(&amp;((*root)-&gt;right),instream);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">//每次从stream中读取一个数字或者“#”，是数字返回true，否则返回false</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ReadStream</span><span class=\"params\">(istream&amp; instream, <span class=\"keyword\">int</span>* num)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instream.eof()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//初始化缓冲区</span></div><div class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">10</span>];</div><div class=\"line\">        buf[<span class=\"number\">0</span>]=<span class=\"string\">'\\0'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">char</span> temp;</div><div class=\"line\">        instream&gt;&gt;temp;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//从流中读取分隔符前面的第一字符串；</span></div><div class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (!instream.eof() &amp;&amp; temp !=<span class=\"string\">\",\"</span>) &#123;</div><div class=\"line\">            buf[i++] = temp;</div><div class=\"line\">            instream &gt;&gt; temp;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">bool</span> isNumeric = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"comment\">//一个trick，当buf的第一位不是#的时候，后面的才有可能是数字</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (i&gt;<span class=\"number\">0</span> &amp;&amp; buf[<span class=\"number\">0</span>]!=<span class=\"string\">'#'</span>) &#123;</div><div class=\"line\">            *num = atoi(buf);</div><div class=\"line\">            isNumeric = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> isNumeric;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://www.nowcoder.com/questionTerminal/cf7e25aa97c04cc1a68c8f040e71fb84\" target=\"_blank\" rel=\"external\">牛客剑指offer专题</a></li>\n<li><a href=\"https://github.com/zhedahht/ChineseCodingInterviewAppendix/blob/master/SerializeBinaryTrees/SerializeBinaryTrees.cpp\" target=\"_blank\" rel=\"external\">zhedahht</a></li>\n</ul>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<h1 id=\"明确概念\"><a href=\"#明确概念\" class=\"headerlink\" title=\"明确概念\"></a>明确概念</h1><p>首先明确一下什么是 <strong>序列化，和反序列化。</strong></p>\n<blockquote>\n<ol>\n<li>序列化(serialization)：是将对象的状态信息转换为可以存储或传输形式的过程；<br>在序列化期间，对象将其状态写入临时或者永久性存储区域;比如说通过前序遍历得到的序列，存储在数组中，这就是序列化的过程。</li>\n<li>反序列化(Unserialization): 是序列化的逆过程，也就是将字节序恢复为对象的过程，如通过二叉树的前中序，构造二叉树的过程就是反序列化。</li>\n</ol>\n</blockquote>","more":"<h1 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> TreeNode &#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode *left;</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode *right;</div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> x) :</div><div class=\"line\">            val(x), left(<span class=\"literal\">NULL</span>), right(<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在序列化和反序列化中，可以同时使用一种遍历方法，比如都使用前序遍历，得到 outstream ===instream,然后通过instream，读取后采用前序遍历即可反序列化成功。</span></div><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"comment\">//存在一颗树，将树序列化，并将序列化后的信息流输入到流stream中</span></div><div class=\"line\">    <span class=\"comment\">//使用前序遍历的方式，将节点val序列化成字节序输入到outstream中</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Serialize</span><span class=\"params\">(TreeNode *root, ostream&amp; outstream)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">            outstream &lt;&lt;<span class=\"string\">\"#,\"</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        outstream &lt;&lt;root-&gt;value&lt;&lt;<span class=\"string\">','</span>;</div><div class=\"line\">        Serialize(root-&gt;left, outstream);</div><div class=\"line\">        Serialize(root-&gt;right,outstream);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//不存在一棵树，但含有输入流stream，将流中的数据反序列化生成树，*root指向树的根节点</span></div><div class=\"line\">    <span class=\"comment\">//由于我们清楚输入流stream中的字节序是前序遍历的结果，那反序列化时也必须使用前序方式，才能正确构造一颗树</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Deserialize</span><span class=\"params\">(TreeNode **root, istream&amp; instream)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> num;</div><div class=\"line\">        <span class=\"keyword\">if</span> (ReadStream(instream, &amp;num)) &#123;</div><div class=\"line\">            <span class=\"comment\">//构造根节点</span></div><div class=\"line\">            *root = <span class=\"keyword\">new</span> TreeNode(num);</div><div class=\"line\">            (*root)-&gt;left = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            (*root)-&gt;right = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            <span class=\"comment\">//构造左右子节点</span></div><div class=\"line\">            Deserialize(&amp;((*root)-&gt;left),instream);</div><div class=\"line\">            Deserialize(&amp;((*root)-&gt;right),instream);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">//每次从stream中读取一个数字或者“#”，是数字返回true，否则返回false</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">ReadStream</span><span class=\"params\">(istream&amp; instream, <span class=\"keyword\">int</span>* num)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (instream.eof()) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//初始化缓冲区</span></div><div class=\"line\">        <span class=\"keyword\">char</span> buf[<span class=\"number\">10</span>];</div><div class=\"line\">        buf[<span class=\"number\">0</span>]=<span class=\"string\">'\\0'</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">char</span> temp;</div><div class=\"line\">        instream&gt;&gt;temp;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//从流中读取分隔符前面的第一字符串；</span></div><div class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (!instream.eof() &amp;&amp; temp !=<span class=\"string\">\",\"</span>) &#123;</div><div class=\"line\">            buf[i++] = temp;</div><div class=\"line\">            instream &gt;&gt; temp;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">bool</span> isNumeric = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"comment\">//一个trick，当buf的第一位不是#的时候，后面的才有可能是数字</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (i&gt;<span class=\"number\">0</span> &amp;&amp; buf[<span class=\"number\">0</span>]!=<span class=\"string\">'#'</span>) &#123;</div><div class=\"line\">            *num = atoi(buf);</div><div class=\"line\">            isNumeric = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> isNumeric;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://www.nowcoder.com/questionTerminal/cf7e25aa97c04cc1a68c8f040e71fb84\" target=\"_blank\" rel=\"external\">牛客剑指offer专题</a></li>\n<li><a href=\"https://github.com/zhedahht/ChineseCodingInterviewAppendix/blob/master/SerializeBinaryTrees/SerializeBinaryTrees.cpp\" target=\"_blank\" rel=\"external\">zhedahht</a></li>\n</ul>"},{"title":"二叉树遍历方法总结(C++实现)","copyright":true,"date":"2018-10-20T07:06:17.000Z","_content":"\n二叉树的遍历方法是解决很多有关树的问题的基础，对于标准的递归算法，基本上大家都能bug free写出来；\n但对于非递归的方法，貌似总会有模糊的地方，共性都知道使用栈，但取栈顶，出栈位置是否会经常模糊？\n前中后续递归方法很好理解，三种方法的表现形式完全统一，而非递归方法是用是辅助栈，但实现方法略有变化，\n而造成了理解的模糊，本文给出了一种统一的表现形式，更助于理解及变通。\n\n<!-- more -->\n\n# 结点的定义\n```cpp\nstruct TreeNode {\n\tint val;\n\tstruct TreeNode *left;\n\tstruct TreeNode *right;\n\tTreeNode(int x) :\n\t\t\tval(x), left(NULL), right(NULL) {\n\t}\n};\n```\n\n# 前序遍历\n遍历顺序为`根 -> 左 ->右`\n\n```cpp\n//先序递归\nvoid PreOrder(TreeNode *poot, vector<int> &path){\n\t if (root) {\n\t \tpath.push_back(root->val);\n\t\tPreOrder(root->left,path);\n\t\tPreOrder(root->right,path);\n\t }\n}\n//常规的非递归前序遍历\nvoid preorderTraversalOld(TreeNode* root, vector<int> &path) {\n\tif (root == NULL) {\n\t\treturn;\n\t}\n\tstack<TreeNode*> save;\n\tTreeNode* p = root;\n\twhile (!save.empty() || p!=NULL) {\n\t\twhile (p!=NULL) {\n\t\t\tpath.push_back(p->val);\n\t\t\tsave.push(p);\n\t\t\tp=p->left;\n\t\t}\n\t\tif (!save.empty()) {\n\t\t\tp = save.top();\n\t\t\tsave.pop();\n\t\t\tp=p->right;\n\t\t}\n\t}\n}\n```\n\n# 中序遍历\n遍历顺序为`左 -> 根 ->右`\n\n```cpp\n//递归中序遍历\nvoid InOrder(TreeNode* root, vector<int> &path){\n\tif (root!=NULL) {\n\t\tInOrder(root->left,path);\n\t\tpath.push_back(root->val);\n\t\tInOrder(root->right,path);\n\t}\n}\n\n//常规的非递归中序遍历\nvoid InOrderTraversalOld(TreeNode* root, vector<int> &path){\n\tif (root == NULL) {\n\t\treturn;\n\t}\n\tstack<TreeNode*> save;\n\tTreeNode* p=root;\n\twhile (p!=NULL || !save.empty()) {\n\t\twhile (p!=NULL) {\n\t\t\tsave.push(p);\n\t\t\tp=p->left;\n\t\t}\n\t\tif (!save.empty()) {\n\t\t\tp=save.top();\n\t\t\tsave.pop();\n\t\t\tpath.push_back(p->val);\n\t\t\tp=p->right;\n\t\t}\n\t}\n}\n```\n\n# 后续遍历\n遍历顺序为`左 -> 右 ->根`\n\n```cpp\n//递归后续遍历\nvoid PostOrder(TreeNode* root, vector<int> &path){\n\tif (root!=NULL) {\n\t\tPostOrder(root->left,path);\n\t\tPostOrder(root->right,path);\n\t\tpath.push_back(root->val);\n\t}\n}\n\n//常规的非递归后续遍历\nvoid PostOrderTraversalOld(TreeNode *root, vector<int> &path){\n\tif (root==NULL) {\n\t\treturn;\n\t}\n\tstack<TreeNode*> save;\n\tsave.push(root);\n\tTreeNode* p = root ->left;\n\tTreeNode* preNode = NULL;\n\twhile (!save.empty()) {\n\t\twhile (p!=NULL && p!=preNode) {\n\t\t\tsave.push(p);\n\t\t\tp=p->left;\n\t\t}\n\t\tp = save.top();\n\t\tif(p->right && p->right!=preNode) {\n\t\t\tp=p->right;\n\t\t}else{\n\t\t\tpath.push_back(p->val);\n\t\t\tpreNode = p;\n\t\t\tsave.pop();\n\t\t}\n\t}\n}\n```\n\n# 三种非递归遍历方法的总结\n毋庸置疑，都使用了辅助栈；不同的是入栈、取栈顶元素和出栈的位置不同\n\n- 三种方法的第一步均是，找到最左下角的元素，过程中遍历的元素依次入栈；\n- 前序是在第一步遍历过程中的路径记录下来，存入path，中序是第一步扫描结束后，依次返回存入path；\n- 后序需要带有记忆性的扫描，新建preNode，记录已经存入path的节点位置\n\n从前面总结可以看出，除了前序和中序的代码风格类似，但后序遍历有较大的区别，而且嵌套多层循环，实际理解起来\n干看并不是特别容易；即使理解了，隔一段时间写起来并不是特别顺畅，还需要各种推敲。\n因此思考一个这样的问题：**有没一种方法，可以统一这三种遍历方法的表达方式呢？**\n网上搜寻了一些答案，发现这位兄台的解释及方法可以完全解决上述问题。\n当个搬运工：[子松的简书博客](https://www.jianshu.com/p/49c8cfd07410)\n\n# 更简单的方法统一的三种非递归遍历二叉树的方式\n这种方法做到了将**算法与顺序分离**，定义何种顺序并不影响算法；\n算法只做这么一件事：**将栈顶元素取出，使以此元素为“根”结点的局部有序入栈，但若此前已通过该结点将其局部入栈，则直接出栈输出即可。**\n\n```cpp\nvoid orderTraversalNew(TreeNode *root, vector<int> &path){\n\tif (root == NULL) {\n\t\treturn;\n\t}\n\n\tstack< pair<TreeNode *, bool> > s;\n    s.push(make_pair(root, false));\n    bool visited;\n    while(!s.empty()){\n        root = s.top().first;\n        visited = s.top().second;\n        s.pop();\n        if(root == NULL)\n            continue;\n\n        if(visited){\n            path.push_back(root->val);\n        }else{\n\t\t\t//只需调整下列语句的先后顺序即可完成前中后的遍历\n\t\t\t//前序\n            s.push(make_pair(root->right, false));\n            s.push(make_pair(root->left, false));\n            s.push(make_pair(root, true));\n\n\t\t\t/*\n\t\t\t//中序\n\t\t\ts.push(make_pair(root-right,false));\n\t\t\ts.push(make_pair(root,true));\n\t\t\ts.push(make_pair(root->left,false));\n\t\t\t//后续\n\t\t\ts.push(make_pair(root,true));\n\t\t\ts.push(make_pair(root->right, false));\n            s.push(make_pair(root->left, false));\n\t\t\t*/\n\n        \t}\n    }\n}\n```\n\n这种代码刚看到的时候，真是感觉牛逼啊！\n主要思想为：**有重合元素的局部有序一定能导致整体有序！**。\n\n# 层次遍历\n二叉树的层次遍历也是一个常常应用的遍历方法，如求树的宽度就可以用到层次遍历；\n中心思想是用一个**队列**保存左右孩子节点，然后依次出队列，存入path中；完成层次遍历。\n\n```cpp\n//层次遍历,使用一个队列保存层次节点\nvoid LevelOrder(TreeNode* root,vector<int> &path){\n\tif (root == NULL) {\n\t\treturn;\n\t}\n\tqueue<TreeNode*> save;\n\tsave.push(root);\n\twhile (!save.empty()) {\n\t\tTreeNode* p = save.front();\n\t\tpath.push_back(p->val);\n\t\t//左节点不空，入队\n\t\tif (p->left) {\n\t\t\tsave.push(p->left);\n\t\t}\n\t\t//右节点不空，入队\n\t\tif (p->right) {\n\t\t\tsave.push(p->right);\n\t\t}\n\t\t//根节点出队\n\t\tp.pop();\n\t}\n\n}\n```\n\n# References\n- [更简单的非递归遍历二叉树的方法](https://www.jianshu.com/p/49c8cfd07410)\n- [人脑理解递归](https://www.jianshu.com/p/4db970d8ddc1)\n- [c++实现二叉树的递归和非递归遍历](https://blog.csdn.net/xuzhangze/article/details/78696080)\n","source":"_posts/二叉树遍历方法总结(C++实现).md","raw":"---\ntitle: 二叉树遍历方法总结(C++实现)\ncopyright: true\ndate: 2018-10-20 15:06:17\ncategories: Algorithms\ntags:\n- Binary Tree\n- Recursion\n- 非递归方法\n---\n\n二叉树的遍历方法是解决很多有关树的问题的基础，对于标准的递归算法，基本上大家都能bug free写出来；\n但对于非递归的方法，貌似总会有模糊的地方，共性都知道使用栈，但取栈顶，出栈位置是否会经常模糊？\n前中后续递归方法很好理解，三种方法的表现形式完全统一，而非递归方法是用是辅助栈，但实现方法略有变化，\n而造成了理解的模糊，本文给出了一种统一的表现形式，更助于理解及变通。\n\n<!-- more -->\n\n# 结点的定义\n```cpp\nstruct TreeNode {\n\tint val;\n\tstruct TreeNode *left;\n\tstruct TreeNode *right;\n\tTreeNode(int x) :\n\t\t\tval(x), left(NULL), right(NULL) {\n\t}\n};\n```\n\n# 前序遍历\n遍历顺序为`根 -> 左 ->右`\n\n```cpp\n//先序递归\nvoid PreOrder(TreeNode *poot, vector<int> &path){\n\t if (root) {\n\t \tpath.push_back(root->val);\n\t\tPreOrder(root->left,path);\n\t\tPreOrder(root->right,path);\n\t }\n}\n//常规的非递归前序遍历\nvoid preorderTraversalOld(TreeNode* root, vector<int> &path) {\n\tif (root == NULL) {\n\t\treturn;\n\t}\n\tstack<TreeNode*> save;\n\tTreeNode* p = root;\n\twhile (!save.empty() || p!=NULL) {\n\t\twhile (p!=NULL) {\n\t\t\tpath.push_back(p->val);\n\t\t\tsave.push(p);\n\t\t\tp=p->left;\n\t\t}\n\t\tif (!save.empty()) {\n\t\t\tp = save.top();\n\t\t\tsave.pop();\n\t\t\tp=p->right;\n\t\t}\n\t}\n}\n```\n\n# 中序遍历\n遍历顺序为`左 -> 根 ->右`\n\n```cpp\n//递归中序遍历\nvoid InOrder(TreeNode* root, vector<int> &path){\n\tif (root!=NULL) {\n\t\tInOrder(root->left,path);\n\t\tpath.push_back(root->val);\n\t\tInOrder(root->right,path);\n\t}\n}\n\n//常规的非递归中序遍历\nvoid InOrderTraversalOld(TreeNode* root, vector<int> &path){\n\tif (root == NULL) {\n\t\treturn;\n\t}\n\tstack<TreeNode*> save;\n\tTreeNode* p=root;\n\twhile (p!=NULL || !save.empty()) {\n\t\twhile (p!=NULL) {\n\t\t\tsave.push(p);\n\t\t\tp=p->left;\n\t\t}\n\t\tif (!save.empty()) {\n\t\t\tp=save.top();\n\t\t\tsave.pop();\n\t\t\tpath.push_back(p->val);\n\t\t\tp=p->right;\n\t\t}\n\t}\n}\n```\n\n# 后续遍历\n遍历顺序为`左 -> 右 ->根`\n\n```cpp\n//递归后续遍历\nvoid PostOrder(TreeNode* root, vector<int> &path){\n\tif (root!=NULL) {\n\t\tPostOrder(root->left,path);\n\t\tPostOrder(root->right,path);\n\t\tpath.push_back(root->val);\n\t}\n}\n\n//常规的非递归后续遍历\nvoid PostOrderTraversalOld(TreeNode *root, vector<int> &path){\n\tif (root==NULL) {\n\t\treturn;\n\t}\n\tstack<TreeNode*> save;\n\tsave.push(root);\n\tTreeNode* p = root ->left;\n\tTreeNode* preNode = NULL;\n\twhile (!save.empty()) {\n\t\twhile (p!=NULL && p!=preNode) {\n\t\t\tsave.push(p);\n\t\t\tp=p->left;\n\t\t}\n\t\tp = save.top();\n\t\tif(p->right && p->right!=preNode) {\n\t\t\tp=p->right;\n\t\t}else{\n\t\t\tpath.push_back(p->val);\n\t\t\tpreNode = p;\n\t\t\tsave.pop();\n\t\t}\n\t}\n}\n```\n\n# 三种非递归遍历方法的总结\n毋庸置疑，都使用了辅助栈；不同的是入栈、取栈顶元素和出栈的位置不同\n\n- 三种方法的第一步均是，找到最左下角的元素，过程中遍历的元素依次入栈；\n- 前序是在第一步遍历过程中的路径记录下来，存入path，中序是第一步扫描结束后，依次返回存入path；\n- 后序需要带有记忆性的扫描，新建preNode，记录已经存入path的节点位置\n\n从前面总结可以看出，除了前序和中序的代码风格类似，但后序遍历有较大的区别，而且嵌套多层循环，实际理解起来\n干看并不是特别容易；即使理解了，隔一段时间写起来并不是特别顺畅，还需要各种推敲。\n因此思考一个这样的问题：**有没一种方法，可以统一这三种遍历方法的表达方式呢？**\n网上搜寻了一些答案，发现这位兄台的解释及方法可以完全解决上述问题。\n当个搬运工：[子松的简书博客](https://www.jianshu.com/p/49c8cfd07410)\n\n# 更简单的方法统一的三种非递归遍历二叉树的方式\n这种方法做到了将**算法与顺序分离**，定义何种顺序并不影响算法；\n算法只做这么一件事：**将栈顶元素取出，使以此元素为“根”结点的局部有序入栈，但若此前已通过该结点将其局部入栈，则直接出栈输出即可。**\n\n```cpp\nvoid orderTraversalNew(TreeNode *root, vector<int> &path){\n\tif (root == NULL) {\n\t\treturn;\n\t}\n\n\tstack< pair<TreeNode *, bool> > s;\n    s.push(make_pair(root, false));\n    bool visited;\n    while(!s.empty()){\n        root = s.top().first;\n        visited = s.top().second;\n        s.pop();\n        if(root == NULL)\n            continue;\n\n        if(visited){\n            path.push_back(root->val);\n        }else{\n\t\t\t//只需调整下列语句的先后顺序即可完成前中后的遍历\n\t\t\t//前序\n            s.push(make_pair(root->right, false));\n            s.push(make_pair(root->left, false));\n            s.push(make_pair(root, true));\n\n\t\t\t/*\n\t\t\t//中序\n\t\t\ts.push(make_pair(root-right,false));\n\t\t\ts.push(make_pair(root,true));\n\t\t\ts.push(make_pair(root->left,false));\n\t\t\t//后续\n\t\t\ts.push(make_pair(root,true));\n\t\t\ts.push(make_pair(root->right, false));\n            s.push(make_pair(root->left, false));\n\t\t\t*/\n\n        \t}\n    }\n}\n```\n\n这种代码刚看到的时候，真是感觉牛逼啊！\n主要思想为：**有重合元素的局部有序一定能导致整体有序！**。\n\n# 层次遍历\n二叉树的层次遍历也是一个常常应用的遍历方法，如求树的宽度就可以用到层次遍历；\n中心思想是用一个**队列**保存左右孩子节点，然后依次出队列，存入path中；完成层次遍历。\n\n```cpp\n//层次遍历,使用一个队列保存层次节点\nvoid LevelOrder(TreeNode* root,vector<int> &path){\n\tif (root == NULL) {\n\t\treturn;\n\t}\n\tqueue<TreeNode*> save;\n\tsave.push(root);\n\twhile (!save.empty()) {\n\t\tTreeNode* p = save.front();\n\t\tpath.push_back(p->val);\n\t\t//左节点不空，入队\n\t\tif (p->left) {\n\t\t\tsave.push(p->left);\n\t\t}\n\t\t//右节点不空，入队\n\t\tif (p->right) {\n\t\t\tsave.push(p->right);\n\t\t}\n\t\t//根节点出队\n\t\tp.pop();\n\t}\n\n}\n```\n\n# References\n- [更简单的非递归遍历二叉树的方法](https://www.jianshu.com/p/49c8cfd07410)\n- [人脑理解递归](https://www.jianshu.com/p/4db970d8ddc1)\n- [c++实现二叉树的递归和非递归遍历](https://blog.csdn.net/xuzhangze/article/details/78696080)\n","slug":"二叉树遍历方法总结(C++实现)","published":1,"updated":"2018-10-20T08:51:40.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c8v001s4ov15qu600uv","content":"<p>二叉树的遍历方法是解决很多有关树的问题的基础，对于标准的递归算法，基本上大家都能bug free写出来；<br>但对于非递归的方法，貌似总会有模糊的地方，共性都知道使用栈，但取栈顶，出栈位置是否会经常模糊？<br>前中后续递归方法很好理解，三种方法的表现形式完全统一，而非递归方法是用是辅助栈，但实现方法略有变化，<br>而造成了理解的模糊，本文给出了一种统一的表现形式，更助于理解及变通。</p>\n<a id=\"more\"></a>\n<h1 id=\"结点的定义\"><a href=\"#结点的定义\" class=\"headerlink\" title=\"结点的定义\"></a>结点的定义</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> TreeNode &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> val;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> TreeNode *left;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> TreeNode *right;</div><div class=\"line\">\tTreeNode(<span class=\"keyword\">int</span> x) :</div><div class=\"line\">\t\t\tval(x), left(<span class=\"literal\">NULL</span>), right(<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h1><p>遍历顺序为<code>根 -&gt; 左 -&gt;右</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//先序递归</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PreOrder</span><span class=\"params\">(TreeNode *poot, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t <span class=\"keyword\">if</span> (root) &#123;</div><div class=\"line\">\t \tpath.push_back(root-&gt;val);</div><div class=\"line\">\t\tPreOrder(root-&gt;left,path);</div><div class=\"line\">\t\tPreOrder(root-&gt;right,path);</div><div class=\"line\">\t &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//常规的非递归前序遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preorderTraversalOld</span><span class=\"params\">(TreeNode* root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">stack</span>&lt;TreeNode*&gt; save;</div><div class=\"line\">\tTreeNode* p = root;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!save.empty() || p!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t\tpath.push_back(p-&gt;val);</div><div class=\"line\">\t\t\tsave.push(p);</div><div class=\"line\">\t\t\tp=p-&gt;left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!save.empty()) &#123;</div><div class=\"line\">\t\t\tp = save.top();</div><div class=\"line\">\t\t\tsave.pop();</div><div class=\"line\">\t\t\tp=p-&gt;right;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h1><p>遍历顺序为<code>左 -&gt; 根 -&gt;右</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//递归中序遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InOrder</span><span class=\"params\">(TreeNode* root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\tInOrder(root-&gt;left,path);</div><div class=\"line\">\t\tpath.push_back(root-&gt;val);</div><div class=\"line\">\t\tInOrder(root-&gt;right,path);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//常规的非递归中序遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InOrderTraversalOld</span><span class=\"params\">(TreeNode* root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">stack</span>&lt;TreeNode*&gt; save;</div><div class=\"line\">\tTreeNode* p=root;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span> || !save.empty()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t\tsave.push(p);</div><div class=\"line\">\t\t\tp=p-&gt;left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!save.empty()) &#123;</div><div class=\"line\">\t\t\tp=save.top();</div><div class=\"line\">\t\t\tsave.pop();</div><div class=\"line\">\t\t\tpath.push_back(p-&gt;val);</div><div class=\"line\">\t\t\tp=p-&gt;right;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"后续遍历\"><a href=\"#后续遍历\" class=\"headerlink\" title=\"后续遍历\"></a>后续遍历</h1><p>遍历顺序为<code>左 -&gt; 右 -&gt;根</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//递归后续遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PostOrder</span><span class=\"params\">(TreeNode* root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\tPostOrder(root-&gt;left,path);</div><div class=\"line\">\t\tPostOrder(root-&gt;right,path);</div><div class=\"line\">\t\tpath.push_back(root-&gt;val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//常规的非递归后续遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PostOrderTraversalOld</span><span class=\"params\">(TreeNode *root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root==<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">stack</span>&lt;TreeNode*&gt; save;</div><div class=\"line\">\tsave.push(root);</div><div class=\"line\">\tTreeNode* p = root -&gt;left;</div><div class=\"line\">\tTreeNode* preNode = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!save.empty()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span> &amp;&amp; p!=preNode) &#123;</div><div class=\"line\">\t\t\tsave.push(p);</div><div class=\"line\">\t\t\tp=p-&gt;left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tp = save.top();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;right &amp;&amp; p-&gt;right!=preNode) &#123;</div><div class=\"line\">\t\t\tp=p-&gt;right;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tpath.push_back(p-&gt;val);</div><div class=\"line\">\t\t\tpreNode = p;</div><div class=\"line\">\t\t\tsave.pop();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"三种非递归遍历方法的总结\"><a href=\"#三种非递归遍历方法的总结\" class=\"headerlink\" title=\"三种非递归遍历方法的总结\"></a>三种非递归遍历方法的总结</h1><p>毋庸置疑，都使用了辅助栈；不同的是入栈、取栈顶元素和出栈的位置不同</p>\n<ul>\n<li>三种方法的第一步均是，找到最左下角的元素，过程中遍历的元素依次入栈；</li>\n<li>前序是在第一步遍历过程中的路径记录下来，存入path，中序是第一步扫描结束后，依次返回存入path；</li>\n<li>后序需要带有记忆性的扫描，新建preNode，记录已经存入path的节点位置</li>\n</ul>\n<p>从前面总结可以看出，除了前序和中序的代码风格类似，但后序遍历有较大的区别，而且嵌套多层循环，实际理解起来<br>干看并不是特别容易；即使理解了，隔一段时间写起来并不是特别顺畅，还需要各种推敲。<br>因此思考一个这样的问题：<strong>有没一种方法，可以统一这三种遍历方法的表达方式呢？</strong><br>网上搜寻了一些答案，发现这位兄台的解释及方法可以完全解决上述问题。<br>当个搬运工：<a href=\"https://www.jianshu.com/p/49c8cfd07410\" target=\"_blank\" rel=\"external\">子松的简书博客</a></p>\n<h1 id=\"更简单的方法统一的三种非递归遍历二叉树的方式\"><a href=\"#更简单的方法统一的三种非递归遍历二叉树的方式\" class=\"headerlink\" title=\"更简单的方法统一的三种非递归遍历二叉树的方式\"></a>更简单的方法统一的三种非递归遍历二叉树的方式</h1><p>这种方法做到了将<strong>算法与顺序分离</strong>，定义何种顺序并不影响算法；<br>算法只做这么一件事：<strong>将栈顶元素取出，使以此元素为“根”结点的局部有序入栈，但若此前已通过该结点将其局部入栈，则直接出栈输出即可。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">orderTraversalNew</span><span class=\"params\">(TreeNode *root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">stack</span>&lt; pair&lt;TreeNode *, <span class=\"keyword\">bool</span>&gt; &gt; s;</div><div class=\"line\">    s.push(make_pair(root, <span class=\"literal\">false</span>));</div><div class=\"line\">    <span class=\"keyword\">bool</span> visited;</div><div class=\"line\">    <span class=\"keyword\">while</span>(!s.empty())&#123;</div><div class=\"line\">        root = s.top().first;</div><div class=\"line\">        visited = s.top().second;</div><div class=\"line\">        s.pop();</div><div class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(visited)&#123;</div><div class=\"line\">            path.push_back(root-&gt;val);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//只需调整下列语句的先后顺序即可完成前中后的遍历</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//前序</span></div><div class=\"line\">            s.push(make_pair(root-&gt;right, <span class=\"literal\">false</span>));</div><div class=\"line\">            s.push(make_pair(root-&gt;left, <span class=\"literal\">false</span>));</div><div class=\"line\">            s.push(make_pair(root, <span class=\"literal\">true</span>));</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/*</span></div><div class=\"line\">\t\t\t//中序</div><div class=\"line\">\t\t\ts.push(make_pair(root-right,false));</div><div class=\"line\">\t\t\ts.push(make_pair(root,true));</div><div class=\"line\">\t\t\ts.push(make_pair(root-&gt;left,false));</div><div class=\"line\">\t\t\t//后续</div><div class=\"line\">\t\t\ts.push(make_pair(root,true));</div><div class=\"line\">\t\t\ts.push(make_pair(root-&gt;right, false));</div><div class=\"line\">            s.push(make_pair(root-&gt;left, false));</div><div class=\"line\">\t\t\t*/</div><div class=\"line\"></div><div class=\"line\">        \t&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种代码刚看到的时候，真是感觉牛逼啊！<br>主要思想为：<strong>有重合元素的局部有序一定能导致整体有序！</strong>。</p>\n<h1 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h1><p>二叉树的层次遍历也是一个常常应用的遍历方法，如求树的宽度就可以用到层次遍历；<br>中心思想是用一个<strong>队列</strong>保存左右孩子节点，然后依次出队列，存入path中；完成层次遍历。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//层次遍历,使用一个队列保存层次节点</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LevelOrder</span><span class=\"params\">(TreeNode* root,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;TreeNode*&gt; save;</div><div class=\"line\">\tsave.push(root);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!save.empty()) &#123;</div><div class=\"line\">\t\tTreeNode* p = save.front();</div><div class=\"line\">\t\tpath.push_back(p-&gt;val);</div><div class=\"line\">\t\t<span class=\"comment\">//左节点不空，入队</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p-&gt;left) &#123;</div><div class=\"line\">\t\t\tsave.push(p-&gt;left);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//右节点不空，入队</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p-&gt;right) &#123;</div><div class=\"line\">\t\t\tsave.push(p-&gt;right);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//根节点出队</span></div><div class=\"line\">\t\tp.pop();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/49c8cfd07410\" target=\"_blank\" rel=\"external\">更简单的非递归遍历二叉树的方法</a></li>\n<li><a href=\"https://www.jianshu.com/p/4db970d8ddc1\" target=\"_blank\" rel=\"external\">人脑理解递归</a></li>\n<li><a href=\"https://blog.csdn.net/xuzhangze/article/details/78696080\" target=\"_blank\" rel=\"external\">c++实现二叉树的递归和非递归遍历</a></li>\n</ul>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>二叉树的遍历方法是解决很多有关树的问题的基础，对于标准的递归算法，基本上大家都能bug free写出来；<br>但对于非递归的方法，貌似总会有模糊的地方，共性都知道使用栈，但取栈顶，出栈位置是否会经常模糊？<br>前中后续递归方法很好理解，三种方法的表现形式完全统一，而非递归方法是用是辅助栈，但实现方法略有变化，<br>而造成了理解的模糊，本文给出了一种统一的表现形式，更助于理解及变通。</p>","more":"<h1 id=\"结点的定义\"><a href=\"#结点的定义\" class=\"headerlink\" title=\"结点的定义\"></a>结点的定义</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> TreeNode &#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> val;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> TreeNode *left;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> TreeNode *right;</div><div class=\"line\">\tTreeNode(<span class=\"keyword\">int</span> x) :</div><div class=\"line\">\t\t\tval(x), left(<span class=\"literal\">NULL</span>), right(<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"前序遍历\"><a href=\"#前序遍历\" class=\"headerlink\" title=\"前序遍历\"></a>前序遍历</h1><p>遍历顺序为<code>根 -&gt; 左 -&gt;右</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//先序递归</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PreOrder</span><span class=\"params\">(TreeNode *poot, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t <span class=\"keyword\">if</span> (root) &#123;</div><div class=\"line\">\t \tpath.push_back(root-&gt;val);</div><div class=\"line\">\t\tPreOrder(root-&gt;left,path);</div><div class=\"line\">\t\tPreOrder(root-&gt;right,path);</div><div class=\"line\">\t &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//常规的非递归前序遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">preorderTraversalOld</span><span class=\"params\">(TreeNode* root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">stack</span>&lt;TreeNode*&gt; save;</div><div class=\"line\">\tTreeNode* p = root;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!save.empty() || p!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t\tpath.push_back(p-&gt;val);</div><div class=\"line\">\t\t\tsave.push(p);</div><div class=\"line\">\t\t\tp=p-&gt;left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!save.empty()) &#123;</div><div class=\"line\">\t\t\tp = save.top();</div><div class=\"line\">\t\t\tsave.pop();</div><div class=\"line\">\t\t\tp=p-&gt;right;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"中序遍历\"><a href=\"#中序遍历\" class=\"headerlink\" title=\"中序遍历\"></a>中序遍历</h1><p>遍历顺序为<code>左 -&gt; 根 -&gt;右</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//递归中序遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InOrder</span><span class=\"params\">(TreeNode* root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\tInOrder(root-&gt;left,path);</div><div class=\"line\">\t\tpath.push_back(root-&gt;val);</div><div class=\"line\">\t\tInOrder(root-&gt;right,path);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//常规的非递归中序遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InOrderTraversalOld</span><span class=\"params\">(TreeNode* root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">stack</span>&lt;TreeNode*&gt; save;</div><div class=\"line\">\tTreeNode* p=root;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span> || !save.empty()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t\tsave.push(p);</div><div class=\"line\">\t\t\tp=p-&gt;left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!save.empty()) &#123;</div><div class=\"line\">\t\t\tp=save.top();</div><div class=\"line\">\t\t\tsave.pop();</div><div class=\"line\">\t\t\tpath.push_back(p-&gt;val);</div><div class=\"line\">\t\t\tp=p-&gt;right;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"后续遍历\"><a href=\"#后续遍历\" class=\"headerlink\" title=\"后续遍历\"></a>后续遍历</h1><p>遍历顺序为<code>左 -&gt; 右 -&gt;根</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//递归后续遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PostOrder</span><span class=\"params\">(TreeNode* root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root!=<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\tPostOrder(root-&gt;left,path);</div><div class=\"line\">\t\tPostOrder(root-&gt;right,path);</div><div class=\"line\">\t\tpath.push_back(root-&gt;val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//常规的非递归后续遍历</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PostOrderTraversalOld</span><span class=\"params\">(TreeNode *root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root==<span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">stack</span>&lt;TreeNode*&gt; save;</div><div class=\"line\">\tsave.push(root);</div><div class=\"line\">\tTreeNode* p = root -&gt;left;</div><div class=\"line\">\tTreeNode* preNode = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!save.empty()) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span> &amp;&amp; p!=preNode) &#123;</div><div class=\"line\">\t\t\tsave.push(p);</div><div class=\"line\">\t\t\tp=p-&gt;left;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tp = save.top();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;right &amp;&amp; p-&gt;right!=preNode) &#123;</div><div class=\"line\">\t\t\tp=p-&gt;right;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tpath.push_back(p-&gt;val);</div><div class=\"line\">\t\t\tpreNode = p;</div><div class=\"line\">\t\t\tsave.pop();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"三种非递归遍历方法的总结\"><a href=\"#三种非递归遍历方法的总结\" class=\"headerlink\" title=\"三种非递归遍历方法的总结\"></a>三种非递归遍历方法的总结</h1><p>毋庸置疑，都使用了辅助栈；不同的是入栈、取栈顶元素和出栈的位置不同</p>\n<ul>\n<li>三种方法的第一步均是，找到最左下角的元素，过程中遍历的元素依次入栈；</li>\n<li>前序是在第一步遍历过程中的路径记录下来，存入path，中序是第一步扫描结束后，依次返回存入path；</li>\n<li>后序需要带有记忆性的扫描，新建preNode，记录已经存入path的节点位置</li>\n</ul>\n<p>从前面总结可以看出，除了前序和中序的代码风格类似，但后序遍历有较大的区别，而且嵌套多层循环，实际理解起来<br>干看并不是特别容易；即使理解了，隔一段时间写起来并不是特别顺畅，还需要各种推敲。<br>因此思考一个这样的问题：<strong>有没一种方法，可以统一这三种遍历方法的表达方式呢？</strong><br>网上搜寻了一些答案，发现这位兄台的解释及方法可以完全解决上述问题。<br>当个搬运工：<a href=\"https://www.jianshu.com/p/49c8cfd07410\" target=\"_blank\" rel=\"external\">子松的简书博客</a></p>\n<h1 id=\"更简单的方法统一的三种非递归遍历二叉树的方式\"><a href=\"#更简单的方法统一的三种非递归遍历二叉树的方式\" class=\"headerlink\" title=\"更简单的方法统一的三种非递归遍历二叉树的方式\"></a>更简单的方法统一的三种非递归遍历二叉树的方式</h1><p>这种方法做到了将<strong>算法与顺序分离</strong>，定义何种顺序并不影响算法；<br>算法只做这么一件事：<strong>将栈顶元素取出，使以此元素为“根”结点的局部有序入栈，但若此前已通过该结点将其局部入栈，则直接出栈输出即可。</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">orderTraversalNew</span><span class=\"params\">(TreeNode *root, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">stack</span>&lt; pair&lt;TreeNode *, <span class=\"keyword\">bool</span>&gt; &gt; s;</div><div class=\"line\">    s.push(make_pair(root, <span class=\"literal\">false</span>));</div><div class=\"line\">    <span class=\"keyword\">bool</span> visited;</div><div class=\"line\">    <span class=\"keyword\">while</span>(!s.empty())&#123;</div><div class=\"line\">        root = s.top().first;</div><div class=\"line\">        visited = s.top().second;</div><div class=\"line\">        s.pop();</div><div class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span>(visited)&#123;</div><div class=\"line\">            path.push_back(root-&gt;val);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//只需调整下列语句的先后顺序即可完成前中后的遍历</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//前序</span></div><div class=\"line\">            s.push(make_pair(root-&gt;right, <span class=\"literal\">false</span>));</div><div class=\"line\">            s.push(make_pair(root-&gt;left, <span class=\"literal\">false</span>));</div><div class=\"line\">            s.push(make_pair(root, <span class=\"literal\">true</span>));</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/*</span></div><div class=\"line\">\t\t\t//中序</div><div class=\"line\">\t\t\ts.push(make_pair(root-right,false));</div><div class=\"line\">\t\t\ts.push(make_pair(root,true));</div><div class=\"line\">\t\t\ts.push(make_pair(root-&gt;left,false));</div><div class=\"line\">\t\t\t//后续</div><div class=\"line\">\t\t\ts.push(make_pair(root,true));</div><div class=\"line\">\t\t\ts.push(make_pair(root-&gt;right, false));</div><div class=\"line\">            s.push(make_pair(root-&gt;left, false));</div><div class=\"line\">\t\t\t*/</div><div class=\"line\"></div><div class=\"line\">        \t&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种代码刚看到的时候，真是感觉牛逼啊！<br>主要思想为：<strong>有重合元素的局部有序一定能导致整体有序！</strong>。</p>\n<h1 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h1><p>二叉树的层次遍历也是一个常常应用的遍历方法，如求树的宽度就可以用到层次遍历；<br>中心思想是用一个<strong>队列</strong>保存左右孩子节点，然后依次出队列，存入path中；完成层次遍历。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//层次遍历,使用一个队列保存层次节点</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LevelOrder</span><span class=\"params\">(TreeNode* root,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;path)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (root == <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">queue</span>&lt;TreeNode*&gt; save;</div><div class=\"line\">\tsave.push(root);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (!save.empty()) &#123;</div><div class=\"line\">\t\tTreeNode* p = save.front();</div><div class=\"line\">\t\tpath.push_back(p-&gt;val);</div><div class=\"line\">\t\t<span class=\"comment\">//左节点不空，入队</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p-&gt;left) &#123;</div><div class=\"line\">\t\t\tsave.push(p-&gt;left);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//右节点不空，入队</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (p-&gt;right) &#123;</div><div class=\"line\">\t\t\tsave.push(p-&gt;right);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//根节点出队</span></div><div class=\"line\">\t\tp.pop();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/49c8cfd07410\" target=\"_blank\" rel=\"external\">更简单的非递归遍历二叉树的方法</a></li>\n<li><a href=\"https://www.jianshu.com/p/4db970d8ddc1\" target=\"_blank\" rel=\"external\">人脑理解递归</a></li>\n<li><a href=\"https://blog.csdn.net/xuzhangze/article/details/78696080\" target=\"_blank\" rel=\"external\">c++实现二叉树的递归和非递归遍历</a></li>\n</ul>"},{"title":"动态规划之最长公共子序列（longest common subsequence）问题的求解","date":"2017-04-30T08:57:23.000Z","copyright":true,"_content":"\n从 二月中旬到四月底 这段时间一直忙于找实习，做准备，刷题，牛客上刷了蛮多算法题，遇到过比较多用动态规划解的题，现在实习的事情基本上也已经定下来了，手上也收到几个还满意的offer，一直想找一个时间去总结下此类题目的解法，思路总是有点模糊，容易忘记，现乘着有时间正好总结一下，也方便后面查阅。动态规划最经典的题目莫过于求两个字符串的最长公共子序列（LCS）问题了，我就以这个问题为例子，总结下动态规划的特点及适用场景。\n\n<!-- more -->\n\n# 问题描述\n给定两个字符串（母串）：\n- ABCBDAB\n- BDCABA\n所谓的公共子序列（可以不连续出现）指的是在两个母串都出现过且顺序和母串保持一致，如： **AB**CBD **A**B 与 BDC**ABA**，公共子序列为ABA。最长公共子序列（LCS）也就是公共子序列中长度最长的那个。而子串是加了更严格条件的子序列，要求在两个母串中连续出现，如：ABC**BD**AB 与 **BD**CABA，BD是公共子串。两个母串的最长公共子序列为 **BCBA** ,最长公共子串为 **AB**。\n\n对于 **母串**：\nX={X1,X2,X3,...,Xm}\nY={y1,y2,y3,yn}\n求最长公共子序列和最长公共子串。\n\n# 最长公共子序列（LCS）\n## 问题分析\n假设Z={z1,z2,z3,....,zk}是 *X* 与 *Y* 的最长公共子序列（LCS），则有（**从后往前分析**）：\n数组 **LCS[i,j]** 保存的是最长公共子序列的 **长度**\n\n1. 若X(m)=Y(n), 则有：\n- Z(k)=X(m)=Y(n),则Z(k-1)是X(m-1)和Y(n-1)的LCS\n- LCS(m,n)=LCS(m-1,n-1)+1\n\n2. 若X(m)!=Y(n)，则有：\n- 若最终Z(k)!=X(m)，则 LCS(m,n)= LCS(m-1,n)\n- 若最终Z(k)!=Y(n),则 LCS(m,n)= LCS(m,n-1)\n- LCS(m,n)=Max{LCS(m-1,n), LCS(m,n-1)}\n\n由于子问题具有 **高度重叠性（见下图）**，可以用二维数组LCS[m][n]保存中间状态，为以后重复利用，用 **空间换时间**，这也是动态规划的核心思想。\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%AD%90%E9%97%AE%E9%A2%98%E5%85%B7%E6%9C%89%E7%9A%84%E9%87%8D%E5%8F%A0%E6%80%A7.png)\n\n## 问题求解\n使用动态规划求解，LCS的 **状态转移方程** 为：\n- LCS[i,j]=0                           if i=0 or j=0\n- LCS[i,j]=LCS[i-1, j-1] + 1           if i, j>0, and xi=yj\n- LCS[i,j]=Max(LCS[i,j-1],LCS[i-1,j])  if i,j>0, and xi!=yj\n\n## 伪代码描述\n```c++\nfor i=0 to m do LCS[i,0]←0\nfor j=1 to n do LCS[0,j]←0 //也就是将数组第一行和第一列初始化为0\nfor i=1 to m do\n     for j=1 to n do\n          if X[i]=Y[j] then\n               LCS[i,j] = LCS[i-1,j-1]+1;\n               b[i,j] = “↖” ; //设置了标志位，利用该标志位，打印出最长公共子序列\n          else if LCS[i-1,j]≥C[i,j-1] then\n               LCS[i,j] = LCS[i-1,j]；\n               b[i,j] = “↑” ;\n          else\n               LCS[i,j] = LCS[i,j-1]；\n               b[i,j] = “←” ;\n\n  return LCS and b             \n```\n\n## 回溯求出最长公共子序列的过程\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%9B%9E%E6%BA%AF%E8%BF%87%E7%A8%8B.png)\n\n## 参考实现代码\n\n```c++\nvoid LCSLength(int m,int n,char *x,char *y,int **LCS,int **b)  \n{  \n    int i,j;  \n\n    for(i=1; i<=m; i++)  \n        LCS[i][0] = 0;  //将数组的第一行置为0\n    for(i=1; i<=n; i++)  \n        LCS[0][i] = 0; //将数组的第一列置为0\n\n    for(i=1; i<=m; i++)  //按行的顺序分别求出LCS中各元素的值并保存\n    {  \n        for(j=1; j<=n; j++)  \n        {  \n            if(x[i]==y[j])  \n            {  \n                LCS[i][j]=LCS[i-1][j-1]+1;  \n                b[i][j]=1;  \n            }  \n            else if(c[i-1][j]>=c[i][j-1])  \n            {  \n                LCS[i][j]=LCS[i-1][j];  \n                b[i][j]=2;  \n            }  \n            else  \n            {  \n                 LCS[i][j]=LCS[i][j-1];  \n                 b[i][j]=3;  \n            }  \n        }  \n    }  \n}  \n\nvoid LCS(int i,int j,char *x,int **b)  //自底向上求解（回溯），递归得到最长公共子序列\n{  \n    if(i==0 || j==0)  \n    {  \n        return;  \n    }  \n    if(b[i][j]==1)  \n    {  \n        LCS(i-1,j-1,x,b);  \n        cout<<x[i]<<\" \";  \n    }  \n    else if(b[i][j]==2)  \n    {  \n        LCS(i-1,j,x,b);  \n    }  \n    else  \n    {  \n        LCS(i,j-1,x,b);  \n    }  \n}  \nint main(int argc, char **argv)\n{\n    char x[10] = {\"ABCBDAB\"};\n    char y[10] = {\"BDCABA\"};\n    int b[10][10];\n    int LCS[10][10];\n    int m, n;\n\n    m = strlen(x);\n    n = strlen(y);\n\n    LCSLength(m, n, x, y, LCS, b); //也就是LCS[m][n]的值为最大长度\n    std::cout << \"LCS length is:\" << LCS[m][n]<<'\\n';\n\n    std::cout << \"LCS:\" << '\\n';\n    LCS(m, n, b, x,);\n    return 0;\n}\n```\n\n## 算法分析\n由于每次调用至少 **向上或向左或斜向上** 移动一步，故最多调用(m + n)次就会遇到i = 0或j = 0的情况，此时开始返回。\n返回时与递归调用时方向相反，步数相同，故算法时间复杂度为 **Θ(m + n)**。\n\n# 动态规划题型总结\n使用动态规划解题需满足的条件：\n- 问题可分为多个相关子问题\n- 问题的最优解包含子问题的最优解，问题具有 **最优子结构**\n- 子问题的解被重复利用（子问题的高度重叠性），**将子问题的解保存在表中（一般是二维数组）**，以后用到时直接存取，这是一种空间换时间的做法，也是DP的核心思想。\n\n# 参考博客\n- [最长公共子序列与最长公共子串](http://www.cnblogs.com/en-heng/p/3963803.html)\n- [最长公共子序列问题(LCS)](http://blog.csdn.net/liufeng_king/article/details/8500084)\n- [动态规划解最长公共子序列问题](http://blog.csdn.net/yysdsyl/article/details/4226630/)\n","source":"_posts/动态规划之最长公共子序列（longest common subsequence）问题的求解.md","raw":"---\ntitle: >-\n  动态规划之最长公共子序列（longest common subsequence）问题的求解\ndate: 2017-04-30 16:57:23\ncategories: Algorithms\ntags: Dynamic Programming\ncopyright: true\n---\n\n从 二月中旬到四月底 这段时间一直忙于找实习，做准备，刷题，牛客上刷了蛮多算法题，遇到过比较多用动态规划解的题，现在实习的事情基本上也已经定下来了，手上也收到几个还满意的offer，一直想找一个时间去总结下此类题目的解法，思路总是有点模糊，容易忘记，现乘着有时间正好总结一下，也方便后面查阅。动态规划最经典的题目莫过于求两个字符串的最长公共子序列（LCS）问题了，我就以这个问题为例子，总结下动态规划的特点及适用场景。\n\n<!-- more -->\n\n# 问题描述\n给定两个字符串（母串）：\n- ABCBDAB\n- BDCABA\n所谓的公共子序列（可以不连续出现）指的是在两个母串都出现过且顺序和母串保持一致，如： **AB**CBD **A**B 与 BDC**ABA**，公共子序列为ABA。最长公共子序列（LCS）也就是公共子序列中长度最长的那个。而子串是加了更严格条件的子序列，要求在两个母串中连续出现，如：ABC**BD**AB 与 **BD**CABA，BD是公共子串。两个母串的最长公共子序列为 **BCBA** ,最长公共子串为 **AB**。\n\n对于 **母串**：\nX={X1,X2,X3,...,Xm}\nY={y1,y2,y3,yn}\n求最长公共子序列和最长公共子串。\n\n# 最长公共子序列（LCS）\n## 问题分析\n假设Z={z1,z2,z3,....,zk}是 *X* 与 *Y* 的最长公共子序列（LCS），则有（**从后往前分析**）：\n数组 **LCS[i,j]** 保存的是最长公共子序列的 **长度**\n\n1. 若X(m)=Y(n), 则有：\n- Z(k)=X(m)=Y(n),则Z(k-1)是X(m-1)和Y(n-1)的LCS\n- LCS(m,n)=LCS(m-1,n-1)+1\n\n2. 若X(m)!=Y(n)，则有：\n- 若最终Z(k)!=X(m)，则 LCS(m,n)= LCS(m-1,n)\n- 若最终Z(k)!=Y(n),则 LCS(m,n)= LCS(m,n-1)\n- LCS(m,n)=Max{LCS(m-1,n), LCS(m,n-1)}\n\n由于子问题具有 **高度重叠性（见下图）**，可以用二维数组LCS[m][n]保存中间状态，为以后重复利用，用 **空间换时间**，这也是动态规划的核心思想。\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%AD%90%E9%97%AE%E9%A2%98%E5%85%B7%E6%9C%89%E7%9A%84%E9%87%8D%E5%8F%A0%E6%80%A7.png)\n\n## 问题求解\n使用动态规划求解，LCS的 **状态转移方程** 为：\n- LCS[i,j]=0                           if i=0 or j=0\n- LCS[i,j]=LCS[i-1, j-1] + 1           if i, j>0, and xi=yj\n- LCS[i,j]=Max(LCS[i,j-1],LCS[i-1,j])  if i,j>0, and xi!=yj\n\n## 伪代码描述\n```c++\nfor i=0 to m do LCS[i,0]←0\nfor j=1 to n do LCS[0,j]←0 //也就是将数组第一行和第一列初始化为0\nfor i=1 to m do\n     for j=1 to n do\n          if X[i]=Y[j] then\n               LCS[i,j] = LCS[i-1,j-1]+1;\n               b[i,j] = “↖” ; //设置了标志位，利用该标志位，打印出最长公共子序列\n          else if LCS[i-1,j]≥C[i,j-1] then\n               LCS[i,j] = LCS[i-1,j]；\n               b[i,j] = “↑” ;\n          else\n               LCS[i,j] = LCS[i,j-1]；\n               b[i,j] = “←” ;\n\n  return LCS and b             \n```\n\n## 回溯求出最长公共子序列的过程\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%9B%9E%E6%BA%AF%E8%BF%87%E7%A8%8B.png)\n\n## 参考实现代码\n\n```c++\nvoid LCSLength(int m,int n,char *x,char *y,int **LCS,int **b)  \n{  \n    int i,j;  \n\n    for(i=1; i<=m; i++)  \n        LCS[i][0] = 0;  //将数组的第一行置为0\n    for(i=1; i<=n; i++)  \n        LCS[0][i] = 0; //将数组的第一列置为0\n\n    for(i=1; i<=m; i++)  //按行的顺序分别求出LCS中各元素的值并保存\n    {  \n        for(j=1; j<=n; j++)  \n        {  \n            if(x[i]==y[j])  \n            {  \n                LCS[i][j]=LCS[i-1][j-1]+1;  \n                b[i][j]=1;  \n            }  \n            else if(c[i-1][j]>=c[i][j-1])  \n            {  \n                LCS[i][j]=LCS[i-1][j];  \n                b[i][j]=2;  \n            }  \n            else  \n            {  \n                 LCS[i][j]=LCS[i][j-1];  \n                 b[i][j]=3;  \n            }  \n        }  \n    }  \n}  \n\nvoid LCS(int i,int j,char *x,int **b)  //自底向上求解（回溯），递归得到最长公共子序列\n{  \n    if(i==0 || j==0)  \n    {  \n        return;  \n    }  \n    if(b[i][j]==1)  \n    {  \n        LCS(i-1,j-1,x,b);  \n        cout<<x[i]<<\" \";  \n    }  \n    else if(b[i][j]==2)  \n    {  \n        LCS(i-1,j,x,b);  \n    }  \n    else  \n    {  \n        LCS(i,j-1,x,b);  \n    }  \n}  \nint main(int argc, char **argv)\n{\n    char x[10] = {\"ABCBDAB\"};\n    char y[10] = {\"BDCABA\"};\n    int b[10][10];\n    int LCS[10][10];\n    int m, n;\n\n    m = strlen(x);\n    n = strlen(y);\n\n    LCSLength(m, n, x, y, LCS, b); //也就是LCS[m][n]的值为最大长度\n    std::cout << \"LCS length is:\" << LCS[m][n]<<'\\n';\n\n    std::cout << \"LCS:\" << '\\n';\n    LCS(m, n, b, x,);\n    return 0;\n}\n```\n\n## 算法分析\n由于每次调用至少 **向上或向左或斜向上** 移动一步，故最多调用(m + n)次就会遇到i = 0或j = 0的情况，此时开始返回。\n返回时与递归调用时方向相反，步数相同，故算法时间复杂度为 **Θ(m + n)**。\n\n# 动态规划题型总结\n使用动态规划解题需满足的条件：\n- 问题可分为多个相关子问题\n- 问题的最优解包含子问题的最优解，问题具有 **最优子结构**\n- 子问题的解被重复利用（子问题的高度重叠性），**将子问题的解保存在表中（一般是二维数组）**，以后用到时直接存取，这是一种空间换时间的做法，也是DP的核心思想。\n\n# 参考博客\n- [最长公共子序列与最长公共子串](http://www.cnblogs.com/en-heng/p/3963803.html)\n- [最长公共子序列问题(LCS)](http://blog.csdn.net/liufeng_king/article/details/8500084)\n- [动态规划解最长公共子序列问题](http://blog.csdn.net/yysdsyl/article/details/4226630/)\n","slug":"动态规划之最长公共子序列（longest common subsequence）问题的求解","published":1,"updated":"2017-06-13T12:22:43.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c91001v4ov1wjwb6jb5","content":"<p>从 二月中旬到四月底 这段时间一直忙于找实习，做准备，刷题，牛客上刷了蛮多算法题，遇到过比较多用动态规划解的题，现在实习的事情基本上也已经定下来了，手上也收到几个还满意的offer，一直想找一个时间去总结下此类题目的解法，思路总是有点模糊，容易忘记，现乘着有时间正好总结一下，也方便后面查阅。动态规划最经典的题目莫过于求两个字符串的最长公共子序列（LCS）问题了，我就以这个问题为例子，总结下动态规划的特点及适用场景。</p>\n<a id=\"more\"></a>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>给定两个字符串（母串）：</p>\n<ul>\n<li>ABCBDAB</li>\n<li>BDCABA<br>所谓的公共子序列（可以不连续出现）指的是在两个母串都出现过且顺序和母串保持一致，如： <strong>AB</strong>CBD <strong>A</strong>B 与 BDC<strong>ABA</strong>，公共子序列为ABA。最长公共子序列（LCS）也就是公共子序列中长度最长的那个。而子串是加了更严格条件的子序列，要求在两个母串中连续出现，如：ABC<strong>BD</strong>AB 与 <strong>BD</strong>CABA，BD是公共子串。两个母串的最长公共子序列为 <strong>BCBA</strong> ,最长公共子串为 <strong>AB</strong>。</li>\n</ul>\n<p>对于 <strong>母串</strong>：<br>X={X1,X2,X3,…,Xm}<br>Y={y1,y2,y3,yn}<br>求最长公共子序列和最长公共子串。</p>\n<h1 id=\"最长公共子序列（LCS）\"><a href=\"#最长公共子序列（LCS）\" class=\"headerlink\" title=\"最长公共子序列（LCS）\"></a>最长公共子序列（LCS）</h1><h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>假设Z={z1,z2,z3,….,zk}是 <em>X</em> 与 <em>Y</em> 的最长公共子序列（LCS），则有（<strong>从后往前分析</strong>）：<br>数组 <strong>LCS[i,j]</strong> 保存的是最长公共子序列的 <strong>长度</strong></p>\n<ol>\n<li>若X(m)=Y(n), 则有：</li>\n</ol>\n<ul>\n<li>Z(k)=X(m)=Y(n),则Z(k-1)是X(m-1)和Y(n-1)的LCS</li>\n<li>LCS(m,n)=LCS(m-1,n-1)+1</li>\n</ul>\n<ol>\n<li>若X(m)!=Y(n)，则有：</li>\n</ol>\n<ul>\n<li>若最终Z(k)!=X(m)，则 LCS(m,n)= LCS(m-1,n)</li>\n<li>若最终Z(k)!=Y(n),则 LCS(m,n)= LCS(m,n-1)</li>\n<li>LCS(m,n)=Max{LCS(m-1,n), LCS(m,n-1)}</li>\n</ul>\n<p>由于子问题具有 <strong>高度重叠性（见下图）</strong>，可以用二维数组LCS[m][n]保存中间状态，为以后重复利用，用 <strong>空间换时间</strong>，这也是动态规划的核心思想。</p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%AD%90%E9%97%AE%E9%A2%98%E5%85%B7%E6%9C%89%E7%9A%84%E9%87%8D%E5%8F%A0%E6%80%A7.png\" alt=\"\"></p>\n<h2 id=\"问题求解\"><a href=\"#问题求解\" class=\"headerlink\" title=\"问题求解\"></a>问题求解</h2><p>使用动态规划求解，LCS的 <strong>状态转移方程</strong> 为：</p>\n<ul>\n<li>LCS[i,j]=0                           if i=0 or j=0</li>\n<li>LCS[i,j]=LCS[i-1, j-1] + 1           if i, j&gt;0, and xi=yj</li>\n<li>LCS[i,j]=Max(LCS[i,j-1],LCS[i-1,j])  if i,j&gt;0, and xi!=yj</li>\n</ul>\n<h2 id=\"伪代码描述\"><a href=\"#伪代码描述\" class=\"headerlink\" title=\"伪代码描述\"></a>伪代码描述</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">0</span> to m <span class=\"keyword\">do</span> LCS[i,<span class=\"number\">0</span>]←<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> j=<span class=\"number\">1</span> to n <span class=\"keyword\">do</span> LCS[<span class=\"number\">0</span>,j]←<span class=\"number\">0</span> <span class=\"comment\">//也就是将数组第一行和第一列初始化为0</span></div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to m <span class=\"keyword\">do</span></div><div class=\"line\">     <span class=\"keyword\">for</span> j=<span class=\"number\">1</span> to n <span class=\"keyword\">do</span></div><div class=\"line\">          <span class=\"keyword\">if</span> X[i]=Y[j] then</div><div class=\"line\">               LCS[i,j] = LCS[i<span class=\"number\">-1</span>,j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</div><div class=\"line\">               b[i,j] = “↖” ; <span class=\"comment\">//设置了标志位，利用该标志位，打印出最长公共子序列</span></div><div class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> LCS[i<span class=\"number\">-1</span>,j]≥C[i,j<span class=\"number\">-1</span>] then</div><div class=\"line\">               LCS[i,j] = LCS[i<span class=\"number\">-1</span>,j]；</div><div class=\"line\">               b[i,j] = “↑” ;</div><div class=\"line\">          <span class=\"keyword\">else</span></div><div class=\"line\">               LCS[i,j] = LCS[i,j<span class=\"number\">-1</span>]；</div><div class=\"line\">               b[i,j] = “←” ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> LCS and b</div></pre></td></tr></table></figure>\n<h2 id=\"回溯求出最长公共子序列的过程\"><a href=\"#回溯求出最长公共子序列的过程\" class=\"headerlink\" title=\"回溯求出最长公共子序列的过程\"></a>回溯求出最长公共子序列的过程</h2><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%9B%9E%E6%BA%AF%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n<h2 id=\"参考实现代码\"><a href=\"#参考实现代码\" class=\"headerlink\" title=\"参考实现代码\"></a>参考实现代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCSLength</span><span class=\"params\">(<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> n,<span class=\"keyword\">char</span> *x,<span class=\"keyword\">char</span> *y,<span class=\"keyword\">int</span> **LCS,<span class=\"keyword\">int</span> **b)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> i,j;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=m; i++)  </div><div class=\"line\">        LCS[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;  <span class=\"comment\">//将数组的第一行置为0</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)  </div><div class=\"line\">        LCS[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>; <span class=\"comment\">//将数组的第一列置为0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=m; i++)  <span class=\"comment\">//按行的顺序分别求出LCS中各元素的值并保存</span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>; j&lt;=n; j++)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(x[i]==y[j])  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                LCS[i][j]=LCS[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;  </div><div class=\"line\">                b[i][j]=<span class=\"number\">1</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[i<span class=\"number\">-1</span>][j]&gt;=c[i][j<span class=\"number\">-1</span>])  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                LCS[i][j]=LCS[i<span class=\"number\">-1</span>][j];  </div><div class=\"line\">                b[i][j]=<span class=\"number\">2</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">else</span>  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                 LCS[i][j]=LCS[i][j<span class=\"number\">-1</span>];  </div><div class=\"line\">                 b[i][j]=<span class=\"number\">3</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCS</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">char</span> *x,<span class=\"keyword\">int</span> **b)</span>  <span class=\"comment\">//自底向上求解（回溯），递归得到最长公共子序列</span></span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span> || j==<span class=\"number\">0</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(b[i][j]==<span class=\"number\">1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i<span class=\"number\">-1</span>,j<span class=\"number\">-1</span>,x,b);  </div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;x[i]&lt;&lt;<span class=\"string\">\" \"</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[i][j]==<span class=\"number\">2</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i<span class=\"number\">-1</span>,j,x,b);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span>  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i,j<span class=\"number\">-1</span>,x,b);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> x[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"ABCBDAB\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">char</span> y[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"BDCABA\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> b[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> LCS[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> m, n;</div><div class=\"line\"></div><div class=\"line\">    m = <span class=\"built_in\">strlen</span>(x);</div><div class=\"line\">    n = <span class=\"built_in\">strlen</span>(y);</div><div class=\"line\"></div><div class=\"line\">    LCSLength(m, n, x, y, LCS, b); <span class=\"comment\">//也就是LCS[m][n]的值为最大长度</span></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"LCS length is:\"</span> &lt;&lt; LCS[m][n]&lt;&lt;<span class=\"string\">'\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"LCS:\"</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</div><div class=\"line\">    LCS(m, n, b, x,);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><p>由于每次调用至少 <strong>向上或向左或斜向上</strong> 移动一步，故最多调用(m + n)次就会遇到i = 0或j = 0的情况，此时开始返回。<br>返回时与递归调用时方向相反，步数相同，故算法时间复杂度为 <strong>Θ(m + n)</strong>。</p>\n<h1 id=\"动态规划题型总结\"><a href=\"#动态规划题型总结\" class=\"headerlink\" title=\"动态规划题型总结\"></a>动态规划题型总结</h1><p>使用动态规划解题需满足的条件：</p>\n<ul>\n<li>问题可分为多个相关子问题</li>\n<li>问题的最优解包含子问题的最优解，问题具有 <strong>最优子结构</strong></li>\n<li>子问题的解被重复利用（子问题的高度重叠性），<strong>将子问题的解保存在表中（一般是二维数组）</strong>，以后用到时直接存取，这是一种空间换时间的做法，也是DP的核心思想。</li>\n</ul>\n<h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><ul>\n<li><a href=\"http://www.cnblogs.com/en-heng/p/3963803.html\" target=\"_blank\" rel=\"external\">最长公共子序列与最长公共子串</a></li>\n<li><a href=\"http://blog.csdn.net/liufeng_king/article/details/8500084\" target=\"_blank\" rel=\"external\">最长公共子序列问题(LCS)</a></li>\n<li><a href=\"http://blog.csdn.net/yysdsyl/article/details/4226630/\" target=\"_blank\" rel=\"external\">动态规划解最长公共子序列问题</a></li>\n</ul>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>从 二月中旬到四月底 这段时间一直忙于找实习，做准备，刷题，牛客上刷了蛮多算法题，遇到过比较多用动态规划解的题，现在实习的事情基本上也已经定下来了，手上也收到几个还满意的offer，一直想找一个时间去总结下此类题目的解法，思路总是有点模糊，容易忘记，现乘着有时间正好总结一下，也方便后面查阅。动态规划最经典的题目莫过于求两个字符串的最长公共子序列（LCS）问题了，我就以这个问题为例子，总结下动态规划的特点及适用场景。</p>","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>给定两个字符串（母串）：</p>\n<ul>\n<li>ABCBDAB</li>\n<li>BDCABA<br>所谓的公共子序列（可以不连续出现）指的是在两个母串都出现过且顺序和母串保持一致，如： <strong>AB</strong>CBD <strong>A</strong>B 与 BDC<strong>ABA</strong>，公共子序列为ABA。最长公共子序列（LCS）也就是公共子序列中长度最长的那个。而子串是加了更严格条件的子序列，要求在两个母串中连续出现，如：ABC<strong>BD</strong>AB 与 <strong>BD</strong>CABA，BD是公共子串。两个母串的最长公共子序列为 <strong>BCBA</strong> ,最长公共子串为 <strong>AB</strong>。</li>\n</ul>\n<p>对于 <strong>母串</strong>：<br>X={X1,X2,X3,…,Xm}<br>Y={y1,y2,y3,yn}<br>求最长公共子序列和最长公共子串。</p>\n<h1 id=\"最长公共子序列（LCS）\"><a href=\"#最长公共子序列（LCS）\" class=\"headerlink\" title=\"最长公共子序列（LCS）\"></a>最长公共子序列（LCS）</h1><h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>假设Z={z1,z2,z3,….,zk}是 <em>X</em> 与 <em>Y</em> 的最长公共子序列（LCS），则有（<strong>从后往前分析</strong>）：<br>数组 <strong>LCS[i,j]</strong> 保存的是最长公共子序列的 <strong>长度</strong></p>\n<ol>\n<li>若X(m)=Y(n), 则有：</li>\n</ol>\n<ul>\n<li>Z(k)=X(m)=Y(n),则Z(k-1)是X(m-1)和Y(n-1)的LCS</li>\n<li>LCS(m,n)=LCS(m-1,n-1)+1</li>\n</ul>\n<ol>\n<li>若X(m)!=Y(n)，则有：</li>\n</ol>\n<ul>\n<li>若最终Z(k)!=X(m)，则 LCS(m,n)= LCS(m-1,n)</li>\n<li>若最终Z(k)!=Y(n),则 LCS(m,n)= LCS(m,n-1)</li>\n<li>LCS(m,n)=Max{LCS(m-1,n), LCS(m,n-1)}</li>\n</ul>\n<p>由于子问题具有 <strong>高度重叠性（见下图）</strong>，可以用二维数组LCS[m][n]保存中间状态，为以后重复利用，用 <strong>空间换时间</strong>，这也是动态规划的核心思想。</p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%AD%90%E9%97%AE%E9%A2%98%E5%85%B7%E6%9C%89%E7%9A%84%E9%87%8D%E5%8F%A0%E6%80%A7.png\" alt=\"\"></p>\n<h2 id=\"问题求解\"><a href=\"#问题求解\" class=\"headerlink\" title=\"问题求解\"></a>问题求解</h2><p>使用动态规划求解，LCS的 <strong>状态转移方程</strong> 为：</p>\n<ul>\n<li>LCS[i,j]=0                           if i=0 or j=0</li>\n<li>LCS[i,j]=LCS[i-1, j-1] + 1           if i, j&gt;0, and xi=yj</li>\n<li>LCS[i,j]=Max(LCS[i,j-1],LCS[i-1,j])  if i,j&gt;0, and xi!=yj</li>\n</ul>\n<h2 id=\"伪代码描述\"><a href=\"#伪代码描述\" class=\"headerlink\" title=\"伪代码描述\"></a>伪代码描述</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">0</span> to m <span class=\"keyword\">do</span> LCS[i,<span class=\"number\">0</span>]←<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> j=<span class=\"number\">1</span> to n <span class=\"keyword\">do</span> LCS[<span class=\"number\">0</span>,j]←<span class=\"number\">0</span> <span class=\"comment\">//也就是将数组第一行和第一列初始化为0</span></div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to m <span class=\"keyword\">do</span></div><div class=\"line\">     <span class=\"keyword\">for</span> j=<span class=\"number\">1</span> to n <span class=\"keyword\">do</span></div><div class=\"line\">          <span class=\"keyword\">if</span> X[i]=Y[j] then</div><div class=\"line\">               LCS[i,j] = LCS[i<span class=\"number\">-1</span>,j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</div><div class=\"line\">               b[i,j] = “↖” ; <span class=\"comment\">//设置了标志位，利用该标志位，打印出最长公共子序列</span></div><div class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> LCS[i<span class=\"number\">-1</span>,j]≥C[i,j<span class=\"number\">-1</span>] then</div><div class=\"line\">               LCS[i,j] = LCS[i<span class=\"number\">-1</span>,j]；</div><div class=\"line\">               b[i,j] = “↑” ;</div><div class=\"line\">          <span class=\"keyword\">else</span></div><div class=\"line\">               LCS[i,j] = LCS[i,j<span class=\"number\">-1</span>]；</div><div class=\"line\">               b[i,j] = “←” ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> LCS and b</div></pre></td></tr></table></figure>\n<h2 id=\"回溯求出最长公共子序列的过程\"><a href=\"#回溯求出最长公共子序列的过程\" class=\"headerlink\" title=\"回溯求出最长公共子序列的过程\"></a>回溯求出最长公共子序列的过程</h2><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%9B%9E%E6%BA%AF%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n<h2 id=\"参考实现代码\"><a href=\"#参考实现代码\" class=\"headerlink\" title=\"参考实现代码\"></a>参考实现代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCSLength</span><span class=\"params\">(<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> n,<span class=\"keyword\">char</span> *x,<span class=\"keyword\">char</span> *y,<span class=\"keyword\">int</span> **LCS,<span class=\"keyword\">int</span> **b)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> i,j;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=m; i++)  </div><div class=\"line\">        LCS[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;  <span class=\"comment\">//将数组的第一行置为0</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)  </div><div class=\"line\">        LCS[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>; <span class=\"comment\">//将数组的第一列置为0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=m; i++)  <span class=\"comment\">//按行的顺序分别求出LCS中各元素的值并保存</span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>; j&lt;=n; j++)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(x[i]==y[j])  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                LCS[i][j]=LCS[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;  </div><div class=\"line\">                b[i][j]=<span class=\"number\">1</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[i<span class=\"number\">-1</span>][j]&gt;=c[i][j<span class=\"number\">-1</span>])  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                LCS[i][j]=LCS[i<span class=\"number\">-1</span>][j];  </div><div class=\"line\">                b[i][j]=<span class=\"number\">2</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">else</span>  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                 LCS[i][j]=LCS[i][j<span class=\"number\">-1</span>];  </div><div class=\"line\">                 b[i][j]=<span class=\"number\">3</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCS</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">char</span> *x,<span class=\"keyword\">int</span> **b)</span>  <span class=\"comment\">//自底向上求解（回溯），递归得到最长公共子序列</span></span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span> || j==<span class=\"number\">0</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(b[i][j]==<span class=\"number\">1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i<span class=\"number\">-1</span>,j<span class=\"number\">-1</span>,x,b);  </div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;x[i]&lt;&lt;<span class=\"string\">\" \"</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[i][j]==<span class=\"number\">2</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i<span class=\"number\">-1</span>,j,x,b);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span>  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i,j<span class=\"number\">-1</span>,x,b);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> x[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"ABCBDAB\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">char</span> y[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"BDCABA\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> b[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> LCS[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> m, n;</div><div class=\"line\"></div><div class=\"line\">    m = <span class=\"built_in\">strlen</span>(x);</div><div class=\"line\">    n = <span class=\"built_in\">strlen</span>(y);</div><div class=\"line\"></div><div class=\"line\">    LCSLength(m, n, x, y, LCS, b); <span class=\"comment\">//也就是LCS[m][n]的值为最大长度</span></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"LCS length is:\"</span> &lt;&lt; LCS[m][n]&lt;&lt;<span class=\"string\">'\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"LCS:\"</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</div><div class=\"line\">    LCS(m, n, b, x,);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><p>由于每次调用至少 <strong>向上或向左或斜向上</strong> 移动一步，故最多调用(m + n)次就会遇到i = 0或j = 0的情况，此时开始返回。<br>返回时与递归调用时方向相反，步数相同，故算法时间复杂度为 <strong>Θ(m + n)</strong>。</p>\n<h1 id=\"动态规划题型总结\"><a href=\"#动态规划题型总结\" class=\"headerlink\" title=\"动态规划题型总结\"></a>动态规划题型总结</h1><p>使用动态规划解题需满足的条件：</p>\n<ul>\n<li>问题可分为多个相关子问题</li>\n<li>问题的最优解包含子问题的最优解，问题具有 <strong>最优子结构</strong></li>\n<li>子问题的解被重复利用（子问题的高度重叠性），<strong>将子问题的解保存在表中（一般是二维数组）</strong>，以后用到时直接存取，这是一种空间换时间的做法，也是DP的核心思想。</li>\n</ul>\n<h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><ul>\n<li><a href=\"http://www.cnblogs.com/en-heng/p/3963803.html\" target=\"_blank\" rel=\"external\">最长公共子序列与最长公共子串</a></li>\n<li><a href=\"http://blog.csdn.net/liufeng_king/article/details/8500084\" target=\"_blank\" rel=\"external\">最长公共子序列问题(LCS)</a></li>\n<li><a href=\"http://blog.csdn.net/yysdsyl/article/details/4226630/\" target=\"_blank\" rel=\"external\">动态规划解最长公共子序列问题</a></li>\n</ul>"},{"title":"新环境下Hexo博客部署及维护","date":"2017-02-19T16:00:00.000Z","_content":"   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。\n   <!-- more -->\n## 准备工作\n之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：\n\n - master分支：存放博客部署的静态文件(也就是public文件夹下的内容)\n - hexo分支：存放博客源文件，配置文件等\n\n在新环境(Windows)下安装配置*Git，Node.js，Python*;Python建议下载2.7版本，安装好后别忘了配置环境变量。\n提供下载链接：\n\n- [Git](https://github.com/waylau/git-for-win)\n- [Node.js](https://nodejs.org/en/download/)\n- [Python](https://www.python.org/downloads/)\n\n\n## 新环境部署\n首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行**Git Bash Here,**然后克隆你的远程仓库，也就是hexo分支上的内容；\n` git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog`\n### 问题一\n出现clone失败报错（Filename too long）：\n```\nGitHub.IO.ProcessException: fatal: unable to stat 'plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class': Filename too long\n```\n后面各种找解决方法，终于找到一个靠谱的方案: [Solution](http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows)，原因也解释的很清楚；\n在Bash中键入命令:`git config --system core.longpaths true `; 问题解决。\n### 问题二\n进入博客根目录：` cd newBlog`；然后依次键入下列命令**[1]**：\n```\nnpm install -g hexo-cli\nnpm install\nnpm install hexo -server --save\nnpm install hexo-deployer-git --save\n```\n出现各种问题，无法安装*hexo*:\n```\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"c:\\\\Program Files\\\\nodejs\\\\node.exe\" \"c:\\\\Program Files\\\\nodej\ns\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\nnpm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat\nnpm ERR! node -v v0.10.28\nnpm ERR! npm -v 1.4.9\nnpm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package\nnpm ERR! code EPERM\nnpm ERR! errno 50\nnpm ERR! stack Error: EPERM, unlink 'C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i\nnherits\\2.0.1\\package'\nnpm http 200 https://registry.npmjs.org/qs\n```\n找到解决方案，依次键入下列命令：\n```\nnpm config get registry\nnpm cache clean\nnpm install express\n```\n问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；\n### 问题三\n执行` hexo clean`,出现下列问题：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png)\n根据提示键入命令安装：\n`npm rebuild node-sass`\n安装过程出现各种` npm error，gyp error`，在查找问题过程中，出错信息提示：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png)\n\n那就新环境下安装**Python！**，忘安装了..\n至此，问题全部解决，可以愉快的写博客了！\n\n## 参考博客\n1.[Hexo博客多电脑同步及更换电脑后处理方式](http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/)\n2.[在不同的电脑维护Hexo和写作](http://www.rvclient.com/2016/05/21/hexo-everywhere/)\n","source":"_posts/新环境下Hexo博客部署及维护.md","raw":"---\ntitle: 新环境下Hexo博客部署及维护\ndate: 2017-02-20\ncategories: hexo\ntags: [git,hexo]\n---\n   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。\n   <!-- more -->\n## 准备工作\n之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：\n\n - master分支：存放博客部署的静态文件(也就是public文件夹下的内容)\n - hexo分支：存放博客源文件，配置文件等\n\n在新环境(Windows)下安装配置*Git，Node.js，Python*;Python建议下载2.7版本，安装好后别忘了配置环境变量。\n提供下载链接：\n\n- [Git](https://github.com/waylau/git-for-win)\n- [Node.js](https://nodejs.org/en/download/)\n- [Python](https://www.python.org/downloads/)\n\n\n## 新环境部署\n首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行**Git Bash Here,**然后克隆你的远程仓库，也就是hexo分支上的内容；\n` git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog`\n### 问题一\n出现clone失败报错（Filename too long）：\n```\nGitHub.IO.ProcessException: fatal: unable to stat 'plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class': Filename too long\n```\n后面各种找解决方法，终于找到一个靠谱的方案: [Solution](http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows)，原因也解释的很清楚；\n在Bash中键入命令:`git config --system core.longpaths true `; 问题解决。\n### 问题二\n进入博客根目录：` cd newBlog`；然后依次键入下列命令**[1]**：\n```\nnpm install -g hexo-cli\nnpm install\nnpm install hexo -server --save\nnpm install hexo-deployer-git --save\n```\n出现各种问题，无法安装*hexo*:\n```\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"c:\\\\Program Files\\\\nodejs\\\\node.exe\" \"c:\\\\Program Files\\\\nodej\ns\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\nnpm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat\nnpm ERR! node -v v0.10.28\nnpm ERR! npm -v 1.4.9\nnpm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package\nnpm ERR! code EPERM\nnpm ERR! errno 50\nnpm ERR! stack Error: EPERM, unlink 'C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i\nnherits\\2.0.1\\package'\nnpm http 200 https://registry.npmjs.org/qs\n```\n找到解决方案，依次键入下列命令：\n```\nnpm config get registry\nnpm cache clean\nnpm install express\n```\n问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；\n### 问题三\n执行` hexo clean`,出现下列问题：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png)\n根据提示键入命令安装：\n`npm rebuild node-sass`\n安装过程出现各种` npm error，gyp error`，在查找问题过程中，出错信息提示：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png)\n\n那就新环境下安装**Python！**，忘安装了..\n至此，问题全部解决，可以愉快的写博客了！\n\n## 参考博客\n1.[Hexo博客多电脑同步及更换电脑后处理方式](http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/)\n2.[在不同的电脑维护Hexo和写作](http://www.rvclient.com/2016/05/21/hexo-everywhere/)\n","slug":"新环境下Hexo博客部署及维护","published":1,"updated":"2017-04-28T03:49:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c98001z4ov1ykv9atzw","content":"<p>   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。<br>   <a id=\"more\"></a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：</p>\n<ul>\n<li>master分支：存放博客部署的静态文件(也就是public文件夹下的内容)</li>\n<li>hexo分支：存放博客源文件，配置文件等</li>\n</ul>\n<p>在新环境(Windows)下安装配置<em>Git，Node.js，Python</em>;Python建议下载2.7版本，安装好后别忘了配置环境变量。<br>提供下载链接：</p>\n<ul>\n<li><a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">Git</a></li>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"external\">Python</a></li>\n</ul>\n<h2 id=\"新环境部署\"><a href=\"#新环境部署\" class=\"headerlink\" title=\"新环境部署\"></a>新环境部署</h2><p>首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行<strong>Git Bash Here,</strong>然后克隆你的远程仓库，也就是hexo分支上的内容；<br><code>git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog</code></p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>出现clone失败报错（Filename too long）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GitHub.IO.ProcessException: fatal: unable to stat &apos;plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class&apos;: Filename too long</div></pre></td></tr></table></figure></p>\n<p>后面各种找解决方法，终于找到一个靠谱的方案: <a href=\"http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows\" target=\"_blank\" rel=\"external\">Solution</a>，原因也解释的很清楚；<br>在Bash中键入命令:<code>git config --system core.longpaths true</code>; 问题解决。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>进入博客根目录：<code>cd newBlog</code>；然后依次键入下列命令<strong>[1]</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\">npm install</div><div class=\"line\">npm install hexo -server --save</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>出现各种问题，无法安装<em>hexo</em>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ERR! System Windows_NT 6.1.7601</div><div class=\"line\">npm ERR! command &quot;c:\\\\Program Files\\\\nodejs\\\\node.exe&quot; &quot;c:\\\\Program Files\\\\nodej</div><div class=\"line\">s\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;install&quot;</div><div class=\"line\">npm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat</div><div class=\"line\">npm ERR! node -v v0.10.28</div><div class=\"line\">npm ERR! npm -v 1.4.9</div><div class=\"line\">npm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package</div><div class=\"line\">npm ERR! code EPERM</div><div class=\"line\">npm ERR! errno 50</div><div class=\"line\">npm ERR! stack Error: EPERM, unlink &apos;C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i</div><div class=\"line\">nherits\\2.0.1\\package&apos;</div><div class=\"line\">npm http 200 https://registry.npmjs.org/qs</div></pre></td></tr></table></figure></p>\n<p>找到解决方案，依次键入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config get registry</div><div class=\"line\">npm cache clean</div><div class=\"line\">npm install express</div></pre></td></tr></table></figure></p>\n<p>问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；</p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>执行<code>hexo clean</code>,出现下列问题：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png\" alt=\"\"><br>根据提示键入命令安装：<br><code>npm rebuild node-sass</code><br>安装过程出现各种<code>npm error，gyp error</code>，在查找问题过程中，出错信息提示：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png\" alt=\"\"></p>\n<p>那就新环境下安装<strong>Python！</strong>，忘安装了..<br>至此，问题全部解决，可以愉快的写博客了！</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p>1.<a href=\"http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"external\">Hexo博客多电脑同步及更换电脑后处理方式</a><br>2.<a href=\"http://www.rvclient.com/2016/05/21/hexo-everywhere/\" target=\"_blank\" rel=\"external\">在不同的电脑维护Hexo和写作</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。<br>","more":"</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：</p>\n<ul>\n<li>master分支：存放博客部署的静态文件(也就是public文件夹下的内容)</li>\n<li>hexo分支：存放博客源文件，配置文件等</li>\n</ul>\n<p>在新环境(Windows)下安装配置<em>Git，Node.js，Python</em>;Python建议下载2.7版本，安装好后别忘了配置环境变量。<br>提供下载链接：</p>\n<ul>\n<li><a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">Git</a></li>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"external\">Python</a></li>\n</ul>\n<h2 id=\"新环境部署\"><a href=\"#新环境部署\" class=\"headerlink\" title=\"新环境部署\"></a>新环境部署</h2><p>首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行<strong>Git Bash Here,</strong>然后克隆你的远程仓库，也就是hexo分支上的内容；<br><code>git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog</code></p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>出现clone失败报错（Filename too long）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GitHub.IO.ProcessException: fatal: unable to stat &apos;plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class&apos;: Filename too long</div></pre></td></tr></table></figure></p>\n<p>后面各种找解决方法，终于找到一个靠谱的方案: <a href=\"http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows\" target=\"_blank\" rel=\"external\">Solution</a>，原因也解释的很清楚；<br>在Bash中键入命令:<code>git config --system core.longpaths true</code>; 问题解决。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>进入博客根目录：<code>cd newBlog</code>；然后依次键入下列命令<strong>[1]</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\">npm install</div><div class=\"line\">npm install hexo -server --save</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>出现各种问题，无法安装<em>hexo</em>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ERR! System Windows_NT 6.1.7601</div><div class=\"line\">npm ERR! command &quot;c:\\\\Program Files\\\\nodejs\\\\node.exe&quot; &quot;c:\\\\Program Files\\\\nodej</div><div class=\"line\">s\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;install&quot;</div><div class=\"line\">npm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat</div><div class=\"line\">npm ERR! node -v v0.10.28</div><div class=\"line\">npm ERR! npm -v 1.4.9</div><div class=\"line\">npm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package</div><div class=\"line\">npm ERR! code EPERM</div><div class=\"line\">npm ERR! errno 50</div><div class=\"line\">npm ERR! stack Error: EPERM, unlink &apos;C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i</div><div class=\"line\">nherits\\2.0.1\\package&apos;</div><div class=\"line\">npm http 200 https://registry.npmjs.org/qs</div></pre></td></tr></table></figure></p>\n<p>找到解决方案，依次键入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config get registry</div><div class=\"line\">npm cache clean</div><div class=\"line\">npm install express</div></pre></td></tr></table></figure></p>\n<p>问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；</p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>执行<code>hexo clean</code>,出现下列问题：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png\" alt=\"\"><br>根据提示键入命令安装：<br><code>npm rebuild node-sass</code><br>安装过程出现各种<code>npm error，gyp error</code>，在查找问题过程中，出错信息提示：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png\" alt=\"\"></p>\n<p>那就新环境下安装<strong>Python！</strong>，忘安装了..<br>至此，问题全部解决，可以愉快的写博客了！</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p>1.<a href=\"http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"external\">Hexo博客多电脑同步及更换电脑后处理方式</a><br>2.<a href=\"http://www.rvclient.com/2016/05/21/hexo-everywhere/\" target=\"_blank\" rel=\"external\">在不同的电脑维护Hexo和写作</a></p>"},{"title":"求解子数组之和的最大值及相应的子数组","date":"2017-04-27T14:42:30.000Z","copyright":true,"_content":"参加了CVTE的2017实习生招聘在线笔试，最后一道编程题，写出了思路，但是无奈时间不太够，没有把代码完全写出来，现趁着有时间把思路整理一下，把实现代码写出来，也是一个不错的总结，也让我对DP有了更好的理解。网上搜索，发现这道题是《编程之美》中的一道题，所以也得出一个结论，这本书也是找工作实习必刷的大菜。\n\n# 题目描述\n有N个元素的整型数组arr，有正有负，数组中连续一个或多个元素组成一个子数组，这个数组当然有很多子数组，求子数组之和的最大值及相应的子数组。\n例如：输入[0，-2，3，5，-1，2]应返回7和[3,5,-1]，输入[-9，-2，-3，-5，-3]应返回-2，[-2];\n要求设计一个o(n)的算法求解。\n<!-- more -->\n\n# 问题分析\n如果是用基本方法，找出所有的子数组，然后求和，取最大值，时间复杂度必然超过o(n),由于有子问题具有重叠性，可以考虑用 **动态规划** 求解，下面我就一步步分析，先由子数组之和的最大值分析求解引出，然后在求解子数组的始末下标，得到子数组。\n\n# 求解子数组之和的最大值\n考虑用DP求解，从后往前分析，考虑 **最后一个元素** arr[n-1]与最大子数组的关系，有下面三种情况(相应的3个子问题)：\n1. arr[n-1]单独构成最大子数组\n2. 最大子数组以arr[n-1]结尾\n3. 最大子数组跟arr[n-1]没有关系，最大子数组在arr[0--n-2]之间，转换为考虑元素arr[n-2]\n\n现假设：\n- 以arr[n-1]为结尾的最大子数组和为End[n-1]\n- 在[0--n-1]范围内最大的子数组和为All[n-1]\n\n则有：\n- 子问题1，对应arr[n-1]\n- 子问题2，对应End[n-1],有关系End[n-1]= max{End[n-2]+arr[n-1], arr[n-1]};\n- 子问题3，对应All[n-2]\n\n则有: **All[n-1] = max(arr[n-1], End[n-1], All[n-2]); n>1**\n从后往前考虑，**初始化情况为：End[0]=All[0]=arr[0]; n=1；**\n\n则根据分析，有 **状态转移方程：**\n**All[i] = max{arr[i],End[i-1]+arr[i],All[i-1]}**\n给出代码：\n\n## 基础代码\n```C++\n#define max(a,b) (a>b ? a : b)\nint Maxsum_dp(int *arr, int size)\n{\n  int End[30] = {-INF};\n  int All[30] = {-INF}；\n  End[0] = All[0] = arr[0];//初始化\n  for (int i = 1; i< size; i++)\n  {\n    End[i]= max(End[i-1]+arr[i],arr[i]);//此处的理解：只是将状态转移方程分成两部分，说明End[n-2]为一个负数时，返回arr[n-1]\n    All[i]= max(End[i],All[i-1]);\n  }\n\n return All[size-1];\n}\n\n```\n\n从上述代码中分析，只要我们从头遍历数组，累加求和，如果累加求和小于0（对应End[i-1]）,则从当前元素重新开始计数，\n否则就一直累加，求其中的最大值即可。\n\n## 扩展版代码\n```c++\nint Maxsum_ultimate(int * arr, int size)\n{\n    int maxSum = -INF;\n    int sum = 0;\n    for(int i = 0; i < size; ++i)\n    {\n        if(sum < 0)\n        {\n            sum = arr[i];\n        }else\n        {\n            sum += arr[i];\n        }\n        if(sum > maxSum)\n        {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n}\n```\n# 求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\n\n分析：从扩展版代码中，可以知道，每当 当前子数组的和（sum）小于0时，便是新一轮子数组的开始；每当更新最大和（maxSum）时，便对应可能的结束下标，**此时** 只要用本轮的起始和结束位置更新对应的最大子数组的始末位置即可，直到程序结束，最大子数组的始末位置即被记录下来。\n\n```c++\nvoid Maxsum_location(int * arr, int size, int & start, int & end)\n{\n    int maxSum = -INF;\n    int sum = 0;\n    int substart = start = 0;  /* substart记录每次当前起始位置 */\n    for(int i = 0; i < size; ++i)\n    {\n        if(sum < 0)\n        {\n            sum = arr[i];\n            substart = i;     /* 记录当前的起始位置 */\n        }else\n        {\n            sum += arr[i];\n        }\n        if(sum > maxSum)\n        {\n            maxSum = sum;\n            start = substart; /* 记录并更新最大子数组起始位置 */\n            end = i;\n        }\n    }\n}\n\n```\n# 参考博文\n [最大子数组和](http://www.ahathinking.com/archives/120.html)\n [三种算法求解一个数组的子数组最大和](http://www.cnblogs.com/xkfz007/archive/2012/05/17/2506299.html)\n","source":"_posts/求解子数组之和的最大值及相应的子数组.md","raw":"---\ntitle: 求解子数组之和的最大值及相应的子数组\ndate: 2017-04-27 22:42:30\ncategories: 笔试面试\ntags: [算法,实习,Dynamic Programming]\ncopyright: true\n---\n参加了CVTE的2017实习生招聘在线笔试，最后一道编程题，写出了思路，但是无奈时间不太够，没有把代码完全写出来，现趁着有时间把思路整理一下，把实现代码写出来，也是一个不错的总结，也让我对DP有了更好的理解。网上搜索，发现这道题是《编程之美》中的一道题，所以也得出一个结论，这本书也是找工作实习必刷的大菜。\n\n# 题目描述\n有N个元素的整型数组arr，有正有负，数组中连续一个或多个元素组成一个子数组，这个数组当然有很多子数组，求子数组之和的最大值及相应的子数组。\n例如：输入[0，-2，3，5，-1，2]应返回7和[3,5,-1]，输入[-9，-2，-3，-5，-3]应返回-2，[-2];\n要求设计一个o(n)的算法求解。\n<!-- more -->\n\n# 问题分析\n如果是用基本方法，找出所有的子数组，然后求和，取最大值，时间复杂度必然超过o(n),由于有子问题具有重叠性，可以考虑用 **动态规划** 求解，下面我就一步步分析，先由子数组之和的最大值分析求解引出，然后在求解子数组的始末下标，得到子数组。\n\n# 求解子数组之和的最大值\n考虑用DP求解，从后往前分析，考虑 **最后一个元素** arr[n-1]与最大子数组的关系，有下面三种情况(相应的3个子问题)：\n1. arr[n-1]单独构成最大子数组\n2. 最大子数组以arr[n-1]结尾\n3. 最大子数组跟arr[n-1]没有关系，最大子数组在arr[0--n-2]之间，转换为考虑元素arr[n-2]\n\n现假设：\n- 以arr[n-1]为结尾的最大子数组和为End[n-1]\n- 在[0--n-1]范围内最大的子数组和为All[n-1]\n\n则有：\n- 子问题1，对应arr[n-1]\n- 子问题2，对应End[n-1],有关系End[n-1]= max{End[n-2]+arr[n-1], arr[n-1]};\n- 子问题3，对应All[n-2]\n\n则有: **All[n-1] = max(arr[n-1], End[n-1], All[n-2]); n>1**\n从后往前考虑，**初始化情况为：End[0]=All[0]=arr[0]; n=1；**\n\n则根据分析，有 **状态转移方程：**\n**All[i] = max{arr[i],End[i-1]+arr[i],All[i-1]}**\n给出代码：\n\n## 基础代码\n```C++\n#define max(a,b) (a>b ? a : b)\nint Maxsum_dp(int *arr, int size)\n{\n  int End[30] = {-INF};\n  int All[30] = {-INF}；\n  End[0] = All[0] = arr[0];//初始化\n  for (int i = 1; i< size; i++)\n  {\n    End[i]= max(End[i-1]+arr[i],arr[i]);//此处的理解：只是将状态转移方程分成两部分，说明End[n-2]为一个负数时，返回arr[n-1]\n    All[i]= max(End[i],All[i-1]);\n  }\n\n return All[size-1];\n}\n\n```\n\n从上述代码中分析，只要我们从头遍历数组，累加求和，如果累加求和小于0（对应End[i-1]）,则从当前元素重新开始计数，\n否则就一直累加，求其中的最大值即可。\n\n## 扩展版代码\n```c++\nint Maxsum_ultimate(int * arr, int size)\n{\n    int maxSum = -INF;\n    int sum = 0;\n    for(int i = 0; i < size; ++i)\n    {\n        if(sum < 0)\n        {\n            sum = arr[i];\n        }else\n        {\n            sum += arr[i];\n        }\n        if(sum > maxSum)\n        {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n}\n```\n# 求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\n\n分析：从扩展版代码中，可以知道，每当 当前子数组的和（sum）小于0时，便是新一轮子数组的开始；每当更新最大和（maxSum）时，便对应可能的结束下标，**此时** 只要用本轮的起始和结束位置更新对应的最大子数组的始末位置即可，直到程序结束，最大子数组的始末位置即被记录下来。\n\n```c++\nvoid Maxsum_location(int * arr, int size, int & start, int & end)\n{\n    int maxSum = -INF;\n    int sum = 0;\n    int substart = start = 0;  /* substart记录每次当前起始位置 */\n    for(int i = 0; i < size; ++i)\n    {\n        if(sum < 0)\n        {\n            sum = arr[i];\n            substart = i;     /* 记录当前的起始位置 */\n        }else\n        {\n            sum += arr[i];\n        }\n        if(sum > maxSum)\n        {\n            maxSum = sum;\n            start = substart; /* 记录并更新最大子数组起始位置 */\n            end = i;\n        }\n    }\n}\n\n```\n# 参考博文\n [最大子数组和](http://www.ahathinking.com/archives/120.html)\n [三种算法求解一个数组的子数组最大和](http://www.cnblogs.com/xkfz007/archive/2012/05/17/2506299.html)\n","slug":"求解子数组之和的最大值及相应的子数组","published":1,"updated":"2017-06-25T12:51:09.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c9b00214ov14n80e0dt","content":"<p>参加了CVTE的2017实习生招聘在线笔试，最后一道编程题，写出了思路，但是无奈时间不太够，没有把代码完全写出来，现趁着有时间把思路整理一下，把实现代码写出来，也是一个不错的总结，也让我对DP有了更好的理解。网上搜索，发现这道题是《编程之美》中的一道题，所以也得出一个结论，这本书也是找工作实习必刷的大菜。</p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>有N个元素的整型数组arr，有正有负，数组中连续一个或多个元素组成一个子数组，这个数组当然有很多子数组，求子数组之和的最大值及相应的子数组。<br>例如：输入[0，-2，3，5，-1，2]应返回7和[3,5,-1]，输入[-9，-2，-3，-5，-3]应返回-2，[-2];<br>要求设计一个o(n)的算法求解。<br><a id=\"more\"></a></p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>如果是用基本方法，找出所有的子数组，然后求和，取最大值，时间复杂度必然超过o(n),由于有子问题具有重叠性，可以考虑用 <strong>动态规划</strong> 求解，下面我就一步步分析，先由子数组之和的最大值分析求解引出，然后在求解子数组的始末下标，得到子数组。</p>\n<h1 id=\"求解子数组之和的最大值\"><a href=\"#求解子数组之和的最大值\" class=\"headerlink\" title=\"求解子数组之和的最大值\"></a>求解子数组之和的最大值</h1><p>考虑用DP求解，从后往前分析，考虑 <strong>最后一个元素</strong> arr[n-1]与最大子数组的关系，有下面三种情况(相应的3个子问题)：</p>\n<ol>\n<li>arr[n-1]单独构成最大子数组</li>\n<li>最大子数组以arr[n-1]结尾</li>\n<li>最大子数组跟arr[n-1]没有关系，最大子数组在arr[0–n-2]之间，转换为考虑元素arr[n-2]</li>\n</ol>\n<p>现假设：</p>\n<ul>\n<li>以arr[n-1]为结尾的最大子数组和为End[n-1]</li>\n<li>在[0–n-1]范围内最大的子数组和为All[n-1]</li>\n</ul>\n<p>则有：</p>\n<ul>\n<li>子问题1，对应arr[n-1]</li>\n<li>子问题2，对应End[n-1],有关系End[n-1]= max{End[n-2]+arr[n-1], arr[n-1]};</li>\n<li>子问题3，对应All[n-2]</li>\n</ul>\n<p>则有: <strong>All[n-1] = max(arr[n-1], End[n-1], All[n-2]); n&gt;1</strong><br>从后往前考虑，<strong>初始化情况为：End[0]=All[0]=arr[0]; n=1；</strong></p>\n<p>则根据分析，有 <strong>状态转移方程：</strong><br><strong>All[i] = max{arr[i],End[i-1]+arr[i],All[i-1]}</strong><br>给出代码：</p>\n<h2 id=\"基础代码\"><a href=\"#基础代码\" class=\"headerlink\" title=\"基础代码\"></a>基础代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a,b) (a&gt;b ? a : b)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Maxsum_dp</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> End[<span class=\"number\">30</span>] = &#123;-INF&#125;;</div><div class=\"line\">  <span class=\"keyword\">int</span> All[<span class=\"number\">30</span>] = &#123;-INF&#125;；</div><div class=\"line\">  End[<span class=\"number\">0</span>] = All[<span class=\"number\">0</span>] = arr[<span class=\"number\">0</span>];<span class=\"comment\">//初始化</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt; size; i++)</div><div class=\"line\">  &#123;</div><div class=\"line\">    End[i]= max(End[i<span class=\"number\">-1</span>]+arr[i],arr[i]);<span class=\"comment\">//此处的理解：只是将状态转移方程分成两部分，说明End[n-2]为一个负数时，返回arr[n-1]</span></div><div class=\"line\">    All[i]= max(End[i],All[i<span class=\"number\">-1</span>]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">return</span> All[size<span class=\"number\">-1</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上述代码中分析，只要我们从头遍历数组，累加求和，如果累加求和小于0（对应End[i-1]）,则从当前元素重新开始计数，<br>否则就一直累加，求其中的最大值即可。</p>\n<h2 id=\"扩展版代码\"><a href=\"#扩展版代码\" class=\"headerlink\" title=\"扩展版代码\"></a>扩展版代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Maxsum_ultimate</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxSum = -INF;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sum = arr[i];</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            sum += arr[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &gt; maxSum)</div><div class=\"line\">        &#123;</div><div class=\"line\">            maxSum = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> maxSum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\"><a href=\"#求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\" class=\"headerlink\" title=\"求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\"></a>求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置</h1><p>分析：从扩展版代码中，可以知道，每当 当前子数组的和（sum）小于0时，便是新一轮子数组的开始；每当更新最大和（maxSum）时，便对应可能的结束下标，<strong>此时</strong> 只要用本轮的起始和结束位置更新对应的最大子数组的始末位置即可，直到程序结束，最大子数组的始末位置即被记录下来。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Maxsum_location</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> &amp; start, <span class=\"keyword\">int</span> &amp; end)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxSum = -INF;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> substart = start = <span class=\"number\">0</span>;  <span class=\"comment\">/* substart记录每次当前起始位置 */</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sum = arr[i];</div><div class=\"line\">            substart = i;     <span class=\"comment\">/* 记录当前的起始位置 */</span></div><div class=\"line\">        &#125;<span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            sum += arr[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &gt; maxSum)</div><div class=\"line\">        &#123;</div><div class=\"line\">            maxSum = sum;</div><div class=\"line\">            start = substart; <span class=\"comment\">/* 记录并更新最大子数组起始位置 */</span></div><div class=\"line\">            end = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p> <a href=\"http://www.ahathinking.com/archives/120.html\" target=\"_blank\" rel=\"external\">最大子数组和</a><br> <a href=\"http://www.cnblogs.com/xkfz007/archive/2012/05/17/2506299.html\" target=\"_blank\" rel=\"external\">三种算法求解一个数组的子数组最大和</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>参加了CVTE的2017实习生招聘在线笔试，最后一道编程题，写出了思路，但是无奈时间不太够，没有把代码完全写出来，现趁着有时间把思路整理一下，把实现代码写出来，也是一个不错的总结，也让我对DP有了更好的理解。网上搜索，发现这道题是《编程之美》中的一道题，所以也得出一个结论，这本书也是找工作实习必刷的大菜。</p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>有N个元素的整型数组arr，有正有负，数组中连续一个或多个元素组成一个子数组，这个数组当然有很多子数组，求子数组之和的最大值及相应的子数组。<br>例如：输入[0，-2，3，5，-1，2]应返回7和[3,5,-1]，输入[-9，-2，-3，-5，-3]应返回-2，[-2];<br>要求设计一个o(n)的算法求解。<br>","more":"</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>如果是用基本方法，找出所有的子数组，然后求和，取最大值，时间复杂度必然超过o(n),由于有子问题具有重叠性，可以考虑用 <strong>动态规划</strong> 求解，下面我就一步步分析，先由子数组之和的最大值分析求解引出，然后在求解子数组的始末下标，得到子数组。</p>\n<h1 id=\"求解子数组之和的最大值\"><a href=\"#求解子数组之和的最大值\" class=\"headerlink\" title=\"求解子数组之和的最大值\"></a>求解子数组之和的最大值</h1><p>考虑用DP求解，从后往前分析，考虑 <strong>最后一个元素</strong> arr[n-1]与最大子数组的关系，有下面三种情况(相应的3个子问题)：</p>\n<ol>\n<li>arr[n-1]单独构成最大子数组</li>\n<li>最大子数组以arr[n-1]结尾</li>\n<li>最大子数组跟arr[n-1]没有关系，最大子数组在arr[0–n-2]之间，转换为考虑元素arr[n-2]</li>\n</ol>\n<p>现假设：</p>\n<ul>\n<li>以arr[n-1]为结尾的最大子数组和为End[n-1]</li>\n<li>在[0–n-1]范围内最大的子数组和为All[n-1]</li>\n</ul>\n<p>则有：</p>\n<ul>\n<li>子问题1，对应arr[n-1]</li>\n<li>子问题2，对应End[n-1],有关系End[n-1]= max{End[n-2]+arr[n-1], arr[n-1]};</li>\n<li>子问题3，对应All[n-2]</li>\n</ul>\n<p>则有: <strong>All[n-1] = max(arr[n-1], End[n-1], All[n-2]); n&gt;1</strong><br>从后往前考虑，<strong>初始化情况为：End[0]=All[0]=arr[0]; n=1；</strong></p>\n<p>则根据分析，有 <strong>状态转移方程：</strong><br><strong>All[i] = max{arr[i],End[i-1]+arr[i],All[i-1]}</strong><br>给出代码：</p>\n<h2 id=\"基础代码\"><a href=\"#基础代码\" class=\"headerlink\" title=\"基础代码\"></a>基础代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a,b) (a&gt;b ? a : b)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Maxsum_dp</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> End[<span class=\"number\">30</span>] = &#123;-INF&#125;;</div><div class=\"line\">  <span class=\"keyword\">int</span> All[<span class=\"number\">30</span>] = &#123;-INF&#125;；</div><div class=\"line\">  End[<span class=\"number\">0</span>] = All[<span class=\"number\">0</span>] = arr[<span class=\"number\">0</span>];<span class=\"comment\">//初始化</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt; size; i++)</div><div class=\"line\">  &#123;</div><div class=\"line\">    End[i]= max(End[i<span class=\"number\">-1</span>]+arr[i],arr[i]);<span class=\"comment\">//此处的理解：只是将状态转移方程分成两部分，说明End[n-2]为一个负数时，返回arr[n-1]</span></div><div class=\"line\">    All[i]= max(End[i],All[i<span class=\"number\">-1</span>]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">return</span> All[size<span class=\"number\">-1</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上述代码中分析，只要我们从头遍历数组，累加求和，如果累加求和小于0（对应End[i-1]）,则从当前元素重新开始计数，<br>否则就一直累加，求其中的最大值即可。</p>\n<h2 id=\"扩展版代码\"><a href=\"#扩展版代码\" class=\"headerlink\" title=\"扩展版代码\"></a>扩展版代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Maxsum_ultimate</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxSum = -INF;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sum = arr[i];</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            sum += arr[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &gt; maxSum)</div><div class=\"line\">        &#123;</div><div class=\"line\">            maxSum = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> maxSum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\"><a href=\"#求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\" class=\"headerlink\" title=\"求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\"></a>求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置</h1><p>分析：从扩展版代码中，可以知道，每当 当前子数组的和（sum）小于0时，便是新一轮子数组的开始；每当更新最大和（maxSum）时，便对应可能的结束下标，<strong>此时</strong> 只要用本轮的起始和结束位置更新对应的最大子数组的始末位置即可，直到程序结束，最大子数组的始末位置即被记录下来。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Maxsum_location</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> &amp; start, <span class=\"keyword\">int</span> &amp; end)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxSum = -INF;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> substart = start = <span class=\"number\">0</span>;  <span class=\"comment\">/* substart记录每次当前起始位置 */</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sum = arr[i];</div><div class=\"line\">            substart = i;     <span class=\"comment\">/* 记录当前的起始位置 */</span></div><div class=\"line\">        &#125;<span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            sum += arr[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &gt; maxSum)</div><div class=\"line\">        &#123;</div><div class=\"line\">            maxSum = sum;</div><div class=\"line\">            start = substart; <span class=\"comment\">/* 记录并更新最大子数组起始位置 */</span></div><div class=\"line\">            end = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p> <a href=\"http://www.ahathinking.com/archives/120.html\" target=\"_blank\" rel=\"external\">最大子数组和</a><br> <a href=\"http://www.cnblogs.com/xkfz007/archive/2012/05/17/2506299.html\" target=\"_blank\" rel=\"external\">三种算法求解一个数组的子数组最大和</a></p>"},{"title":"腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点","date":"2017-04-07T06:57:31.000Z","copyright":true,"_content":"\n今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，\n第一道编程题做了一半，没完全写出来，现在有时间总结一下：\n题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；\n     如输入层数N=4，子节点11,13,15; 则输出:12\n     <!-- more -->\n# 分析\n解决这道题的关键，主要是要清晰的知道二叉排序树的性质：**左节点的值小于父节点的值，右节点值大于父节点的值。**\n当**N=4**时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg);\n可以知道有以下性质：\n1. 以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；\n2. 右子树一直往左走，可以找到右子树的最小值9，比根节点大1；\n3. 根节点的值是最左端的值和最右端的值之和的一半。\n\n我们可以这样找最大的公共父结点（可以用分治法）：\n1. 如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；\n2. 如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质*1 & 3*，得到新树的最右结点及根结点的值；\n3. 如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质*2 & 3*，得到新树的最左结点及根结点的值；\n4. 重复2.3步骤，直到出现1情况，结束。\n\n# 实现代码\n**实现方法1**是实现题目要求的，只输入层数**N**和**3**个子结点值，得到最大公共父结点；\n**实现方法2**是扩展的，具有更好的通用性，输入层数**N**、子结点个数**n**及子结点的值，得到最大公共父结点。\n\n## 实现方法1\n\n```java\npublic class  Main{\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt()) {\n\t\t\t// 树的高度\n\t\t\tint k = in.nextInt();\n\n\t\t\t// 最开始根节点的值\n\t\t\tint root = (int) Math.pow(2, k) / 2;\n\n\t\t\t// 最开始的最左叶子节点和最右叶子节点\n\t\t\tint leftNode = 1;\n\t\t\tint rightNode = (int) Math.pow(2, k) - 1;\n\n\t\t\t// 输入任意3叶子节点的值\n\t\t\tint node1 = in.nextInt();\n\t\t\tint node2 = in.nextInt();\n\t\t\tint node3 = in.nextInt();\n\n\t\t\tfor (int i = 1; i <= k; i++) {\n\t\t\t\t// 3个叶子节点全在根节点的左部,更新最右节点和根节点\n\t\t\t\tif (node1 < root && node2 < root && node3 < root) {\n\t\t\t\t\trightNode = root - 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t}\n\n\t\t\t\t// 3个叶子节点全在根节点的右部,更新最左节点和根节点\n\t\t\t\telse if (node1 > root && node2 > root && node3 > root) {\n\t\t\t\t\tleftNode = root + 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t}\n\n\t\t\t\t// 一大一小的情形下根节点即为最大公共父节点\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(root);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t}\n}\n```\n\n\n## 实现方法2\n\n```java\n/**\n * 改进版，输入层数N，节点数n，个数范围为：2-2^-1\n * 输出二叉排序树的公共父节点\n *\n */\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt()) {\n\t\t\t// 树的高度\n\t\t\tint N = in.nextInt();\n\n\t\t\t// 最开始根节点的值\n\t\t\tint root = (int) Math.pow(2, N) / 2;\n\n\t\t\t// 最开始的最左叶子节点和最右叶子节点\n\t\t\tint leftNode = 1;\n\t\t\tint rightNode = (int) Math.pow(2, N) - 1;\n\n\t\t\t// 输入任意n叶子节点的值\n\t\t\tint n = in.nextInt();\n\t\t\tint[] arrNodes = new int[n];\n\t\t\tfor (int i = 0; i < arrNodes.length; i++) {\n\t\t\t\tarrNodes[i] = in.nextInt();\n\t\t\t}\n\n\t\t\t// 从上到下按层次遍历N层\n\t\t\tfor (int i = 1; i <= N; i++) {\n\t\t\t\tint count = 0;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\n\t\t\t\t\t// 都在左边，count+1；\n\t\t\t\t\tif (arrNodes[j] < root) {\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 都在右边，count+2\n\t\t\t\t\telse if (arrNodes[j] > root) {\n\t\t\t\t\t\tcount += 2;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 其中有一个是根节点\n\t\t\t\t\telse {\n\t\t\t\t\t\tcount += 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * count的值n或者2n或者两者之间，\n\t\t\t\t * n代表都在左边，更新最右节点和根节点\n\t\t\t\t * 2n代表都在右边，更新最左节点和根节点\n\t\t\t\t * 两者之间代表，分布在根节点两边，直接返回根节点\n\t\t\t\t */\n\t\t\t\tif (count == n) {\n\t\t\t\t\trightNode = root - 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t} else if (count == 2 * n) {\n\n\t\t\t\t\tleftNode = root + 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(root);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tin.close();\n\t}\n}\n\n```\n\n# 测试结果\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png)\n\n# 参考博文\n1. [f91og的博客](http://www.cnblogs.com/f91og/p/6663633.html)\n","source":"_posts/腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点.md","raw":"---\ntitle: 腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点\ndate: 2017-04-07 14:57:31\ncategories: 笔试面试\ntags: [算法,实习]\ncopyright: true\n---\n\n今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，\n第一道编程题做了一半，没完全写出来，现在有时间总结一下：\n题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；\n     如输入层数N=4，子节点11,13,15; 则输出:12\n     <!-- more -->\n# 分析\n解决这道题的关键，主要是要清晰的知道二叉排序树的性质：**左节点的值小于父节点的值，右节点值大于父节点的值。**\n当**N=4**时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg);\n可以知道有以下性质：\n1. 以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；\n2. 右子树一直往左走，可以找到右子树的最小值9，比根节点大1；\n3. 根节点的值是最左端的值和最右端的值之和的一半。\n\n我们可以这样找最大的公共父结点（可以用分治法）：\n1. 如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；\n2. 如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质*1 & 3*，得到新树的最右结点及根结点的值；\n3. 如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质*2 & 3*，得到新树的最左结点及根结点的值；\n4. 重复2.3步骤，直到出现1情况，结束。\n\n# 实现代码\n**实现方法1**是实现题目要求的，只输入层数**N**和**3**个子结点值，得到最大公共父结点；\n**实现方法2**是扩展的，具有更好的通用性，输入层数**N**、子结点个数**n**及子结点的值，得到最大公共父结点。\n\n## 实现方法1\n\n```java\npublic class  Main{\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt()) {\n\t\t\t// 树的高度\n\t\t\tint k = in.nextInt();\n\n\t\t\t// 最开始根节点的值\n\t\t\tint root = (int) Math.pow(2, k) / 2;\n\n\t\t\t// 最开始的最左叶子节点和最右叶子节点\n\t\t\tint leftNode = 1;\n\t\t\tint rightNode = (int) Math.pow(2, k) - 1;\n\n\t\t\t// 输入任意3叶子节点的值\n\t\t\tint node1 = in.nextInt();\n\t\t\tint node2 = in.nextInt();\n\t\t\tint node3 = in.nextInt();\n\n\t\t\tfor (int i = 1; i <= k; i++) {\n\t\t\t\t// 3个叶子节点全在根节点的左部,更新最右节点和根节点\n\t\t\t\tif (node1 < root && node2 < root && node3 < root) {\n\t\t\t\t\trightNode = root - 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t}\n\n\t\t\t\t// 3个叶子节点全在根节点的右部,更新最左节点和根节点\n\t\t\t\telse if (node1 > root && node2 > root && node3 > root) {\n\t\t\t\t\tleftNode = root + 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t}\n\n\t\t\t\t// 一大一小的情形下根节点即为最大公共父节点\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(root);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t}\n}\n```\n\n\n## 实现方法2\n\n```java\n/**\n * 改进版，输入层数N，节点数n，个数范围为：2-2^-1\n * 输出二叉排序树的公共父节点\n *\n */\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt()) {\n\t\t\t// 树的高度\n\t\t\tint N = in.nextInt();\n\n\t\t\t// 最开始根节点的值\n\t\t\tint root = (int) Math.pow(2, N) / 2;\n\n\t\t\t// 最开始的最左叶子节点和最右叶子节点\n\t\t\tint leftNode = 1;\n\t\t\tint rightNode = (int) Math.pow(2, N) - 1;\n\n\t\t\t// 输入任意n叶子节点的值\n\t\t\tint n = in.nextInt();\n\t\t\tint[] arrNodes = new int[n];\n\t\t\tfor (int i = 0; i < arrNodes.length; i++) {\n\t\t\t\tarrNodes[i] = in.nextInt();\n\t\t\t}\n\n\t\t\t// 从上到下按层次遍历N层\n\t\t\tfor (int i = 1; i <= N; i++) {\n\t\t\t\tint count = 0;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\n\t\t\t\t\t// 都在左边，count+1；\n\t\t\t\t\tif (arrNodes[j] < root) {\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 都在右边，count+2\n\t\t\t\t\telse if (arrNodes[j] > root) {\n\t\t\t\t\t\tcount += 2;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 其中有一个是根节点\n\t\t\t\t\telse {\n\t\t\t\t\t\tcount += 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * count的值n或者2n或者两者之间，\n\t\t\t\t * n代表都在左边，更新最右节点和根节点\n\t\t\t\t * 2n代表都在右边，更新最左节点和根节点\n\t\t\t\t * 两者之间代表，分布在根节点两边，直接返回根节点\n\t\t\t\t */\n\t\t\t\tif (count == n) {\n\t\t\t\t\trightNode = root - 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t} else if (count == 2 * n) {\n\n\t\t\t\t\tleftNode = root + 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(root);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tin.close();\n\t}\n}\n\n```\n\n# 测试结果\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png)\n\n# 参考博文\n1. [f91og的博客](http://www.cnblogs.com/f91og/p/6663633.html)\n","slug":"腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点","published":1,"updated":"2017-06-13T11:45:45.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c9f00244ov1rbx620wc","content":"<p>今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，<br>第一道编程题做了一半，没完全写出来，现在有时间总结一下：<br>题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；<br>     如输入层数N=4，子节点11,13,15; 则输出:12<br>     <a id=\"more\"></a></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>解决这道题的关键，主要是要清晰的知道二叉排序树的性质：<strong>左节点的值小于父节点的值，右节点值大于父节点的值。</strong><br>当<strong>N=4</strong>时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg\" alt=\"\">;<br>可以知道有以下性质：</p>\n<ol>\n<li>以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；</li>\n<li>右子树一直往左走，可以找到右子树的最小值9，比根节点大1；</li>\n<li>根节点的值是最左端的值和最右端的值之和的一半。</li>\n</ol>\n<p>我们可以这样找最大的公共父结点（可以用分治法）：</p>\n<ol>\n<li>如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；</li>\n<li>如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质<em>1 &amp; 3</em>，得到新树的最右结点及根结点的值；</li>\n<li>如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质<em>2 &amp; 3</em>，得到新树的最左结点及根结点的值；</li>\n<li>重复2.3步骤，直到出现1情况，结束。</li>\n</ol>\n<h1 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h1><p><strong>实现方法1</strong>是实现题目要求的，只输入层数<strong>N</strong>和<strong>3</strong>个子结点值，得到最大公共父结点；<br><strong>实现方法2</strong>是扩展的，具有更好的通用性，输入层数<strong>N</strong>、子结点个数<strong>n</strong>及子结点的值，得到最大公共父结点。</p>\n<h2 id=\"实现方法1\"><a href=\"#实现方法1\" class=\"headerlink\" title=\"实现方法1\"></a>实现方法1</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (in.hasNextInt()) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 树的高度</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> k = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始根节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> root = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, k) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始的最左叶子节点和最右叶子节点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> leftNode = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> rightNode = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, k) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 输入任意3叶子节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node1 = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node2 = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node3 = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 3个叶子节点全在根节点的左部,更新最右节点和根节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (node1 &lt; root &amp;&amp; node2 &lt; root &amp;&amp; node3 &lt; root) &#123;</div><div class=\"line\">\t\t\t\t\trightNode = root - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 3个叶子节点全在根节点的右部,更新最左节点和根节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node1 &gt; root &amp;&amp; node2 &gt; root &amp;&amp; node3 &gt; root) &#123;</div><div class=\"line\">\t\t\t\t\tleftNode = root + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 一大一小的情形下根节点即为最大公共父节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(root);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实现方法2\"><a href=\"#实现方法2\" class=\"headerlink\" title=\"实现方法2\"></a>实现方法2</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 改进版，输入层数N，节点数n，个数范围为：2-2^-1</div><div class=\"line\"> * 输出二叉排序树的公共父节点</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (in.hasNextInt()) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 树的高度</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> N = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始根节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> root = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, N) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始的最左叶子节点和最右叶子节点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> leftNode = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> rightNode = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, N) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 输入任意n叶子节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] arrNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrNodes.length; i++) &#123;</div><div class=\"line\">\t\t\t\tarrNodes[i] = in.nextInt();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 从上到下按层次遍历N层</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 都在左边，count+1；</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (arrNodes[j] &lt; root) &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 都在右边，count+2</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arrNodes[j] &gt; root) &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 其中有一个是根节点</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t\t\t * count的值n或者2n或者两者之间，</div><div class=\"line\">\t\t\t\t * n代表都在左边，更新最右节点和根节点</div><div class=\"line\">\t\t\t\t * 2n代表都在右边，更新最左节点和根节点</div><div class=\"line\">\t\t\t\t * 两者之间代表，分布在根节点两边，直接返回根节点</div><div class=\"line\">\t\t\t\t */</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (count == n) &#123;</div><div class=\"line\">\t\t\t\t\trightNode = root - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">2</span> * n) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tleftNode = root + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(root);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tin.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png\" alt=\"\"></p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><ol>\n<li><a href=\"http://www.cnblogs.com/f91og/p/6663633.html\" target=\"_blank\" rel=\"external\">f91og的博客</a></li>\n</ol>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，<br>第一道编程题做了一半，没完全写出来，现在有时间总结一下：<br>题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；<br>     如输入层数N=4，子节点11,13,15; 则输出:12<br>","more":"</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>解决这道题的关键，主要是要清晰的知道二叉排序树的性质：<strong>左节点的值小于父节点的值，右节点值大于父节点的值。</strong><br>当<strong>N=4</strong>时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg\" alt=\"\">;<br>可以知道有以下性质：</p>\n<ol>\n<li>以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；</li>\n<li>右子树一直往左走，可以找到右子树的最小值9，比根节点大1；</li>\n<li>根节点的值是最左端的值和最右端的值之和的一半。</li>\n</ol>\n<p>我们可以这样找最大的公共父结点（可以用分治法）：</p>\n<ol>\n<li>如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；</li>\n<li>如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质<em>1 &amp; 3</em>，得到新树的最右结点及根结点的值；</li>\n<li>如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质<em>2 &amp; 3</em>，得到新树的最左结点及根结点的值；</li>\n<li>重复2.3步骤，直到出现1情况，结束。</li>\n</ol>\n<h1 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h1><p><strong>实现方法1</strong>是实现题目要求的，只输入层数<strong>N</strong>和<strong>3</strong>个子结点值，得到最大公共父结点；<br><strong>实现方法2</strong>是扩展的，具有更好的通用性，输入层数<strong>N</strong>、子结点个数<strong>n</strong>及子结点的值，得到最大公共父结点。</p>\n<h2 id=\"实现方法1\"><a href=\"#实现方法1\" class=\"headerlink\" title=\"实现方法1\"></a>实现方法1</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (in.hasNextInt()) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 树的高度</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> k = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始根节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> root = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, k) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始的最左叶子节点和最右叶子节点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> leftNode = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> rightNode = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, k) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 输入任意3叶子节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node1 = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node2 = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node3 = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 3个叶子节点全在根节点的左部,更新最右节点和根节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (node1 &lt; root &amp;&amp; node2 &lt; root &amp;&amp; node3 &lt; root) &#123;</div><div class=\"line\">\t\t\t\t\trightNode = root - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 3个叶子节点全在根节点的右部,更新最左节点和根节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node1 &gt; root &amp;&amp; node2 &gt; root &amp;&amp; node3 &gt; root) &#123;</div><div class=\"line\">\t\t\t\t\tleftNode = root + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 一大一小的情形下根节点即为最大公共父节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(root);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实现方法2\"><a href=\"#实现方法2\" class=\"headerlink\" title=\"实现方法2\"></a>实现方法2</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 改进版，输入层数N，节点数n，个数范围为：2-2^-1</div><div class=\"line\"> * 输出二叉排序树的公共父节点</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (in.hasNextInt()) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 树的高度</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> N = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始根节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> root = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, N) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始的最左叶子节点和最右叶子节点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> leftNode = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> rightNode = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, N) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 输入任意n叶子节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] arrNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrNodes.length; i++) &#123;</div><div class=\"line\">\t\t\t\tarrNodes[i] = in.nextInt();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 从上到下按层次遍历N层</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 都在左边，count+1；</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (arrNodes[j] &lt; root) &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 都在右边，count+2</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arrNodes[j] &gt; root) &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 其中有一个是根节点</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t\t\t * count的值n或者2n或者两者之间，</div><div class=\"line\">\t\t\t\t * n代表都在左边，更新最右节点和根节点</div><div class=\"line\">\t\t\t\t * 2n代表都在右边，更新最左节点和根节点</div><div class=\"line\">\t\t\t\t * 两者之间代表，分布在根节点两边，直接返回根节点</div><div class=\"line\">\t\t\t\t */</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (count == n) &#123;</div><div class=\"line\">\t\t\t\t\trightNode = root - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">2</span> * n) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tleftNode = root + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(root);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tin.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png\" alt=\"\"></p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><ol>\n<li><a href=\"http://www.cnblogs.com/f91og/p/6663633.html\" target=\"_blank\" rel=\"external\">f91og的博客</a></li>\n</ol>"},{"title":"读《向死而生 - 我修的死亡学分》","copyright":true,"date":"2017-06-24T11:54:02.000Z","_content":"\n前几天花了零碎的时间看完了开复老师的书《修的死亡学分》，之前是因为看了开复老师关于此书的记录片：[筑梦者之李开复-《向死而生》](https://v.qq.com/x/page/e01581hmi3j.html),一直好奇像成功如开复，影响力大如开复这样的人，当人生可能走向尽头，会有怎样的感受与感悟，于是趁着京东图书大甩卖的时候也买了一本。\n<!-- more -->\n\n这本书主要是讲了开复老师在得癌症之后17个月的一些思考，以及战胜癌症后的心路历程。开复老师在反思了自己在得淋巴癌之前在自己一直坚持的“高效率、最有影响力”的准则，反而觉得这会给自己带来过大的压力，当身体有警告而没有正确对待，置之不理，最终可能出现大病。对于开复老师的一些感悟自己没经历过这些，确实也没太大的感悟，但文中阐述的一些观点我还是很赞同的，正如知乎上[沈千亿](https://www.zhihu.com/question/31693540)所讲:\n\n> 每一段他人的经历，对于一个成年且有独立思想的的人来说，都应该是一面观己观心的镜子，而不应该成为神龛或痰盂。\n\n# 对待未知不在掌控时的心态\n\n有时候最令人恐慌的是未知，且不在掌控，开复老师得知自己确诊淋巴癌时，尝试各种方法自救，刚开始的中药，能量疗法，葛森有机蔬菜疗法等比较盲目，后面和唐医生的聊天，医生套路似的安慰，然后推荐看此癌症的相关论文，开复老师开始自己研究病情，从研究这些学术论文开始，从茫然无知的恐慌，到了解病情，有了 **“令人振奋的曙光”**，如开复说：\n> 自己研究病情，就像自己坐在副驾驶，可以随时掌握路况。\n\n开复此时的兴奋在于了解了病情，有康复的希望，有了恢复的信心，而没有被癌症本身吓到。我没有这样的经历，不知道此时开复老师的心境，也是没有“心有戚戚焉”。但我倒觉得从这个过程中有最浅显的道理，对待未知不在掌控的情况，就是尽可能去了解，尽量减少未知，做到心中有数，然后不那么恐慌，然后再恢复那么点信心，然后再来点行动，或许就能找到令人振奋的曙光！\n\n# NESS管理法则\n\n在后面的叙述中，提到了四个八十分管理法则，是关乎健康的四件大事（NESS）：\n- 饮食（Nutrilon）\n- 运动（Exercise）\n- 睡眠（Sleep）\n- 减压（Stress reduction）\n\n> 影响健康的这几个因素都有相互作用的，爱吃美食，如果能用运动去平衡，那就无妨；运动不足、睡眠质量不好，那就设法减压、用清净饮食调节身心负荷。\n\n这个刷新了我的一个认识，我觉得很多时候一项没做好，后面一定会受到影响，无法互补，从整体到局部来看，小的变化看上去不会太影响整体，实际上本质就不同了，所以很多时候我会过渡担心，这项没做好，后面就会出现很大的问题，这也使我有时候过度纠结于细节，徒增很多压力。而对于健康来讲，这几个局部因素影响了健康这个整体，而实际上这几个因素是可以互补平衡的，当饮食不是很好时，可以通过睡眠来调节，不需要每一项都达到一百分，只需平均八十分就可以，掌握平衡大法则就好。\n\n# 面对焦虑的诀窍\n\n有在乎的事，就会有相应的压力，开复老师在书中给了五个面对焦虑的诀窍，分别是：\n1. 健康饮食：蔬菜、粗粮比垃圾食品更能舒缓心情。\n2. 少喝咖啡：过量咖啡会消耗血清素，使情绪更糟糕。\n3. **制定计划：面对任何事情，设法获取全部信息并制定相应的处理计划，胸有成竹，自然可以降低焦虑感。**\n4. 锻炼身体：运动可以释放内啡肽，有助于减压，保持头脑清醒。\n5. 心存感恩：常将世间种种可爱放在心上，保持积极、正向的心态。\n\n我觉得最重要的还是有处理计划，不恐慌，当暂时想不到处理方法时，去运动，出汗回来，再想想有没方法处理，如果还是有问题，还不如睡个觉醒来再想。\n\n# 最后想表达的\n\n> 健康、亲人、爱、事业构成的梦想，跟随内心、感受世界，这才是有意义的、非凡的人生。\n\n一个人要有这样一个梦想：**健康、亲人、爱、事业** 构成的梦想。健康确实很重要，特别是作为程序员，整天对着屏幕，坐着，很多时候处于亚健康状态，现在有时间还是去多健身吧，把一定的时间堆积在健身锻炼上面，养成一个习惯。\n","source":"_posts/读《向死而生-我修的死亡学分》.md","raw":"---\ntitle: 读《向死而生 - 我修的死亡学分》\ncopyright: true\ndate: 2017-06-24 19:54:02\ncategories: 读书笔记\ntags: thinking\n---\n\n前几天花了零碎的时间看完了开复老师的书《修的死亡学分》，之前是因为看了开复老师关于此书的记录片：[筑梦者之李开复-《向死而生》](https://v.qq.com/x/page/e01581hmi3j.html),一直好奇像成功如开复，影响力大如开复这样的人，当人生可能走向尽头，会有怎样的感受与感悟，于是趁着京东图书大甩卖的时候也买了一本。\n<!-- more -->\n\n这本书主要是讲了开复老师在得癌症之后17个月的一些思考，以及战胜癌症后的心路历程。开复老师在反思了自己在得淋巴癌之前在自己一直坚持的“高效率、最有影响力”的准则，反而觉得这会给自己带来过大的压力，当身体有警告而没有正确对待，置之不理，最终可能出现大病。对于开复老师的一些感悟自己没经历过这些，确实也没太大的感悟，但文中阐述的一些观点我还是很赞同的，正如知乎上[沈千亿](https://www.zhihu.com/question/31693540)所讲:\n\n> 每一段他人的经历，对于一个成年且有独立思想的的人来说，都应该是一面观己观心的镜子，而不应该成为神龛或痰盂。\n\n# 对待未知不在掌控时的心态\n\n有时候最令人恐慌的是未知，且不在掌控，开复老师得知自己确诊淋巴癌时，尝试各种方法自救，刚开始的中药，能量疗法，葛森有机蔬菜疗法等比较盲目，后面和唐医生的聊天，医生套路似的安慰，然后推荐看此癌症的相关论文，开复老师开始自己研究病情，从研究这些学术论文开始，从茫然无知的恐慌，到了解病情，有了 **“令人振奋的曙光”**，如开复说：\n> 自己研究病情，就像自己坐在副驾驶，可以随时掌握路况。\n\n开复此时的兴奋在于了解了病情，有康复的希望，有了恢复的信心，而没有被癌症本身吓到。我没有这样的经历，不知道此时开复老师的心境，也是没有“心有戚戚焉”。但我倒觉得从这个过程中有最浅显的道理，对待未知不在掌控的情况，就是尽可能去了解，尽量减少未知，做到心中有数，然后不那么恐慌，然后再恢复那么点信心，然后再来点行动，或许就能找到令人振奋的曙光！\n\n# NESS管理法则\n\n在后面的叙述中，提到了四个八十分管理法则，是关乎健康的四件大事（NESS）：\n- 饮食（Nutrilon）\n- 运动（Exercise）\n- 睡眠（Sleep）\n- 减压（Stress reduction）\n\n> 影响健康的这几个因素都有相互作用的，爱吃美食，如果能用运动去平衡，那就无妨；运动不足、睡眠质量不好，那就设法减压、用清净饮食调节身心负荷。\n\n这个刷新了我的一个认识，我觉得很多时候一项没做好，后面一定会受到影响，无法互补，从整体到局部来看，小的变化看上去不会太影响整体，实际上本质就不同了，所以很多时候我会过渡担心，这项没做好，后面就会出现很大的问题，这也使我有时候过度纠结于细节，徒增很多压力。而对于健康来讲，这几个局部因素影响了健康这个整体，而实际上这几个因素是可以互补平衡的，当饮食不是很好时，可以通过睡眠来调节，不需要每一项都达到一百分，只需平均八十分就可以，掌握平衡大法则就好。\n\n# 面对焦虑的诀窍\n\n有在乎的事，就会有相应的压力，开复老师在书中给了五个面对焦虑的诀窍，分别是：\n1. 健康饮食：蔬菜、粗粮比垃圾食品更能舒缓心情。\n2. 少喝咖啡：过量咖啡会消耗血清素，使情绪更糟糕。\n3. **制定计划：面对任何事情，设法获取全部信息并制定相应的处理计划，胸有成竹，自然可以降低焦虑感。**\n4. 锻炼身体：运动可以释放内啡肽，有助于减压，保持头脑清醒。\n5. 心存感恩：常将世间种种可爱放在心上，保持积极、正向的心态。\n\n我觉得最重要的还是有处理计划，不恐慌，当暂时想不到处理方法时，去运动，出汗回来，再想想有没方法处理，如果还是有问题，还不如睡个觉醒来再想。\n\n# 最后想表达的\n\n> 健康、亲人、爱、事业构成的梦想，跟随内心、感受世界，这才是有意义的、非凡的人生。\n\n一个人要有这样一个梦想：**健康、亲人、爱、事业** 构成的梦想。健康确实很重要，特别是作为程序员，整天对着屏幕，坐着，很多时候处于亚健康状态，现在有时间还是去多健身吧，把一定的时间堆积在健身锻炼上面，养成一个习惯。\n","slug":"读《向死而生-我修的死亡学分》","published":1,"updated":"2017-06-25T12:40:35.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c9j00274ov1p7p5229g","content":"<p>前几天花了零碎的时间看完了开复老师的书《修的死亡学分》，之前是因为看了开复老师关于此书的记录片：<a href=\"https://v.qq.com/x/page/e01581hmi3j.html\" target=\"_blank\" rel=\"external\">筑梦者之李开复-《向死而生》</a>,一直好奇像成功如开复，影响力大如开复这样的人，当人生可能走向尽头，会有怎样的感受与感悟，于是趁着京东图书大甩卖的时候也买了一本。<br><a id=\"more\"></a></p>\n<p>这本书主要是讲了开复老师在得癌症之后17个月的一些思考，以及战胜癌症后的心路历程。开复老师在反思了自己在得淋巴癌之前在自己一直坚持的“高效率、最有影响力”的准则，反而觉得这会给自己带来过大的压力，当身体有警告而没有正确对待，置之不理，最终可能出现大病。对于开复老师的一些感悟自己没经历过这些，确实也没太大的感悟，但文中阐述的一些观点我还是很赞同的，正如知乎上<a href=\"https://www.zhihu.com/question/31693540\" target=\"_blank\" rel=\"external\">沈千亿</a>所讲:</p>\n<blockquote>\n<p>每一段他人的经历，对于一个成年且有独立思想的的人来说，都应该是一面观己观心的镜子，而不应该成为神龛或痰盂。</p>\n</blockquote>\n<h1 id=\"对待未知不在掌控时的心态\"><a href=\"#对待未知不在掌控时的心态\" class=\"headerlink\" title=\"对待未知不在掌控时的心态\"></a>对待未知不在掌控时的心态</h1><p>有时候最令人恐慌的是未知，且不在掌控，开复老师得知自己确诊淋巴癌时，尝试各种方法自救，刚开始的中药，能量疗法，葛森有机蔬菜疗法等比较盲目，后面和唐医生的聊天，医生套路似的安慰，然后推荐看此癌症的相关论文，开复老师开始自己研究病情，从研究这些学术论文开始，从茫然无知的恐慌，到了解病情，有了 <strong>“令人振奋的曙光”</strong>，如开复说：</p>\n<blockquote>\n<p>自己研究病情，就像自己坐在副驾驶，可以随时掌握路况。</p>\n</blockquote>\n<p>开复此时的兴奋在于了解了病情，有康复的希望，有了恢复的信心，而没有被癌症本身吓到。我没有这样的经历，不知道此时开复老师的心境，也是没有“心有戚戚焉”。但我倒觉得从这个过程中有最浅显的道理，对待未知不在掌控的情况，就是尽可能去了解，尽量减少未知，做到心中有数，然后不那么恐慌，然后再恢复那么点信心，然后再来点行动，或许就能找到令人振奋的曙光！</p>\n<h1 id=\"NESS管理法则\"><a href=\"#NESS管理法则\" class=\"headerlink\" title=\"NESS管理法则\"></a>NESS管理法则</h1><p>在后面的叙述中，提到了四个八十分管理法则，是关乎健康的四件大事（NESS）：</p>\n<ul>\n<li>饮食（Nutrilon）</li>\n<li>运动（Exercise）</li>\n<li>睡眠（Sleep）</li>\n<li>减压（Stress reduction）</li>\n</ul>\n<blockquote>\n<p>影响健康的这几个因素都有相互作用的，爱吃美食，如果能用运动去平衡，那就无妨；运动不足、睡眠质量不好，那就设法减压、用清净饮食调节身心负荷。</p>\n</blockquote>\n<p>这个刷新了我的一个认识，我觉得很多时候一项没做好，后面一定会受到影响，无法互补，从整体到局部来看，小的变化看上去不会太影响整体，实际上本质就不同了，所以很多时候我会过渡担心，这项没做好，后面就会出现很大的问题，这也使我有时候过度纠结于细节，徒增很多压力。而对于健康来讲，这几个局部因素影响了健康这个整体，而实际上这几个因素是可以互补平衡的，当饮食不是很好时，可以通过睡眠来调节，不需要每一项都达到一百分，只需平均八十分就可以，掌握平衡大法则就好。</p>\n<h1 id=\"面对焦虑的诀窍\"><a href=\"#面对焦虑的诀窍\" class=\"headerlink\" title=\"面对焦虑的诀窍\"></a>面对焦虑的诀窍</h1><p>有在乎的事，就会有相应的压力，开复老师在书中给了五个面对焦虑的诀窍，分别是：</p>\n<ol>\n<li>健康饮食：蔬菜、粗粮比垃圾食品更能舒缓心情。</li>\n<li>少喝咖啡：过量咖啡会消耗血清素，使情绪更糟糕。</li>\n<li><strong>制定计划：面对任何事情，设法获取全部信息并制定相应的处理计划，胸有成竹，自然可以降低焦虑感。</strong></li>\n<li>锻炼身体：运动可以释放内啡肽，有助于减压，保持头脑清醒。</li>\n<li>心存感恩：常将世间种种可爱放在心上，保持积极、正向的心态。</li>\n</ol>\n<p>我觉得最重要的还是有处理计划，不恐慌，当暂时想不到处理方法时，去运动，出汗回来，再想想有没方法处理，如果还是有问题，还不如睡个觉醒来再想。</p>\n<h1 id=\"最后想表达的\"><a href=\"#最后想表达的\" class=\"headerlink\" title=\"最后想表达的\"></a>最后想表达的</h1><blockquote>\n<p>健康、亲人、爱、事业构成的梦想，跟随内心、感受世界，这才是有意义的、非凡的人生。</p>\n</blockquote>\n<p>一个人要有这样一个梦想：<strong>健康、亲人、爱、事业</strong> 构成的梦想。健康确实很重要，特别是作为程序员，整天对着屏幕，坐着，很多时候处于亚健康状态，现在有时间还是去多健身吧，把一定的时间堆积在健身锻炼上面，养成一个习惯。</p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>前几天花了零碎的时间看完了开复老师的书《修的死亡学分》，之前是因为看了开复老师关于此书的记录片：<a href=\"https://v.qq.com/x/page/e01581hmi3j.html\" target=\"_blank\" rel=\"external\">筑梦者之李开复-《向死而生》</a>,一直好奇像成功如开复，影响力大如开复这样的人，当人生可能走向尽头，会有怎样的感受与感悟，于是趁着京东图书大甩卖的时候也买了一本。<br>","more":"</p>\n<p>这本书主要是讲了开复老师在得癌症之后17个月的一些思考，以及战胜癌症后的心路历程。开复老师在反思了自己在得淋巴癌之前在自己一直坚持的“高效率、最有影响力”的准则，反而觉得这会给自己带来过大的压力，当身体有警告而没有正确对待，置之不理，最终可能出现大病。对于开复老师的一些感悟自己没经历过这些，确实也没太大的感悟，但文中阐述的一些观点我还是很赞同的，正如知乎上<a href=\"https://www.zhihu.com/question/31693540\" target=\"_blank\" rel=\"external\">沈千亿</a>所讲:</p>\n<blockquote>\n<p>每一段他人的经历，对于一个成年且有独立思想的的人来说，都应该是一面观己观心的镜子，而不应该成为神龛或痰盂。</p>\n</blockquote>\n<h1 id=\"对待未知不在掌控时的心态\"><a href=\"#对待未知不在掌控时的心态\" class=\"headerlink\" title=\"对待未知不在掌控时的心态\"></a>对待未知不在掌控时的心态</h1><p>有时候最令人恐慌的是未知，且不在掌控，开复老师得知自己确诊淋巴癌时，尝试各种方法自救，刚开始的中药，能量疗法，葛森有机蔬菜疗法等比较盲目，后面和唐医生的聊天，医生套路似的安慰，然后推荐看此癌症的相关论文，开复老师开始自己研究病情，从研究这些学术论文开始，从茫然无知的恐慌，到了解病情，有了 <strong>“令人振奋的曙光”</strong>，如开复说：</p>\n<blockquote>\n<p>自己研究病情，就像自己坐在副驾驶，可以随时掌握路况。</p>\n</blockquote>\n<p>开复此时的兴奋在于了解了病情，有康复的希望，有了恢复的信心，而没有被癌症本身吓到。我没有这样的经历，不知道此时开复老师的心境，也是没有“心有戚戚焉”。但我倒觉得从这个过程中有最浅显的道理，对待未知不在掌控的情况，就是尽可能去了解，尽量减少未知，做到心中有数，然后不那么恐慌，然后再恢复那么点信心，然后再来点行动，或许就能找到令人振奋的曙光！</p>\n<h1 id=\"NESS管理法则\"><a href=\"#NESS管理法则\" class=\"headerlink\" title=\"NESS管理法则\"></a>NESS管理法则</h1><p>在后面的叙述中，提到了四个八十分管理法则，是关乎健康的四件大事（NESS）：</p>\n<ul>\n<li>饮食（Nutrilon）</li>\n<li>运动（Exercise）</li>\n<li>睡眠（Sleep）</li>\n<li>减压（Stress reduction）</li>\n</ul>\n<blockquote>\n<p>影响健康的这几个因素都有相互作用的，爱吃美食，如果能用运动去平衡，那就无妨；运动不足、睡眠质量不好，那就设法减压、用清净饮食调节身心负荷。</p>\n</blockquote>\n<p>这个刷新了我的一个认识，我觉得很多时候一项没做好，后面一定会受到影响，无法互补，从整体到局部来看，小的变化看上去不会太影响整体，实际上本质就不同了，所以很多时候我会过渡担心，这项没做好，后面就会出现很大的问题，这也使我有时候过度纠结于细节，徒增很多压力。而对于健康来讲，这几个局部因素影响了健康这个整体，而实际上这几个因素是可以互补平衡的，当饮食不是很好时，可以通过睡眠来调节，不需要每一项都达到一百分，只需平均八十分就可以，掌握平衡大法则就好。</p>\n<h1 id=\"面对焦虑的诀窍\"><a href=\"#面对焦虑的诀窍\" class=\"headerlink\" title=\"面对焦虑的诀窍\"></a>面对焦虑的诀窍</h1><p>有在乎的事，就会有相应的压力，开复老师在书中给了五个面对焦虑的诀窍，分别是：</p>\n<ol>\n<li>健康饮食：蔬菜、粗粮比垃圾食品更能舒缓心情。</li>\n<li>少喝咖啡：过量咖啡会消耗血清素，使情绪更糟糕。</li>\n<li><strong>制定计划：面对任何事情，设法获取全部信息并制定相应的处理计划，胸有成竹，自然可以降低焦虑感。</strong></li>\n<li>锻炼身体：运动可以释放内啡肽，有助于减压，保持头脑清醒。</li>\n<li>心存感恩：常将世间种种可爱放在心上，保持积极、正向的心态。</li>\n</ol>\n<p>我觉得最重要的还是有处理计划，不恐慌，当暂时想不到处理方法时，去运动，出汗回来，再想想有没方法处理，如果还是有问题，还不如睡个觉醒来再想。</p>\n<h1 id=\"最后想表达的\"><a href=\"#最后想表达的\" class=\"headerlink\" title=\"最后想表达的\"></a>最后想表达的</h1><blockquote>\n<p>健康、亲人、爱、事业构成的梦想，跟随内心、感受世界，这才是有意义的、非凡的人生。</p>\n</blockquote>\n<p>一个人要有这样一个梦想：<strong>健康、亲人、爱、事业</strong> 构成的梦想。健康确实很重要，特别是作为程序员，整天对着屏幕，坐着，很多时候处于亚健康状态，现在有时间还是去多健身吧，把一定的时间堆积在健身锻炼上面，养成一个习惯。</p>"},{"title":"用hexo搭建个人博客[转]","date":"2016-06-04T18:45:07.000Z","_content":"从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。\n现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。\n<!--more-->\n### 关于博客源码的备份和同步更新 ###\n\n#### 方案选择 ####\n这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。\n所以还是考虑用github 存放源码，但是有遇到两个选择：\n\n- 一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。\n- 另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。\n\n第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。\n\n#### 出现问题 ####\n\n- 问题描述\n\n因为我是先在本地\n```\ngit init 、git add origin <server>\n```\n初始化本地文件夹，然后\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。\n\n- 解决问题：\n\n删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。\n在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：\n\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n\n然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。\n\n### 最后 ###\n\n人生有涯，知也无涯。\n坚持学习，保持好奇心。\n坚持锻炼身体。\n转载来自：http://zouzls.github.io/\n","source":"_posts/转-用hexo搭建个人博客.md","raw":"---\ntitle: 用hexo搭建个人博客[转]\ndate: 2016-06-05 02:45:07\ntags: [hexo,next]\ncategories: hexo\n---\n从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。\n现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。\n<!--more-->\n### 关于博客源码的备份和同步更新 ###\n\n#### 方案选择 ####\n这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。\n所以还是考虑用github 存放源码，但是有遇到两个选择：\n\n- 一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。\n- 另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。\n\n第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。\n\n#### 出现问题 ####\n\n- 问题描述\n\n因为我是先在本地\n```\ngit init 、git add origin <server>\n```\n初始化本地文件夹，然后\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。\n\n- 解决问题：\n\n删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。\n在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：\n\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n\n然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。\n\n### 最后 ###\n\n人生有涯，知也无涯。\n坚持学习，保持好奇心。\n坚持锻炼身体。\n转载来自：http://zouzls.github.io/\n","slug":"转-用hexo搭建个人博客","published":1,"updated":"2017-04-28T03:48:15.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo715c9n002a4ov1o40hd2ao","content":"<p>从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。<br>现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。<br><a id=\"more\"></a></p>\n<h3 id=\"关于博客源码的备份和同步更新\"><a href=\"#关于博客源码的备份和同步更新\" class=\"headerlink\" title=\"关于博客源码的备份和同步更新\"></a>关于博客源码的备份和同步更新</h3><h4 id=\"方案选择\"><a href=\"#方案选择\" class=\"headerlink\" title=\"方案选择\"></a>方案选择</h4><p>这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。<br>所以还是考虑用github 存放源码，但是有遇到两个选择：</p>\n<ul>\n<li>一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。</li>\n<li>另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。</li>\n</ul>\n<p>第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。</p>\n<h4 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h4><ul>\n<li>问题描述</li>\n</ul>\n<p>因为我是先在本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init 、git add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>\n<p>初始化本地文件夹，然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。</p>\n<ul>\n<li>解决问题：</li>\n</ul>\n<p>删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。<br>在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n<p>然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>人生有涯，知也无涯。<br>坚持学习，保持好奇心。<br>坚持锻炼身体。<br>转载来自：<a href=\"http://zouzls.github.io/\" target=\"_blank\" rel=\"external\">http://zouzls.github.io/</a></p>\n","site":{"data":{"next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":false,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"},"各种注册":"busuanzhi��վ����ʼ��Ķ�ͳ�ƣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"}},"excerpt":"<p>从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。<br>现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。<br>","more":"</p>\n<h3 id=\"关于博客源码的备份和同步更新\"><a href=\"#关于博客源码的备份和同步更新\" class=\"headerlink\" title=\"关于博客源码的备份和同步更新\"></a>关于博客源码的备份和同步更新</h3><h4 id=\"方案选择\"><a href=\"#方案选择\" class=\"headerlink\" title=\"方案选择\"></a>方案选择</h4><p>这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。<br>所以还是考虑用github 存放源码，但是有遇到两个选择：</p>\n<ul>\n<li>一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。</li>\n<li>另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。</li>\n</ul>\n<p>第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。</p>\n<h4 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h4><ul>\n<li>问题描述</li>\n</ul>\n<p>因为我是先在本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init 、git add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>\n<p>初始化本地文件夹，然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。</p>\n<ul>\n<li>解决问题：</li>\n</ul>\n<p>删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。<br>在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n<p>然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>人生有涯，知也无涯。<br>坚持学习，保持好奇心。<br>坚持锻炼身体。<br>转载来自：<a href=\"http://zouzls.github.io/\" target=\"_blank\" rel=\"external\">http://zouzls.github.io/</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjo715c4t00004ov1czyb1y7x","category_id":"cjo715c5g00044ov12gkg0n0k","_id":"cjo715c6b000d4ov19evshmdl"},{"post_id":"cjo715c69000c4ov1ob7mxpmz","category_id":"cjo715c64000a4ov10mmm98y9","_id":"cjo715c6o000j4ov1assvlslj"},{"post_id":"cjo715c5500024ov10njniy5t","category_id":"cjo715c64000a4ov10mmm98y9","_id":"cjo715c6u000o4ov1a2uii67o"},{"post_id":"cjo715c5t00064ov1tf794idy","category_id":"cjo715c64000a4ov10mmm98y9","_id":"cjo715c6z000s4ov128yjwtw0"},{"post_id":"cjo715c6b000e4ov16rmeu3b2","category_id":"cjo715c6t000m4ov1ko52bcln","_id":"cjo715c76000y4ov12mjb5g86"},{"post_id":"cjo715c6m000h4ov1c772e27c","category_id":"cjo715c70000t4ov1xty2h1z3","_id":"cjo715c7h00144ov1bwlzj7mw"},{"post_id":"cjo715c7e00134ov1butzxhm1","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c7u001a4ov1gwk982hp"},{"post_id":"cjo715c6p000k4ov1rithshme","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c81001f4ov1oifdgqwh"},{"post_id":"cjo715c7k00164ov1q63w0gpf","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c86001h4ov1qt2zx2jr"},{"post_id":"cjo715c7q00194ov13s3hmz2c","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c8i001l4ov1ti3ugk1v"},{"post_id":"cjo715c6v000p4ov120unvpt1","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c8l001n4ov1pn7b76yf"},{"post_id":"cjo715c6y000r4ov1b2u8nakq","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c8r001r4ov1ozeshpzx"},{"post_id":"cjo715c71000v4ov1q8k9vuo8","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c90001u4ov1hx4wh0e2"},{"post_id":"cjo715c75000x4ov16t4enk77","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c9a00204ov1d6ydjvzc"},{"post_id":"cjo715c7900114ov1aj99kkcn","category_id":"cjo715c78000z4ov1ss7g4fq5","_id":"cjo715c9i00264ov11vjhtg4z"},{"post_id":"cjo715c7w001c4ov1l85pd22k","category_id":"cjo715c9c00224ov1ttzex12m","_id":"cjo715c9v002c4ov19bbggotj"},{"post_id":"cjo715c9j00274ov1p7p5229g","category_id":"cjo715c9c00224ov1ttzex12m","_id":"cjo715c9x002e4ov1zosljbzy"},{"post_id":"cjo715c81001g4ov1ayvy1pps","category_id":"cjo715c9c00224ov1ttzex12m","_id":"cjo715c9y002g4ov1zus0b5ee"},{"post_id":"cjo715c8c001i4ov11kfux7vm","category_id":"cjo715c9v002d4ov17y0qqh2m","_id":"cjo715ca3002l4ov1vcg6pd6b"},{"post_id":"cjo715c8j001m4ov17muse85b","category_id":"cjo715c9z002i4ov1ws3vjbmz","_id":"cjo715ca9002p4ov1znbxo7r2"},{"post_id":"cjo715c8m001o4ov1zltifiq0","category_id":"cjo715ca4002m4ov18ey91dx7","_id":"cjo715cag002t4ov14r2gl4jq"},{"post_id":"cjo715c8v001s4ov15qu600uv","category_id":"cjo715cab002q4ov1dvz92bf1","_id":"cjo715caj002x4ov195qw4paq"},{"post_id":"cjo715c91001v4ov1wjwb6jb5","category_id":"cjo715cab002q4ov1dvz92bf1","_id":"cjo715cal00314ov1btzc7lj6"},{"post_id":"cjo715c98001z4ov1ykv9atzw","category_id":"cjo715cak002z4ov1qmqx3yf0","_id":"cjo715cap00364ov1tqx849yt"},{"post_id":"cjo715c9b00214ov14n80e0dt","category_id":"cjo715can00334ov11rgklzcj","_id":"cjo715cav003a4ov1zyafpvaz"},{"post_id":"cjo715c9f00244ov1rbx620wc","category_id":"cjo715can00334ov11rgklzcj","_id":"cjo715cay003f4ov1at0d6bpp"},{"post_id":"cjo715c9n002a4ov1o40hd2ao","category_id":"cjo715cak002z4ov1qmqx3yf0","_id":"cjo715cb2003h4ov11e7hhxfz"}],"PostTag":[{"post_id":"cjo715c4t00004ov1czyb1y7x","tag_id":"cjo715c5r00054ov1k5ef25gj","_id":"cjo715c6n000i4ov1qixm2p2v"},{"post_id":"cjo715c4t00004ov1czyb1y7x","tag_id":"cjo715c64000b4ov1o5idijpt","_id":"cjo715c6s000l4ov1jwy8se3e"},{"post_id":"cjo715c5500024ov10njniy5t","tag_id":"cjo715c6e000g4ov1172ncdzu","_id":"cjo715c6x000q4ov18serqn3x"},{"post_id":"cjo715c5t00064ov1tf794idy","tag_id":"cjo715c6u000n4ov1srvmdpl0","_id":"cjo715c74000w4ov1yiv6hzin"},{"post_id":"cjo715c5y00084ov1zec2f7v5","tag_id":"cjo715c6u000n4ov1srvmdpl0","_id":"cjo715c7b00124ov1y0usqqhf"},{"post_id":"cjo715c6100094ov1zd7k15ch","tag_id":"cjo715c6u000n4ov1srvmdpl0","_id":"cjo715c7p00184ov1qbnimnyl"},{"post_id":"cjo715c69000c4ov1ob7mxpmz","tag_id":"cjo715c6u000n4ov1srvmdpl0","_id":"cjo715c80001e4ov10i87sf1d"},{"post_id":"cjo715c6b000e4ov16rmeu3b2","tag_id":"cjo715c7v001b4ov1vy5ron3m","_id":"cjo715c8x001t4ov1uz0tc7ne"},{"post_id":"cjo715c6b000e4ov16rmeu3b2","tag_id":"cjo715c8h001k4ov1b5ljymyx","_id":"cjo715c96001x4ov16oztsz6z"},{"post_id":"cjo715c6m000h4ov1c772e27c","tag_id":"cjo715c8q001q4ov1hptplos2","_id":"cjo715c9h00254ov1nwso1unp"},{"post_id":"cjo715c6m000h4ov1c772e27c","tag_id":"cjo715c97001y4ov1si1o1ara","_id":"cjo715c9m00294ov1vej5iuvc"},{"post_id":"cjo715c6p000k4ov1rithshme","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715c9z002h4ov1imgdcm3j"},{"post_id":"cjo715c6p000k4ov1rithshme","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715ca1002j4ov1cauorxnm"},{"post_id":"cjo715c6v000p4ov120unvpt1","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715ca8002o4ov1furvqr2p"},{"post_id":"cjo715c6v000p4ov120unvpt1","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715cab002r4ov15vfpvh57"},{"post_id":"cjo715c6y000r4ov1b2u8nakq","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715cai002w4ov1wekn0ifx"},{"post_id":"cjo715c6y000r4ov1b2u8nakq","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715caj002y4ov1gpet6ag4"},{"post_id":"cjo715c71000v4ov1q8k9vuo8","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715cao00344ov1075w7j3r"},{"post_id":"cjo715c71000v4ov1q8k9vuo8","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715cap00354ov1b6kkydkr"},{"post_id":"cjo715c75000x4ov16t4enk77","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715cax003c4ov1uhu31vzd"},{"post_id":"cjo715c75000x4ov16t4enk77","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715cax003d4ov10adtxw3b"},{"post_id":"cjo715c7900114ov1aj99kkcn","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715cb3003i4ov1mfeupkzl"},{"post_id":"cjo715c7900114ov1aj99kkcn","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715cb4003j4ov1z4la6e0z"},{"post_id":"cjo715c7e00134ov1butzxhm1","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715cb8003m4ov1jm69ct3c"},{"post_id":"cjo715c7e00134ov1butzxhm1","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715cbb003n4ov1f42uljt4"},{"post_id":"cjo715c7k00164ov1q63w0gpf","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715cbh003q4ov1mkwtc9lv"},{"post_id":"cjo715c7k00164ov1q63w0gpf","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715cbi003r4ov1o8lalbtm"},{"post_id":"cjo715c7q00194ov13s3hmz2c","tag_id":"cjo715c9e00234ov1bxx9fshg","_id":"cjo715cbk003u4ov14p5hxini"},{"post_id":"cjo715c7q00194ov13s3hmz2c","tag_id":"cjo715c9t002b4ov1brn99nr5","_id":"cjo715cbl003v4ov1hlrsk0x7"},{"post_id":"cjo715c7w001c4ov1l85pd22k","tag_id":"cjo715cbj003t4ov14ea51vyr","_id":"cjo715cbm003x4ov10f13keaa"},{"post_id":"cjo715c81001g4ov1ayvy1pps","tag_id":"cjo715cbl003w4ov1x35shybm","_id":"cjo715cby00404ov1tz5nao3a"},{"post_id":"cjo715c81001g4ov1ayvy1pps","tag_id":"cjo715cbn003y4ov1xer3mwmn","_id":"cjo715cby00414ov1yn5b2nk6"},{"post_id":"cjo715c8c001i4ov11kfux7vm","tag_id":"cjo715cbx003z4ov1kmgrn5td","_id":"cjo715cc000434ov1d8zbg6b1"},{"post_id":"cjo715c8j001m4ov17muse85b","tag_id":"cjo715cbz00424ov1xfkyoeg8","_id":"cjo715cc200464ov17ojys0dj"},{"post_id":"cjo715c8j001m4ov17muse85b","tag_id":"cjo715cc100444ov16occ8qe5","_id":"cjo715cc300474ov1grqejfbo"},{"post_id":"cjo715c8m001o4ov1zltifiq0","tag_id":"cjo715cc100454ov1iiyllluf","_id":"cjo715cc5004a4ov1h15h7489"},{"post_id":"cjo715c8m001o4ov1zltifiq0","tag_id":"cjo715cc300484ov1es426uyl","_id":"cjo715cc6004b4ov1vmixzzcb"},{"post_id":"cjo715c8v001s4ov15qu600uv","tag_id":"cjo715cc100454ov1iiyllluf","_id":"cjo715cc8004f4ov16c7f9s66"},{"post_id":"cjo715c8v001s4ov15qu600uv","tag_id":"cjo715cc6004c4ov1jijwx1qh","_id":"cjo715cc9004g4ov1niw4ngwt"},{"post_id":"cjo715c8v001s4ov15qu600uv","tag_id":"cjo715cc7004d4ov1eh1kior8","_id":"cjo715ccb004i4ov114k8gh8l"},{"post_id":"cjo715c91001v4ov1wjwb6jb5","tag_id":"cjo715cc8004e4ov1wbwkktxv","_id":"cjo715ccb004j4ov1w1bj3pkp"},{"post_id":"cjo715c98001z4ov1ykv9atzw","tag_id":"cjo715cc9004h4ov1p1eevmdd","_id":"cjo715ccf004m4ov1wrumrahj"},{"post_id":"cjo715c98001z4ov1ykv9atzw","tag_id":"cjo715ccc004k4ov1d38ynwor","_id":"cjo715ccg004n4ov1nvqnygfj"},{"post_id":"cjo715c9b00214ov14n80e0dt","tag_id":"cjo715cce004l4ov11arw7rck","_id":"cjo715ccl004r4ov17j9gg8dy"},{"post_id":"cjo715c9b00214ov14n80e0dt","tag_id":"cjo715ccg004o4ov1b4lk5b60","_id":"cjo715ccl004s4ov1aqk2cpjg"},{"post_id":"cjo715c9b00214ov14n80e0dt","tag_id":"cjo715cc8004e4ov1wbwkktxv","_id":"cjo715ccm004u4ov1ccvn03eu"},{"post_id":"cjo715c9f00244ov1rbx620wc","tag_id":"cjo715cce004l4ov11arw7rck","_id":"cjo715cco004w4ov1fgsroir1"},{"post_id":"cjo715c9f00244ov1rbx620wc","tag_id":"cjo715ccg004o4ov1b4lk5b60","_id":"cjo715cco004x4ov1jy4w78sb"},{"post_id":"cjo715c9j00274ov1p7p5229g","tag_id":"cjo715cbj003t4ov14ea51vyr","_id":"cjo715ccp004z4ov1xtprvtqi"},{"post_id":"cjo715c9n002a4ov1o40hd2ao","tag_id":"cjo715ccc004k4ov1d38ynwor","_id":"cjo715ccq00514ov19q35iug3"},{"post_id":"cjo715c9n002a4ov1o40hd2ao","tag_id":"cjo715ccq00504ov1k8c75e3d","_id":"cjo715ccr00524ov1ssq2kj1g"}],"Tag":[{"name":"CPP","_id":"cjo715c5r00054ov1k5ef25gj"},{"name":"字符串分割（StringSplit）","_id":"cjo715c64000b4ov1o5idijpt"},{"name":"Java","_id":"cjo715c6e000g4ov1172ncdzu"},{"name":"JAVA","_id":"cjo715c6u000n4ov1srvmdpl0"},{"name":"stock","_id":"cjo715c7v001b4ov1vy5ron3m"},{"name":"maxProfit","_id":"cjo715c8h001k4ov1b5ljymyx"},{"name":"HTTP","_id":"cjo715c8q001q4ov1hptplos2"},{"name":"Network Protocol","_id":"cjo715c97001y4ov1si1o1ara"},{"name":"Python","_id":"cjo715c9e00234ov1bxx9fshg"},{"name":"Programming language","_id":"cjo715c9t002b4ov1brn99nr5"},{"name":"thinking","_id":"cjo715cbj003t4ov14ea51vyr"},{"name":"实用主义","_id":"cjo715cbl003w4ov1x35shybm"},{"name":"原则","_id":"cjo715cbn003y4ov1xer3mwmn"},{"name":"大话设计模式","_id":"cjo715cbx003z4ov1kmgrn5td"},{"name":"东蒙","_id":"cjo715cbz00424ov1xfkyoeg8"},{"name":"总结","_id":"cjo715cc100444ov16occ8qe5"},{"name":"Binary Tree","_id":"cjo715cc100454ov1iiyllluf"},{"name":"Serialization","_id":"cjo715cc300484ov1es426uyl"},{"name":"Recursion","_id":"cjo715cc6004c4ov1jijwx1qh"},{"name":"非递归方法","_id":"cjo715cc7004d4ov1eh1kior8"},{"name":"Dynamic Programming","_id":"cjo715cc8004e4ov1wbwkktxv"},{"name":"git","_id":"cjo715cc9004h4ov1p1eevmdd"},{"name":"hexo","_id":"cjo715ccc004k4ov1d38ynwor"},{"name":"算法","_id":"cjo715cce004l4ov11arw7rck"},{"name":"实习","_id":"cjo715ccg004o4ov1b4lk5b60"},{"name":"next","_id":"cjo715ccq00504ov1k8c75e3d"}]}}
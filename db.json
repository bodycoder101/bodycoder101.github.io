{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/uploads/wechat-qcode.jpg","path":"uploads/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/uploads/wechat-reward-image.png","path":"uploads/wechat-reward-image.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1497344859152},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1497344859153},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1497344859154},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1497344859158},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1497344859158},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1497344859157},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1497344859159},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1497344859160},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1497344859162},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1497344859161},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1497344859163},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1497344859160},{"_id":"themes/next/_config.yml","hash":"1c3aa82b2ed07103c8c7dab610dd520b821c9831","modified":1497954620929},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1497344859165},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1497344859165},{"_id":"source/favicon.ico","hash":"38519972ef2d83070ea387142f1b2f1ce5b6f165","modified":1487591489316},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1497344859253},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1497344859156},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1497344859156},{"_id":"themes/next/layout/_layout.swig","hash":"0b944efcb14d3ab8d5216aa965739dbe70d1b159","modified":1497357594856},{"_id":"themes/next/layout/category.swig","hash":"f315f12651de8065fdad73b003da4335ef177173","modified":1497344859248},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1497344859251},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1497344859249},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1497344859250},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1497344859254},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1497344859256},{"_id":"themes/next/layout/page.swig","hash":"22ba721a9688d490fc66f360e5a319288b63b05a","modified":1497344859249},{"_id":"themes/next/layout/tag.swig","hash":"cc9878932580c890f8f3e569225e29bb37e25b49","modified":1497344859252},{"_id":"source/_data/各种注册.txt","hash":"4313e99b318013ff65c62b9b7c365d7e650357ef","modified":1497349233576},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1497344859641},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1497344859247},{"_id":"source/categories/index.md","hash":"8e9313db61c04f46f9947c93cc8f75cfda6b7ffd","modified":1487591489315},{"_id":"source/tags/index.md","hash":"38977c7474fb31bd694037d5a5840c8d56e408ba","modified":1487591489318},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1497344859641},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1497344859642},{"_id":"source/about/index.md","hash":"f61e47b984be4e6d4e621bc42b48b0b1b5ed867d","modified":1495190638686},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1497344859089},{"_id":"source/_data/next.yml","hash":"edd9bfaa1550f8962881602ec4690e78ead8341b","modified":1497873742834},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1497344773774},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1497344859068},{"_id":"source/uploads/wechat-qcode.jpg","hash":"1aedf988e65cd502171934a95d38f8b1cf7d8c8e","modified":1487645075827},{"_id":"themes/next/.git/packed-refs","hash":"6705dec1efe015bd8f76d53b3711ff40f89dbda7","modified":1497344859052},{"_id":"source/uploads/avatar.png","hash":"35df14c2d54cb81634c5e14065eb1f2ba1e49cd0","modified":1487591489321},{"_id":"themes/next/.git/index","hash":"ae5cc0333189cf0f082e96efb350cea25fd61782","modified":1497357898978},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1497344859167},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1497344859168},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1497344859169},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1497344859170},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1497344859168},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1497344859174},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1497344859172},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1497344859173},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1497344859178},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1497344859176},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1497344859177},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1497344859175},{"_id":"source/_posts/JAVA的学习之对象与类.md","hash":"3a546cc5fcc382c2a72bfdfddb7c663fb2b3a342","modified":1493351156912},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1497344859176},{"_id":"source/_posts/JAVA的学习之继承.md","hash":"75f9c77eb605ad594c55202ae7a2d87d60a3a517","modified":1493351350277},{"_id":"source/_posts/JAVA的学习之第五章.md","hash":"f35eb0415bf40562782178fd4229e93d93468b9a","modified":1487591489309},{"_id":"source/_posts/JAVA的学习之第四章.md","hash":"f3bb468d236dd95706cb3b782f6bec55bd34f13f","modified":1487591489310},{"_id":"source/_posts/新环境下Hexo博客部署及维护.md","hash":"733661060cc422dada17cbc2d3a666524c08a8e1","modified":1493351340000},{"_id":"source/_posts/JAVA学习之集合框架（上）.md","hash":"4fff9b329814c06c8f00e4ed7669486158a1e140","modified":1490605853244},{"_id":"source/_posts/动态规划之最长公共子序列（longest common subsequence）问题的求解.md","hash":"b276d00af200c9d2277d240e1492071c2f1cb776","modified":1497356563970},{"_id":"source/_posts/求解子数组之和的最大值及相应的子数组.md","hash":"198dfa81872275dca085860053993bc45ff9bd91","modified":1497355747554},{"_id":"source/_posts/转-用hexo搭建个人博客.md","hash":"be85c6448efb0da7e484ee86b940b02f7dce21c2","modified":1493351295116},{"_id":"source/_posts/腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点.md","hash":"ca5c76a5c4c2d0c6b4121dbc743bfce4f13a856a","modified":1497354345186},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859428},{"_id":"source/uploads/wechat-reward-image.png","hash":"fe2fdd6111caa81c7adbf0167addaf217b77f2a7","modified":1487591489322},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1497344859180},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1497344859181},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1497344859190},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1497354709990},{"_id":"themes/next/layout/_partials/head.swig","hash":"09b110f77c415c5b71ebd886771a10bc84b95633","modified":1497344859192},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1497344859196},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1497344859197},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1497344859198},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1497344859183},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1497344859184},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1497344859195},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1497344859187},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1497344859207},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1497344859188},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1497344859208},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"4b029551ddb44c53f895e96cf8ff5ffbe02322fb","modified":1497344859188},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1497344859214},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1497344859257},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1497344859258},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1497344859260},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1497344859259},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1497344859262},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1497344859263},{"_id":"themes/next/scripts/tags/note.js","hash":"fc4958427ca7bdb47a7d830077f432ed824973e4","modified":1497344859264},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1497344859431},{"_id":"themes/next/layout/_macro/post.swig","hash":"87060cd26969bc56617d0ca64a263a274d5865e2","modified":1497954368012},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1497344859433},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1497344859434},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1497344859436},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1497344859442},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1497344859441},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497344859443},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1497344859444},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1497344859446},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497344859446},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497344859444},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1497344859234},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1497344859235},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1497344859236},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1497344859235},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1497344859237},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1497344859238},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1497344859438},{"_id":"themes/next/.git/logs/HEAD","hash":"5755ed582f4104ab7ed4ca97f0bbb6a13d9f8780","modified":1497344859075},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1497344773909},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1497344859439},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1497344859440},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1497344773850},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1497344773829},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1497344773849},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1497344773848},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1497344773892},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1497344773861},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1497344773894},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1497344773907},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1497344773891},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1497344773872},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1497344859427},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859211},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859212},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1497344859193},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1497344859199},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1497344859200},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1497344859201},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1497344859202},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1497957575770},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1497344859194},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1497344859203},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859386},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859387},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859390},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1497344859210},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1497344859212},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1497344859204},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859421},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497344859425},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1497344859450},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1497344859448},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1497344859456},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1497344859451},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1497344859454},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1497344859458},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1497344859462},{"_id":"themes/next/source/js/src/utils.js","hash":"c976214b8bbaa9512b886bf3687e94696f705e33","modified":1497344859464},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1497344859457},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1497344859463},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1497344859246},{"_id":"themes/next/.git/refs/heads/master","hash":"5adf12fc29bb4176af9fd5ef350a9238dd08497d","modified":1497344859073},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1497344859242},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1497344859453},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1497344859217},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1497344859245},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"a0c042a74ea1afcb19daac7e2604a2bc5495037b","modified":1497344859243},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1497344859219},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1497344859220},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1497344859220},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1497344859221},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1497344859216},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1497344859223},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1497344859223},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1497344859222},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1497344859225},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1497344859224},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1497344859228},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1497344859229},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1497344859230},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1497344859232},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1497344859231},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1497344859385},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1497344859388},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1497344859390},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1497344859218},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1497344859227},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1497344859503},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1497344859504},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1497344859226},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497344859498},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497344859486},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1497344859528},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"68db2c0bf1064176627199394f25f6dc37ea23ad","modified":1497344859501},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1497344859530},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1497344859531},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1497344859581},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1497344859537},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1497344859538},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1497344859539},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1497344859539},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1497344859585},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1497344859536},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1497344859589},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1497344859586},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1497344859590},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1497344859591},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1497344859587},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1497344859420},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1497344859529},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1497344859610},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1497344859609},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1497344859423},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1497344859425},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1497344859593},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1497344859596},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1497344859592},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1497344859595},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1497344859596},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1497344859597},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1497344859611},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1497344859600},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1497344859606},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1497344859599},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1497344859600},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1497344859603},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1497344859607},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1497344859602},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1497344859605},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1497344859627},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1497344859637},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1497344859638},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1497344859636},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1497344859583},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1497344859628},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1497344859461},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1497344859065},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"5755ed582f4104ab7ed4ca97f0bbb6a13d9f8780","modified":1497344859078},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1497344859267},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1497344859377},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1497344859268},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1497344859271},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1497344859270},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1497344859269},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1497344859312},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1497344859241},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1497344859240},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1497344859289},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1497344859533},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497344859534},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1497344859484},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1497344859542},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1497344859544},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1497344859541},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1497344859481},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1497344859393},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1497344859395},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1497344859398},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1497344859397},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1497344859405},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1497344859406},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1497344859407},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1497344859409},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1497344859409},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1497344859412},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1497344859399},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1497344859393},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1497344859416},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1497344859396},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1497344859418},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1497344859414},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1497344859417},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497344859507},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1497344859413},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1497344859624},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497344859510},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497344859508},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497344859512},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497344859514},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497344859513},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1497344859523},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1497344859378},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1497344859525},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1497344859379},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1497344859382},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1497344859383},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1497344859527},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1497344859626},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1497344859384},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1497344859479},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1497344859475},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1497344859579},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1497344859578},{"_id":"themes/next/.git/objects/pack/pack-8401d00879023bb208b26da4d29e292c81cf364f.idx","hash":"16550282d4e212b032a2e0a6f68beffdd741be94","modified":1497344858768},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"5755ed582f4104ab7ed4ca97f0bbb6a13d9f8780","modified":1497344859064},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1497344859274},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1497344859273},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1497344859275},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1497344859278},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1497344859280},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1497344859277},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1497344859303},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1497344859281},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1497344859306},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1497344859306},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1497344859275},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1497344859304},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1497344859310},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1497344859309},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1497344859282},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1497344859287},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1497344859284},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1497344859288},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1497344859284},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1497344859285},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1497344859308},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1497344859315},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1497344859310},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1497344859311},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1497344859313},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1497344859367},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1497344859314},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1497344859368},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1497344859359},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1497344859371},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1497344859372},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1497344859370},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74019008ba973ab30f0f4a6b3c2cd33c66d3a4b4","modified":1497344859361},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1497344859373},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1497344859375},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1497344859290},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1497344859293},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1497344859294},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1497344859364},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1497344859295},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1497344859374},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1497344859362},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1497344859291},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1497344859294},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1497344859298},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1497344859299},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1497344859301},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1497344859301},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1497344859300},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bc08cfb2ef2ff44ba3fc7dffdb2deb01a9d17d15","modified":1497344859302},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1497344859549},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1497344859553},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1497344859576},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1497344859400},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1497344859403},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1497344859411},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1497344859468},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1497344859296},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1497344859297},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1497344859298},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1497344859633},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1497344859469},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1497344859519},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497344859516},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1497344859473},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1497344859517},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1497344859471},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1497344859494},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1497344859520},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1497344859522},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1497344859521},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1497344859621},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1497344859562},{"_id":"themes/next/.git/objects/pack/pack-8401d00879023bb208b26da4d29e292c81cf364f.pack","hash":"70ab6489271d52c1b70c1bfa8bdb3b41fb693445","modified":1497344858851},{"_id":"public/categories/index.html","hash":"9b066b259732269b811a0a39752794cb4132c929","modified":1497957644257},{"_id":"public/tags/index.html","hash":"ac90ee9dd5e5c29bc15fcf89f60b2c99be9f73a7","modified":1497957644257},{"_id":"public/about/index.html","hash":"bd310545fa22f4b8f198415821af8a6c216a129b","modified":1497957644258},{"_id":"public/2017/04/30/动态规划之最长公共子序列（longest common subsequence）问题的求解/index.html","hash":"12e5ac54c424234a71530e1b8622a9a172b4f156","modified":1497957644258},{"_id":"public/2017/04/27/求解子数组之和的最大值及相应的子数组/index.html","hash":"f02da03784f3f5e2fc6f3faa57cef1f7b980afc8","modified":1497957644258},{"_id":"public/2017/04/07/腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点/index.html","hash":"5f82741bb07e27d25d4a960bf50ad853e9473602","modified":1497957644258},{"_id":"public/2017/03/26/JAVA学习之集合框架（上）/index.html","hash":"37897e07a413b0303457d14172ee7eb6b20311e0","modified":1497957644258},{"_id":"public/2017/02/20/新环境下Hexo博客部署及维护/index.html","hash":"bc94a1e361fe89195a6e2dede63f005b379f10b4","modified":1497957644258},{"_id":"public/2017/02/17/JAVA的学习之继承/index.html","hash":"43a4b31b07b7bf290d5fd06ee80b05293889d110","modified":1497957644258},{"_id":"public/2017/02/17/JAVA的学习之第五章/index.html","hash":"918e1a3c1f5c8bcffc0fdb0e480c766d40979c74","modified":1497957644258},{"_id":"public/2017/02/16/JAVA的学习之对象与类/index.html","hash":"6a8fd1f70341f037cb830fd3a2a1b3ccc1bfc97a","modified":1497957644259},{"_id":"public/2017/02/16/JAVA的学习之第四章/index.html","hash":"1c993ad3a36fa9244b525163aec689a64ff5504b","modified":1497957644259},{"_id":"public/2016/06/05/转-用hexo搭建个人博客/index.html","hash":"816adc48d3731369d7060ee25ab659fb44a22b8c","modified":1497957644259},{"_id":"public/archives/index.html","hash":"43e73fb1a30d0bdad5f616f8051b8619190b68a2","modified":1497957644259},{"_id":"public/archives/page/2/index.html","hash":"8f682818ba2f886a6fb714eb574e0b1b683601b0","modified":1497957644259},{"_id":"public/archives/2016/index.html","hash":"bccfd0a35cfa2e30a089544f2e66b1c637e506a6","modified":1497957644259},{"_id":"public/archives/2016/06/index.html","hash":"dbf130b24285ffc30123edd756ea89eb4702d231","modified":1497957644259},{"_id":"public/archives/2017/index.html","hash":"2160de2eebf612a6feca83a572017b8d354f5bc0","modified":1497957644259},{"_id":"public/archives/2017/page/2/index.html","hash":"90bdd955987c74bbdc25012b420e21b00d3a12bd","modified":1497957644259},{"_id":"public/archives/2017/02/index.html","hash":"5b8788033f544bc7e64b6f68e6dea435a15ef7ee","modified":1497957644259},{"_id":"public/archives/2017/03/index.html","hash":"1494e62017364e87985174ffabf7a745d435d49d","modified":1497957644260},{"_id":"public/archives/2017/04/index.html","hash":"310f850b4488d3291130fe081b5093bd558364f7","modified":1497957644260},{"_id":"public/categories/Java-SE/index.html","hash":"5e300959e901c2549af98084057bd1dd1251de73","modified":1497957644260},{"_id":"public/categories/hexo/index.html","hash":"939e118784e4f24bd49840e0a4a21ca8b1405bd8","modified":1497957644260},{"_id":"public/categories/Algorithms/index.html","hash":"d7e15132db45310e7ac04f4d012f35edfeac203f","modified":1497957644260},{"_id":"public/categories/笔试面试/index.html","hash":"8c1dc7af9b563f08f7bb44c5f63954669125b87e","modified":1497957644260},{"_id":"public/index.html","hash":"1d20a605e9ed8e5b8b932b105c919d0578fe20d2","modified":1497957644260},{"_id":"public/page/2/index.html","hash":"29603094940964613488ae848cd94efe75ba6368","modified":1497957644260},{"_id":"public/tags/JAVA/index.html","hash":"345672dac9b312e596c6e5adaf98ab4520998bf0","modified":1497957644260},{"_id":"public/tags/git/index.html","hash":"b14b5d65da9a39ad3769b8f3fd5c43c98a5d096a","modified":1497957644260},{"_id":"public/tags/hexo/index.html","hash":"eddf4ae658a4a0c69c44c3c2f7547310e7f81e88","modified":1497957644260},{"_id":"public/tags/Java/index.html","hash":"798d3e956c2ad2ed045f36e493edff1b009cdc52","modified":1497957644261},{"_id":"public/tags/Dynamic-Programming/index.html","hash":"50aed8311d3bb92329bf4489e34756812d91c47c","modified":1497957644261},{"_id":"public/tags/算法/index.html","hash":"423bdb69bc32bff3bbf93d5248d7e3763e3046b0","modified":1497957644261},{"_id":"public/tags/实习/index.html","hash":"89c93858793de8e686053456dba2e08ad5c97017","modified":1497957644261},{"_id":"public/tags/动态规划/index.html","hash":"6d13cc1d359f220e9a3e745ed093293efffb9136","modified":1497957644261},{"_id":"public/tags/next/index.html","hash":"45f2ed2a176abf7891bacfdd412d996fed0afb38","modified":1497957644261},{"_id":"public/favicon.ico","hash":"38519972ef2d83070ea387142f1b2f1ce5b6f165","modified":1497957644323},{"_id":"public/uploads/wechat-qcode.jpg","hash":"1aedf988e65cd502171934a95d38f8b1cf7d8c8e","modified":1497957644323},{"_id":"public/uploads/avatar.png","hash":"35df14c2d54cb81634c5e14065eb1f2ba1e49cd0","modified":1497957644324},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1497957644324},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1497957644324},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1497957644324},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1497957644324},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1497957644324},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1497957644324},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497957644324},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1497957644324},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1497957644324},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497957644324},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497957644324},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1497957644325},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1497957644325},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1497957644325},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1497957644325},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1497957644325},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1497957644325},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497957644325},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497957644325},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497957644325},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497957644325},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497957644325},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497957644326},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1497957644326},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1497957644327},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497957644327},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1497957644327},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1497957644328},{"_id":"public/uploads/wechat-reward-image.png","hash":"fe2fdd6111caa81c7adbf0167addaf217b77f2a7","modified":1497957646476},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1497957646477},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1497957646511},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1497957646525},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1497957646525},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1497957646525},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1497957646525},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1497957646525},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1497957646525},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1497957646525},{"_id":"public/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1497957646526},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1497957646526},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1497957646526},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1497957646526},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497957646526},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497957646526},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1497957646526},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1497957646526},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1497957646526},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1497957646526},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1497957646526},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1497957646526},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1497957646526},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1497957646526},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1497957646527},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1497957646527},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1497957646528},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1497957646528},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1497957646528},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1497957646528},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1497957646528},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497957646528},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1497957646528},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1497957646528},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1497957646528},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1497957646528},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1497957646528},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1497957646528},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1497957646528},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1497957646529},{"_id":"public/css/main.css","hash":"ddbcc0b13e3b67347c471be3b5130239210fb24e","modified":1497957646529},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1497957646529},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1497957646529},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1497957646529},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1497957646529},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1497957646529},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1497957646529},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1497957646529},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1497957646529},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1497957646529},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1497957646529},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1497957646530},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1497957646530},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1497957646531},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1497957646533},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1497957646533},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1497957646533},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1497957646533},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1497957646533},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1497957646534},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1497957646534},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1497957646534},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1497957646591}],"Category":[{"name":"Java SE","_id":"cj45hauxw0005fwv1gny7ym1t"},{"name":"hexo","_id":"cj45hauyw000hfwv10huxn2g6"},{"name":"Algorithms","_id":"cj45hauz9000ofwv1usph2p2z"},{"name":"笔试面试","_id":"cj45hauzk000ufwv15i20wbiz"}],"Data":[{"_id":"各种注册","data":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n"},{"_id":"next","data":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}],"Page":[{"title":"分类","date":"2016-06-03T22:46:24.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-06-04 06:46:24\ntype: \"categories\"\ncomments: true\n---\n","updated":"2017-02-20T11:51:29.315Z","path":"categories/index.html","layout":"page","_id":"cj45hauvk0000fwv1i63l3qkw","content":"","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"","more":""},{"title":"All tags","date":"2016-06-03T22:49:39.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: All tags\ndate: 2016-06-04 06:49:39\ntype: \"tags\"\ncomments: true\t\n---\n","updated":"2017-02-20T11:51:29.318Z","path":"tags/index.html","layout":"page","_id":"cj45hauvq0001fwv1h67q40ul","content":"","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"","more":""},{"title":"关于","date":"2016-06-03T22:45:29.000Z","type":"about","comments":1,"_content":"# 一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\n\n# 为什么要**写博客？**\n- 知识整理，学习笔记；\n- 发表所见、所思、所感、所想；\n- 有目的的写，不追求数量，要务实，追求质量；\n- 记录自己学习、思考、总结的过程，分享自己的故事；\n- 记录成长，夯实人生的轨迹，培养持续力，做一件真正属于自己的事；\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-06-04 06:45:29\ntype: \"about\"\ncomments: true\n---\n# 一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\n\n# 为什么要**写博客？**\n- 知识整理，学习笔记；\n- 发表所见、所思、所感、所想；\n- 有目的的写，不追求数量，要务实，追求质量；\n- 记录自己学习、思考、总结的过程，分享自己的故事；\n- 记录成长，夯实人生的轨迹，培养持续力，做一件真正属于自己的事；\n","updated":"2017-05-19T10:43:58.686Z","path":"about/index.html","layout":"page","_id":"cj45hauxa0002fwv1svw97chy","content":"<h1 id=\"一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\"><a href=\"#一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\" class=\"headerlink\" title=\"一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\"></a>一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！</h1><h1 id=\"为什么要写博客？\"><a href=\"#为什么要写博客？\" class=\"headerlink\" title=\"为什么要写博客？\"></a>为什么要<strong>写博客？</strong></h1><ul>\n<li>知识整理，学习笔记；</li>\n<li>发表所见、所思、所感、所想；</li>\n<li>有目的的写，不追求数量，要务实，追求质量；</li>\n<li>记录自己学习、思考、总结的过程，分享自己的故事；</li>\n<li>记录成长，夯实人生的轨迹，培养持续力，做一件真正属于自己的事；</li>\n</ul>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"","more":"<h1 id=\"一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\"><a href=\"#一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\" class=\"headerlink\" title=\"一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！\"></a>一个喜欢健身，喜欢吹逼，热爱Coding的Bodycoder！</h1><h1 id=\"为什么要写博客？\"><a href=\"#为什么要写博客？\" class=\"headerlink\" title=\"为什么要写博客？\"></a>为什么要<strong>写博客？</strong></h1><ul>\n<li>知识整理，学习笔记；</li>\n<li>发表所见、所思、所感、所想；</li>\n<li>有目的的写，不追求数量，要务实，追求质量；</li>\n<li>记录自己学习、思考、总结的过程，分享自己的故事；</li>\n<li>记录成长，夯实人生的轨迹，培养持续力，做一件真正属于自己的事；</li>\n</ul>\n"}],"Post":[{"title":"JAVA的学习之对象与类","date":"2017-02-16T13:01:13.000Z","_content":"\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n\n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n\n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```\n","source":"_posts/JAVA的学习之对象与类.md","raw":"---\ntitle: JAVA的学习之对象与类\ndate: 2017-02-16 21:01:13\ncategories: Java SE\ntags: JAVA\n---\n\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n\n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n\n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```\n","slug":"JAVA的学习之对象与类","published":1,"updated":"2017-04-28T03:45:56.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauxd0003fwv1ejecv7a1","content":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>\n<a id=\"more\"></a>\n<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>","more":"<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JAVA的学习之继承","date":"2017-02-16T16:00:00.000Z","_content":"\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n","source":"_posts/JAVA的学习之继承.md","raw":"---\ntitle: JAVA的学习之继承\ndate: 2017-02-17\ncategories: Java SE\ntags: JAVA\n---\n\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n","slug":"JAVA的学习之继承","published":1,"updated":"2017-04-28T03:49:10.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauxo0004fwv13w93temi","content":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br><a id=\"more\"></a></p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br>","more":"</p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>"},{"title":"JAVA的学习之第五章","date":"2017-02-16T16:00:00.000Z","_content":"\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n\n\n","source":"_posts/JAVA的学习之第五章.md","raw":"---\ntitle: JAVA的学习之第五章\ndate: 2017-02-17\ntags: JAVA\n---\n\n本章主要是讲述OOP中的**继承（inheritance）**，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。\n<!-- more -->\n\n## 一、类、超类和子类\n\n继承的定义：\n```\nclass Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承\n{\n//add new files and methods\n}\n\nEmployee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。\n```\n### 1. 易错点：\n\n```\nManager boss=new Manger(...);\nEmployee[] staff=new Employee[3];\nstaff[0]=boss;\n\nboss.setBonus(5000);//OK\nstaff[0].setBonus(5000);//EROR\n\nManager m=staff[i];//EROR\nEmployee[] staff=managers;//OK\nManager boss=(Manager) staff[0];//ok\n```\n上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；\n语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；\n语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；\n总结：**只能大赋小**\n语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）\n\n**注意**：在将父类转换为之类之前，应该使用__instanceof__进行检查。\n\n## 二、JAVA中 Object类是所有类的超类\n\n### 1.有关散列hasCode的问题：\n```\nString s=\"OK\";\nStringBuilder sb=new StringBuilder(s);\nSystem.out.println(s.hashCode()+\" \"+sb.hasCode());\nString t=new String(\"OK\");\nStringBuilder tb=new StringBuilder(t);\nSystem.out.println(t.hashCode()+\"\"+tb.hasCode());\n```\n打印出来可知，字符串s和t拥有相同的散列码，**字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等**\n\n### 2.toString方法\n绝大多数的toString方法，遵循以下格式：\n类的名字，随后是一对方括号起来的域值；\n```\npublic String toString()\n{\nreturn getClass().getName()+\"[name=\"+name+\",salary=\"+salary+\",hireDay\"+hireDay+\"]\";\n}\n```\n只要对象与一个字符串通过操作符__“+”__连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；\n\n### 3.泛型数组列表\n主要是实现动态数组\n ```\n ArrayList<Employee> staff=new ArrayList<>(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；\n ```\n ArrayList是一个采用类型参数的范类型\n\n\n","slug":"JAVA的学习之第五章","published":1,"updated":"2017-02-20T11:51:29.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauy70007fwv1z8hy21c7","content":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br><a id=\"more\"></a></p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>本章主要是讲述OOP中的<strong>继承（inheritance）</strong>，利用继承，人们可以基于已存在的类构造一个新类，继承已存在的类也就是复用这些类的方法和域。<br>","more":"</p>\n<h2 id=\"一、类、超类和子类\"><a href=\"#一、类、超类和子类\" class=\"headerlink\" title=\"一、类、超类和子类\"></a>一、类、超类和子类</h2><p>继承的定义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Manager extends Employee//Java 用关键字extends代替C++中的冒号：，Java中所有的继承都是公有继承，没有私有继承和保护继承</div><div class=\"line\">&#123;</div><div class=\"line\">//add new files and methods</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee称为超类（superclass），基类（base class）或父类（parent class）；Maanager称为子类（subclass）、派生类（derived class）或孩子类（child class）。</div></pre></td></tr></table></figure></p>\n<h3 id=\"1-易错点：\"><a href=\"#1-易错点：\" class=\"headerlink\" title=\"1. 易错点：\"></a>1. 易错点：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Manager boss=new Manger(...);</div><div class=\"line\">Employee[] staff=new Employee[3];</div><div class=\"line\">staff[0]=boss;</div><div class=\"line\"></div><div class=\"line\">boss.setBonus(5000);//OK</div><div class=\"line\">staff[0].setBonus(5000);//EROR</div><div class=\"line\"></div><div class=\"line\">Manager m=staff[i];//EROR</div><div class=\"line\">Employee[] staff=managers;//OK</div><div class=\"line\">Manager boss=(Manager) staff[0];//ok</div></pre></td></tr></table></figure>\n<p>上个例子中，变量staff[0]与boss引用同一个对象，编译器将staff[0]看成Employee对象，故语句6错误；<br>语句8错误的原因，并不是所有的雇员都是经理，小不能赋值给大；<br>语句9正确的原因，所有的经理都是雇员，大（子类，大指的是域值大）可以赋值给小（父类）；<br>总结：<strong>只能大赋小</strong><br>语句10正确的原因，父类赋值给子类必须进行强制类型转换，编译通过（本身staff[0]就是存储Manager类对象，只不过staff是Employee类的对象数组）</p>\n<p><strong>注意</strong>：在将父类转换为之类之前，应该使用<strong>instanceof</strong>进行检查。</p>\n<h2 id=\"二、JAVA中-Object类是所有类的超类\"><a href=\"#二、JAVA中-Object类是所有类的超类\" class=\"headerlink\" title=\"二、JAVA中 Object类是所有类的超类\"></a>二、JAVA中 Object类是所有类的超类</h2><h3 id=\"1-有关散列hasCode的问题：\"><a href=\"#1-有关散列hasCode的问题：\" class=\"headerlink\" title=\"1.有关散列hasCode的问题：\"></a>1.有关散列hasCode的问题：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s=&quot;OK&quot;;</div><div class=\"line\">StringBuilder sb=new StringBuilder(s);</div><div class=\"line\">System.out.println(s.hashCode()+&quot; &quot;+sb.hasCode());</div><div class=\"line\">String t=new String(&quot;OK&quot;);</div><div class=\"line\">StringBuilder tb=new StringBuilder(t);</div><div class=\"line\">System.out.println(t.hashCode()+&quot;&quot;+tb.hasCode());</div></pre></td></tr></table></figure>\n<p>打印出来可知，字符串s和t拥有相同的散列码，<strong>字符串的散列码是由内容导出的，所以字符串的散列码相等，字符串缓冲sb与tb有着不同的散列码，散列码是该对象的存储地址，可以看到不相等</strong></p>\n<h3 id=\"2-toString方法\"><a href=\"#2-toString方法\" class=\"headerlink\" title=\"2.toString方法\"></a>2.toString方法</h3><p>绝大多数的toString方法，遵循以下格式：<br>类的名字，随后是一对方括号起来的域值；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String toString()</div><div class=\"line\">&#123;</div><div class=\"line\">return getClass().getName()+&quot;[name=&quot;+name+&quot;,salary=&quot;+salary+&quot;,hireDay&quot;+hireDay+&quot;]&quot;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只要对象与一个字符串通过操作符<strong>“+”</strong>连接起来，Java编译就会自动地调用toString方法，获得对象的字符串描述；</p>\n<h3 id=\"3-泛型数组列表\"><a href=\"#3-泛型数组列表\" class=\"headerlink\" title=\"3.泛型数组列表\"></a>3.泛型数组列表</h3><p>主要是实现动态数组<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayList&lt;Employee&gt; staff=new ArrayList&lt;&gt;(填写初始容量);//在添加或删除元素时，具有自动调节数组容量的功能；</div></pre></td></tr></table></figure></p>\n<p> ArrayList是一个采用类型参数的范类型</p>"},{"title":"JAVA的学习之第四章","date":"2017-02-16T13:01:13.000Z","_content":"\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n \n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n \n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```","source":"_posts/JAVA的学习之第四章.md","raw":"---\ntitle: JAVA的学习之第四章\ndate: 2017-02-16 21:01:13\ntags: JAVA\n---\n\n1.对实例域做出修改的方法称为**更改器**方法，仅仅访问实例域而不进行修改的方法称为**访问器**方法；\n\n2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；\n\n3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；\n\n<!-- more -->\n\n4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；\n\n5.修饰符中的final以及static的区别和联系？\nstatic表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；\nfinal表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；\n\n6.\n```\nclass Employee\n{\n private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个\n private int id;//所有实例（对象）均有各自的拷贝\n....\n}\n```\n \n 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；\n \n 8.类中的静态main方法，用于测试类\n 二，值调用和引用调用，Java对对像采用的是值专递；总结：\n\n - 一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）\n - 一个方法可以改变一个对象参数的状态；\n - 一个方法不能让对象参数引用一个新的对象；\n\n9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；\n\n10，\n```\npubli Employee(String name,doble salary)//类的构造器\n{\nthis.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来\nthis.salary=salary;\n}\n```\n\n11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）\n\n - 列表项\n\n```\npublic class Window extends Container\n{\n String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！\n ...\n}\n```","slug":"JAVA的学习之第四章","published":1,"updated":"2017-02-20T11:51:29.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauyb0008fwv1qot0lmju","content":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>\n<a id=\"more\"></a>\n<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>1.对实例域做出修改的方法称为<strong>更改器</strong>方法，仅仅访问实例域而不进行修改的方法称为<strong>访问器</strong>方法；</p>\n<p>2.在一个源文件中，只能有一个公共类，但可以有任意数目的非公共类；</p>\n<p>3.数据成员也就是实例域，建议都是使用private修饰，确保封装性；</p>","more":"<p>4.私有的方法（private）不会被外部的其他类操作调用，可以将其删去，如果方法是公有的（public）就不能将其删去，因为其他代码可能依赖它；</p>\n<p>5.修饰符中的final以及static的区别和联系？<br>static表示不要实例化就可以使用，修饰的变量或者方法被所有实例共享；<br>final表示不可改变，终态，可以理解为常量，一旦在类中定义并且初始化，就不可改变；</p>\n<p>6.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">class Employee</div><div class=\"line\">&#123;</div><div class=\"line\"> private static int nextId=1;//该类的所有事例将共享一个nextID，也就是说只有一个</div><div class=\"line\"> private int id;//所有实例（对象）均有各自的拷贝</div><div class=\"line\">....</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 7.静态方法不能操作对象，不能在静态方法中访问实例域，只能访问自身类中的静态域；可以通过类名直接调用静态方法；由static修饰的变量或者函数，表示属于类且不属于类对象的变量和函数；</p>\n<p> 8.类中的静态main方法，用于测试类<br> 二，值调用和引用调用，Java对对像采用的是值专递；总结：</p>\n<ul>\n<li>一个方法不能修改一个基本的数据类型的参数（数值型和布尔型）</li>\n<li>一个方法可以改变一个对象参数的状态；</li>\n<li>一个方法不能让对象参数引用一个新的对象；</li>\n</ul>\n<p>9.如果构造器中没有显式的给域赋予初值，那么就会被自动的赋予默认值：数值为0、布尔值为false，对象引用为null；</p>\n<p>10，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">publi Employee(String name,doble salary)//类的构造器</div><div class=\"line\">&#123;</div><div class=\"line\">this.name=name;//this指示隐式参数，也就是实际的实例值，参数变量用相同的名字将实例域屏蔽起来</div><div class=\"line\">this.salary=salary;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11，Java使用包（package）的主要原因是确保类名的唯一性，相当于C++中的命名空间（namespace），一个源文件中只能包含一个公共类（public static void main(){}）</p>\n<ul>\n<li>列表项</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Window extends Container</div><div class=\"line\">&#123;</div><div class=\"line\"> String warningString;//没有指定访问修饰符public 和 private，这里的变量默认不是private，意味着java.awt包中所有的类的方法都可以访问该变量！</div><div class=\"line\"> ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"新环境下Hexo博客部署及维护","date":"2017-02-19T16:00:00.000Z","_content":"   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。\n   <!-- more -->\n## 准备工作\n之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：\n\n - master分支：存放博客部署的静态文件(也就是public文件夹下的内容)\n - hexo分支：存放博客源文件，配置文件等\n\n在新环境(Windows)下安装配置*Git，Node.js，Python*;Python建议下载2.7版本，安装好后别忘了配置环境变量。\n提供下载链接：\n\n- [Git](https://github.com/waylau/git-for-win)\n- [Node.js](https://nodejs.org/en/download/)\n- [Python](https://www.python.org/downloads/)\n\n\n## 新环境部署\n首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行**Git Bash Here,**然后克隆你的远程仓库，也就是hexo分支上的内容；\n` git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog`\n### 问题一\n出现clone失败报错（Filename too long）：\n```\nGitHub.IO.ProcessException: fatal: unable to stat 'plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class': Filename too long\n```\n后面各种找解决方法，终于找到一个靠谱的方案: [Solution](http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows)，原因也解释的很清楚；\n在Bash中键入命令:`git config --system core.longpaths true `; 问题解决。\n### 问题二\n进入博客根目录：` cd newBlog`；然后依次键入下列命令**[1]**：\n```\nnpm install -g hexo-cli\nnpm install\nnpm install hexo -server --save\nnpm install hexo-deployer-git --save\n```\n出现各种问题，无法安装*hexo*:\n```\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"c:\\\\Program Files\\\\nodejs\\\\node.exe\" \"c:\\\\Program Files\\\\nodej\ns\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\nnpm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat\nnpm ERR! node -v v0.10.28\nnpm ERR! npm -v 1.4.9\nnpm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package\nnpm ERR! code EPERM\nnpm ERR! errno 50\nnpm ERR! stack Error: EPERM, unlink 'C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i\nnherits\\2.0.1\\package'\nnpm http 200 https://registry.npmjs.org/qs\n```\n找到解决方案，依次键入下列命令：\n```\nnpm config get registry\nnpm cache clean\nnpm install express\n```\n问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；\n### 问题三\n执行` hexo clean`,出现下列问题：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png)\n根据提示键入命令安装：\n`npm rebuild node-sass`\n安装过程出现各种` npm error，gyp error`，在查找问题过程中，出错信息提示：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png)\n\n那就新环境下安装**Python！**，忘安装了..\n至此，问题全部解决，可以愉快的写博客了！\n\n## 参考博客\n1.[Hexo博客多电脑同步及更换电脑后处理方式](http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/)\n2.[在不同的电脑维护Hexo和写作](http://www.rvclient.com/2016/05/21/hexo-everywhere/)\n","source":"_posts/新环境下Hexo博客部署及维护.md","raw":"---\ntitle: 新环境下Hexo博客部署及维护\ndate: 2017-02-20\ncategories: hexo\ntags: [git,hexo]\n---\n   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。\n   <!-- more -->\n## 准备工作\n之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：\n\n - master分支：存放博客部署的静态文件(也就是public文件夹下的内容)\n - hexo分支：存放博客源文件，配置文件等\n\n在新环境(Windows)下安装配置*Git，Node.js，Python*;Python建议下载2.7版本，安装好后别忘了配置环境变量。\n提供下载链接：\n\n- [Git](https://github.com/waylau/git-for-win)\n- [Node.js](https://nodejs.org/en/download/)\n- [Python](https://www.python.org/downloads/)\n\n\n## 新环境部署\n首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行**Git Bash Here,**然后克隆你的远程仓库，也就是hexo分支上的内容；\n` git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog`\n### 问题一\n出现clone失败报错（Filename too long）：\n```\nGitHub.IO.ProcessException: fatal: unable to stat 'plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class': Filename too long\n```\n后面各种找解决方法，终于找到一个靠谱的方案: [Solution](http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows)，原因也解释的很清楚；\n在Bash中键入命令:`git config --system core.longpaths true `; 问题解决。\n### 问题二\n进入博客根目录：` cd newBlog`；然后依次键入下列命令**[1]**：\n```\nnpm install -g hexo-cli\nnpm install\nnpm install hexo -server --save\nnpm install hexo-deployer-git --save\n```\n出现各种问题，无法安装*hexo*:\n```\nnpm ERR! System Windows_NT 6.1.7601\nnpm ERR! command \"c:\\\\Program Files\\\\nodejs\\\\node.exe\" \"c:\\\\Program Files\\\\nodej\ns\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\nnpm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat\nnpm ERR! node -v v0.10.28\nnpm ERR! npm -v 1.4.9\nnpm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package\nnpm ERR! code EPERM\nnpm ERR! errno 50\nnpm ERR! stack Error: EPERM, unlink 'C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i\nnherits\\2.0.1\\package'\nnpm http 200 https://registry.npmjs.org/qs\n```\n找到解决方案，依次键入下列命令：\n```\nnpm config get registry\nnpm cache clean\nnpm install express\n```\n问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；\n### 问题三\n执行` hexo clean`,出现下列问题：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png)\n根据提示键入命令安装：\n`npm rebuild node-sass`\n安装过程出现各种` npm error，gyp error`，在查找问题过程中，出错信息提示：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png)\n\n那就新环境下安装**Python！**，忘安装了..\n至此，问题全部解决，可以愉快的写博客了！\n\n## 参考博客\n1.[Hexo博客多电脑同步及更换电脑后处理方式](http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/)\n2.[在不同的电脑维护Hexo和写作](http://www.rvclient.com/2016/05/21/hexo-everywhere/)\n","slug":"新环境下Hexo博客部署及维护","published":1,"updated":"2017-04-28T03:49:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauyf0009fwv1vub964en","content":"<p>   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。<br>   <a id=\"more\"></a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：</p>\n<ul>\n<li>master分支：存放博客部署的静态文件(也就是public文件夹下的内容)</li>\n<li>hexo分支：存放博客源文件，配置文件等</li>\n</ul>\n<p>在新环境(Windows)下安装配置<em>Git，Node.js，Python</em>;Python建议下载2.7版本，安装好后别忘了配置环境变量。<br>提供下载链接：</p>\n<ul>\n<li><a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">Git</a></li>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"external\">Python</a></li>\n</ul>\n<h2 id=\"新环境部署\"><a href=\"#新环境部署\" class=\"headerlink\" title=\"新环境部署\"></a>新环境部署</h2><p>首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行<strong>Git Bash Here,</strong>然后克隆你的远程仓库，也就是hexo分支上的内容；<br><code>git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog</code></p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>出现clone失败报错（Filename too long）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GitHub.IO.ProcessException: fatal: unable to stat &apos;plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class&apos;: Filename too long</div></pre></td></tr></table></figure></p>\n<p>后面各种找解决方法，终于找到一个靠谱的方案: <a href=\"http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows\" target=\"_blank\" rel=\"external\">Solution</a>，原因也解释的很清楚；<br>在Bash中键入命令:<code>git config --system core.longpaths true</code>; 问题解决。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>进入博客根目录：<code>cd newBlog</code>；然后依次键入下列命令<strong>[1]</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\">npm install</div><div class=\"line\">npm install hexo -server --save</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>出现各种问题，无法安装<em>hexo</em>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ERR! System Windows_NT 6.1.7601</div><div class=\"line\">npm ERR! command &quot;c:\\\\Program Files\\\\nodejs\\\\node.exe&quot; &quot;c:\\\\Program Files\\\\nodej</div><div class=\"line\">s\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;install&quot;</div><div class=\"line\">npm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat</div><div class=\"line\">npm ERR! node -v v0.10.28</div><div class=\"line\">npm ERR! npm -v 1.4.9</div><div class=\"line\">npm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package</div><div class=\"line\">npm ERR! code EPERM</div><div class=\"line\">npm ERR! errno 50</div><div class=\"line\">npm ERR! stack Error: EPERM, unlink &apos;C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i</div><div class=\"line\">nherits\\2.0.1\\package&apos;</div><div class=\"line\">npm http 200 https://registry.npmjs.org/qs</div></pre></td></tr></table></figure></p>\n<p>找到解决方案，依次键入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config get registry</div><div class=\"line\">npm cache clean</div><div class=\"line\">npm install express</div></pre></td></tr></table></figure></p>\n<p>问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；</p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>执行<code>hexo clean</code>,出现下列问题：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png\" alt=\"\"><br>根据提示键入命令安装：<br><code>npm rebuild node-sass</code><br>安装过程出现各种<code>npm error，gyp error</code>，在查找问题过程中，出错信息提示：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png\" alt=\"\"></p>\n<p>那就新环境下安装<strong>Python！</strong>，忘安装了..<br>至此，问题全部解决，可以愉快的写博客了！</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p>1.<a href=\"http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"external\">Hexo博客多电脑同步及更换电脑后处理方式</a><br>2.<a href=\"http://www.rvclient.com/2016/05/21/hexo-everywhere/\" target=\"_blank\" rel=\"external\">在不同的电脑维护Hexo和写作</a></p>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>   之前的博客源码一直放在Linux（CentOS）环境下，最近想要更新博客，发现在Linux环境下编辑Markdown文件各种不方便；在Windows环境写好后再传到Linux环境下再部署总觉得多此一举，遂想要将博客迁移出来，期间遇到了各种问题，还好都解决了。将出现的问题及解决方法总结记录下来，以后或许还能用上。<br>","more":"</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>之前博主已经将博客源码推送至github中，和多数人一样，是一个仓库做两个分支：</p>\n<ul>\n<li>master分支：存放博客部署的静态文件(也就是public文件夹下的内容)</li>\n<li>hexo分支：存放博客源文件，配置文件等</li>\n</ul>\n<p>在新环境(Windows)下安装配置<em>Git，Node.js，Python</em>;Python建议下载2.7版本，安装好后别忘了配置环境变量。<br>提供下载链接：</p>\n<ul>\n<li><a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">Git</a></li>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"external\">Python</a></li>\n</ul>\n<h2 id=\"新环境部署\"><a href=\"#新环境部署\" class=\"headerlink\" title=\"新环境部署\"></a>新环境部署</h2><p>首先在我们新环境下为我们的博客新建一个目录blog。在该目录下右键执行<strong>Git Bash Here,</strong>然后克隆你的远程仓库，也就是hexo分支上的内容；<br><code>git clone https://github.com/bodycoder101/bodycoder101.github.io.git newBlog</code></p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>出现clone失败报错（Filename too long）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GitHub.IO.ProcessException: fatal: unable to stat &apos;plugins/toolongname/example/app/platforms/toolongname/toolongname/build/intermediates/classes/debug/org/toolongname/toolongname/toolongname$toolongname$toolongname.class&apos;: Filename too long</div></pre></td></tr></table></figure></p>\n<p>后面各种找解决方法，终于找到一个靠谱的方案: <a href=\"http://ourcodeworld.com/articles/read/109/how-to-solve-filename-too-long-error-in-git-powershell-and-github-application-for-windows\" target=\"_blank\" rel=\"external\">Solution</a>，原因也解释的很清楚；<br>在Bash中键入命令:<code>git config --system core.longpaths true</code>; 问题解决。</p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>进入博客根目录：<code>cd newBlog</code>；然后依次键入下列命令<strong>[1]</strong>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div><div class=\"line\">npm install</div><div class=\"line\">npm install hexo -server --save</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>\n<p>出现各种问题，无法安装<em>hexo</em>:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ERR! System Windows_NT 6.1.7601</div><div class=\"line\">npm ERR! command &quot;c:\\\\Program Files\\\\nodejs\\\\node.exe&quot; &quot;c:\\\\Program Files\\\\nodej</div><div class=\"line\">s\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js&quot; &quot;install&quot;</div><div class=\"line\">npm ERR! cwd f:\\Workspace\\Angular_workspace\\angular-phonecat</div><div class=\"line\">npm ERR! node -v v0.10.28</div><div class=\"line\">npm ERR! npm -v 1.4.9</div><div class=\"line\">npm ERR! path C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\inherits\\2.0.1\\package</div><div class=\"line\">npm ERR! code EPERM</div><div class=\"line\">npm ERR! errno 50</div><div class=\"line\">npm ERR! stack Error: EPERM, unlink &apos;C:\\Users\\Shivam\\AppData\\Roaming\\npm-cache\\i</div><div class=\"line\">nherits\\2.0.1\\package&apos;</div><div class=\"line\">npm http 200 https://registry.npmjs.org/qs</div></pre></td></tr></table></figure></p>\n<p>找到解决方案，依次键入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm config get registry</div><div class=\"line\">npm cache clean</div><div class=\"line\">npm install express</div></pre></td></tr></table></figure></p>\n<p>问题完美的解决，然后重新执行[1]处命令，就在博主认为可以愉快的写博客的时候，问题又出现了；</p>\n<h3 id=\"问题三\"><a href=\"#问题三\" class=\"headerlink\" title=\"问题三\"></a>问题三</h3><p>执行<code>hexo clean</code>,出现下列问题：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/hexo_clean_error.png\" alt=\"\"><br>根据提示键入命令安装：<br><code>npm rebuild node-sass</code><br>安装过程出现各种<code>npm error，gyp error</code>，在查找问题过程中，出错信息提示：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/could_not_find_python.png\" alt=\"\"></p>\n<p>那就新环境下安装<strong>Python！</strong>，忘安装了..<br>至此，问题全部解决，可以愉快的写博客了！</p>\n<h2 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h2><p>1.<a href=\"http://www.lzblog.cn/2016/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E5%8F%8A%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"external\">Hexo博客多电脑同步及更换电脑后处理方式</a><br>2.<a href=\"http://www.rvclient.com/2016/05/21/hexo-everywhere/\" target=\"_blank\" rel=\"external\">在不同的电脑维护Hexo和写作</a></p>"},{"title":"Java学习之集合框架（上）","date":"2017-03-26T06:39:43.000Z","_content":"# 相关概念\n\n框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有**共同属性**的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。\n\n<!-- more -->\n\n# 集合的作用\n\n - 在类的内部对数据进行组织；\n - 简单而快速地搜索大数量的条目数据；\n - 提供统一的接口，将不同对象封装在一起，便于操作和管理；\n - 有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；\n - 有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。\n\n# 集合和数组的选择\n\n**为什么选择集合而不是数组？**\n 1. 数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；\n 2. 集合可以存储和操作数目不固定的一组数据；\n 3. 若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；\n 4. 查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。\n\n# 集合框架体系结构\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png)\n我们关注常用的几个接口：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png)\n- 从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；\n- 第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；\n- List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。\n\n# 代码演示\n\n**课程类（Course.java）**\n\n```java\npackage com.imooc.collection;\n\npublic class Course {\n\n    public String id;\n    public String name;\n\n    public Course(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n}\n\n```\n\n**学生类（Student.java)**\n\n```java\npackage com.imooc.collection;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Student {\n\n    public String id;\n    public String name;\n\n    public Set<Course> courses;//使用泛型规定courses的类型\n\n    public Student(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.courses = new HashSet<Course>();//用set的实现类HashSet进行初始化\n    }\n}\n```\n\n**ArrayList增删改查（ListTest.java）**\n\n```java\npackage com.imooc.collection;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\npublic class ListTest {\n\n    /*List中的元素是有序并且可以重复的*/\n    public List CoursesToSelect;\n\n    public ListTest(){\n        //注意List是个接口，不能直接将其实例化\n        this.CoursesToSelect = new ArrayList();\n    }\n\n    public void TestAdd(){\n\n        /*---普通add测试---*/\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        /*---指定位置add测试，下挤---*/\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);//添加到第一个位置，会将原有的挤下去。\n\n\n        /*---越界add测试---*/\n        //Course cr3 = new Course(\"3\",\"JAVA\");\n        //CoursesToSelect.add(3, cr3);\n        /*\n         * 注意！！\n         * 0，1，2均不报错\n         * 3报错：java.lang.IndexOutOfBoundsException  下标越界\n         * */\n\n\n        /*---普通组合add添加---*/\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        /*---指定位置组合add添加---*/\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testQueryAll(){  //查看全部元素\n        System.out.println(\"普通遍历List\");\n        for(int i=0;i<CoursesToSelect.size();i++){\n            /*对象存入集合都变成Object类型，取出时需要类型转换*/\n            Course tempCourse = (Course) CoursesToSelect.get(i);\n            System.out.println(\"课程\"+(i+1)+\":\"+tempCourse.name+\" 课程id:\"+tempCourse.id);\n        }\n    }\n\n    public void testIterator(){  //通过迭代器遍历List\n\n        System.out.println(\"通过迭代器遍历List\");\n        //迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在\n        //迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例\n        Iterator it = CoursesToSelect.iterator();\n        while(it.hasNext()){\n            Course cr = (Course) it.next();\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testForEach(){  //通过foreach遍历List\n\n        System.out.println(\"通过foreach遍历List\");\n        for(Object obj:CoursesToSelect){\n            Course cr = (Course)obj;\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testModify(){  //修改\n        CoursesToSelect.set(0, new Course(\"100\",\"Spring\"));\n    }\n\n    public void testRemove(){  //删除，记住每删除一次，元素都会上移\n\n        CoursesToSelect.remove(1);//删除的第一种方式\n\n        /*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/\n        Course cr = (Course) CoursesToSelect.get(2);   //删除的第二种方式\n        CoursesToSelect.remove(cr);\n\n        Course[] courseList =\n                {(Course) CoursesToSelect.get(1),\n                (Course) CoursesToSelect.get(2),\n                (Course) CoursesToSelect.get(3)};\n        CoursesToSelect.removeAll(Arrays.asList(courseList));   //删除的第三种方式，removeAll\n\n    }\n\n    public static void main(String[] args){\n\n        ListTest lt = new ListTest();\n        lt.TestAdd();\n        lt.testQueryAll();\n        lt.testIterator();\n        lt.testModify();  //修改课程\n        lt.testRemove();  //删除课程\n        lt.testForEach();\n    }\n}\n```\n\n**Set集合的基本用法(SetTest.java)**\n\n```java\npackage com.imooc.collection;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SetTest {\n\n    public List<Course> CoursesToSelect;\n    public SetTest(){\n        this.CoursesToSelect = new ArrayList<Course>();//待选课程是使用数组序列存放\n    }\n\n    public void TestAdd(){\n\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);\n\n\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testForEach(){  \n        for(Course course:CoursesToSelect){\n            System.out.println(\"课程:\"+course.name+\" 课程id:\"+course.id);\n        }\n    }\n\n    public static void main(String[] args){\n        SetTest st = new SetTest();\n        st.TestAdd();\n        st.testForEach();\n\n        //创建一个学生对象\n        Student stu1= new Student(\"1\",\"小明\");\n        System.out.println(\"欢迎\"+stu1.name+\"选课！\");\n\n        Scanner sc = new Scanner(System.in);\n        for(int i=0;i<3;i++){\n\n            System.out.println(\"请输入课程ID\");\n            String courseId = sc.next();\n\n            for(Course course:st.CoursesToSelect){\n                if(course.id.equals(courseId)){  //字符串是对象,其equals()方法比较的是实际内容！\n                    stu1.courses.add(course); //将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）\n                }\n            }\n        }\n\n        st.testForEachForSet(stu1);\n    }\n\n    public void testForEachForSet(Student stu){\n\n        //打印输出学生所选的课程\n        //遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。\n        //Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）\n        //Set是可以添加空对象的，null\n        //Set没有提供像List那样的set()方法，因为Set集合是无序的\n\n        System.out.println(\"共选择了\"+stu.courses.size()+\"门课程\");\n        for(Course course:stu.courses){\n            System.out.println(stu.name+\"选择了\"+course.name+\" 课程id:\"+course.id);\n        }\n        //没有介绍的关于Set的remove(),size()等方法，大致跟List一样\n    }\n}\n\n```\n-EOF\n\n# 参考博文\n[Java集合框架](http://blog.csdn.net/qq_33290787/article/details/51781036)\n[Java - 集合框架完全解析](http://www.open-open.com/lib/view/open1474167415464.html)\n","source":"_posts/JAVA学习之集合框架（上）.md","raw":"---\ntitle: Java学习之集合框架（上）\ndate: 2017-03-26 14:39:43\ncategories: Java SE\ntags: Java\n---\n# 相关概念\n\n框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有**共同属性**的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。\n\n<!-- more -->\n\n# 集合的作用\n\n - 在类的内部对数据进行组织；\n - 简单而快速地搜索大数量的条目数据；\n - 提供统一的接口，将不同对象封装在一起，便于操作和管理；\n - 有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；\n - 有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。\n\n# 集合和数组的选择\n\n**为什么选择集合而不是数组？**\n 1. 数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；\n 2. 集合可以存储和操作数目不固定的一组数据；\n 3. 若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；\n 4. 查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。\n\n# 集合框架体系结构\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png)\n我们关注常用的几个接口：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png)\n- 从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；\n- 第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；\n- List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。\n\n# 代码演示\n\n**课程类（Course.java）**\n\n```java\npackage com.imooc.collection;\n\npublic class Course {\n\n    public String id;\n    public String name;\n\n    public Course(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n}\n\n```\n\n**学生类（Student.java)**\n\n```java\npackage com.imooc.collection;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Student {\n\n    public String id;\n    public String name;\n\n    public Set<Course> courses;//使用泛型规定courses的类型\n\n    public Student(String id, String name) {\n        super();\n        this.id = id;\n        this.name = name;\n        this.courses = new HashSet<Course>();//用set的实现类HashSet进行初始化\n    }\n}\n```\n\n**ArrayList增删改查（ListTest.java）**\n\n```java\npackage com.imooc.collection;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\npublic class ListTest {\n\n    /*List中的元素是有序并且可以重复的*/\n    public List CoursesToSelect;\n\n    public ListTest(){\n        //注意List是个接口，不能直接将其实例化\n        this.CoursesToSelect = new ArrayList();\n    }\n\n    public void TestAdd(){\n\n        /*---普通add测试---*/\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        /*---指定位置add测试，下挤---*/\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);//添加到第一个位置，会将原有的挤下去。\n\n\n        /*---越界add测试---*/\n        //Course cr3 = new Course(\"3\",\"JAVA\");\n        //CoursesToSelect.add(3, cr3);\n        /*\n         * 注意！！\n         * 0，1，2均不报错\n         * 3报错：java.lang.IndexOutOfBoundsException  下标越界\n         * */\n\n\n        /*---普通组合add添加---*/\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        /*---指定位置组合add添加---*/\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testQueryAll(){  //查看全部元素\n        System.out.println(\"普通遍历List\");\n        for(int i=0;i<CoursesToSelect.size();i++){\n            /*对象存入集合都变成Object类型，取出时需要类型转换*/\n            Course tempCourse = (Course) CoursesToSelect.get(i);\n            System.out.println(\"课程\"+(i+1)+\":\"+tempCourse.name+\" 课程id:\"+tempCourse.id);\n        }\n    }\n\n    public void testIterator(){  //通过迭代器遍历List\n\n        System.out.println(\"通过迭代器遍历List\");\n        //迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在\n        //迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例\n        Iterator it = CoursesToSelect.iterator();\n        while(it.hasNext()){\n            Course cr = (Course) it.next();\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testForEach(){  //通过foreach遍历List\n\n        System.out.println(\"通过foreach遍历List\");\n        for(Object obj:CoursesToSelect){\n            Course cr = (Course)obj;\n            System.out.println(\"课程:\"+cr.name+\" 课程id:\"+cr.id);\n        }\n    }\n\n    public void testModify(){  //修改\n        CoursesToSelect.set(0, new Course(\"100\",\"Spring\"));\n    }\n\n    public void testRemove(){  //删除，记住每删除一次，元素都会上移\n\n        CoursesToSelect.remove(1);//删除的第一种方式\n\n        /*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/\n        Course cr = (Course) CoursesToSelect.get(2);   //删除的第二种方式\n        CoursesToSelect.remove(cr);\n\n        Course[] courseList =\n                {(Course) CoursesToSelect.get(1),\n                (Course) CoursesToSelect.get(2),\n                (Course) CoursesToSelect.get(3)};\n        CoursesToSelect.removeAll(Arrays.asList(courseList));   //删除的第三种方式，removeAll\n\n    }\n\n    public static void main(String[] args){\n\n        ListTest lt = new ListTest();\n        lt.TestAdd();\n        lt.testQueryAll();\n        lt.testIterator();\n        lt.testModify();  //修改课程\n        lt.testRemove();  //删除课程\n        lt.testForEach();\n    }\n}\n```\n\n**Set集合的基本用法(SetTest.java)**\n\n```java\npackage com.imooc.collection;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SetTest {\n\n    public List<Course> CoursesToSelect;\n    public SetTest(){\n        this.CoursesToSelect = new ArrayList<Course>();//待选课程是使用数组序列存放\n    }\n\n    public void TestAdd(){\n\n        Course cr1 = new Course(\"1\",\"数据结构\");\n        CoursesToSelect.add(cr1);\n\n\n        Course cr2 = new Course(\"2\",\"常用算法\");\n        CoursesToSelect.add(0, cr2);\n\n\n        Course[] courseList = {new Course(\"3\",\"Javaweb\"),new Course(\"4\",\"数据库\")};\n        CoursesToSelect.addAll(Arrays.asList(courseList));\n\n\n        Course[] courseList2 = {new Course(\"5\",\"高等数学\"),new Course(\"6\",\"计算机网络\")};\n        CoursesToSelect.addAll(2,Arrays.asList(courseList2));\n    }\n\n    public void testForEach(){  \n        for(Course course:CoursesToSelect){\n            System.out.println(\"课程:\"+course.name+\" 课程id:\"+course.id);\n        }\n    }\n\n    public static void main(String[] args){\n        SetTest st = new SetTest();\n        st.TestAdd();\n        st.testForEach();\n\n        //创建一个学生对象\n        Student stu1= new Student(\"1\",\"小明\");\n        System.out.println(\"欢迎\"+stu1.name+\"选课！\");\n\n        Scanner sc = new Scanner(System.in);\n        for(int i=0;i<3;i++){\n\n            System.out.println(\"请输入课程ID\");\n            String courseId = sc.next();\n\n            for(Course course:st.CoursesToSelect){\n                if(course.id.equals(courseId)){  //字符串是对象,其equals()方法比较的是实际内容！\n                    stu1.courses.add(course); //将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）\n                }\n            }\n        }\n\n        st.testForEachForSet(stu1);\n    }\n\n    public void testForEachForSet(Student stu){\n\n        //打印输出学生所选的课程\n        //遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。\n        //Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）\n        //Set是可以添加空对象的，null\n        //Set没有提供像List那样的set()方法，因为Set集合是无序的\n\n        System.out.println(\"共选择了\"+stu.courses.size()+\"门课程\");\n        for(Course course:stu.courses){\n            System.out.println(stu.name+\"选择了\"+course.name+\" 课程id:\"+course.id);\n        }\n        //没有介绍的关于Set的remove(),size()等方法，大致跟List一样\n    }\n}\n\n```\n-EOF\n\n# 参考博文\n[Java集合框架](http://blog.csdn.net/qq_33290787/article/details/51781036)\n[Java - 集合框架完全解析](http://www.open-open.com/lib/view/open1474167415464.html)\n","slug":"JAVA学习之集合框架（上）","published":1,"updated":"2017-03-27T09:10:53.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauyo000dfwv1drnlpu66","content":"<h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><p>框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有<strong>共同属性</strong>的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。</p>\n<a id=\"more\"></a>\n<h1 id=\"集合的作用\"><a href=\"#集合的作用\" class=\"headerlink\" title=\"集合的作用\"></a>集合的作用</h1><ul>\n<li>在类的内部对数据进行组织；</li>\n<li>简单而快速地搜索大数量的条目数据；</li>\n<li>提供统一的接口，将不同对象封装在一起，便于操作和管理；</li>\n<li>有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；</li>\n<li>有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。</li>\n</ul>\n<h1 id=\"集合和数组的选择\"><a href=\"#集合和数组的选择\" class=\"headerlink\" title=\"集合和数组的选择\"></a>集合和数组的选择</h1><p><strong>为什么选择集合而不是数组？</strong></p>\n<ol>\n<li>数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；</li>\n<li>集合可以存储和操作数目不固定的一组数据；</li>\n<li>若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；</li>\n<li>查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。</li>\n</ol>\n<h1 id=\"集合框架体系结构\"><a href=\"#集合框架体系结构\" class=\"headerlink\" title=\"集合框架体系结构\"></a>集合框架体系结构</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png\" alt=\"\"><br>我们关注常用的几个接口：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png\" alt=\"\"></p>\n<ul>\n<li>从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；</li>\n<li>第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；</li>\n<li>List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。</li>\n</ul>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p><strong>课程类（Course.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Course</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String id;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Course</span><span class=\"params\">(String id, String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>学生类（Student.java)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String id;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Set&lt;Course&gt; courses;<span class=\"comment\">//使用泛型规定courses的类型</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String id, String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.courses = <span class=\"keyword\">new</span> HashSet&lt;Course&gt;();<span class=\"comment\">//用set的实现类HashSet进行初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ArrayList增删改查（ListTest.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*List中的元素是有序并且可以重复的*/</span></div><div class=\"line\">    <span class=\"keyword\">public</span> List CoursesToSelect;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//注意List是个接口，不能直接将其实例化</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.CoursesToSelect = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestAdd</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---普通add测试---*/</span></div><div class=\"line\">        Course cr1 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"数据结构\"</span>);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---指定位置add测试，下挤---*/</span></div><div class=\"line\">        Course cr2 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"常用算法\"</span>);</div><div class=\"line\">        CoursesToSelect.add(<span class=\"number\">0</span>, cr2);<span class=\"comment\">//添加到第一个位置，会将原有的挤下去。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---越界add测试---*/</span></div><div class=\"line\">        <span class=\"comment\">//Course cr3 = new Course(\"3\",\"JAVA\");</span></div><div class=\"line\">        <span class=\"comment\">//CoursesToSelect.add(3, cr3);</span></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * 注意！！</div><div class=\"line\">         * 0，1，2均不报错</div><div class=\"line\">         * 3报错：java.lang.IndexOutOfBoundsException  下标越界</div><div class=\"line\">         * */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---普通组合add添加---*/</span></div><div class=\"line\">        Course[] courseList = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Javaweb\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"数据库\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---指定位置组合add添加---*/</span></div><div class=\"line\">        Course[] courseList2 = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"高等数学\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"计算机网络\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(<span class=\"number\">2</span>,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQueryAll</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//查看全部元素</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"普通遍历List\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;CoursesToSelect.size();i++)&#123;</div><div class=\"line\">            <span class=\"comment\">/*对象存入集合都变成Object类型，取出时需要类型转换*/</span></div><div class=\"line\">            Course tempCourse = (Course) CoursesToSelect.get(i);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程\"</span>+(i+<span class=\"number\">1</span>)+<span class=\"string\">\":\"</span>+tempCourse.name+<span class=\"string\">\" 课程id:\"</span>+tempCourse.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testIterator</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//通过迭代器遍历List</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"通过迭代器遍历List\"</span>);</div><div class=\"line\">        <span class=\"comment\">//迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在</span></div><div class=\"line\">        <span class=\"comment\">//迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例</span></div><div class=\"line\">        Iterator it = CoursesToSelect.iterator();</div><div class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">            Course cr = (Course) it.next();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+cr.name+<span class=\"string\">\" 课程id:\"</span>+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEach</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//通过foreach遍历List</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"通过foreach遍历List\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(Object obj:CoursesToSelect)&#123;</div><div class=\"line\">            Course cr = (Course)obj;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+cr.name+<span class=\"string\">\" 课程id:\"</span>+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testModify</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//修改</span></div><div class=\"line\">        CoursesToSelect.set(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> Course(<span class=\"string\">\"100\"</span>,<span class=\"string\">\"Spring\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRemove</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//删除，记住每删除一次，元素都会上移</span></div><div class=\"line\"></div><div class=\"line\">        CoursesToSelect.remove(<span class=\"number\">1</span>);<span class=\"comment\">//删除的第一种方式</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/</span></div><div class=\"line\">        Course cr = (Course) CoursesToSelect.get(<span class=\"number\">2</span>);   <span class=\"comment\">//删除的第二种方式</span></div><div class=\"line\">        CoursesToSelect.remove(cr);</div><div class=\"line\"></div><div class=\"line\">        Course[] courseList =</div><div class=\"line\">                &#123;(Course) CoursesToSelect.get(<span class=\"number\">1</span>),</div><div class=\"line\">                (Course) CoursesToSelect.get(<span class=\"number\">2</span>),</div><div class=\"line\">                (Course) CoursesToSelect.get(<span class=\"number\">3</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.removeAll(Arrays.asList(courseList));   <span class=\"comment\">//删除的第三种方式，removeAll</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        ListTest lt = <span class=\"keyword\">new</span> ListTest();</div><div class=\"line\">        lt.TestAdd();</div><div class=\"line\">        lt.testQueryAll();</div><div class=\"line\">        lt.testIterator();</div><div class=\"line\">        lt.testModify();  <span class=\"comment\">//修改课程</span></div><div class=\"line\">        lt.testRemove();  <span class=\"comment\">//删除课程</span></div><div class=\"line\">        lt.testForEach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Set集合的基本用法(SetTest.java)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> List&lt;Course&gt; CoursesToSelect;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SetTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.CoursesToSelect = <span class=\"keyword\">new</span> ArrayList&lt;Course&gt;();<span class=\"comment\">//待选课程是使用数组序列存放</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestAdd</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Course cr1 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"数据结构\"</span>);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course cr2 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"常用算法\"</span>);</div><div class=\"line\">        CoursesToSelect.add(<span class=\"number\">0</span>, cr2);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Javaweb\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"数据库\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList2 = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"高等数学\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"计算机网络\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(<span class=\"number\">2</span>,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEach</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(Course course:CoursesToSelect)&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+course.name+<span class=\"string\">\" 课程id:\"</span>+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        SetTest st = <span class=\"keyword\">new</span> SetTest();</div><div class=\"line\">        st.TestAdd();</div><div class=\"line\">        st.testForEach();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建一个学生对象</span></div><div class=\"line\">        Student stu1= <span class=\"keyword\">new</span> Student(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"小明\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"欢迎\"</span>+stu1.name+<span class=\"string\">\"选课！\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">            System.out.println(<span class=\"string\">\"请输入课程ID\"</span>);</div><div class=\"line\">            String courseId = sc.next();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(Course course:st.CoursesToSelect)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(course.id.equals(courseId))&#123;  <span class=\"comment\">//字符串是对象,其equals()方法比较的是实际内容！</span></div><div class=\"line\">                    stu1.courses.add(course); <span class=\"comment\">//将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        st.testForEachForSet(stu1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEachForSet</span><span class=\"params\">(Student stu)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//打印输出学生所选的课程</span></div><div class=\"line\">        <span class=\"comment\">//遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。</span></div><div class=\"line\">        <span class=\"comment\">//Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）</span></div><div class=\"line\">        <span class=\"comment\">//Set是可以添加空对象的，null</span></div><div class=\"line\">        <span class=\"comment\">//Set没有提供像List那样的set()方法，因为Set集合是无序的</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"共选择了\"</span>+stu.courses.size()+<span class=\"string\">\"门课程\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(Course course:stu.courses)&#123;</div><div class=\"line\">            System.out.println(stu.name+<span class=\"string\">\"选择了\"</span>+course.name+<span class=\"string\">\" 课程id:\"</span>+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//没有介绍的关于Set的remove(),size()等方法，大致跟List一样</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>-EOF</p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p><a href=\"http://blog.csdn.net/qq_33290787/article/details/51781036\" target=\"_blank\" rel=\"external\">Java集合框架</a><br><a href=\"http://www.open-open.com/lib/view/open1474167415464.html\" target=\"_blank\" rel=\"external\">Java - 集合框架完全解析</a></p>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><p>框架（framework）是一个类的集合，奠定了创建高级功能的基础；Java中的集合类是一种工具类，相当于一个容器，可以存储任意数量的具有<strong>共同属性</strong>的对象；Java集合类库构成了集合类的框架，集合框架为集合的实现者定义了大量的接口和抽象类，基于此增加了代码的重用性。</p>","more":"<h1 id=\"集合的作用\"><a href=\"#集合的作用\" class=\"headerlink\" title=\"集合的作用\"></a>集合的作用</h1><ul>\n<li>在类的内部对数据进行组织；</li>\n<li>简单而快速地搜索大数量的条目数据；</li>\n<li>提供统一的接口，将不同对象封装在一起，便于操作和管理；</li>\n<li>有的集合接口（List），提供了一系列有序的元素，并且可以在序列中间快速插入或者删除元素；</li>\n<li>有的集合接口（Map），提供映射关系，可以通过任意类型的关键字（Key）快速的找到对应的唯一对象（Value）。</li>\n</ul>\n<h1 id=\"集合和数组的选择\"><a href=\"#集合和数组的选择\" class=\"headerlink\" title=\"集合和数组的选择\"></a>集合和数组的选择</h1><p><strong>为什么选择集合而不是数组？</strong></p>\n<ol>\n<li>数组长度固定，并且同一个数组只能存放类型一样的数据（基本类型/引用类型）；</li>\n<li>集合可以存储和操作数目不固定的一组数据；</li>\n<li>若程序时不知道究竟需要多少对象，需要在空间不足时自动扩增容量，则需要使用容器类库，数组不适用；</li>\n<li>查找元素时，数组需要一个个遍历查找，而集合（HashMap）可以通过任意关键字（Key）查找所映射的具体对象（Value），可以提高效率。</li>\n</ol>\n<h1 id=\"集合框架体系结构\"><a href=\"#集合框架体系结构\" class=\"headerlink\" title=\"集合框架体系结构\"></a>集合框架体系结构</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.png\" alt=\"\"><br>我们关注常用的几个接口：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E7%AE%80%E7%89%88.png\" alt=\"\"></p>\n<ul>\n<li>从上面的集合框架图可以看到，第一层是父接口，包含两种类型集合（Collection）和图（Map）；</li>\n<li>第二层是子接口，主要有List、Queue、Set接口，第三层是子接口对应的具体实现类；</li>\n<li>List（序列）集合中的元素是有序的且可以重复的，Set集合（数学中的集合概念）是无序的且不可重复的。</li>\n</ul>\n<h1 id=\"代码演示\"><a href=\"#代码演示\" class=\"headerlink\" title=\"代码演示\"></a>代码演示</h1><p><strong>课程类（Course.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Course</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String id;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Course</span><span class=\"params\">(String id, String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>学生类（Student.java)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> String id;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Set&lt;Course&gt; courses;<span class=\"comment\">//使用泛型规定courses的类型</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String id, String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = id;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.courses = <span class=\"keyword\">new</span> HashSet&lt;Course&gt;();<span class=\"comment\">//用set的实现类HashSet进行初始化</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>ArrayList增删改查（ListTest.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*List中的元素是有序并且可以重复的*/</span></div><div class=\"line\">    <span class=\"keyword\">public</span> List CoursesToSelect;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ListTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//注意List是个接口，不能直接将其实例化</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.CoursesToSelect = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestAdd</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---普通add测试---*/</span></div><div class=\"line\">        Course cr1 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"数据结构\"</span>);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---指定位置add测试，下挤---*/</span></div><div class=\"line\">        Course cr2 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"常用算法\"</span>);</div><div class=\"line\">        CoursesToSelect.add(<span class=\"number\">0</span>, cr2);<span class=\"comment\">//添加到第一个位置，会将原有的挤下去。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---越界add测试---*/</span></div><div class=\"line\">        <span class=\"comment\">//Course cr3 = new Course(\"3\",\"JAVA\");</span></div><div class=\"line\">        <span class=\"comment\">//CoursesToSelect.add(3, cr3);</span></div><div class=\"line\">        <span class=\"comment\">/*</span></div><div class=\"line\">         * 注意！！</div><div class=\"line\">         * 0，1，2均不报错</div><div class=\"line\">         * 3报错：java.lang.IndexOutOfBoundsException  下标越界</div><div class=\"line\">         * */</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---普通组合add添加---*/</span></div><div class=\"line\">        Course[] courseList = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Javaweb\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"数据库\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*---指定位置组合add添加---*/</span></div><div class=\"line\">        Course[] courseList2 = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"高等数学\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"计算机网络\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(<span class=\"number\">2</span>,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testQueryAll</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//查看全部元素</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"普通遍历List\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;CoursesToSelect.size();i++)&#123;</div><div class=\"line\">            <span class=\"comment\">/*对象存入集合都变成Object类型，取出时需要类型转换*/</span></div><div class=\"line\">            Course tempCourse = (Course) CoursesToSelect.get(i);</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程\"</span>+(i+<span class=\"number\">1</span>)+<span class=\"string\">\":\"</span>+tempCourse.name+<span class=\"string\">\" 课程id:\"</span>+tempCourse.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testIterator</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//通过迭代器遍历List</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"通过迭代器遍历List\"</span>);</div><div class=\"line\">        <span class=\"comment\">//迭代器是用来遍历集合中的元素的，本身不具备任何存储元素的功能；依赖于某个集合存在，本身不能独立存在</span></div><div class=\"line\">        <span class=\"comment\">//迭代器本身是个接口，通过集合的iterator()方法，取得迭代器的实例</span></div><div class=\"line\">        Iterator it = CoursesToSelect.iterator();</div><div class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">            Course cr = (Course) it.next();</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+cr.name+<span class=\"string\">\" 课程id:\"</span>+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEach</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//通过foreach遍历List</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"通过foreach遍历List\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(Object obj:CoursesToSelect)&#123;</div><div class=\"line\">            Course cr = (Course)obj;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+cr.name+<span class=\"string\">\" 课程id:\"</span>+cr.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testModify</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//修改</span></div><div class=\"line\">        CoursesToSelect.set(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> Course(<span class=\"string\">\"100\"</span>,<span class=\"string\">\"Spring\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testRemove</span><span class=\"params\">()</span></span>&#123;  <span class=\"comment\">//删除，记住每删除一次，元素都会上移</span></div><div class=\"line\"></div><div class=\"line\">        CoursesToSelect.remove(<span class=\"number\">1</span>);<span class=\"comment\">//删除的第一种方式</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*在上面删除位置1的元素后，后面的元素会整体上移，位置1又有了新元素，所以下面的语句是删除现在位置2的新元素*/</span></div><div class=\"line\">        Course cr = (Course) CoursesToSelect.get(<span class=\"number\">2</span>);   <span class=\"comment\">//删除的第二种方式</span></div><div class=\"line\">        CoursesToSelect.remove(cr);</div><div class=\"line\"></div><div class=\"line\">        Course[] courseList =</div><div class=\"line\">                &#123;(Course) CoursesToSelect.get(<span class=\"number\">1</span>),</div><div class=\"line\">                (Course) CoursesToSelect.get(<span class=\"number\">2</span>),</div><div class=\"line\">                (Course) CoursesToSelect.get(<span class=\"number\">3</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.removeAll(Arrays.asList(courseList));   <span class=\"comment\">//删除的第三种方式，removeAll</span></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        ListTest lt = <span class=\"keyword\">new</span> ListTest();</div><div class=\"line\">        lt.TestAdd();</div><div class=\"line\">        lt.testQueryAll();</div><div class=\"line\">        lt.testIterator();</div><div class=\"line\">        lt.testModify();  <span class=\"comment\">//修改课程</span></div><div class=\"line\">        lt.testRemove();  <span class=\"comment\">//删除课程</span></div><div class=\"line\">        lt.testForEach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Set集合的基本用法(SetTest.java)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.imooc.collection;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> List&lt;Course&gt; CoursesToSelect;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SetTest</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.CoursesToSelect = <span class=\"keyword\">new</span> ArrayList&lt;Course&gt;();<span class=\"comment\">//待选课程是使用数组序列存放</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestAdd</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Course cr1 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"数据结构\"</span>);</div><div class=\"line\">        CoursesToSelect.add(cr1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course cr2 = <span class=\"keyword\">new</span> Course(<span class=\"string\">\"2\"</span>,<span class=\"string\">\"常用算法\"</span>);</div><div class=\"line\">        CoursesToSelect.add(<span class=\"number\">0</span>, cr2);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"3\"</span>,<span class=\"string\">\"Javaweb\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"数据库\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(Arrays.asList(courseList));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        Course[] courseList2 = &#123;<span class=\"keyword\">new</span> Course(<span class=\"string\">\"5\"</span>,<span class=\"string\">\"高等数学\"</span>),<span class=\"keyword\">new</span> Course(<span class=\"string\">\"6\"</span>,<span class=\"string\">\"计算机网络\"</span>)&#125;;</div><div class=\"line\">        CoursesToSelect.addAll(<span class=\"number\">2</span>,Arrays.asList(courseList2));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEach</span><span class=\"params\">()</span></span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(Course course:CoursesToSelect)&#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"课程:\"</span>+course.name+<span class=\"string\">\" 课程id:\"</span>+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">        SetTest st = <span class=\"keyword\">new</span> SetTest();</div><div class=\"line\">        st.TestAdd();</div><div class=\"line\">        st.testForEach();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//创建一个学生对象</span></div><div class=\"line\">        Student stu1= <span class=\"keyword\">new</span> Student(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"小明\"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"欢迎\"</span>+stu1.name+<span class=\"string\">\"选课！\"</span>);</div><div class=\"line\"></div><div class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</div><div class=\"line\"></div><div class=\"line\">            System.out.println(<span class=\"string\">\"请输入课程ID\"</span>);</div><div class=\"line\">            String courseId = sc.next();</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span>(Course course:st.CoursesToSelect)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(course.id.equals(courseId))&#123;  <span class=\"comment\">//字符串是对象,其equals()方法比较的是实际内容！</span></div><div class=\"line\">                    stu1.courses.add(course); <span class=\"comment\">//将待选课程（使用ArrayList存储）中的对象course初始化学生类中的course域（使用HashSet存储）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        st.testForEachForSet(stu1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testForEachForSet</span><span class=\"params\">(Student stu)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//打印输出学生所选的课程</span></div><div class=\"line\">        <span class=\"comment\">//遍历Set中的元素只能用foreach或是iterator，不能想List那样用get(index)，因为Set是无序的。</span></div><div class=\"line\">        <span class=\"comment\">//Set中的元素是不可重复的，重复的添加Set只会保存一个该对象（的引用）</span></div><div class=\"line\">        <span class=\"comment\">//Set是可以添加空对象的，null</span></div><div class=\"line\">        <span class=\"comment\">//Set没有提供像List那样的set()方法，因为Set集合是无序的</span></div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"共选择了\"</span>+stu.courses.size()+<span class=\"string\">\"门课程\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(Course course:stu.courses)&#123;</div><div class=\"line\">            System.out.println(stu.name+<span class=\"string\">\"选择了\"</span>+course.name+<span class=\"string\">\" 课程id:\"</span>+course.id);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//没有介绍的关于Set的remove(),size()等方法，大致跟List一样</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>-EOF</p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p><a href=\"http://blog.csdn.net/qq_33290787/article/details/51781036\" target=\"_blank\" rel=\"external\">Java集合框架</a><br><a href=\"http://www.open-open.com/lib/view/open1474167415464.html\" target=\"_blank\" rel=\"external\">Java - 集合框架完全解析</a></p>"},{"title":"动态规划之最长公共子序列（longest common subsequence）问题的求解","date":"2017-04-30T08:57:23.000Z","copyright":true,"_content":"\n从 二月中旬到四月底 这段时间一直忙于找实习，做准备，刷题，牛客上刷了蛮多算法题，遇到过比较多用动态规划解的题，现在实习的事情基本上也已经定下来了，手上也收到几个还满意的offer，一直想找一个时间去总结下此类题目的解法，思路总是有点模糊，容易忘记，现乘着有时间正好总结一下，也方便后面查阅。动态规划最经典的题目莫过于求两个字符串的最长公共子序列（LCS）问题了，我就以这个问题为例子，总结下动态规划的特点及适用场景。\n\n<!-- more -->\n\n# 问题描述\n给定两个字符串（母串）：\n- ABCBDAB\n- BDCABA\n所谓的公共子序列（可以不连续出现）指的是在两个母串都出现过且顺序和母串保持一致，如： **AB**CBD **A**B 与 BDC**ABA**，公共子序列为ABA。最长公共子序列（LCS）也就是公共子序列中长度最长的那个。而子串是加了更严格条件的子序列，要求在两个母串中连续出现，如：ABC**BD**AB 与 **BD**CABA，BD是公共子串。两个母串的最长公共子序列为 **BCBA** ,最长公共子串为 **AB**。\n\n对于 **母串**：\nX={X1,X2,X3,...,Xm}\nY={y1,y2,y3,yn}\n求最长公共子序列和最长公共子串。\n\n# 最长公共子序列（LCS）\n## 问题分析\n假设Z={z1,z2,z3,....,zk}是 *X* 与 *Y* 的最长公共子序列（LCS），则有（**从后往前分析**）：\n数组 **LCS[i,j]** 保存的是最长公共子序列的 **长度**\n\n1. 若X(m)=Y(n), 则有：\n- Z(k)=X(m)=Y(n),则Z(k-1)是X(m-1)和Y(n-1)的LCS\n- LCS(m,n)=LCS(m-1,n-1)+1\n\n2. 若X(m)!=Y(n)，则有：\n- 若最终Z(k)!=X(m)，则 LCS(m,n)= LCS(m-1,n)\n- 若最终Z(k)!=Y(n),则 LCS(m,n)= LCS(m,n-1)\n- LCS(m,n)=Max{LCS(m-1,n), LCS(m,n-1)}\n\n由于子问题具有 **高度重叠性（见下图）**，可以用二维数组LCS[m][n]保存中间状态，为以后重复利用，用 **空间换时间**，这也是动态规划的核心思想。\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%AD%90%E9%97%AE%E9%A2%98%E5%85%B7%E6%9C%89%E7%9A%84%E9%87%8D%E5%8F%A0%E6%80%A7.png)\n\n## 问题求解\n使用动态规划求解，LCS的 **状态转移方程** 为：\n- LCS[i,j]=0                           if i=0 or j=0\n- LCS[i,j]=LCS[i-1, j-1] + 1           if i, j>0, and xi=yj\n- LCS[i,j]=Max(LCS[i,j-1],LCS[i-1,j])  if i,j>0, and xi!=yj\n\n## 伪代码描述\n```c++\nfor i=0 to m do LCS[i,0]←0\nfor j=1 to n do LCS[0,j]←0 //也就是将数组第一行和第一列初始化为0\nfor i=1 to m do\n     for j=1 to n do\n          if X[i]=Y[j] then\n               LCS[i,j] = LCS[i-1,j-1]+1;\n               b[i,j] = “↖” ; //设置了标志位，利用该标志位，打印出最长公共子序列\n          else if LCS[i-1,j]≥C[i,j-1] then\n               LCS[i,j] = LCS[i-1,j]；\n               b[i,j] = “↑” ;\n          else\n               LCS[i,j] = LCS[i,j-1]；\n               b[i,j] = “←” ;\n\n  return LCS and b             \n```\n\n## 回溯求出最长公共子序列的过程\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%9B%9E%E6%BA%AF%E8%BF%87%E7%A8%8B.png)\n\n## 参考实现代码\n\n```c++\nvoid LCSLength(int m,int n,char *x,char *y,int **LCS,int **b)  \n{  \n    int i,j;  \n\n    for(i=1; i<=m; i++)  \n        LCS[i][0] = 0;  //将数组的第一行置为0\n    for(i=1; i<=n; i++)  \n        LCS[0][i] = 0; //将数组的第一列置为0\n\n    for(i=1; i<=m; i++)  //按行的顺序分别求出LCS中各元素的值并保存\n    {  \n        for(j=1; j<=n; j++)  \n        {  \n            if(x[i]==y[j])  \n            {  \n                LCS[i][j]=LCS[i-1][j-1]+1;  \n                b[i][j]=1;  \n            }  \n            else if(c[i-1][j]>=c[i][j-1])  \n            {  \n                LCS[i][j]=LCS[i-1][j];  \n                b[i][j]=2;  \n            }  \n            else  \n            {  \n                 LCS[i][j]=LCS[i][j-1];  \n                 b[i][j]=3;  \n            }  \n        }  \n    }  \n}  \n\nvoid LCS(int i,int j,char *x,int **b)  //自底向上求解（回溯），递归得到最长公共子序列\n{  \n    if(i==0 || j==0)  \n    {  \n        return;  \n    }  \n    if(b[i][j]==1)  \n    {  \n        LCS(i-1,j-1,x,b);  \n        cout<<x[i]<<\" \";  \n    }  \n    else if(b[i][j]==2)  \n    {  \n        LCS(i-1,j,x,b);  \n    }  \n    else  \n    {  \n        LCS(i,j-1,x,b);  \n    }  \n}  \nint main(int argc, char **argv)\n{\n    char x[10] = {\"ABCBDAB\"};\n    char y[10] = {\"BDCABA\"};\n    int b[10][10];\n    int LCS[10][10];\n    int m, n;\n\n    m = strlen(x);\n    n = strlen(y);\n\n    LCSLength(m, n, x, y, LCS, b); //也就是LCS[m][n]的值为最大长度\n    std::cout << \"LCS length is:\" << LCS[m][n]<<'\\n';\n\n    std::cout << \"LCS:\" << '\\n';\n    LCS(m, n, b, x,);\n    return 0;\n}\n```\n\n## 算法分析\n由于每次调用至少 **向上或向左或斜向上** 移动一步，故最多调用(m + n)次就会遇到i = 0或j = 0的情况，此时开始返回。\n返回时与递归调用时方向相反，步数相同，故算法时间复杂度为 **Θ(m + n)**。\n\n# 动态规划题型总结\n使用动态规划解题需满足的条件：\n- 问题可分为多个相关子问题\n- 问题的最优解包含子问题的最优解，问题具有 **最优子结构**\n- 子问题的解被重复利用（子问题的高度重叠性），**将子问题的解保存在表中（一般是二维数组）**，以后用到时直接存取，这是一种空间换时间的做法，也是DP的核心思想。\n\n# 参考博客\n- [最长公共子序列与最长公共子串](http://www.cnblogs.com/en-heng/p/3963803.html)\n- [最长公共子序列问题(LCS)](http://blog.csdn.net/liufeng_king/article/details/8500084)\n- [动态规划解最长公共子序列问题](http://blog.csdn.net/yysdsyl/article/details/4226630/)\n","source":"_posts/动态规划之最长公共子序列（longest common subsequence）问题的求解.md","raw":"---\ntitle: >-\n  动态规划之最长公共子序列（longest common subsequence）问题的求解\ndate: 2017-04-30 16:57:23\ncategories: Algorithms\ntags: Dynamic Programming\ncopyright: true\n---\n\n从 二月中旬到四月底 这段时间一直忙于找实习，做准备，刷题，牛客上刷了蛮多算法题，遇到过比较多用动态规划解的题，现在实习的事情基本上也已经定下来了，手上也收到几个还满意的offer，一直想找一个时间去总结下此类题目的解法，思路总是有点模糊，容易忘记，现乘着有时间正好总结一下，也方便后面查阅。动态规划最经典的题目莫过于求两个字符串的最长公共子序列（LCS）问题了，我就以这个问题为例子，总结下动态规划的特点及适用场景。\n\n<!-- more -->\n\n# 问题描述\n给定两个字符串（母串）：\n- ABCBDAB\n- BDCABA\n所谓的公共子序列（可以不连续出现）指的是在两个母串都出现过且顺序和母串保持一致，如： **AB**CBD **A**B 与 BDC**ABA**，公共子序列为ABA。最长公共子序列（LCS）也就是公共子序列中长度最长的那个。而子串是加了更严格条件的子序列，要求在两个母串中连续出现，如：ABC**BD**AB 与 **BD**CABA，BD是公共子串。两个母串的最长公共子序列为 **BCBA** ,最长公共子串为 **AB**。\n\n对于 **母串**：\nX={X1,X2,X3,...,Xm}\nY={y1,y2,y3,yn}\n求最长公共子序列和最长公共子串。\n\n# 最长公共子序列（LCS）\n## 问题分析\n假设Z={z1,z2,z3,....,zk}是 *X* 与 *Y* 的最长公共子序列（LCS），则有（**从后往前分析**）：\n数组 **LCS[i,j]** 保存的是最长公共子序列的 **长度**\n\n1. 若X(m)=Y(n), 则有：\n- Z(k)=X(m)=Y(n),则Z(k-1)是X(m-1)和Y(n-1)的LCS\n- LCS(m,n)=LCS(m-1,n-1)+1\n\n2. 若X(m)!=Y(n)，则有：\n- 若最终Z(k)!=X(m)，则 LCS(m,n)= LCS(m-1,n)\n- 若最终Z(k)!=Y(n),则 LCS(m,n)= LCS(m,n-1)\n- LCS(m,n)=Max{LCS(m-1,n), LCS(m,n-1)}\n\n由于子问题具有 **高度重叠性（见下图）**，可以用二维数组LCS[m][n]保存中间状态，为以后重复利用，用 **空间换时间**，这也是动态规划的核心思想。\n\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%AD%90%E9%97%AE%E9%A2%98%E5%85%B7%E6%9C%89%E7%9A%84%E9%87%8D%E5%8F%A0%E6%80%A7.png)\n\n## 问题求解\n使用动态规划求解，LCS的 **状态转移方程** 为：\n- LCS[i,j]=0                           if i=0 or j=0\n- LCS[i,j]=LCS[i-1, j-1] + 1           if i, j>0, and xi=yj\n- LCS[i,j]=Max(LCS[i,j-1],LCS[i-1,j])  if i,j>0, and xi!=yj\n\n## 伪代码描述\n```c++\nfor i=0 to m do LCS[i,0]←0\nfor j=1 to n do LCS[0,j]←0 //也就是将数组第一行和第一列初始化为0\nfor i=1 to m do\n     for j=1 to n do\n          if X[i]=Y[j] then\n               LCS[i,j] = LCS[i-1,j-1]+1;\n               b[i,j] = “↖” ; //设置了标志位，利用该标志位，打印出最长公共子序列\n          else if LCS[i-1,j]≥C[i,j-1] then\n               LCS[i,j] = LCS[i-1,j]；\n               b[i,j] = “↑” ;\n          else\n               LCS[i,j] = LCS[i,j-1]；\n               b[i,j] = “←” ;\n\n  return LCS and b             \n```\n\n## 回溯求出最长公共子序列的过程\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%9B%9E%E6%BA%AF%E8%BF%87%E7%A8%8B.png)\n\n## 参考实现代码\n\n```c++\nvoid LCSLength(int m,int n,char *x,char *y,int **LCS,int **b)  \n{  \n    int i,j;  \n\n    for(i=1; i<=m; i++)  \n        LCS[i][0] = 0;  //将数组的第一行置为0\n    for(i=1; i<=n; i++)  \n        LCS[0][i] = 0; //将数组的第一列置为0\n\n    for(i=1; i<=m; i++)  //按行的顺序分别求出LCS中各元素的值并保存\n    {  \n        for(j=1; j<=n; j++)  \n        {  \n            if(x[i]==y[j])  \n            {  \n                LCS[i][j]=LCS[i-1][j-1]+1;  \n                b[i][j]=1;  \n            }  \n            else if(c[i-1][j]>=c[i][j-1])  \n            {  \n                LCS[i][j]=LCS[i-1][j];  \n                b[i][j]=2;  \n            }  \n            else  \n            {  \n                 LCS[i][j]=LCS[i][j-1];  \n                 b[i][j]=3;  \n            }  \n        }  \n    }  \n}  \n\nvoid LCS(int i,int j,char *x,int **b)  //自底向上求解（回溯），递归得到最长公共子序列\n{  \n    if(i==0 || j==0)  \n    {  \n        return;  \n    }  \n    if(b[i][j]==1)  \n    {  \n        LCS(i-1,j-1,x,b);  \n        cout<<x[i]<<\" \";  \n    }  \n    else if(b[i][j]==2)  \n    {  \n        LCS(i-1,j,x,b);  \n    }  \n    else  \n    {  \n        LCS(i,j-1,x,b);  \n    }  \n}  \nint main(int argc, char **argv)\n{\n    char x[10] = {\"ABCBDAB\"};\n    char y[10] = {\"BDCABA\"};\n    int b[10][10];\n    int LCS[10][10];\n    int m, n;\n\n    m = strlen(x);\n    n = strlen(y);\n\n    LCSLength(m, n, x, y, LCS, b); //也就是LCS[m][n]的值为最大长度\n    std::cout << \"LCS length is:\" << LCS[m][n]<<'\\n';\n\n    std::cout << \"LCS:\" << '\\n';\n    LCS(m, n, b, x,);\n    return 0;\n}\n```\n\n## 算法分析\n由于每次调用至少 **向上或向左或斜向上** 移动一步，故最多调用(m + n)次就会遇到i = 0或j = 0的情况，此时开始返回。\n返回时与递归调用时方向相反，步数相同，故算法时间复杂度为 **Θ(m + n)**。\n\n# 动态规划题型总结\n使用动态规划解题需满足的条件：\n- 问题可分为多个相关子问题\n- 问题的最优解包含子问题的最优解，问题具有 **最优子结构**\n- 子问题的解被重复利用（子问题的高度重叠性），**将子问题的解保存在表中（一般是二维数组）**，以后用到时直接存取，这是一种空间换时间的做法，也是DP的核心思想。\n\n# 参考博客\n- [最长公共子序列与最长公共子串](http://www.cnblogs.com/en-heng/p/3963803.html)\n- [最长公共子序列问题(LCS)](http://blog.csdn.net/liufeng_king/article/details/8500084)\n- [动态规划解最长公共子序列问题](http://blog.csdn.net/yysdsyl/article/details/4226630/)\n","slug":"动态规划之最长公共子序列（longest common subsequence）问题的求解","published":1,"updated":"2017-06-13T12:22:43.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauyv000gfwv1jh024d7x","content":"<p>从 二月中旬到四月底 这段时间一直忙于找实习，做准备，刷题，牛客上刷了蛮多算法题，遇到过比较多用动态规划解的题，现在实习的事情基本上也已经定下来了，手上也收到几个还满意的offer，一直想找一个时间去总结下此类题目的解法，思路总是有点模糊，容易忘记，现乘着有时间正好总结一下，也方便后面查阅。动态规划最经典的题目莫过于求两个字符串的最长公共子序列（LCS）问题了，我就以这个问题为例子，总结下动态规划的特点及适用场景。</p>\n<a id=\"more\"></a>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>给定两个字符串（母串）：</p>\n<ul>\n<li>ABCBDAB</li>\n<li>BDCABA<br>所谓的公共子序列（可以不连续出现）指的是在两个母串都出现过且顺序和母串保持一致，如： <strong>AB</strong>CBD <strong>A</strong>B 与 BDC<strong>ABA</strong>，公共子序列为ABA。最长公共子序列（LCS）也就是公共子序列中长度最长的那个。而子串是加了更严格条件的子序列，要求在两个母串中连续出现，如：ABC<strong>BD</strong>AB 与 <strong>BD</strong>CABA，BD是公共子串。两个母串的最长公共子序列为 <strong>BCBA</strong> ,最长公共子串为 <strong>AB</strong>。</li>\n</ul>\n<p>对于 <strong>母串</strong>：<br>X={X1,X2,X3,…,Xm}<br>Y={y1,y2,y3,yn}<br>求最长公共子序列和最长公共子串。</p>\n<h1 id=\"最长公共子序列（LCS）\"><a href=\"#最长公共子序列（LCS）\" class=\"headerlink\" title=\"最长公共子序列（LCS）\"></a>最长公共子序列（LCS）</h1><h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>假设Z={z1,z2,z3,….,zk}是 <em>X</em> 与 <em>Y</em> 的最长公共子序列（LCS），则有（<strong>从后往前分析</strong>）：<br>数组 <strong>LCS[i,j]</strong> 保存的是最长公共子序列的 <strong>长度</strong></p>\n<ol>\n<li>若X(m)=Y(n), 则有：</li>\n</ol>\n<ul>\n<li>Z(k)=X(m)=Y(n),则Z(k-1)是X(m-1)和Y(n-1)的LCS</li>\n<li>LCS(m,n)=LCS(m-1,n-1)+1</li>\n</ul>\n<ol>\n<li>若X(m)!=Y(n)，则有：</li>\n</ol>\n<ul>\n<li>若最终Z(k)!=X(m)，则 LCS(m,n)= LCS(m-1,n)</li>\n<li>若最终Z(k)!=Y(n),则 LCS(m,n)= LCS(m,n-1)</li>\n<li>LCS(m,n)=Max{LCS(m-1,n), LCS(m,n-1)}</li>\n</ul>\n<p>由于子问题具有 <strong>高度重叠性（见下图）</strong>，可以用二维数组LCS[m][n]保存中间状态，为以后重复利用，用 <strong>空间换时间</strong>，这也是动态规划的核心思想。</p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%AD%90%E9%97%AE%E9%A2%98%E5%85%B7%E6%9C%89%E7%9A%84%E9%87%8D%E5%8F%A0%E6%80%A7.png\" alt=\"\"></p>\n<h2 id=\"问题求解\"><a href=\"#问题求解\" class=\"headerlink\" title=\"问题求解\"></a>问题求解</h2><p>使用动态规划求解，LCS的 <strong>状态转移方程</strong> 为：</p>\n<ul>\n<li>LCS[i,j]=0                           if i=0 or j=0</li>\n<li>LCS[i,j]=LCS[i-1, j-1] + 1           if i, j&gt;0, and xi=yj</li>\n<li>LCS[i,j]=Max(LCS[i,j-1],LCS[i-1,j])  if i,j&gt;0, and xi!=yj</li>\n</ul>\n<h2 id=\"伪代码描述\"><a href=\"#伪代码描述\" class=\"headerlink\" title=\"伪代码描述\"></a>伪代码描述</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">0</span> to m <span class=\"keyword\">do</span> LCS[i,<span class=\"number\">0</span>]←<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> j=<span class=\"number\">1</span> to n <span class=\"keyword\">do</span> LCS[<span class=\"number\">0</span>,j]←<span class=\"number\">0</span> <span class=\"comment\">//也就是将数组第一行和第一列初始化为0</span></div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to m <span class=\"keyword\">do</span></div><div class=\"line\">     <span class=\"keyword\">for</span> j=<span class=\"number\">1</span> to n <span class=\"keyword\">do</span></div><div class=\"line\">          <span class=\"keyword\">if</span> X[i]=Y[j] then</div><div class=\"line\">               LCS[i,j] = LCS[i<span class=\"number\">-1</span>,j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</div><div class=\"line\">               b[i,j] = “↖” ; <span class=\"comment\">//设置了标志位，利用该标志位，打印出最长公共子序列</span></div><div class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> LCS[i<span class=\"number\">-1</span>,j]≥C[i,j<span class=\"number\">-1</span>] then</div><div class=\"line\">               LCS[i,j] = LCS[i<span class=\"number\">-1</span>,j]；</div><div class=\"line\">               b[i,j] = “↑” ;</div><div class=\"line\">          <span class=\"keyword\">else</span></div><div class=\"line\">               LCS[i,j] = LCS[i,j<span class=\"number\">-1</span>]；</div><div class=\"line\">               b[i,j] = “←” ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> LCS and b</div></pre></td></tr></table></figure>\n<h2 id=\"回溯求出最长公共子序列的过程\"><a href=\"#回溯求出最长公共子序列的过程\" class=\"headerlink\" title=\"回溯求出最长公共子序列的过程\"></a>回溯求出最长公共子序列的过程</h2><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%9B%9E%E6%BA%AF%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n<h2 id=\"参考实现代码\"><a href=\"#参考实现代码\" class=\"headerlink\" title=\"参考实现代码\"></a>参考实现代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCSLength</span><span class=\"params\">(<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> n,<span class=\"keyword\">char</span> *x,<span class=\"keyword\">char</span> *y,<span class=\"keyword\">int</span> **LCS,<span class=\"keyword\">int</span> **b)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> i,j;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=m; i++)  </div><div class=\"line\">        LCS[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;  <span class=\"comment\">//将数组的第一行置为0</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)  </div><div class=\"line\">        LCS[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>; <span class=\"comment\">//将数组的第一列置为0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=m; i++)  <span class=\"comment\">//按行的顺序分别求出LCS中各元素的值并保存</span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>; j&lt;=n; j++)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(x[i]==y[j])  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                LCS[i][j]=LCS[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;  </div><div class=\"line\">                b[i][j]=<span class=\"number\">1</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[i<span class=\"number\">-1</span>][j]&gt;=c[i][j<span class=\"number\">-1</span>])  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                LCS[i][j]=LCS[i<span class=\"number\">-1</span>][j];  </div><div class=\"line\">                b[i][j]=<span class=\"number\">2</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">else</span>  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                 LCS[i][j]=LCS[i][j<span class=\"number\">-1</span>];  </div><div class=\"line\">                 b[i][j]=<span class=\"number\">3</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCS</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">char</span> *x,<span class=\"keyword\">int</span> **b)</span>  <span class=\"comment\">//自底向上求解（回溯），递归得到最长公共子序列</span></span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span> || j==<span class=\"number\">0</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(b[i][j]==<span class=\"number\">1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i<span class=\"number\">-1</span>,j<span class=\"number\">-1</span>,x,b);  </div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;x[i]&lt;&lt;<span class=\"string\">\" \"</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[i][j]==<span class=\"number\">2</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i<span class=\"number\">-1</span>,j,x,b);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span>  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i,j<span class=\"number\">-1</span>,x,b);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> x[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"ABCBDAB\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">char</span> y[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"BDCABA\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> b[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> LCS[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> m, n;</div><div class=\"line\"></div><div class=\"line\">    m = <span class=\"built_in\">strlen</span>(x);</div><div class=\"line\">    n = <span class=\"built_in\">strlen</span>(y);</div><div class=\"line\"></div><div class=\"line\">    LCSLength(m, n, x, y, LCS, b); <span class=\"comment\">//也就是LCS[m][n]的值为最大长度</span></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"LCS length is:\"</span> &lt;&lt; LCS[m][n]&lt;&lt;<span class=\"string\">'\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"LCS:\"</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</div><div class=\"line\">    LCS(m, n, b, x,);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><p>由于每次调用至少 <strong>向上或向左或斜向上</strong> 移动一步，故最多调用(m + n)次就会遇到i = 0或j = 0的情况，此时开始返回。<br>返回时与递归调用时方向相反，步数相同，故算法时间复杂度为 <strong>Θ(m + n)</strong>。</p>\n<h1 id=\"动态规划题型总结\"><a href=\"#动态规划题型总结\" class=\"headerlink\" title=\"动态规划题型总结\"></a>动态规划题型总结</h1><p>使用动态规划解题需满足的条件：</p>\n<ul>\n<li>问题可分为多个相关子问题</li>\n<li>问题的最优解包含子问题的最优解，问题具有 <strong>最优子结构</strong></li>\n<li>子问题的解被重复利用（子问题的高度重叠性），<strong>将子问题的解保存在表中（一般是二维数组）</strong>，以后用到时直接存取，这是一种空间换时间的做法，也是DP的核心思想。</li>\n</ul>\n<h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><ul>\n<li><a href=\"http://www.cnblogs.com/en-heng/p/3963803.html\" target=\"_blank\" rel=\"external\">最长公共子序列与最长公共子串</a></li>\n<li><a href=\"http://blog.csdn.net/liufeng_king/article/details/8500084\" target=\"_blank\" rel=\"external\">最长公共子序列问题(LCS)</a></li>\n<li><a href=\"http://blog.csdn.net/yysdsyl/article/details/4226630/\" target=\"_blank\" rel=\"external\">动态规划解最长公共子序列问题</a></li>\n</ul>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>从 二月中旬到四月底 这段时间一直忙于找实习，做准备，刷题，牛客上刷了蛮多算法题，遇到过比较多用动态规划解的题，现在实习的事情基本上也已经定下来了，手上也收到几个还满意的offer，一直想找一个时间去总结下此类题目的解法，思路总是有点模糊，容易忘记，现乘着有时间正好总结一下，也方便后面查阅。动态规划最经典的题目莫过于求两个字符串的最长公共子序列（LCS）问题了，我就以这个问题为例子，总结下动态规划的特点及适用场景。</p>","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>给定两个字符串（母串）：</p>\n<ul>\n<li>ABCBDAB</li>\n<li>BDCABA<br>所谓的公共子序列（可以不连续出现）指的是在两个母串都出现过且顺序和母串保持一致，如： <strong>AB</strong>CBD <strong>A</strong>B 与 BDC<strong>ABA</strong>，公共子序列为ABA。最长公共子序列（LCS）也就是公共子序列中长度最长的那个。而子串是加了更严格条件的子序列，要求在两个母串中连续出现，如：ABC<strong>BD</strong>AB 与 <strong>BD</strong>CABA，BD是公共子串。两个母串的最长公共子序列为 <strong>BCBA</strong> ,最长公共子串为 <strong>AB</strong>。</li>\n</ul>\n<p>对于 <strong>母串</strong>：<br>X={X1,X2,X3,…,Xm}<br>Y={y1,y2,y3,yn}<br>求最长公共子序列和最长公共子串。</p>\n<h1 id=\"最长公共子序列（LCS）\"><a href=\"#最长公共子序列（LCS）\" class=\"headerlink\" title=\"最长公共子序列（LCS）\"></a>最长公共子序列（LCS）</h1><h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><p>假设Z={z1,z2,z3,….,zk}是 <em>X</em> 与 <em>Y</em> 的最长公共子序列（LCS），则有（<strong>从后往前分析</strong>）：<br>数组 <strong>LCS[i,j]</strong> 保存的是最长公共子序列的 <strong>长度</strong></p>\n<ol>\n<li>若X(m)=Y(n), 则有：</li>\n</ol>\n<ul>\n<li>Z(k)=X(m)=Y(n),则Z(k-1)是X(m-1)和Y(n-1)的LCS</li>\n<li>LCS(m,n)=LCS(m-1,n-1)+1</li>\n</ul>\n<ol>\n<li>若X(m)!=Y(n)，则有：</li>\n</ol>\n<ul>\n<li>若最终Z(k)!=X(m)，则 LCS(m,n)= LCS(m-1,n)</li>\n<li>若最终Z(k)!=Y(n),则 LCS(m,n)= LCS(m,n-1)</li>\n<li>LCS(m,n)=Max{LCS(m-1,n), LCS(m,n-1)}</li>\n</ul>\n<p>由于子问题具有 <strong>高度重叠性（见下图）</strong>，可以用二维数组LCS[m][n]保存中间状态，为以后重复利用，用 <strong>空间换时间</strong>，这也是动态规划的核心思想。</p>\n<p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%AD%90%E9%97%AE%E9%A2%98%E5%85%B7%E6%9C%89%E7%9A%84%E9%87%8D%E5%8F%A0%E6%80%A7.png\" alt=\"\"></p>\n<h2 id=\"问题求解\"><a href=\"#问题求解\" class=\"headerlink\" title=\"问题求解\"></a>问题求解</h2><p>使用动态规划求解，LCS的 <strong>状态转移方程</strong> 为：</p>\n<ul>\n<li>LCS[i,j]=0                           if i=0 or j=0</li>\n<li>LCS[i,j]=LCS[i-1, j-1] + 1           if i, j&gt;0, and xi=yj</li>\n<li>LCS[i,j]=Max(LCS[i,j-1],LCS[i-1,j])  if i,j&gt;0, and xi!=yj</li>\n</ul>\n<h2 id=\"伪代码描述\"><a href=\"#伪代码描述\" class=\"headerlink\" title=\"伪代码描述\"></a>伪代码描述</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">0</span> to m <span class=\"keyword\">do</span> LCS[i,<span class=\"number\">0</span>]←<span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> j=<span class=\"number\">1</span> to n <span class=\"keyword\">do</span> LCS[<span class=\"number\">0</span>,j]←<span class=\"number\">0</span> <span class=\"comment\">//也就是将数组第一行和第一列初始化为0</span></div><div class=\"line\"><span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to m <span class=\"keyword\">do</span></div><div class=\"line\">     <span class=\"keyword\">for</span> j=<span class=\"number\">1</span> to n <span class=\"keyword\">do</span></div><div class=\"line\">          <span class=\"keyword\">if</span> X[i]=Y[j] then</div><div class=\"line\">               LCS[i,j] = LCS[i<span class=\"number\">-1</span>,j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;</div><div class=\"line\">               b[i,j] = “↖” ; <span class=\"comment\">//设置了标志位，利用该标志位，打印出最长公共子序列</span></div><div class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> LCS[i<span class=\"number\">-1</span>,j]≥C[i,j<span class=\"number\">-1</span>] then</div><div class=\"line\">               LCS[i,j] = LCS[i<span class=\"number\">-1</span>,j]；</div><div class=\"line\">               b[i,j] = “↑” ;</div><div class=\"line\">          <span class=\"keyword\">else</span></div><div class=\"line\">               LCS[i,j] = LCS[i,j<span class=\"number\">-1</span>]；</div><div class=\"line\">               b[i,j] = “←” ;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> LCS and b</div></pre></td></tr></table></figure>\n<h2 id=\"回溯求出最长公共子序列的过程\"><a href=\"#回溯求出最长公共子序列的过程\" class=\"headerlink\" title=\"回溯求出最长公共子序列的过程\"></a>回溯求出最长公共子序列的过程</h2><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97%E5%9B%9E%E6%BA%AF%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n<h2 id=\"参考实现代码\"><a href=\"#参考实现代码\" class=\"headerlink\" title=\"参考实现代码\"></a>参考实现代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCSLength</span><span class=\"params\">(<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> n,<span class=\"keyword\">char</span> *x,<span class=\"keyword\">char</span> *y,<span class=\"keyword\">int</span> **LCS,<span class=\"keyword\">int</span> **b)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> i,j;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=m; i++)  </div><div class=\"line\">        LCS[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;  <span class=\"comment\">//将数组的第一行置为0</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)  </div><div class=\"line\">        LCS[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>; <span class=\"comment\">//将数组的第一列置为0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=m; i++)  <span class=\"comment\">//按行的顺序分别求出LCS中各元素的值并保存</span></div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">for</span>(j=<span class=\"number\">1</span>; j&lt;=n; j++)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            <span class=\"keyword\">if</span>(x[i]==y[j])  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                LCS[i][j]=LCS[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">1</span>;  </div><div class=\"line\">                b[i][j]=<span class=\"number\">1</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c[i<span class=\"number\">-1</span>][j]&gt;=c[i][j<span class=\"number\">-1</span>])  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                LCS[i][j]=LCS[i<span class=\"number\">-1</span>][j];  </div><div class=\"line\">                b[i][j]=<span class=\"number\">2</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">else</span>  </div><div class=\"line\">            &#123;  </div><div class=\"line\">                 LCS[i][j]=LCS[i][j<span class=\"number\">-1</span>];  </div><div class=\"line\">                 b[i][j]=<span class=\"number\">3</span>;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LCS</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j,<span class=\"keyword\">char</span> *x,<span class=\"keyword\">int</span> **b)</span>  <span class=\"comment\">//自底向上求解（回溯），递归得到最长公共子序列</span></span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span> || j==<span class=\"number\">0</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(b[i][j]==<span class=\"number\">1</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i<span class=\"number\">-1</span>,j<span class=\"number\">-1</span>,x,b);  </div><div class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;x[i]&lt;&lt;<span class=\"string\">\" \"</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b[i][j]==<span class=\"number\">2</span>)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i<span class=\"number\">-1</span>,j,x,b);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">else</span>  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        LCS(i,j<span class=\"number\">-1</span>,x,b);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> x[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"ABCBDAB\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">char</span> y[<span class=\"number\">10</span>] = &#123;<span class=\"string\">\"BDCABA\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span> b[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> LCS[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> m, n;</div><div class=\"line\"></div><div class=\"line\">    m = <span class=\"built_in\">strlen</span>(x);</div><div class=\"line\">    n = <span class=\"built_in\">strlen</span>(y);</div><div class=\"line\"></div><div class=\"line\">    LCSLength(m, n, x, y, LCS, b); <span class=\"comment\">//也就是LCS[m][n]的值为最大长度</span></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"LCS length is:\"</span> &lt;&lt; LCS[m][n]&lt;&lt;<span class=\"string\">'\\n'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"LCS:\"</span> &lt;&lt; <span class=\"string\">'\\n'</span>;</div><div class=\"line\">    LCS(m, n, b, x,);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h2><p>由于每次调用至少 <strong>向上或向左或斜向上</strong> 移动一步，故最多调用(m + n)次就会遇到i = 0或j = 0的情况，此时开始返回。<br>返回时与递归调用时方向相反，步数相同，故算法时间复杂度为 <strong>Θ(m + n)</strong>。</p>\n<h1 id=\"动态规划题型总结\"><a href=\"#动态规划题型总结\" class=\"headerlink\" title=\"动态规划题型总结\"></a>动态规划题型总结</h1><p>使用动态规划解题需满足的条件：</p>\n<ul>\n<li>问题可分为多个相关子问题</li>\n<li>问题的最优解包含子问题的最优解，问题具有 <strong>最优子结构</strong></li>\n<li>子问题的解被重复利用（子问题的高度重叠性），<strong>将子问题的解保存在表中（一般是二维数组）</strong>，以后用到时直接存取，这是一种空间换时间的做法，也是DP的核心思想。</li>\n</ul>\n<h1 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h1><ul>\n<li><a href=\"http://www.cnblogs.com/en-heng/p/3963803.html\" target=\"_blank\" rel=\"external\">最长公共子序列与最长公共子串</a></li>\n<li><a href=\"http://blog.csdn.net/liufeng_king/article/details/8500084\" target=\"_blank\" rel=\"external\">最长公共子序列问题(LCS)</a></li>\n<li><a href=\"http://blog.csdn.net/yysdsyl/article/details/4226630/\" target=\"_blank\" rel=\"external\">动态规划解最长公共子序列问题</a></li>\n</ul>"},{"title":"求解子数组之和的最大值及相应的子数组","date":"2017-04-27T14:42:30.000Z","copyright":true,"_content":"参加了CVTE的2017实习生招聘在线笔试，最后一道编程题，写出了思路，但是无奈时间不太够，没有把代码完全写出来，现趁着有时间把思路整理一下，把实现代码写出来，也是一个不错的总结，也让我对DP有了更好的理解。网上搜索，发现这道题是《编程之美》中的一道题，所以也得出一个结论，这本书也是找工作实习必刷的大菜。\n\n# 题目描述\n有N个元素的整型数组arr，有正有负，数组中连续一个或多个元素组成一个子数组，这个数组当然有很多子数组，求子数组之和的最大值及相应的子数组。\n例如：输入[0，-2，3，5，-1，2]应返回7和[3,5,-1]，输入[-9，-2，-3，-5，-3]应返回-2，[-2];\n要求设计一个o(n)的算法求解。\n<!-- more -->\n\n# 问题分析\n如果是用基本方法，找出所有的子数组，然后求和，取最大值，时间复杂度必然超过o(n),由于有子问题具有重叠性，可以考虑用 **动态规划** 求解，下面我就一步步分析，先由子数组之和的最大值分析求解引出，然后在求解子数组的始末下标，得到子数组。\n\n# 求解子数组之和的最大值\n考虑用DP求解，从后往前分析，考虑 **最后一个元素** arr[n-1]与最大子数组的关系，有下面三种情况(相应的3个子问题)：\n1. arr[n-1]单独构成最大子数组\n2. 最大子数组以arr[n-1]结尾\n3. 最大子数组跟arr[n-1]没有关系，最大子数组在arr[0--n-2]之间，转换为考虑元素arr[n-2]\n\n现假设：\n- 以arr[n-1]为结尾的最大子数组和为End[n-1]\n- 在[0--n-1]范围内最大的子数组和为All[n-1]\n\n则有：\n- 子问题1，对应arr[n-1]\n- 子问题2，对应End[n-1],有关系End[n-1]= max{End[n-2]+arr[n-1], arr[n-1]};\n- 子问题3，对应All[n-2]\n\n则有: **All[n-1] = max(arr[n-1], End[n-1], All[n-2]); n>1**\n从后往前考虑，**初始化情况为：End[0]=All[0]=arr[0]; n=1；**\n\n则根据分析，有 **状态转移方程：**\n**All[i] = max{arr[i],End[i-1]+arr[i],All[i-1]}**\n给出代码：\n\n## 基础代码\n```C++\n#define max(a,b) (a>b ? a : b)\nint Maxsum_dp(int *arr, int size)\n{\n  int End[30] = {-INF};\n  int All[30] = {-INF}；\n  End[0] = All[0] = arr[0];//初始化\n  for (int i = 1; i< size; i++)\n  {\n    End[i]= max(End[i-1]+arr[i],arr[i]);//此处的理解：只是将状态转移方程分成两部分，说明End[n-2]为一个负数时，返回arr[n-1]\n    All[i]= max(End[i],All[i-1]);\n  }\n\n return All[size-1];\n}\n\n```\n\n从上述代码中分析，只要我们从头遍历数组，累加求和，如果累加求和小于0（对应End[i-1]）,则从当前元素重新开始计数，\n否则就一直累加，求其中的最大值即可。\n\n## 扩展版代码\n```c++\nint Maxsum_ultimate(int * arr, int size)\n{\n    int maxSum = -INF;\n    int sum = 0;\n    for(int i = 0; i < size; ++i)\n    {\n        if(sum < 0)\n        {\n            sum = arr[i];\n        }else\n        {\n            sum += arr[i];\n        }\n        if(sum > maxSum)\n        {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n}\n```\n# 求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\n\n分析：从扩展版代码中，可以知道，每当 当前子数组的和（sum）小于0时，便是新一轮子数组的开始；每当更新最大和（maxSum）时，便对应可能的结束下标，**此时** 只要用本轮的起始和结束位置更新对应的最大子数组的始末位置即可，直到程序结束，最大子数组的始末位置即被记录下来。\n\n```c++\nvoid Maxsum_location(int * arr, int size, int & start, int & end)\n{\n    int maxSum = -INF;\n    int sum = 0;\n    int substart = start = 0;  /* substart记录每次当前起始位置 */\n    for(int i = 0; i < size; ++i)\n    {\n        if(sum < 0)\n        {\n            sum = arr[i];\n            substart = i;     /* 记录当前的起始位置 */\n        }else\n        {\n            sum += arr[i];\n        }\n        if(sum > maxSum)\n        {\n            maxSum = sum;\n            start = substart; /* 记录并更新最大子数组起始位置 */\n            end = i;\n        }\n    }\n}\n\n```\n# 参考博文\n [最大子数组和](http://www.ahathinking.com/archives/120.html)\n [三种算法求解一个数组的子数组最大和](http://www.cnblogs.com/xkfz007/archive/2012/05/17/2506299.html)\n","source":"_posts/求解子数组之和的最大值及相应的子数组.md","raw":"---\ntitle: 求解子数组之和的最大值及相应的子数组\ndate: 2017-04-27 22:42:30\ncategories: 笔试面试\ntags: [算法,实习,动态规划]\ncopyright: true\n---\n参加了CVTE的2017实习生招聘在线笔试，最后一道编程题，写出了思路，但是无奈时间不太够，没有把代码完全写出来，现趁着有时间把思路整理一下，把实现代码写出来，也是一个不错的总结，也让我对DP有了更好的理解。网上搜索，发现这道题是《编程之美》中的一道题，所以也得出一个结论，这本书也是找工作实习必刷的大菜。\n\n# 题目描述\n有N个元素的整型数组arr，有正有负，数组中连续一个或多个元素组成一个子数组，这个数组当然有很多子数组，求子数组之和的最大值及相应的子数组。\n例如：输入[0，-2，3，5，-1，2]应返回7和[3,5,-1]，输入[-9，-2，-3，-5，-3]应返回-2，[-2];\n要求设计一个o(n)的算法求解。\n<!-- more -->\n\n# 问题分析\n如果是用基本方法，找出所有的子数组，然后求和，取最大值，时间复杂度必然超过o(n),由于有子问题具有重叠性，可以考虑用 **动态规划** 求解，下面我就一步步分析，先由子数组之和的最大值分析求解引出，然后在求解子数组的始末下标，得到子数组。\n\n# 求解子数组之和的最大值\n考虑用DP求解，从后往前分析，考虑 **最后一个元素** arr[n-1]与最大子数组的关系，有下面三种情况(相应的3个子问题)：\n1. arr[n-1]单独构成最大子数组\n2. 最大子数组以arr[n-1]结尾\n3. 最大子数组跟arr[n-1]没有关系，最大子数组在arr[0--n-2]之间，转换为考虑元素arr[n-2]\n\n现假设：\n- 以arr[n-1]为结尾的最大子数组和为End[n-1]\n- 在[0--n-1]范围内最大的子数组和为All[n-1]\n\n则有：\n- 子问题1，对应arr[n-1]\n- 子问题2，对应End[n-1],有关系End[n-1]= max{End[n-2]+arr[n-1], arr[n-1]};\n- 子问题3，对应All[n-2]\n\n则有: **All[n-1] = max(arr[n-1], End[n-1], All[n-2]); n>1**\n从后往前考虑，**初始化情况为：End[0]=All[0]=arr[0]; n=1；**\n\n则根据分析，有 **状态转移方程：**\n**All[i] = max{arr[i],End[i-1]+arr[i],All[i-1]}**\n给出代码：\n\n## 基础代码\n```C++\n#define max(a,b) (a>b ? a : b)\nint Maxsum_dp(int *arr, int size)\n{\n  int End[30] = {-INF};\n  int All[30] = {-INF}；\n  End[0] = All[0] = arr[0];//初始化\n  for (int i = 1; i< size; i++)\n  {\n    End[i]= max(End[i-1]+arr[i],arr[i]);//此处的理解：只是将状态转移方程分成两部分，说明End[n-2]为一个负数时，返回arr[n-1]\n    All[i]= max(End[i],All[i-1]);\n  }\n\n return All[size-1];\n}\n\n```\n\n从上述代码中分析，只要我们从头遍历数组，累加求和，如果累加求和小于0（对应End[i-1]）,则从当前元素重新开始计数，\n否则就一直累加，求其中的最大值即可。\n\n## 扩展版代码\n```c++\nint Maxsum_ultimate(int * arr, int size)\n{\n    int maxSum = -INF;\n    int sum = 0;\n    for(int i = 0; i < size; ++i)\n    {\n        if(sum < 0)\n        {\n            sum = arr[i];\n        }else\n        {\n            sum += arr[i];\n        }\n        if(sum > maxSum)\n        {\n            maxSum = sum;\n        }\n    }\n    return maxSum;\n}\n```\n# 求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\n\n分析：从扩展版代码中，可以知道，每当 当前子数组的和（sum）小于0时，便是新一轮子数组的开始；每当更新最大和（maxSum）时，便对应可能的结束下标，**此时** 只要用本轮的起始和结束位置更新对应的最大子数组的始末位置即可，直到程序结束，最大子数组的始末位置即被记录下来。\n\n```c++\nvoid Maxsum_location(int * arr, int size, int & start, int & end)\n{\n    int maxSum = -INF;\n    int sum = 0;\n    int substart = start = 0;  /* substart记录每次当前起始位置 */\n    for(int i = 0; i < size; ++i)\n    {\n        if(sum < 0)\n        {\n            sum = arr[i];\n            substart = i;     /* 记录当前的起始位置 */\n        }else\n        {\n            sum += arr[i];\n        }\n        if(sum > maxSum)\n        {\n            maxSum = sum;\n            start = substart; /* 记录并更新最大子数组起始位置 */\n            end = i;\n        }\n    }\n}\n\n```\n# 参考博文\n [最大子数组和](http://www.ahathinking.com/archives/120.html)\n [三种算法求解一个数组的子数组最大和](http://www.cnblogs.com/xkfz007/archive/2012/05/17/2506299.html)\n","slug":"求解子数组之和的最大值及相应的子数组","published":1,"updated":"2017-06-13T12:09:07.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauz1000kfwv1pifzy61f","content":"<p>参加了CVTE的2017实习生招聘在线笔试，最后一道编程题，写出了思路，但是无奈时间不太够，没有把代码完全写出来，现趁着有时间把思路整理一下，把实现代码写出来，也是一个不错的总结，也让我对DP有了更好的理解。网上搜索，发现这道题是《编程之美》中的一道题，所以也得出一个结论，这本书也是找工作实习必刷的大菜。</p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>有N个元素的整型数组arr，有正有负，数组中连续一个或多个元素组成一个子数组，这个数组当然有很多子数组，求子数组之和的最大值及相应的子数组。<br>例如：输入[0，-2，3，5，-1，2]应返回7和[3,5,-1]，输入[-9，-2，-3，-5，-3]应返回-2，[-2];<br>要求设计一个o(n)的算法求解。<br><a id=\"more\"></a></p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>如果是用基本方法，找出所有的子数组，然后求和，取最大值，时间复杂度必然超过o(n),由于有子问题具有重叠性，可以考虑用 <strong>动态规划</strong> 求解，下面我就一步步分析，先由子数组之和的最大值分析求解引出，然后在求解子数组的始末下标，得到子数组。</p>\n<h1 id=\"求解子数组之和的最大值\"><a href=\"#求解子数组之和的最大值\" class=\"headerlink\" title=\"求解子数组之和的最大值\"></a>求解子数组之和的最大值</h1><p>考虑用DP求解，从后往前分析，考虑 <strong>最后一个元素</strong> arr[n-1]与最大子数组的关系，有下面三种情况(相应的3个子问题)：</p>\n<ol>\n<li>arr[n-1]单独构成最大子数组</li>\n<li>最大子数组以arr[n-1]结尾</li>\n<li>最大子数组跟arr[n-1]没有关系，最大子数组在arr[0–n-2]之间，转换为考虑元素arr[n-2]</li>\n</ol>\n<p>现假设：</p>\n<ul>\n<li>以arr[n-1]为结尾的最大子数组和为End[n-1]</li>\n<li>在[0–n-1]范围内最大的子数组和为All[n-1]</li>\n</ul>\n<p>则有：</p>\n<ul>\n<li>子问题1，对应arr[n-1]</li>\n<li>子问题2，对应End[n-1],有关系End[n-1]= max{End[n-2]+arr[n-1], arr[n-1]};</li>\n<li>子问题3，对应All[n-2]</li>\n</ul>\n<p>则有: <strong>All[n-1] = max(arr[n-1], End[n-1], All[n-2]); n&gt;1</strong><br>从后往前考虑，<strong>初始化情况为：End[0]=All[0]=arr[0]; n=1；</strong></p>\n<p>则根据分析，有 <strong>状态转移方程：</strong><br><strong>All[i] = max{arr[i],End[i-1]+arr[i],All[i-1]}</strong><br>给出代码：</p>\n<h2 id=\"基础代码\"><a href=\"#基础代码\" class=\"headerlink\" title=\"基础代码\"></a>基础代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a,b) (a&gt;b ? a : b)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Maxsum_dp</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> End[<span class=\"number\">30</span>] = &#123;-INF&#125;;</div><div class=\"line\">  <span class=\"keyword\">int</span> All[<span class=\"number\">30</span>] = &#123;-INF&#125;；</div><div class=\"line\">  End[<span class=\"number\">0</span>] = All[<span class=\"number\">0</span>] = arr[<span class=\"number\">0</span>];<span class=\"comment\">//初始化</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt; size; i++)</div><div class=\"line\">  &#123;</div><div class=\"line\">    End[i]= max(End[i<span class=\"number\">-1</span>]+arr[i],arr[i]);<span class=\"comment\">//此处的理解：只是将状态转移方程分成两部分，说明End[n-2]为一个负数时，返回arr[n-1]</span></div><div class=\"line\">    All[i]= max(End[i],All[i<span class=\"number\">-1</span>]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">return</span> All[size<span class=\"number\">-1</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上述代码中分析，只要我们从头遍历数组，累加求和，如果累加求和小于0（对应End[i-1]）,则从当前元素重新开始计数，<br>否则就一直累加，求其中的最大值即可。</p>\n<h2 id=\"扩展版代码\"><a href=\"#扩展版代码\" class=\"headerlink\" title=\"扩展版代码\"></a>扩展版代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Maxsum_ultimate</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxSum = -INF;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sum = arr[i];</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            sum += arr[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &gt; maxSum)</div><div class=\"line\">        &#123;</div><div class=\"line\">            maxSum = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> maxSum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\"><a href=\"#求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\" class=\"headerlink\" title=\"求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\"></a>求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置</h1><p>分析：从扩展版代码中，可以知道，每当 当前子数组的和（sum）小于0时，便是新一轮子数组的开始；每当更新最大和（maxSum）时，便对应可能的结束下标，<strong>此时</strong> 只要用本轮的起始和结束位置更新对应的最大子数组的始末位置即可，直到程序结束，最大子数组的始末位置即被记录下来。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Maxsum_location</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> &amp; start, <span class=\"keyword\">int</span> &amp; end)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxSum = -INF;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> substart = start = <span class=\"number\">0</span>;  <span class=\"comment\">/* substart记录每次当前起始位置 */</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sum = arr[i];</div><div class=\"line\">            substart = i;     <span class=\"comment\">/* 记录当前的起始位置 */</span></div><div class=\"line\">        &#125;<span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            sum += arr[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &gt; maxSum)</div><div class=\"line\">        &#123;</div><div class=\"line\">            maxSum = sum;</div><div class=\"line\">            start = substart; <span class=\"comment\">/* 记录并更新最大子数组起始位置 */</span></div><div class=\"line\">            end = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p> <a href=\"http://www.ahathinking.com/archives/120.html\" target=\"_blank\" rel=\"external\">最大子数组和</a><br> <a href=\"http://www.cnblogs.com/xkfz007/archive/2012/05/17/2506299.html\" target=\"_blank\" rel=\"external\">三种算法求解一个数组的子数组最大和</a></p>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>参加了CVTE的2017实习生招聘在线笔试，最后一道编程题，写出了思路，但是无奈时间不太够，没有把代码完全写出来，现趁着有时间把思路整理一下，把实现代码写出来，也是一个不错的总结，也让我对DP有了更好的理解。网上搜索，发现这道题是《编程之美》中的一道题，所以也得出一个结论，这本书也是找工作实习必刷的大菜。</p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>有N个元素的整型数组arr，有正有负，数组中连续一个或多个元素组成一个子数组，这个数组当然有很多子数组，求子数组之和的最大值及相应的子数组。<br>例如：输入[0，-2，3，5，-1，2]应返回7和[3,5,-1]，输入[-9，-2，-3，-5，-3]应返回-2，[-2];<br>要求设计一个o(n)的算法求解。<br>","more":"</p>\n<h1 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h1><p>如果是用基本方法，找出所有的子数组，然后求和，取最大值，时间复杂度必然超过o(n),由于有子问题具有重叠性，可以考虑用 <strong>动态规划</strong> 求解，下面我就一步步分析，先由子数组之和的最大值分析求解引出，然后在求解子数组的始末下标，得到子数组。</p>\n<h1 id=\"求解子数组之和的最大值\"><a href=\"#求解子数组之和的最大值\" class=\"headerlink\" title=\"求解子数组之和的最大值\"></a>求解子数组之和的最大值</h1><p>考虑用DP求解，从后往前分析，考虑 <strong>最后一个元素</strong> arr[n-1]与最大子数组的关系，有下面三种情况(相应的3个子问题)：</p>\n<ol>\n<li>arr[n-1]单独构成最大子数组</li>\n<li>最大子数组以arr[n-1]结尾</li>\n<li>最大子数组跟arr[n-1]没有关系，最大子数组在arr[0–n-2]之间，转换为考虑元素arr[n-2]</li>\n</ol>\n<p>现假设：</p>\n<ul>\n<li>以arr[n-1]为结尾的最大子数组和为End[n-1]</li>\n<li>在[0–n-1]范围内最大的子数组和为All[n-1]</li>\n</ul>\n<p>则有：</p>\n<ul>\n<li>子问题1，对应arr[n-1]</li>\n<li>子问题2，对应End[n-1],有关系End[n-1]= max{End[n-2]+arr[n-1], arr[n-1]};</li>\n<li>子问题3，对应All[n-2]</li>\n</ul>\n<p>则有: <strong>All[n-1] = max(arr[n-1], End[n-1], All[n-2]); n&gt;1</strong><br>从后往前考虑，<strong>初始化情况为：End[0]=All[0]=arr[0]; n=1；</strong></p>\n<p>则根据分析，有 <strong>状态转移方程：</strong><br><strong>All[i] = max{arr[i],End[i-1]+arr[i],All[i-1]}</strong><br>给出代码：</p>\n<h2 id=\"基础代码\"><a href=\"#基础代码\" class=\"headerlink\" title=\"基础代码\"></a>基础代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> max(a,b) (a&gt;b ? a : b)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Maxsum_dp</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> End[<span class=\"number\">30</span>] = &#123;-INF&#125;;</div><div class=\"line\">  <span class=\"keyword\">int</span> All[<span class=\"number\">30</span>] = &#123;-INF&#125;；</div><div class=\"line\">  End[<span class=\"number\">0</span>] = All[<span class=\"number\">0</span>] = arr[<span class=\"number\">0</span>];<span class=\"comment\">//初始化</span></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt; size; i++)</div><div class=\"line\">  &#123;</div><div class=\"line\">    End[i]= max(End[i<span class=\"number\">-1</span>]+arr[i],arr[i]);<span class=\"comment\">//此处的理解：只是将状态转移方程分成两部分，说明End[n-2]为一个负数时，返回arr[n-1]</span></div><div class=\"line\">    All[i]= max(End[i],All[i<span class=\"number\">-1</span>]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">return</span> All[size<span class=\"number\">-1</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>从上述代码中分析，只要我们从头遍历数组，累加求和，如果累加求和小于0（对应End[i-1]）,则从当前元素重新开始计数，<br>否则就一直累加，求其中的最大值即可。</p>\n<h2 id=\"扩展版代码\"><a href=\"#扩展版代码\" class=\"headerlink\" title=\"扩展版代码\"></a>扩展版代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Maxsum_ultimate</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxSum = -INF;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sum = arr[i];</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            sum += arr[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &gt; maxSum)</div><div class=\"line\">        &#123;</div><div class=\"line\">            maxSum = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> maxSum;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\"><a href=\"#求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\" class=\"headerlink\" title=\"求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置\"></a>求解子数组之和最大值对应的子数组，即返回最大子数组的始末位置</h1><p>分析：从扩展版代码中，可以知道，每当 当前子数组的和（sum）小于0时，便是新一轮子数组的开始；每当更新最大和（maxSum）时，便对应可能的结束下标，<strong>此时</strong> 只要用本轮的起始和结束位置更新对应的最大子数组的始末位置即可，直到程序结束，最大子数组的始末位置即被记录下来。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Maxsum_location</span><span class=\"params\">(<span class=\"keyword\">int</span> * arr, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> &amp; start, <span class=\"keyword\">int</span> &amp; end)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> maxSum = -INF;</div><div class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> substart = start = <span class=\"number\">0</span>;  <span class=\"comment\">/* substart记录每次当前起始位置 */</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            sum = arr[i];</div><div class=\"line\">            substart = i;     <span class=\"comment\">/* 记录当前的起始位置 */</span></div><div class=\"line\">        &#125;<span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            sum += arr[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(sum &gt; maxSum)</div><div class=\"line\">        &#123;</div><div class=\"line\">            maxSum = sum;</div><div class=\"line\">            start = substart; <span class=\"comment\">/* 记录并更新最大子数组起始位置 */</span></div><div class=\"line\">            end = i;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><p> <a href=\"http://www.ahathinking.com/archives/120.html\" target=\"_blank\" rel=\"external\">最大子数组和</a><br> <a href=\"http://www.cnblogs.com/xkfz007/archive/2012/05/17/2506299.html\" target=\"_blank\" rel=\"external\">三种算法求解一个数组的子数组最大和</a></p>"},{"title":"用hexo搭建个人博客[转]","date":"2016-06-04T18:45:07.000Z","_content":"从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。\n现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。\n<!--more-->\n### 关于博客源码的备份和同步更新 ###\n\n#### 方案选择 ####\n这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。\n所以还是考虑用github 存放源码，但是有遇到两个选择：\n\n- 一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。\n- 另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。\n\n第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。\n\n#### 出现问题 ####\n\n- 问题描述\n\n因为我是先在本地\n```\ngit init 、git add origin <server>\n```\n初始化本地文件夹，然后\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。\n\n- 解决问题：\n\n删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。\n在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：\n\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n\n然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。\n\n### 最后 ###\n\n人生有涯，知也无涯。\n坚持学习，保持好奇心。\n坚持锻炼身体。\n转载来自：http://zouzls.github.io/\n","source":"_posts/转-用hexo搭建个人博客.md","raw":"---\ntitle: 用hexo搭建个人博客[转]\ndate: 2016-06-05 02:45:07\ntags: [hexo,next]\ncategories: hexo\n---\n从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。\n现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。\n<!--more-->\n### 关于博客源码的备份和同步更新 ###\n\n#### 方案选择 ####\n这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。\n所以还是考虑用github 存放源码，但是有遇到两个选择：\n\n- 一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。\n- 另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。\n\n第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。\n\n#### 出现问题 ####\n\n- 问题描述\n\n因为我是先在本地\n```\ngit init 、git add origin <server>\n```\n初始化本地文件夹，然后\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。\n\n- 解决问题：\n\n删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。\n在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：\n\n```\ngit add .\ngit commit -m \"description\"\ngit push origin hexo\n```\n\n然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。\n\n### 最后 ###\n\n人生有涯，知也无涯。\n坚持学习，保持好奇心。\n坚持锻炼身体。\n转载来自：http://zouzls.github.io/\n","slug":"转-用hexo搭建个人博客","published":1,"updated":"2017-04-28T03:48:15.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauz4000mfwv1lghur0t8","content":"<p>从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。<br>现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。<br><a id=\"more\"></a></p>\n<h3 id=\"关于博客源码的备份和同步更新\"><a href=\"#关于博客源码的备份和同步更新\" class=\"headerlink\" title=\"关于博客源码的备份和同步更新\"></a>关于博客源码的备份和同步更新</h3><h4 id=\"方案选择\"><a href=\"#方案选择\" class=\"headerlink\" title=\"方案选择\"></a>方案选择</h4><p>这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。<br>所以还是考虑用github 存放源码，但是有遇到两个选择：</p>\n<ul>\n<li>一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。</li>\n<li>另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。</li>\n</ul>\n<p>第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。</p>\n<h4 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h4><ul>\n<li>问题描述</li>\n</ul>\n<p>因为我是先在本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init 、git add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>\n<p>初始化本地文件夹，然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。</p>\n<ul>\n<li>解决问题：</li>\n</ul>\n<p>删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。<br>在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n<p>然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>人生有涯，知也无涯。<br>坚持学习，保持好奇心。<br>坚持锻炼身体。<br>转载来自：<a href=\"http://zouzls.github.io/\" target=\"_blank\" rel=\"external\">http://zouzls.github.io/</a></p>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>从很久之前就想要有一个属于自己的博客，如果互联网是一个世界的话，一个有着自己独特域名的博客应该就是在这个世界里面的自己的家吧。由于毕业后工作，后来又忙着考研，这个简单的愿望一直搁浅。<br>现在趁着有闲暇的精力，终于把这个一拖再拖的事情给实现，搭建过程总体是简单的，没有费多少力气，但是还是遇到了一些小问题，现在将遇到的问题记录下来。<br>","more":"</p>\n<h3 id=\"关于博客源码的备份和同步更新\"><a href=\"#关于博客源码的备份和同步更新\" class=\"headerlink\" title=\"关于博客源码的备份和同步更新\"></a>关于博客源码的备份和同步更新</h3><h4 id=\"方案选择\"><a href=\"#方案选择\" class=\"headerlink\" title=\"方案选择\"></a>方案选择</h4><p>这个让我费时不少，因为考虑到有时候在自己笔记本上更新博客，有时候在实验室电脑上更新，这个时候问题就出现了。其一，不可能每次带U盘copy，其二，如果用百度云或者Dropbox这类云盘，感觉总是有些麻烦的。<br>所以还是考虑用github 存放源码，但是有遇到两个选择：</p>\n<ul>\n<li>一种方案是重新开一个repo，这样一个repo放博客生成的静态文件，另外一个repo专门放博客源码。</li>\n<li>另外一种方案是一个repo开两个分支，其中一个master分支主要放静态文件，另外一个分支（自己命名）hexo，专门放博客源码。</li>\n</ul>\n<p>第一种方案总感觉冗余，而第二种看起来更加简洁干净（操作起来也遇到了不少麻烦），最终还是选择第二种方案。</p>\n<h4 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h4><ul>\n<li>问题描述</li>\n</ul>\n<p>因为我是先在本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init 、git add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>\n<p>初始化本地文件夹，然后<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>最后一步失败。尝试过git pull命令、并将hexo分支文件清空，然而都无济于事。</p>\n<ul>\n<li>解决问题：</li>\n</ul>\n<p>删掉这个库zouzls.github.io,然后重新新建，开两个分支，并设置hexo默认分支，此时两个分支为空。<br>在本地新建一个文件夹，git clone server地址,然后copy原来的博客站文件过来当前文件夹，运行下列命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;description&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure>\n<p>然后解决问题，博客源码推送到hexo分支，再在新的电脑将源码clone下来就OK了，前提是已经安装有git、nodejs、hexo。至于由博客生成的静态html文件如何放到master分支，网上太多教程就不详述了。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>人生有涯，知也无涯。<br>坚持学习，保持好奇心。<br>坚持锻炼身体。<br>转载来自：<a href=\"http://zouzls.github.io/\" target=\"_blank\" rel=\"external\">http://zouzls.github.io/</a></p>"},{"title":"腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点","date":"2017-04-07T06:57:31.000Z","copyright":true,"_content":"\n今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，\n第一道编程题做了一半，没完全写出来，现在有时间总结一下：\n题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；\n     如输入层数N=4，子节点11,13,15; 则输出:12\n     <!-- more -->\n# 分析\n解决这道题的关键，主要是要清晰的知道二叉排序树的性质：**左节点的值小于父节点的值，右节点值大于父节点的值。**\n当**N=4**时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg);\n可以知道有以下性质：\n1. 以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；\n2. 右子树一直往左走，可以找到右子树的最小值9，比根节点大1；\n3. 根节点的值是最左端的值和最右端的值之和的一半。\n\n我们可以这样找最大的公共父结点（可以用分治法）：\n1. 如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；\n2. 如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质*1 & 3*，得到新树的最右结点及根结点的值；\n3. 如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质*2 & 3*，得到新树的最左结点及根结点的值；\n4. 重复2.3步骤，直到出现1情况，结束。\n\n# 实现代码\n**实现方法1**是实现题目要求的，只输入层数**N**和**3**个子结点值，得到最大公共父结点；\n**实现方法2**是扩展的，具有更好的通用性，输入层数**N**、子结点个数**n**及子结点的值，得到最大公共父结点。\n\n## 实现方法1\n\n```java\npublic class  Main{\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt()) {\n\t\t\t// 树的高度\n\t\t\tint k = in.nextInt();\n\n\t\t\t// 最开始根节点的值\n\t\t\tint root = (int) Math.pow(2, k) / 2;\n\n\t\t\t// 最开始的最左叶子节点和最右叶子节点\n\t\t\tint leftNode = 1;\n\t\t\tint rightNode = (int) Math.pow(2, k) - 1;\n\n\t\t\t// 输入任意3叶子节点的值\n\t\t\tint node1 = in.nextInt();\n\t\t\tint node2 = in.nextInt();\n\t\t\tint node3 = in.nextInt();\n\n\t\t\tfor (int i = 1; i <= k; i++) {\n\t\t\t\t// 3个叶子节点全在根节点的左部,更新最右节点和根节点\n\t\t\t\tif (node1 < root && node2 < root && node3 < root) {\n\t\t\t\t\trightNode = root - 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t}\n\n\t\t\t\t// 3个叶子节点全在根节点的右部,更新最左节点和根节点\n\t\t\t\telse if (node1 > root && node2 > root && node3 > root) {\n\t\t\t\t\tleftNode = root + 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t}\n\n\t\t\t\t// 一大一小的情形下根节点即为最大公共父节点\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(root);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t}\n}\n```\n\n\n## 实现方法2\n\n```java\n/**\n * 改进版，输入层数N，节点数n，个数范围为：2-2^-1\n * 输出二叉排序树的公共父节点\n *\n */\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt()) {\n\t\t\t// 树的高度\n\t\t\tint N = in.nextInt();\n\n\t\t\t// 最开始根节点的值\n\t\t\tint root = (int) Math.pow(2, N) / 2;\n\n\t\t\t// 最开始的最左叶子节点和最右叶子节点\n\t\t\tint leftNode = 1;\n\t\t\tint rightNode = (int) Math.pow(2, N) - 1;\n\n\t\t\t// 输入任意n叶子节点的值\n\t\t\tint n = in.nextInt();\n\t\t\tint[] arrNodes = new int[n];\n\t\t\tfor (int i = 0; i < arrNodes.length; i++) {\n\t\t\t\tarrNodes[i] = in.nextInt();\n\t\t\t}\n\n\t\t\t// 从上到下按层次遍历N层\n\t\t\tfor (int i = 1; i <= N; i++) {\n\t\t\t\tint count = 0;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\n\t\t\t\t\t// 都在左边，count+1；\n\t\t\t\t\tif (arrNodes[j] < root) {\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 都在右边，count+2\n\t\t\t\t\telse if (arrNodes[j] > root) {\n\t\t\t\t\t\tcount += 2;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 其中有一个是根节点\n\t\t\t\t\telse {\n\t\t\t\t\t\tcount += 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * count的值n或者2n或者两者之间，\n\t\t\t\t * n代表都在左边，更新最右节点和根节点\n\t\t\t\t * 2n代表都在右边，更新最左节点和根节点\n\t\t\t\t * 两者之间代表，分布在根节点两边，直接返回根节点\n\t\t\t\t */\n\t\t\t\tif (count == n) {\n\t\t\t\t\trightNode = root - 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t} else if (count == 2 * n) {\n\n\t\t\t\t\tleftNode = root + 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(root);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tin.close();\n\t}\n}\n\n```\n\n# 测试结果\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png)\n\n# 参考博文\n1. [f91og的博客](http://www.cnblogs.com/f91og/p/6663633.html)\n","source":"_posts/腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点.md","raw":"---\ntitle: 腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点\ndate: 2017-04-07 14:57:31\ncategories: 笔试面试\ntags: [算法,实习]\ncopyright: true\n---\n\n今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，\n第一道编程题做了一半，没完全写出来，现在有时间总结一下：\n题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；\n     如输入层数N=4，子节点11,13,15; 则输出:12\n     <!-- more -->\n# 分析\n解决这道题的关键，主要是要清晰的知道二叉排序树的性质：**左节点的值小于父节点的值，右节点值大于父节点的值。**\n当**N=4**时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg);\n可以知道有以下性质：\n1. 以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；\n2. 右子树一直往左走，可以找到右子树的最小值9，比根节点大1；\n3. 根节点的值是最左端的值和最右端的值之和的一半。\n\n我们可以这样找最大的公共父结点（可以用分治法）：\n1. 如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；\n2. 如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质*1 & 3*，得到新树的最右结点及根结点的值；\n3. 如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质*2 & 3*，得到新树的最左结点及根结点的值；\n4. 重复2.3步骤，直到出现1情况，结束。\n\n# 实现代码\n**实现方法1**是实现题目要求的，只输入层数**N**和**3**个子结点值，得到最大公共父结点；\n**实现方法2**是扩展的，具有更好的通用性，输入层数**N**、子结点个数**n**及子结点的值，得到最大公共父结点。\n\n## 实现方法1\n\n```java\npublic class  Main{\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt()) {\n\t\t\t// 树的高度\n\t\t\tint k = in.nextInt();\n\n\t\t\t// 最开始根节点的值\n\t\t\tint root = (int) Math.pow(2, k) / 2;\n\n\t\t\t// 最开始的最左叶子节点和最右叶子节点\n\t\t\tint leftNode = 1;\n\t\t\tint rightNode = (int) Math.pow(2, k) - 1;\n\n\t\t\t// 输入任意3叶子节点的值\n\t\t\tint node1 = in.nextInt();\n\t\t\tint node2 = in.nextInt();\n\t\t\tint node3 = in.nextInt();\n\n\t\t\tfor (int i = 1; i <= k; i++) {\n\t\t\t\t// 3个叶子节点全在根节点的左部,更新最右节点和根节点\n\t\t\t\tif (node1 < root && node2 < root && node3 < root) {\n\t\t\t\t\trightNode = root - 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t}\n\n\t\t\t\t// 3个叶子节点全在根节点的右部,更新最左节点和根节点\n\t\t\t\telse if (node1 > root && node2 > root && node3 > root) {\n\t\t\t\t\tleftNode = root + 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t}\n\n\t\t\t\t// 一大一小的情形下根节点即为最大公共父节点\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(root);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t}\n}\n```\n\n\n## 实现方法2\n\n```java\n/**\n * 改进版，输入层数N，节点数n，个数范围为：2-2^-1\n * 输出二叉排序树的公共父节点\n *\n */\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt()) {\n\t\t\t// 树的高度\n\t\t\tint N = in.nextInt();\n\n\t\t\t// 最开始根节点的值\n\t\t\tint root = (int) Math.pow(2, N) / 2;\n\n\t\t\t// 最开始的最左叶子节点和最右叶子节点\n\t\t\tint leftNode = 1;\n\t\t\tint rightNode = (int) Math.pow(2, N) - 1;\n\n\t\t\t// 输入任意n叶子节点的值\n\t\t\tint n = in.nextInt();\n\t\t\tint[] arrNodes = new int[n];\n\t\t\tfor (int i = 0; i < arrNodes.length; i++) {\n\t\t\t\tarrNodes[i] = in.nextInt();\n\t\t\t}\n\n\t\t\t// 从上到下按层次遍历N层\n\t\t\tfor (int i = 1; i <= N; i++) {\n\t\t\t\tint count = 0;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\n\t\t\t\t\t// 都在左边，count+1；\n\t\t\t\t\tif (arrNodes[j] < root) {\n\t\t\t\t\t\tcount += 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 都在右边，count+2\n\t\t\t\t\telse if (arrNodes[j] > root) {\n\t\t\t\t\t\tcount += 2;\n\t\t\t\t\t}\n\n\t\t\t\t\t// 其中有一个是根节点\n\t\t\t\t\telse {\n\t\t\t\t\t\tcount += 0;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * count的值n或者2n或者两者之间，\n\t\t\t\t * n代表都在左边，更新最右节点和根节点\n\t\t\t\t * 2n代表都在右边，更新最左节点和根节点\n\t\t\t\t * 两者之间代表，分布在根节点两边，直接返回根节点\n\t\t\t\t */\n\t\t\t\tif (count == n) {\n\t\t\t\t\trightNode = root - 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\t\t\t\t} else if (count == 2 * n) {\n\n\t\t\t\t\tleftNode = root + 1;\n\t\t\t\t\troot = (leftNode + rightNode) / 2;\n\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(root);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\t\tin.close();\n\t}\n}\n\n```\n\n# 测试结果\n![](https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png)\n\n# 参考博文\n1. [f91og的博客](http://www.cnblogs.com/f91og/p/6663633.html)\n","slug":"腾讯实习生笔试编程题--满二叉排序树，给定三个结点，求公共父结点","published":1,"updated":"2017-06-13T11:45:45.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj45hauzd000rfwv1uodqi7u3","content":"<p>今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，<br>第一道编程题做了一半，没完全写出来，现在有时间总结一下：<br>题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；<br>     如输入层数N=4，子节点11,13,15; 则输出:12<br>     <a id=\"more\"></a></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>解决这道题的关键，主要是要清晰的知道二叉排序树的性质：<strong>左节点的值小于父节点的值，右节点值大于父节点的值。</strong><br>当<strong>N=4</strong>时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg\" alt=\"\">;<br>可以知道有以下性质：</p>\n<ol>\n<li>以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；</li>\n<li>右子树一直往左走，可以找到右子树的最小值9，比根节点大1；</li>\n<li>根节点的值是最左端的值和最右端的值之和的一半。</li>\n</ol>\n<p>我们可以这样找最大的公共父结点（可以用分治法）：</p>\n<ol>\n<li>如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；</li>\n<li>如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质<em>1 &amp; 3</em>，得到新树的最右结点及根结点的值；</li>\n<li>如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质<em>2 &amp; 3</em>，得到新树的最左结点及根结点的值；</li>\n<li>重复2.3步骤，直到出现1情况，结束。</li>\n</ol>\n<h1 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h1><p><strong>实现方法1</strong>是实现题目要求的，只输入层数<strong>N</strong>和<strong>3</strong>个子结点值，得到最大公共父结点；<br><strong>实现方法2</strong>是扩展的，具有更好的通用性，输入层数<strong>N</strong>、子结点个数<strong>n</strong>及子结点的值，得到最大公共父结点。</p>\n<h2 id=\"实现方法1\"><a href=\"#实现方法1\" class=\"headerlink\" title=\"实现方法1\"></a>实现方法1</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (in.hasNextInt()) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 树的高度</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> k = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始根节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> root = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, k) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始的最左叶子节点和最右叶子节点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> leftNode = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> rightNode = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, k) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 输入任意3叶子节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node1 = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node2 = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node3 = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 3个叶子节点全在根节点的左部,更新最右节点和根节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (node1 &lt; root &amp;&amp; node2 &lt; root &amp;&amp; node3 &lt; root) &#123;</div><div class=\"line\">\t\t\t\t\trightNode = root - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 3个叶子节点全在根节点的右部,更新最左节点和根节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node1 &gt; root &amp;&amp; node2 &gt; root &amp;&amp; node3 &gt; root) &#123;</div><div class=\"line\">\t\t\t\t\tleftNode = root + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 一大一小的情形下根节点即为最大公共父节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(root);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实现方法2\"><a href=\"#实现方法2\" class=\"headerlink\" title=\"实现方法2\"></a>实现方法2</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 改进版，输入层数N，节点数n，个数范围为：2-2^-1</div><div class=\"line\"> * 输出二叉排序树的公共父节点</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (in.hasNextInt()) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 树的高度</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> N = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始根节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> root = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, N) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始的最左叶子节点和最右叶子节点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> leftNode = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> rightNode = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, N) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 输入任意n叶子节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] arrNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrNodes.length; i++) &#123;</div><div class=\"line\">\t\t\t\tarrNodes[i] = in.nextInt();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 从上到下按层次遍历N层</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 都在左边，count+1；</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (arrNodes[j] &lt; root) &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 都在右边，count+2</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arrNodes[j] &gt; root) &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 其中有一个是根节点</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t\t\t * count的值n或者2n或者两者之间，</div><div class=\"line\">\t\t\t\t * n代表都在左边，更新最右节点和根节点</div><div class=\"line\">\t\t\t\t * 2n代表都在右边，更新最左节点和根节点</div><div class=\"line\">\t\t\t\t * 两者之间代表，分布在根节点两边，直接返回根节点</div><div class=\"line\">\t\t\t\t */</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (count == n) &#123;</div><div class=\"line\">\t\t\t\t\trightNode = root - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">2</span> * n) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tleftNode = root + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(root);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tin.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png\" alt=\"\"></p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><ol>\n<li><a href=\"http://www.cnblogs.com/f91og/p/6663633.html\" target=\"_blank\" rel=\"external\">f91og的博客</a></li>\n</ol>\n","site":{"data":{"各种注册":"leanload���Ķ���������bodycoder 402392352\nbusuanzhi��վ����ʣ���ʹ��΢����½\n��˵�����ۣ���ʹ��΢����½\n�ٶ�ͳ�ƣ�bodycoder 402392352\n��������402392352@qq.com  402392352\n","next":{"favicon":"/favicon.ico","keywords":"Hexo, NexT","rss":null,"since":2016,"authoricon":"heart","copyright":true,"canonical":true,"seo":false,"index_with_subtitle":false,"menu":{"home":"/","categories":"/categories/","archives":"/archives/","tags":"/tags/","about":"/about/"},"menu_icons":{"enable":true,"home":"home","about":"user","categories":"th","schedule":"calendar","tags":"tags","archives":"archive"},"scheme":"Mist","font":{"enable":true,"host":null,"global":{"external":true,"family":"Lato"},"headings":{"external":true,"family":null},"posts":{"external":true,"family":null},"logo":{"external":true,"family":null,"size":null},"codes":{"external":true,"family":null,"size":null}},"social":{"Github":"https://github.com/bodycoder101","Weibo":"http://weibo.com/u/5773719517?is_all=1","Zhihu":"http://www.zhihu.com/people/bodycoder101"},"links_title":"友情链接","links":{"帅哥":"http://zouzls.github.io"},"social_icons":{"enable":true,"GitHub":"github","Twitter":"twitter","Weibo":"weibo"},"toc":{"enable":true,"number":true,"wrap":false},"creative_commons":"by-nc-sa","sidebar":{"position":"right","display":"post","offset":12,"offset_float":0,"b2t":false,"scrollpercent":false},"scroll_to_more":true,"save_scroll":false,"excerpt_description":true,"auto_excerpt":{"enable":false,"length":150},"post_meta":{"item_text":true,"created_at":true,"updated_at":false,"categories":true},"post_wordcount":{"item_text":true,"wordcount":false,"min2read":false,"separated_meta":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 3.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/3.0/"},"custom_logo":{"enabled":false,"image":null},"highlight_theme":"night eighties","wechat_subscriber":{"enabled":false,"qcode":"/uploads/wechat-qcode.jpg","description":"欢迎您扫一扫上面的二维码，订阅我的微信公众号，博主会不定期推出好玩的内容！"},"mathjax":{"enable":false,"per_page":false,"cdn":"//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"han":false,"baidu_analytics":"dd8827e73226b2d2b93d0b55640287c0","disqus":{"enable":false,"shortname":null,"count":true},"changyan":{"enable":false,"appid":null,"appkey":null},"livere_uid":"MTAyMC8yOTA3Ny81NjQ2","jiathis":true,"google_site_verification":"E5XVfnFEZ7cKjYj2T_e6HTYOyUSBOlUj4KCKRHrfuR8","baidu_site_verification":"3uRyhvWtVy","duoshuo_info":{"ua_enable":true,"admin_enable":false,"user_id":0},"facebook_sdk":{"enable":false,"app_id":null,"fb_admin":null,"like_button":null,"webmaster":null},"facebook_comments_plugin":{"enable":false,"num_of_posts":10,"width":"100%","scheme":"light"},"vkontakte_api":{"enable":false,"app_id":null,"like":true,"comments":true,"num_of_posts":10},"rating":{"enable":false,"id":null,"color":"fc6423"},"leancloud_visitors":{"enable":true,"app_id":"eVXEwiuJa1IBY9hbSJ1Rp7pH-gzGzoHsz","app_key":"zMMoxieQ3MunUCWjtWlqUDEx"},"busuanzi_count":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"> 本站访客数</i>","site_uv_footer":"人次","site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"> 本站总访问量</i>","site_pv_footer":"次","page_pv":true,"page_pv_header":"<i class=\"fa fa-eye\"> 阅读次数</i>","page_pv_footer":"次"},"baidu_push":true,"reward_comment":"觉得不错的话，那就请博主喝个茶吧！","wechatpay":"/uploads/wechat-reward-image.png","calendar":{"enable":false,"calendar_id":"<required>","api_key":"<required>","orderBy":"startTime","offsetMax":24,"offsetMin":4,"timeZone":null,"showDeleted":false,"singleEvents":true,"maxResults":250},"algolia_search":{"enable":false,"hits":{"per_page":10},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":false,"trigger":"auto","top_n_per_article":1},"exturl":false,"use_motion":true,"fancybox":true,"pace":true,"pace_theme":"pace-theme-minimal","canvas_nest":false,"three_waves":false,"canvas_lines":false,"canvas_sphere":false,"canvas_ribbon":false,"vendors":{"_internal":"vendors","jquery":"//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js","fancybox":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.pack.js","fancybox_css":"//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css","fastclick":"//cdn.jsdelivr.net/fastclick/1.0.6/fastclick.min.js","lazyload":"//cdn.jsdelivr.net/jquery.lazyload/1.9.3/jquery.lazyload.min.js","velocity":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.min.js","velocity_ui":"//cdn.jsdelivr.net/velocity/1.2.3/velocity.ui.min.js","ua_parser":"//cdn.jsdelivr.net/ua-parser.js/0.7.10/ua-parser.min.js","fontawesome":"//maxcdn.bootstrapcdn.com/font-awesome/4.6.2/css/font-awesome.min.css","algolia_instant_js":null,"algolia_instant_css":null,"pace":null,"pace_css":null,"canvas_nest":null,"three":null,"three_waves":null,"canvas_lines":null,"canvas_sphere":null,"canvas_ribbon":null,"han":null},"css":"css","js":"js","images":"images","version":"5.1.1"}}},"excerpt":"<p>今年（2017）腾讯暑期实习生招聘笔试感觉好难，题目分两个部分总共2个小时，第一部分是30道不定项选择题，第二部分包含2道简答题和2道编程题，<br>第一道编程题做了一半，没完全写出来，现在有时间总结一下：<br>题目：一颗满二叉排序树，节点值范围为：1~2^(N-1),给定三个子节点，求最大的公共父节点；<br>     如输入层数N=4，子节点11,13,15; 则输出:12<br>","more":"</p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>解决这道题的关键，主要是要清晰的知道二叉排序树的性质：<strong>左节点的值小于父节点的值，右节点值大于父节点的值。</strong><br>当<strong>N=4</strong>时，共有15个节点对应的满二叉排序树为（可利用二分法从上到下建立二叉排序树）：<br><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/N_4Trees.jpg\" alt=\"\">;<br>可以知道有以下性质：</p>\n<ol>\n<li>以8为根节点，在左子树中一直往右走，可以找到左子树的最大值7，比根节点小1；</li>\n<li>右子树一直往左走，可以找到右子树的最小值9，比根节点大1；</li>\n<li>根节点的值是最左端的值和最右端的值之和的一半。</li>\n</ol>\n<p>我们可以这样找最大的公共父结点（可以用分治法）：</p>\n<ol>\n<li>如果输入的结点在根结点的两边，则最大公共父结点必然是根结点，直接返回根结点；</li>\n<li>如果输入的结点都在根结点的左边，往左子树遍历，更新根结点的值，利用性质<em>1 &amp; 3</em>，得到新树的最右结点及根结点的值；</li>\n<li>如果输入的结点都在根结点的右边，往右子树遍历，更新根结点的值，利用性质<em>2 &amp; 3</em>，得到新树的最左结点及根结点的值；</li>\n<li>重复2.3步骤，直到出现1情况，结束。</li>\n</ol>\n<h1 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h1><p><strong>实现方法1</strong>是实现题目要求的，只输入层数<strong>N</strong>和<strong>3</strong>个子结点值，得到最大公共父结点；<br><strong>实现方法2</strong>是扩展的，具有更好的通用性，输入层数<strong>N</strong>、子结点个数<strong>n</strong>及子结点的值，得到最大公共父结点。</p>\n<h2 id=\"实现方法1\"><a href=\"#实现方法1\" class=\"headerlink\" title=\"实现方法1\"></a>实现方法1</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span>  <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (in.hasNextInt()) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 树的高度</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> k = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始根节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> root = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, k) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始的最左叶子节点和最右叶子节点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> leftNode = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> rightNode = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, k) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 输入任意3叶子节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node1 = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node2 = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> node3 = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 3个叶子节点全在根节点的左部,更新最右节点和根节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (node1 &lt; root &amp;&amp; node2 &lt; root &amp;&amp; node3 &lt; root) &#123;</div><div class=\"line\">\t\t\t\t\trightNode = root - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 3个叶子节点全在根节点的右部,更新最左节点和根节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (node1 &gt; root &amp;&amp; node2 &gt; root &amp;&amp; node3 &gt; root) &#123;</div><div class=\"line\">\t\t\t\t\tleftNode = root + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 一大一小的情形下根节点即为最大公共父节点</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(root);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"实现方法2\"><a href=\"#实现方法2\" class=\"headerlink\" title=\"实现方法2\"></a>实现方法2</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 改进版，输入层数N，节点数n，个数范围为：2-2^-1</div><div class=\"line\"> * 输出二叉排序树的公共父节点</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tScanner in = <span class=\"keyword\">new</span> Scanner(System.in);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (in.hasNextInt()) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 树的高度</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> N = in.nextInt();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始根节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> root = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, N) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 最开始的最左叶子节点和最右叶子节点</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> leftNode = <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> rightNode = (<span class=\"keyword\">int</span>) Math.pow(<span class=\"number\">2</span>, N) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 输入任意n叶子节点的值</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span> n = in.nextInt();</div><div class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] arrNodes = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrNodes.length; i++) &#123;</div><div class=\"line\">\t\t\t\tarrNodes[i] = in.nextInt();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 从上到下按层次遍历N层</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= N; i++) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 都在左边，count+1；</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (arrNodes[j] &lt; root) &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 都在右边，count+2</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arrNodes[j] &gt; root) &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 其中有一个是根节点</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tcount += <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t\t\t * count的值n或者2n或者两者之间，</div><div class=\"line\">\t\t\t\t * n代表都在左边，更新最右节点和根节点</div><div class=\"line\">\t\t\t\t * 2n代表都在右边，更新最左节点和根节点</div><div class=\"line\">\t\t\t\t * 两者之间代表，分布在根节点两边，直接返回根节点</div><div class=\"line\">\t\t\t\t */</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (count == n) &#123;</div><div class=\"line\">\t\t\t\t\trightNode = root - <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (count == <span class=\"number\">2</span> * n) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tleftNode = root + <span class=\"number\">1</span>;</div><div class=\"line\">\t\t\t\t\troot = (leftNode + rightNode) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tSystem.out.println(root);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tin.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h1><p><img src=\"https://raw.githubusercontent.com/bodycoder101/MarkdownPhotos/master/Result.png\" alt=\"\"></p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><ol>\n<li><a href=\"http://www.cnblogs.com/f91og/p/6663633.html\" target=\"_blank\" rel=\"external\">f91og的博客</a></li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj45hauxd0003fwv1ejecv7a1","category_id":"cj45hauxw0005fwv1gny7ym1t","_id":"cj45hauyu000ffwv1ggfjgu0j"},{"post_id":"cj45hauyo000dfwv1drnlpu66","category_id":"cj45hauxw0005fwv1gny7ym1t","_id":"cj45hauz3000lfwv1ljdssec1"},{"post_id":"cj45hauxo0004fwv13w93temi","category_id":"cj45hauxw0005fwv1gny7ym1t","_id":"cj45hauzc000pfwv1j4uczrs0"},{"post_id":"cj45hauyf0009fwv1vub964en","category_id":"cj45hauyw000hfwv10huxn2g6","_id":"cj45hauzi000sfwv1cr1h8kdi"},{"post_id":"cj45hauz4000mfwv1lghur0t8","category_id":"cj45hauyw000hfwv10huxn2g6","_id":"cj45hauzm000vfwv1mwnb2sjq"},{"post_id":"cj45hauyv000gfwv1jh024d7x","category_id":"cj45hauz9000ofwv1usph2p2z","_id":"cj45hauzo000wfwv1ta23jjhn"},{"post_id":"cj45hauz1000kfwv1pifzy61f","category_id":"cj45hauzk000ufwv15i20wbiz","_id":"cj45hauzv0011fwv1tq43ovc2"},{"post_id":"cj45hauzd000rfwv1uodqi7u3","category_id":"cj45hauzk000ufwv15i20wbiz","_id":"cj45hauzy0014fwv1gjh4dpyt"}],"PostTag":[{"post_id":"cj45hauyb0008fwv1qot0lmju","tag_id":"cj45hauy60006fwv11slqzr8e","_id":"cj45hauyn000cfwv17gisqm31"},{"post_id":"cj45hauxd0003fwv1ejecv7a1","tag_id":"cj45hauy60006fwv11slqzr8e","_id":"cj45hauys000efwv12p2janfm"},{"post_id":"cj45hauxo0004fwv13w93temi","tag_id":"cj45hauy60006fwv11slqzr8e","_id":"cj45hauz0000jfwv10xolbfxb"},{"post_id":"cj45hauy70007fwv1z8hy21c7","tag_id":"cj45hauy60006fwv11slqzr8e","_id":"cj45hauzd000qfwv1qwawsbyu"},{"post_id":"cj45hauyf0009fwv1vub964en","tag_id":"cj45hauz7000nfwv19i5s44cx","_id":"cj45hauzt000zfwv1akdsur8k"},{"post_id":"cj45hauyf0009fwv1vub964en","tag_id":"cj45hauzj000tfwv13wsv0zak","_id":"cj45hauzt0010fwv1yqtg6lii"},{"post_id":"cj45hauyo000dfwv1drnlpu66","tag_id":"cj45hauzp000xfwv1hi9nttqo","_id":"cj45hauzw0013fwv1n8ihgdd0"},{"post_id":"cj45hauyv000gfwv1jh024d7x","tag_id":"cj45hauzv0012fwv1cb4yiff6","_id":"cj45hav010016fwv1gfkbkp8z"},{"post_id":"cj45hauz1000kfwv1pifzy61f","tag_id":"cj45hav000015fwv15sfpsapw","_id":"cj45hav04001afwv1woy057vv"},{"post_id":"cj45hauz1000kfwv1pifzy61f","tag_id":"cj45hav010017fwv1on5km7s0","_id":"cj45hav05001bfwv1iteghxlb"},{"post_id":"cj45hauz1000kfwv1pifzy61f","tag_id":"cj45hav020018fwv1qvl596vt","_id":"cj45hav07001dfwv1oa310j9n"},{"post_id":"cj45hauz4000mfwv1lghur0t8","tag_id":"cj45hauzj000tfwv13wsv0zak","_id":"cj45hav0a001ffwv1jgcr7vfx"},{"post_id":"cj45hauz4000mfwv1lghur0t8","tag_id":"cj45hav06001cfwv19bwsduy9","_id":"cj45hav0a001gfwv1xnog43mo"},{"post_id":"cj45hauzd000rfwv1uodqi7u3","tag_id":"cj45hav000015fwv15sfpsapw","_id":"cj45hav0c001ifwv1odc5ztej"},{"post_id":"cj45hauzd000rfwv1uodqi7u3","tag_id":"cj45hav010017fwv1on5km7s0","_id":"cj45hav0d001jfwv1cwsbuha6"}],"Tag":[{"name":"JAVA","_id":"cj45hauy60006fwv11slqzr8e"},{"name":"git","_id":"cj45hauz7000nfwv19i5s44cx"},{"name":"hexo","_id":"cj45hauzj000tfwv13wsv0zak"},{"name":"Java","_id":"cj45hauzp000xfwv1hi9nttqo"},{"name":"Dynamic Programming","_id":"cj45hauzv0012fwv1cb4yiff6"},{"name":"算法","_id":"cj45hav000015fwv15sfpsapw"},{"name":"实习","_id":"cj45hav010017fwv1on5km7s0"},{"name":"动态规划","_id":"cj45hav020018fwv1qvl596vt"},{"name":"next","_id":"cj45hav06001cfwv19bwsduy9"}]}}